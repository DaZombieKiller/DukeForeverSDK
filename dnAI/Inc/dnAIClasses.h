/*===========================================================================
    C++ class definitions exported from UnrealScript.
    This is automatically generated by the tools.
    DO NOT modify this manually! Edit the corresponding .uc files instead!
    If you even *think* about it, the engine will *know* and will come looking
    to devour your soul. You don't want to make it angry. Trust me.
===========================================================================*/
#if _MSC_VER
#pragma warning(disable:4121)
#elif defined PS3
#pragma ms_struct on
#endif
#pragma pack (push,4)

#ifndef DNAI_API
#define DNAI_API DLL_IMPORT
#endif

#ifndef NAMES_ONLY
#define AUTOGENERATE_NAME(name) extern DNAI_API FName DNAI_##name;
#define AUTOGENERATE_FUNCTION(cls,idx,name)
#endif

AUTOGENERATE_NAME(Input)
AUTOGENERATE_NAME(RegisterPrecacheComponents)
AUTOGENERATE_NAME(COND_ShouldStepAside)
AUTOGENERATE_NAME(SetAnimGridState)
AUTOGENERATE_NAME(bLink)
AUTOGENERATE_NAME(Execute)
AUTOGENERATE_NAME(EnableBlinking)
AUTOGENERATE_NAME(DisableBlinking)
AUTOGENERATE_NAME(PlayAnim)
AUTOGENERATE_NAME(SetActionPointIndex)
AUTOGENERATE_NAME(ReceiveWeapon)
AUTOGENERATE_NAME(ClientSetAnimGridState)
AUTOGENERATE_NAME(EnumerateWeaponClasses)
AUTOGENERATE_NAME(EnumerateUsableAnimationControllers)
AUTOGENERATE_NAME(SaveAnimSync)
AUTOGENERATE_NAME(SetAnimSync)
AUTOGENERATE_NAME(RestoreSavedAnimSync)
AUTOGENERATE_NAME(RestoreDefaultAnimSync)
AUTOGENERATE_NAME(RestoreDefaultBodyAlignRate)
AUTOGENERATE_NAME(DefaultBodyAlignRate)
AUTOGENERATE_NAME(PlayDefaultSpawnAnim)
AUTOGENERATE_NAME(PostSpawn)
AUTOGENERATE_NAME(ExtractSpawnAnimSeq)
AUTOGENERATE_NAME(PreInit)
AUTOGENERATE_NAME(PostInit)
AUTOGENERATE_NAME(ScriptCalcRotation)
AUTOGENERATE_NAME(FireWeapon)
AUTOGENERATE_NAME(ProceduralFire)
AUTOGENERATE_NAME(UpdateState)
AUTOGENERATE_NAME(UpdateStateOPNotWorking)
AUTOGENERATE_NAME(TickState)
AUTOGENERATE_NAME(BumpedInto)
AUTOGENERATE_NAME(BumpedBy)
AUTOGENERATE_NAME(NotifyWeaponManagerMode)
AUTOGENERATE_NAME(NotifyTakeOff)
AUTOGENERATE_NAME(NotifyLand)
AUTOGENERATE_NAME(NotifyJumpTakeOff)
AUTOGENERATE_NAME(NotifyJumpLand)
AUTOGENERATE_NAME(InitMesh)
AUTOGENERATE_NAME(InitSkin)
AUTOGENERATE_NAME(SetHeadAimAnims)
AUTOGENERATE_NAME(NotifyWeaponAimState)
AUTOGENERATE_NAME(NotifyHeadAimState)
AUTOGENERATE_NAME(NotifyEyeAimState)
AUTOGENERATE_NAME(NotifyHeadAnimEnd)
AUTOGENERATE_NAME(NotifyFaceAnimEnd)
AUTOGENERATE_NAME(NotifyWeaponTargetInThreshold)
AUTOGENERATE_NAME(NotifyWeaponTargetLost)
AUTOGENERATE_NAME(NotifyHeadTargetInThreshold)
AUTOGENERATE_NAME(NotifyHeadTargetLost)
AUTOGENERATE_NAME(AIForceDeath)
AUTOGENERATE_NAME(ForceDieOp)
AUTOGENERATE_NAME(Die)
AUTOGENERATE_NAME(GetGotoMeleeRange)
AUTOGENERATE_NAME(NotifyCloakingState)
AUTOGENERATE_NAME(CreateTKShield)
AUTOGENERATE_NAME(DropTKObjStraightDown)
AUTOGENERATE_NAME(ShouldCatchTKObj)
AUTOGENERATE_NAME(PerformCatchTKObj)
AUTOGENERATE_NAME(DischargeTKObj)
AUTOGENERATE_NAME(DisablePropInteractions)
AUTOGENERATE_NAME(GetPropName)
AUTOGENERATE_NAME(DropProp)
AUTOGENERATE_NAME(SetFactoryActionPointIndex)
AUTOGENERATE_NAME(SetFactoryActionPointTags)
AUTOGENERATE_NAME(BlinkingEnabled)
AUTOGENERATE_NAME(InitDrool)
AUTOGENERATE_NAME(DroolSpit)
AUTOGENERATE_NAME(InitializeTargets)
AUTOGENERATE_NAME(NotifySetTargetActor)
AUTOGENERATE_NAME(NotifyTargetLost)
AUTOGENERATE_NAME(EvaluateTargets)
AUTOGENERATE_NAME(ShouldTargetNoiseMaker)
AUTOGENERATE_NAME(SetExecuteAmbientSoundCallbackTimer)
AUTOGENERATE_NAME(NotifyTargetSpotted)
AUTOGENERATE_NAME(ShouldProceduralFire)
AUTOGENERATE_NAME(ShouldProceduralHeadAim)
AUTOGENERATE_NAME(DebugDrawBone)
AUTOGENERATE_NAME(GetWeaponError)
AUTOGENERATE_NAME(GetProjectileFireLocation)
AUTOGENERATE_NAME(GetWeaponFireLocation)
AUTOGENERATE_NAME(CreateShootProjectileEffects)
AUTOGENERATE_NAME(DestroyShootProjectileEffects)
AUTOGENERATE_NAME(GetStompIndex)
AUTOGENERATE_NAME(IgnoreDangerActor)
AUTOGENERATE_NAME(DropMyPipeBomb)
AUTOGENERATE_NAME(COND_ShouldTryAttackPipeBomb)
AUTOGENERATE_NAME(COND_ShouldAttackPipeBomb)
AUTOGENERATE_NAME(COND_ShouldCatchTKObj)
AUTOGENERATE_NAME(COND_ShouldThrowTKObj)
AUTOGENERATE_NAME(COND_ShouldPickupTKObj)
AUTOGENERATE_NAME(COND_ShouldAvoidDanger)
AUTOGENERATE_NAME(COND_ShouldNotAvoidTarget)
AUTOGENERATE_NAME(COND_ShouldAvoidTarget)
AUTOGENERATE_NAME(COND_SafeFromBiggerEnemy)
AUTOGENERATE_NAME(COND_NotSafeFromBigEnemy)
AUTOGENERATE_NAME(COND_ShouldGotoAvoidGoal)
AUTOGENERATE_NAME(COND_NeedToMoveToAttack)
AUTOGENERATE_NAME(COND_ShouldGotoAttack)
AUTOGENERATE_NAME(COND_ShouldMoveSide)
AUTOGENERATE_NAME(COND_ShouldMoveAround)
AUTOGENERATE_NAME(COND_ShouldGotoReload)
AUTOGENERATE_NAME(COND_ShouldGotoSafeReload)
AUTOGENERATE_NAME(COND_BeginWaitState)
AUTOGENERATE_NAME(COND_ShouldGotoGuardAttack)
AUTOGENERATE_NAME(IsTooCloseToGuardedActor)
AUTOGENERATE_NAME(COND_ShouldGotoGuardPos)
AUTOGENERATE_NAME(COND_ShouldAlignWithGuardedActor)
AUTOGENERATE_NAME(COND_ShouldGuardAttackMelee)
AUTOGENERATE_NAME(COND_ShouldMelee)
AUTOGENERATE_NAME(COND_ShouldEndMelee)
AUTOGENERATE_NAME(COND_ShouldGotoSearch)
AUTOGENERATE_NAME(COND_ShouldSeek)
AUTOGENERATE_NAME(SetMaterial)
AUTOGENERATE_NAME(ScriptCanHaywire)
AUTOGENERATE_NAME(FindGoal_ScriptCustom)
AUTOGENERATE_NAME(PrioritizePopups)
AUTOGENERATE_NAME(ShouldDampenWhileTurning)
AUTOGENERATE_NAME(DisableCollisionOnStuck)
AUTOGENERATE_NAME(ExecuteGotoX)
AUTOGENERATE_NAME(UpdateBodyTarget)
AUTOGENERATE_NAME(ShouldAlwaysBeDynamicallyPathedAround)
AUTOGENERATE_NAME(GetSpawnClass)
AUTOGENERATE_NAME(AIDisableIK)
AUTOGENERATE_NAME(AIEnableIK)
AUTOGENERATE_NAME(AIDisableInventoryIK)
AUTOGENERATE_NAME(AIEnableInventoryIK)
AUTOGENERATE_NAME(NotifyChargeEnd)
AUTOGENERATE_NAME(CalculateTakeoffVel)
AUTOGENERATE_NAME(ShouldPainImpulse)
AUTOGENERATE_NAME(NotifyTeleportStart)
AUTOGENERATE_NAME(StartTeleportOverlayEffects)
AUTOGENERATE_NAME(StartTeleportOverlayEffectsOnActor)
AUTOGENERATE_NAME(EndTeleportOverlayEffects)
AUTOGENERATE_NAME(EndTeleportOverlayEffectsOnActor)
AUTOGENERATE_NAME(ForceEndAllOverlayEffects)
AUTOGENERATE_NAME(NotifyTeleportLocationSet)
AUTOGENERATE_NAME(NotifyTeleportEnd)
AUTOGENERATE_NAME(ExecuteRappelEffects)
AUTOGENERATE_NAME(DestroyRappelEffects)
AUTOGENERATE_NAME(InitUsableItems)
AUTOGENERATE_NAME(COND_ShouldUseX)
AUTOGENERATE_NAME(COND_ShouldGotoStomp)
AUTOGENERATE_NAME(COND_ShouldGotoStompLostTarget)
AUTOGENERATE_NAME(COND_ShouldAbortGotoStomp)
AUTOGENERATE_NAME(GetIdleExIndex)
AUTOGENERATE_NAME(LogFailedScript)
AUTOGENERATE_NAME(SetHiddenSelfAndArmor)
AUTOGENERATE_NAME(NotifyArmorLoss)
AUTOGENERATE_NAME(NotifyMultiAnimStart)
AUTOGENERATE_NAME(NotifyMultiAnimLoop)
AUTOGENERATE_NAME(NotifyMultiAnimStop)
AUTOGENERATE_NAME(IsBezerked)
AUTOGENERATE_NAME(IsReturningToBerzerk)
AUTOGENERATE_NAME(InitializeActionPoints)
AUTOGENERATE_NAME(COND_ForcedActionPoints)
AUTOGENERATE_NAME(COND_NoForcedActionPoints)
AUTOGENERATE_NAME(COND_ShouldUseActionPoint)
AUTOGENERATE_NAME(COND_ShouldGotoActionPoint)
AUTOGENERATE_NAME(COND_ShouldGotoActionPointFlyer)
AUTOGENERATE_NAME(COND_ShouldMeleeActionPoint)
AUTOGENERATE_NAME(OverridePopoutHoldTime)
AUTOGENERATE_NAME(ChooseBestNeighborAP)
AUTOGENERATE_NAME(ChooseBestAPClosestTarget)
AUTOGENERATE_NAME(COND_AvailableActionPoint)
AUTOGENERATE_NAME(COND_ShouldAdvanceAP)
AUTOGENERATE_NAME(COND_ShouldRetreatAP)
AUTOGENERATE_NAME(COND_ShouldFlankAP)
AUTOGENERATE_NAME(COND_ShouldLateralAP)
AUTOGENERATE_NAME(COND_ActionPointCompletelyCompromised)
AUTOGENERATE_NAME(COND_ReleaseActionPoint)
AUTOGENERATE_NAME(COND_ShouldVaultAP)
AUTOGENERATE_NAME(COND_ShouldGotoJumpAP)
AUTOGENERATE_NAME(COND_ShouldJumpToNextAPNoTarget)
AUTOGENERATE_NAME(COND_ShouldJumpToNextAP)
AUTOGENERATE_NAME(COND_ShouldFlyToNextAP)
AUTOGENERATE_NAME(COND_ShouldGotoToNextAPCheckLOS)
AUTOGENERATE_NAME(COND_ShouldWalkToNextAP)
AUTOGENERATE_NAME(COND_ShouldWalkToNextAPClosestTarget)
AUTOGENERATE_NAME(COND_ShouldJumpToFlyAP)
AUTOGENERATE_NAME(COND_ShouldGotoJumpOrNormalAP)
AUTOGENERATE_NAME(COND_HasJumpAP)
AUTOGENERATE_NAME(COND_HasNormalAP)
AUTOGENERATE_NAME(COND_ShouldJumpToAirAP)
AUTOGENERATE_NAME(COND_ShouldTeleportToAP)
AUTOGENERATE_NAME(AIMustCheckActionUsable)
AUTOGENERATE_NAME(AICheckActionPointClearTarget)
AUTOGENERATE_NAME(ShouldEnableGroundFinder)
AUTOGENERATE_NAME(CalculatePhysics_OnGround)
AUTOGENERATE_NAME(CalculatePhysics_Flying)
AUTOGENERATE_NAME(CalculatePhysics_Falling)
AUTOGENERATE_NAME(CalculatePhysics_CutScene)
AUTOGENERATE_NAME(CalculatePlayerPhysics_GameplayOverride)
AUTOGENERATE_NAME(CalculateGroundConstraintStrengthScalar)
AUTOGENERATE_NAME(GetGroundGravityScale)
AUTOGENERATE_NAME(GetDynamicPathingPriority)
AUTOGENERATE_NAME(GetDynamicPathingTieBreaker)
AUTOGENERATE_NAME(ShouldHaveFullCollisionInAir)
AUTOGENERATE_NAME(KeyFrameStarted)
AUTOGENERATE_NAME(KeyFrameEnded)
AUTOGENERATE_NAME(AllowZMovementWhenNotFlying)
AUTOGENERATE_NAME(AIStateOverrideLinearDamping)
AUTOGENERATE_NAME(ForceGameplayOverridePhysics)
AUTOGENERATE_NAME(NotifyOpStarted)
AUTOGENERATE_NAME(NotifyOpEnded)
AUTOGENERATE_NAME(CanUseScriptOp)
AUTOGENERATE_NAME(ExecuteScriptOp)
AUTOGENERATE_NAME(MustScriptOpFinish)
AUTOGENERATE_NAME(ShouldScriptOpFinish)
AUTOGENERATE_NAME(IsOverrideScriptOp)
AUTOGENERATE_NAME(ScriptOpAllowsLook)
AUTOGENERATE_NAME(NotifyScriptOpExitState)
AUTOGENERATE_NAME(EndScriptOp)
AUTOGENERATE_NAME(EndScriptOp_Example)
AUTOGENERATE_NAME(EndScriptOp_MoveToPodProtectorBase)
AUTOGENERATE_NAME(ExecuteState)
AUTOGENERATE_NAME(ExitAIState)
AUTOGENERATE_NAME(CanUseState_Anim)
AUTOGENERATE_NAME(CanUseState_AnimFailOK)
AUTOGENERATE_NAME(CanUseState_AnimExitOnLand)
AUTOGENERATE_NAME(CanUseState_AnimFullExitOnLand)
AUTOGENERATE_NAME(CanUseState_AnimMustFinish)
AUTOGENERATE_NAME(CanUseState_AnimFull)
AUTOGENERATE_NAME(CanUseState_AnimFaceActor)
AUTOGENERATE_NAME(CanUseState_AnimFacePos)
AUTOGENERATE_NAME(CanUseState_AnimFaceTarget)
AUTOGENERATE_NAME(CanUseState_AnimSyncPosRot)
AUTOGENERATE_NAME(CanUseState_AnimSyncActor)
AUTOGENERATE_NAME(ExecuteState_Anim)
AUTOGENERATE_NAME(IsSyncing)
AUTOGENERATE_NAME(CanUseState_ControlX)
AUTOGENERATE_NAME(AttachControlX)
AUTOGENERATE_NAME(ExecuteState_ControlX)
AUTOGENERATE_NAME(CanUseState_Fall)
AUTOGENERATE_NAME(ExecuteState_Fall)
AUTOGENERATE_NAME(CanUseState_FireWeapon)
AUTOGENERATE_NAME(ExecuteState_FireWeapon)
AUTOGENERATE_NAME(CanUseState_FUBAR)
AUTOGENERATE_NAME(ExecuteState_FUBAR)
AUTOGENERATE_NAME(UpdateDoor)
AUTOGENERATE_NAME(CanUseState_GotoActor)
AUTOGENERATE_NAME(CanUseState_GotoPos)
AUTOGENERATE_NAME(CanUseState_GotoLandPos)
AUTOGENERATE_NAME(GetDefaultGotoXRange)
AUTOGENERATE_NAME(GetDefaultGotoXHeight)
AUTOGENERATE_NAME(ExecuteState_GotoX)
AUTOGENERATE_NAME(ShouldSnapToDestination)
AUTOGENERATE_NAME(CanUseState_Haywire)
AUTOGENERATE_NAME(ExecuteState_Haywire)
AUTOGENERATE_NAME(ExecuteHaywireExplode)
AUTOGENERATE_NAME(ShouldHaywireExplode)
AUTOGENERATE_NAME(CanUseState_Hide)
AUTOGENERATE_NAME(ExecuteState_Hide)
AUTOGENERATE_NAME(CanUseState_Jump)
AUTOGENERATE_NAME(CanUseState_JumpTakeOff)
AUTOGENERATE_NAME(CanUseState_JumpToTargetPos)
AUTOGENERATE_NAME(ExecuteState_Jump)
AUTOGENERATE_NAME(CanUseState_JumpAttack)
AUTOGENERATE_NAME(CanUseState_JumpAttackDodge)
AUTOGENERATE_NAME(CanUseState_JumpAttackPresetInstant)
AUTOGENERATE_NAME(CanUseState_JumpAttackPreset)
AUTOGENERATE_NAME(ExecuteState_JumpAttack)
AUTOGENERATE_NAME(StateJumpAttack_Apply)
AUTOGENERATE_NAME(ShouldJumpAttackShrunk)
AUTOGENERATE_NAME(GetJumpAttackTargetPos)
AUTOGENERATE_NAME(CalcJumpAttackHeight)
AUTOGENERATE_NAME(CanUseState_MoveUnderground)
AUTOGENERATE_NAME(ExecuteState_MoveUnderground)
AUTOGENERATE_NAME(CanUseState_Pause)
AUTOGENERATE_NAME(ExecuteState_Pause)
AUTOGENERATE_NAME(CanUseState_PlaceTripMine)
AUTOGENERATE_NAME(ExecuteState_PlaceTripMine)
AUTOGENERATE_NAME(CanUseState_PhysicsGotoTargetActor)
AUTOGENERATE_NAME(ExecuteState_PhysicsGotoX)
AUTOGENERATE_NAME(CanUseState_SelectWeapon)
AUTOGENERATE_NAME(ExecuteState_SelectWeapon)
AUTOGENERATE_NAME(CanUseState_SetAim)
AUTOGENERATE_NAME(ExecuteState_SetAim)
AUTOGENERATE_NAME(CanUseState_SetFireMode)
AUTOGENERATE_NAME(ExecuteState_SetFireMode)
AUTOGENERATE_NAME(SetFireModeDontIdle)
AUTOGENERATE_NAME(CanUseState_Stun)
AUTOGENERATE_NAME(ExecuteState_Stun)
AUTOGENERATE_NAME(CanUseState_TurnToActor)
AUTOGENERATE_NAME(CanUseState_TurnToPos)
AUTOGENERATE_NAME(CanUseState_TurnToTarget)
AUTOGENERATE_NAME(ExecuteState_TurnToX)
AUTOGENERATE_NAME(FinalizeTurn)
AUTOGENERATE_NAME(CanUseState_UseX)
AUTOGENERATE_NAME(CanUseState_UseXExplicit)
AUTOGENERATE_NAME(ExecuteState_UseX)
AUTOGENERATE_NAME(CanUseState_FreeMoveFlank)
AUTOGENERATE_NAME(CanUseState_FreeMoveCircleStrafe)
AUTOGENERATE_NAME(CanUseState_FreeMoveFloat)
AUTOGENERATE_NAME(CanUseState_FreeMoveHover)
AUTOGENERATE_NAME(CanUseState_FreeMoveRest)
AUTOGENERATE_NAME(CanUseState_FreeMoveCharge)
AUTOGENERATE_NAME(CanUseState_FreeMoveGoto)
AUTOGENERATE_NAME(ExecuteState_FreeMove)
AUTOGENERATE_NAME(GetMeleeAttackAnimName)
AUTOGENERATE_NAME(GetShootProjectileAnimName)
AUTOGENERATE_NAME(GetIdleAnimName)
AUTOGENERATE_NAME(ShouldUseWeaponActiveMovement)
AUTOGENERATE_NAME(ShouldUseWeaponActiveIdle)
AUTOGENERATE_NAME(WeaponActive)
AUTOGENERATE_NAME(SetRefPose)
AUTOGENERATE_NAME(GetDeathAnimName)
AUTOGENERATE_NAME(GetPainAnimName)
AUTOGENERATE_NAME(InitializeAnimControllers)
AUTOGENERATE_NAME(SetAnimController)
AUTOGENERATE_NAME(IsPlayingOnChannel)
AUTOGENERATE_NAME(OverrideAnim)
AUTOGENERATE_NAME(ClearOverrideAnim)
AUTOGENERATE_NAME(ServiceMessages)
AUTOGENERATE_NAME(CallForHelp)
AUTOGENERATE_NAME(ShouldCallForHelp)
AUTOGENERATE_NAME(SetRelations)
AUTOGENERATE_NAME(InitRelationships)
AUTOGENERATE_NAME(InitRelationshipOverrides)
AUTOGENERATE_NAME(TmpHackAroundTheWeaponSystem)
AUTOGENERATE_NAME(DrawWeaponFromHolster)
AUTOGENERATE_NAME(ChooseBestWeapon)
AUTOGENERATE_NAME(SearchInventoryForWeapon)
AUTOGENERATE_NAME(SearchWeaponConfigs)
AUTOGENERATE_NAME(GetWeapon)
AUTOGENERATE_NAME(AIActor_Weapon_GetName)
AUTOGENERATE_NAME(WeaponGetWeightForArea)
AUTOGENERATE_NAME(AIActor_Weapon_CanFire)
AUTOGENERATE_NAME(ShouldFireWeapon)
AUTOGENERATE_NAME(ClearForShot)
AUTOGENERATE_NAME(AIActor_Weapon_Fire)
AUTOGENERATE_NAME(ForceWeaponFire)
AUTOGENERATE_NAME(AIActor_Weapon_Reload)
AUTOGENERATE_NAME(AIActor_Weapon_GiveAmmo)
AUTOGENERATE_NAME(AIActor_Weapon_ReloadFinished)
AUTOGENERATE_NAME(AIActor_Weapon_Holster)
AUTOGENERATE_NAME(WeaponManagerForceFire)
AUTOGENERATE_NAME(WeaponManagerHoldFire)
AUTOGENERATE_NAME(WeaponManagerResumeFire)
AUTOGENERATE_NAME(WeaponManagerCompletelyOff)
AUTOGENERATE_NAME(SetActionPointTags)
AUTOGENERATE_NAME(InternalSpawn)
AUTOGENERATE_NAME(ShouldPlayBigPain)
AUTOGENERATE_NAME(GetTransitionAnimName)
AUTOGENERATE_NAME(SetConstraints)
AUTOGENERATE_NAME(GetDirection)
AUTOGENERATE_NAME(GetMethodString)
AUTOGENERATE_NAME(FinishFlirt)
AUTOGENERATE_NAME(GetAnimName)

#ifndef NAMES_ONLY


//***************************************************************************//
/*	\class AAIActor
*/
//***************************************************************************//

enum EAIWeaponClearShotType
{
    AIWeaponClearShot_NoCheck=0,
    AIWeaponClearShot_TargetVisible=1,
    AIWeaponClearShot_ClearTrace=2,
    AIWeaponClearShot_MAX   =3,
};
#define UCONST_AimInterval 0.7
#define UCONST_PostFireInterval 0.2
#define UCONST_PreFireInterval 0.2
#define UCONST_DefaultWeaponAimUpTime 0.5
#define UCONST_DefaultWeaponAimDownTimeFast 0.02
#define UCONST_DefaultWeaponAimDownTime 0.35
#define UCONST_SetFireMode_DefautFinishPeriod 0.25f
#define UCONST_SetFireMode_DefautAbortPeriod 3.0f
#define UCONST_SetAim_Mode_AimOff 3
#define UCONST_SetAim_Mode_AimOn 2
#define UCONST_SetAim_Mode_Wait 1
#define UCONST_SetAim_Mode_None 0
#define UCONST_SelectWeapon_Mode_QuickSwitch 4
#define UCONST_SelectWeapon_Mode_Draw 3
#define UCONST_SelectWeapon_Mode_Holster 2
#define UCONST_SelectWeapon_Mode_Wait 1
#define UCONST_SelectWeapon_Mode_None 0
#define UCONST_PlaceTripMine_Mode_EndAim 4
#define UCONST_PlaceTripMine_Mode_Place 3
#define UCONST_PlaceTripMine_Mode_Aim 2
#define UCONST_PlaceTripMine_Mode_None 0
#define UCONST_JumpAttack_Mode_Land 4
#define UCONST_JumpAttack_Mode_Attack 3
#define UCONST_JumpAttack_Mode_Fall 2
#define UCONST_JumpAttack_Mode_TakeOff 1
#define UCONST_JumpAttack_Mode_None 0
#define UCONST_Jump_Mode_Stop 4
#define UCONST_Jump_Mode_Land 3
#define UCONST_Jump_Mode_Fall 2
#define UCONST_Jump_Mode_TakeOff 1
#define UCONST_Jump_Mode_None 0
#define UCONST_GotoX_StuckDynamicThreshold 1.0f
#define UCONST_GotoX_StuckThresholdCollision 1.0f
#define UCONST_GotoX_StuckThresholdPush 0.5f
#define UCONST_GotoX_StuckPercentage 0.25f
#define UCONST_GotoX_DoorPauseTime 0.6f
#define UCONST_GotoX_NoMaxSteps -1
#define UCONST_Fall_Mode_Land 2
#define UCONST_Fall_Mode_Fall 1
#define UCONST_Fall_Mode_StartFall 0
#define UCONST_AnimX_Mode_SyncAnim 8
#define UCONST_AnimX_Mode_SyncWait 7
#define UCONST_AnimX_Mode_SyncTurn 6
#define UCONST_AnimX_Mode_SyncGoto 5
#define UCONST_AnimX_Mode_AnimFaceTarget 4
#define UCONST_AnimX_Mode_AnimFaceActor 3
#define UCONST_AnimX_Mode_AnimFacePos 2
#define UCONST_AnimX_Mode_Anim 1
#define UCONST_AnimX_Mode_Init 0
#define UCONST_AI_AimAccelK 0.5f
#define UCONST_AI_MaxAimPitch 4000
#define UCONST_AI_MaxAimYaw 8000
#define UCONST_AI_MaxTrailTime 10.0f
#define UCONST_AI_MaxTreeDepth 50
#define UCONST_AI_LedgeRagdollK 4.0f

struct AAIActor_eventWeaponManagerCompletelyOff_Parms
{
    BITFIELD ReturnValue;
};

struct AAIActor_eventWeaponManagerHoldFire_Parms
{
    BITFIELD Expedite;
};

struct AAIActor_eventWeaponManagerForceFire_Parms
{
    BITFIELD NewForceFire;
};

struct AAIActor_eventAIActor_Weapon_Holster_Parms
{
    class ARenderActor* MyWeapon;
};

struct AAIActor_eventAIActor_Weapon_ReloadFinished_Parms
{
    BITFIELD ReturnValue;
};

struct AAIActor_eventAIActor_Weapon_GiveAmmo_Parms
{
    BITFIELD ReturnValue;
};

struct AAIActor_eventAIActor_Weapon_Reload_Parms
{
    BITFIELD ReturnValue;
};

struct AAIActor_eventAIActor_Weapon_Fire_Parms
{
    BITFIELD ReturnValue;
};

struct AAIActor_eventClearForShot_Parms
{
    class UAITarget* MyTarget;
    FVector StartPos;
    FVector EndPos;
    BITFIELD ReturnValue;
};

struct AAIActor_eventShouldFireWeapon_Parms
{
    class UAITarget* MyTarget;
    BITFIELD ReturnValue;
};

struct AAIActor_eventAIActor_Weapon_CanFire_Parms
{
    BITFIELD ReturnValue;
};

struct AAIActor_eventWeaponGetWeightForArea_Parms
{
    FVector pos;
    FRotator Rot;
    FLOAT ReturnValue;
};

struct AAIActor_eventAIActor_Weapon_GetName_Parms
{
    FName ReturnValue;
};

struct AAIActor_eventGetWeapon_Parms
{
    class AWeapon* ReturnValue;
};

struct AAIActor_eventSearchWeaponConfigs_Parms
{
    class UClass* DesiredWeaponClass;
    INT ReturnValue;
};

struct AAIActor_eventSearchInventoryForWeapon_Parms
{
    class UClass* DesiredWeaponClass;
    class AWeapon* ReturnValue;
};

struct AAIActor_eventChooseBestWeapon_Parms
{
    class UClass* ReturnValue;
};

struct AAIActor_eventDrawWeaponFromHolster_Parms
{
    class UClass* NewWeaponClass;
};

struct AAIActor_eventTmpHackAroundTheWeaponSystem_Parms
{
    class AWeapon* NewWeapon;
};

struct AAIActor_eventInitRelationshipOverrides_Parms
{
    BITFIELD ReturnValue;
};

struct AAIActor_eventInitRelationships_Parms
{
    BITFIELD ReturnValue;
};

struct AAIActor_eventSetRelations_Parms
{
    dnArray<FSRelationship> NewRelations;
};

struct AAIActor_eventShouldCallForHelp_Parms
{
    BITFIELD ReturnValue;
};

struct AAIActor_eventCallForHelp_Parms
{
    class AAIActor* FriendAI;
    BITFIELD ReturnValue;
};

struct AAIActor_eventClearOverrideAnim_Parms
{
    FName AnimName;
    BITFIELD ReturnValue;
};

struct AAIActor_eventOverrideAnim_Parms
{
    FName AnimName;
    FName NewSequenceName;
    FName NewChannelName;
    FLOAT NewRate;
    FLOAT NewTween;
    BITFIELD NewLoop;
    FLOAT NewStartFrame;
    FLOAT NewAnimEarlyEndTime;
    FLOAT NewBlendInTime;
    FLOAT NewBlendOutTime;
    BITFIELD NewAdjustStart;
    BITFIELD NewInterrupt;
    BITFIELD ReturnValue;
};

struct AAIActor_eventIsPlayingOnChannel_Parms
{
    FName AnimName;
    INT ChannelIndex;
    BITFIELD ReturnValue;
};

struct AAIActor_eventSetAnimGridState_Parms
{
    FName AnimGridName;
    FLOAT X;
    FLOAT Y;
    BITFIELD bKeepChannelAlpha;
    BITFIELD ReturnValue;
};

struct AAIActor_eventPlayAnim_Parms
{
    FName AnimName;
    FLOAT Rate;
    BITFIELD Reset;
    BITFIELD UseExactAnimName;
    BITFIELD ReturnValue;
};

struct AAIActor_eventSetAnimController_Parms
{
    /* EAIAnimController */ BYTE eController;
    BITFIELD ReturnValue;
};

struct AAIActor_eventGetPainAnimName_Parms
{
    FName AnimName;
    /* EAIAnimController */ BYTE NextAnimCtrl;
    /* EPawnBodyPart */ BYTE WoundedPart;
    /* EAIArcSector */ BYTE WoundSector;
    BITFIELD ReturnValue;
};

struct AAIActor_eventGetDeathAnimName_Parms
{
    FName AnimName;
    FName FinishMeAnimName;
    FName FinishMeReviveAnimName;
    FLOAT FinishMeTimeout;
    INT UseExactAnimName;
    BITFIELD ReturnValue;
};

struct AAIActor_eventWeaponActive_Parms
{
    BITFIELD ReturnValue;
};

struct AAIActor_eventShouldUseWeaponActiveIdle_Parms
{
    BITFIELD ReturnValue;
};

struct AAIActor_eventShouldUseWeaponActiveMovement_Parms
{
    BITFIELD ReturnValue;
};

struct AAIActor_eventGetIdleAnimName_Parms
{
    FName ReturnValue;
};

struct AAIActor_eventGetShootProjectileAnimName_Parms
{
    FName ReturnValue;
};

struct AAIActor_eventGetMeleeAttackAnimName_Parms
{
    FName ReturnValue;
};

struct AAIActor_eventExecuteState_FreeMove_Parms
{
    BITFIELD ReturnValue;
};

struct AAIActor_eventCanUseState_FreeMoveGoto_Parms
{
    FVector TargetPos;
    FLOAT ExitTime;
    /* EAICode */ BYTE ReturnValue;
};

struct AAIActor_eventCanUseState_FreeMoveCharge_Parms
{
    FLOAT ExitTime;
    /* EAICode */ BYTE ReturnValue;
};

struct AAIActor_eventCanUseState_FreeMoveRest_Parms
{
    FLOAT ExitTime;
    /* EAICode */ BYTE ReturnValue;
};

struct AAIActor_eventCanUseState_FreeMoveHover_Parms
{
    FLOAT ExitTime;
    /* EAICode */ BYTE ReturnValue;
};

struct AAIActor_eventCanUseState_FreeMoveFloat_Parms
{
    FLOAT ExitTime;
    /* EAICode */ BYTE ReturnValue;
};

struct AAIActor_eventCanUseState_FreeMoveCircleStrafe_Parms
{
    FLOAT ExitTime;
    /* EAICode */ BYTE ReturnValue;
};

struct AAIActor_eventCanUseState_FreeMoveFlank_Parms
{
    FLOAT ExitTime;
    /* EAICode */ BYTE ReturnValue;
};

struct AAIActor_eventExecuteState_UseX_Parms
{
    BITFIELD ReturnValue;
};

struct AAIActor_eventCanUseState_UseXExplicit_Parms
{
    class AdnUsableSomething* UsableSomething;
    class AAIInputDispatcher_Base* InputDispatcher;
    /* EAICode */ BYTE ReturnValue;
};

struct AAIActor_eventCanUseState_UseX_Parms
{
    class AActor* TargetActor;
    FName InputDispatcherTag;
    FName AttachedEvent;
    INT Attempts;
    FLOAT AttemptInterval;
    BITFIELD ForceAttach;
    BITFIELD AllowProceduralAim;
    /* EAICode */ BYTE ReturnValue;
};

struct AAIActor_eventFinalizeTurn_Parms
{
    FVector FacePos;
};

struct AAIActor_eventExecuteState_TurnToX_Parms
{
    BITFIELD ReturnValue;
};

struct AAIActor_eventCanUseState_TurnToTarget_Parms
{
    /* EAITarget */ BYTE Targ;
    FLOAT ShouldTurnThresh;
    FLOAT FaceThresh;
    FLOAT ExitTime;
    FLOAT AnimThresh;
    /* EAICode */ BYTE ReturnValue;
};

struct AAIActor_eventCanUseState_TurnToPos_Parms
{
    FVector TargetPos;
    FLOAT ShouldTurnThresh;
    FLOAT FaceThresh;
    FLOAT ExitTime;
    FLOAT AnimThresh;
    /* EAICode */ BYTE ReturnValue;
};

struct AAIActor_eventCanUseState_TurnToActor_Parms
{
    class AActor* TargetActor;
    FLOAT ShouldTurnThresh;
    FLOAT FaceThresh;
    FLOAT ExitTime;
    FLOAT AnimThresh;
    /* EAICode */ BYTE ReturnValue;
};

struct AAIActor_eventExecuteState_Stun_Parms
{
    BITFIELD ReturnValue;
};

struct AAIActor_eventCanUseState_Stun_Parms
{
    FLOAT Time;
    /* EAICode */ BYTE ReturnValue;
};

struct AAIActor_eventSetFireModeDontIdle_Parms
{
    BITFIELD bDontPlayIdle;
};

struct AAIActor_eventExecuteState_SetFireMode_Parms
{
    BITFIELD ReturnValue;
};

struct AAIActor_eventCanUseState_SetFireMode_Parms
{
    BITFIELD On;
    BITFIELD Expedite;
    /* EAICode */ BYTE ReturnValue;
};

struct AAIActor_eventExecuteState_SetAim_Parms
{
    FLOAT Time;
    BITFIELD ReturnValue;
};

struct AAIActor_eventCanUseState_SetAim_Parms
{
    BITFIELD On;
    /* EAICode */ BYTE ReturnValue;
};

struct AAIActor_eventExecuteState_SelectWeapon_Parms
{
    BITFIELD ReturnValue;
};

struct AAIActor_eventCanUseState_SelectWeapon_Parms
{
    class UClass* DesiredWeaponClass;
    BITFIELD QuickWeaponSwitch;
    /* EAICode */ BYTE ReturnValue;
};

struct AAIActor_eventExecuteState_PhysicsGotoX_Parms
{
    BITFIELD ReturnValue;
};

struct AAIActor_eventCanUseState_PhysicsGotoTargetActor_Parms
{
    /* EAICode */ BYTE ReturnValue;
};

struct AAIActor_eventExecuteState_PlaceTripMine_Parms
{
    BITFIELD ReturnValue;
};

struct AAIActor_eventCanUseState_PlaceTripMine_Parms
{
    class AActor* TargetActor;
    /* EAICode */ BYTE ReturnValue;
};

struct AAIActor_eventExecuteState_Pause_Parms
{
    BITFIELD ReturnValue;
};

struct AAIActor_eventCanUseState_Pause_Parms
{
    FLOAT Time;
    /* EAICode */ BYTE ReturnValue;
};

struct AAIActor_eventExecuteState_MoveUnderground_Parms
{
    BITFIELD ReturnValue;
};

struct AAIActor_eventCanUseState_MoveUnderground_Parms
{
    FVector DestLocation;
    FRotator DestRotation;
    FLOAT Time;
    /* EAICode */ BYTE ReturnValue;
};

struct AAIActor_eventCalcJumpAttackHeight_Parms
{
    class AActor* TargetActor;
    FLOAT ReturnValue;
};

struct AAIActor_eventGetJumpAttackTargetPos_Parms
{
    class AActor* TargetActor;
    FVector ReturnValue;
};

struct AAIActor_eventShouldJumpAttackShrunk_Parms
{
    class AActor* Target;
    BITFIELD ReturnValue;
};

struct AAIActor_eventStateJumpAttack_Apply_Parms
{
    FVector MyJumpVel;
};

struct AAIActor_eventExecuteState_JumpAttack_Parms
{
    class AActor* TargetActor;
    INT Type;
    BITFIELD AttackOnTakeoff;
    BITFIELD ReturnValue;
};

struct AAIActor_eventCanUseState_JumpAttackPreset_Parms
{
    FVector PresetVelocity;
    /* EAICode */ BYTE ReturnValue;
};

struct AAIActor_eventCanUseState_JumpAttackPresetInstant_Parms
{
    FVector PresetVelocity;
    /* EAICode */ BYTE ReturnValue;
};

struct AAIActor_eventCanUseState_JumpAttackDodge_Parms
{
    /* EAICode */ BYTE ReturnValue;
};

struct AAIActor_eventCanUseState_JumpAttack_Parms
{
    /* EAICode */ BYTE ReturnValue;
};

struct AAIActor_eventExecuteState_Jump_Parms
{
    BITFIELD ReturnValue;
};

struct AAIActor_eventCanUseState_JumpToTargetPos_Parms
{
    /* EAICode */ BYTE ReturnValue;
};

struct AAIActor_eventCanUseState_JumpTakeOff_Parms
{
    FVector JumpVel;
    FLOAT TakeOffIdleTime;
    class AActor* FocusActor;
    FLOAT GravityScale;
    FVector TakeOffTarget;
    /* EAICode */ BYTE ReturnValue;
};

struct AAIActor_eventCanUseState_Jump_Parms
{
    FVector JumpVel;
    FLOAT HeavyLandingThresh;
    class AActor* FocusActor;
    FLOAT FlyingGravityScale;
    FLOAT JumpTime;
    FVector TargetPos;
    INT JumpType;
    BITFIELD bSnapToTargetDuringLand;
    BITFIELD bUseAccelaration;
    BITFIELD bFaceTarget;
    /* EAICode */ BYTE ReturnValue;
};

struct AAIActor_eventExecuteState_Hide_Parms
{
    BITFIELD ReturnValue;
};

struct AAIActor_eventCanUseState_Hide_Parms
{
    /* EAICode */ BYTE ReturnValue;
};

struct AAIActor_eventShouldHaywireExplode_Parms
{
    BITFIELD ReturnValue;
};

struct AAIActor_eventExecuteHaywireExplode_Parms
{
    FVector HitNormal;
};

struct AAIActor_eventExecuteState_Haywire_Parms
{
    BITFIELD ReturnValue;
};

struct AAIActor_eventCanUseState_Haywire_Parms
{
    FLOAT MinDuration;
    FLOAT MaxDuration;
    FVector LinearAccel;
    FVector LinearAccelVar;
    FVector AngularAccel;
    FVector AngularAccelVar;
    /* EAICode */ BYTE ReturnValue;
};

struct AAIActor_eventShouldSnapToDestination_Parms
{
    BITFIELD ReturnValue;
};

struct AAIActor_eventExecuteState_GotoX_Parms
{
    /* EAIMoveSpeed */ BYTE Speed;
    FLOAT SideArcTurnSpeedThresh;
    FLOAT StepBackwardsSpeedThresh;
    FLOAT StartAngleSideSector;
    FLOAT StartAngleBackSector;
    FLOAT MoveBackwardsDistThresh;
    FLOAT SideStepDistThresh;
    BITFIELD ReturnValue;
};

struct AAIActor_eventGetDefaultGotoXHeight_Parms
{
    FLOAT ReturnValue;
};

struct AAIActor_eventGetDefaultGotoXRange_Parms
{
    FLOAT Range;
    FLOAT ReturnValue;
};

struct AAIActor_eventCanUseState_GotoLandPos_Parms
{
    FVector GoalPos;
    class AActor* FocusActor;
    /* EAICode */ BYTE ReturnValue;
};

struct AAIActor_eventCanUseState_GotoPos_Parms
{
    FVector TargetPos;
    class AActor* RefActor;
    FLOAT Range;
    FLOAT Height;
    FLOAT ClipTolerance;
    /* EAIFocus */ BYTE Focus;
    class AActor* FocusActor;
    INT MaxSteps;
    BITFIELD bDebug;
    FVector TargetExtent;
    /* EAICode */ BYTE ReturnValue;
};

struct AAIActor_eventCanUseState_GotoActor_Parms
{
    class AActor* TargetActor;
    class AActor* RefActor;
    /* EAIOffsetType */ BYTE OffsetType;
    FLOAT Range;
    FLOAT Bearing;
    FLOAT Height;
    FLOAT ClipTolerance;
    /* EAIFocus */ BYTE Focus;
    class AActor* FocusActor;
    INT MaxSteps;
    BITFIELD bDebug;
    FVector TargetExtent;
    /* EAICode */ BYTE ReturnValue;
};

struct AAIActor_eventExecuteState_FUBAR_Parms
{
    BITFIELD ReturnValue;
};

struct AAIActor_eventCanUseState_FUBAR_Parms
{
    /* EAICode */ BYTE ReturnValue;
};

struct AAIActor_eventExecuteState_FireWeapon_Parms
{
    BITFIELD ReturnValue;
};

struct AAIActor_eventCanUseState_FireWeapon_Parms
{
    INT ShotsToFire;
    /* EAICode */ BYTE ReturnValue;
};

struct AAIActor_eventExecuteState_Fall_Parms
{
    BITFIELD ReturnValue;
};

struct AAIActor_eventCanUseState_Fall_Parms
{
    FLOAT LandingThresh;
    FLOAT HeavyLandingThresh;
    /* EAICode */ BYTE ReturnValue;
};

struct AAIActor_eventExecuteState_ControlX_Parms
{
    BITFIELD ReturnValue;
};

struct AAIActor_eventAttachControlX_Parms
{
    class AdnControl* MyControl;
};

struct AAIActor_eventCanUseState_ControlX_Parms
{
    class UClass* ControlType;
    FName AnimName;
    FLOAT MaxTime;
    /* EAICode */ BYTE ReturnValue;
};

struct AAIActor_eventIsSyncing_Parms
{
    class AAIActor* TargetSyncActor;
    BITFIELD ReturnValue;
};

struct AAIActor_eventExecuteState_Anim_Parms
{
    BITFIELD ReturnValue;
};

struct AAIActor_eventCanUseState_AnimSyncActor_Parms
{
    FName AnimName;
    FName SyncWaitAnimName;
    BITFIELD UseExactAnimName;
    class AAIActor* TargetSyncActor;
    FVector TargetSyncPos;
    FVector TargetFacePos;
    BITFIELD MustFinish;
    BITFIELD FinishAlone;
    FLOAT ExitTime;
    /* EAICode */ BYTE ReturnValue;
};

struct AAIActor_eventCanUseState_AnimSyncPosRot_Parms
{
    FName AnimName;
    FName SyncWaitAnimName;
    BITFIELD UseExactAnimName;
    FVector TargetSyncPos;
    FVector TargetFacePos;
    BITFIELD MustFinish;
    FLOAT ExitTime;
    /* EAICode */ BYTE ReturnValue;
};

struct AAIActor_eventCanUseState_AnimFaceTarget_Parms
{
    FName AnimName;
    BITFIELD UseExactAnimName;
    /* EAITarget */ BYTE Targ;
    FLOAT FaceThreshold;
    FLOAT ExitTime;
    /* EAICode */ BYTE ReturnValue;
};

struct AAIActor_eventCanUseState_AnimFacePos_Parms
{
    FName AnimName;
    BITFIELD UseExactAnimName;
    FVector TargetFacePos;
    FLOAT FaceThreshold;
    FLOAT ExitTime;
    /* EAICode */ BYTE ReturnValue;
};

struct AAIActor_eventCanUseState_AnimFaceActor_Parms
{
    FName AnimName;
    BITFIELD UseExactAnimName;
    class AActor* TargetActor;
    FLOAT FaceThreshold;
    FLOAT ExitTime;
    /* EAICode */ BYTE ReturnValue;
};

struct AAIActor_eventCanUseState_AnimFull_Parms
{
    FName AnimName;
    BITFIELD UseExactAnimName;
    FLOAT ExitTime;
    /* EAICode */ BYTE ReturnValue;
};

struct AAIActor_eventCanUseState_AnimMustFinish_Parms
{
    FName AnimName;
    BITFIELD UseExactAnimName;
    FLOAT ExitTime;
    /* EAICode */ BYTE ReturnValue;
};

struct AAIActor_eventCanUseState_AnimFullExitOnLand_Parms
{
    FName AnimName;
    BITFIELD UseExactAnimName;
    FLOAT ExitTime;
    /* EAICode */ BYTE ReturnValue;
};

struct AAIActor_eventCanUseState_AnimExitOnLand_Parms
{
    FName AnimName;
    BITFIELD UseExactAnimName;
    FLOAT ExitTime;
    /* EAICode */ BYTE ReturnValue;
};

struct AAIActor_eventCanUseState_AnimFailOK_Parms
{
    FName AnimName;
    BITFIELD UseExactAnimName;
    FLOAT ExitTime;
    /* EAICode */ BYTE ReturnValue;
};

struct AAIActor_eventCanUseState_Anim_Parms
{
    FName AnimName;
    BITFIELD UseExactAnimName;
    FLOAT ExitTime;
    /* EAICode */ BYTE ReturnValue;
};

struct AAIActor_eventExitAIState_Parms
{
    /* EAIStateStatus */ BYTE Status;
    FString DbgMsg;
};

struct AAIActor_eventExecuteState_Parms
{
    FName NewState;
    FName NewLabel;
    BITFIELD ReturnValue;
};

struct AAIActor_eventEndScriptOp_MoveToPodProtectorBase_Parms
{
    /* EAIOpStatus */ BYTE Status;
};

struct AAIActor_eventEndScriptOp_Example_Parms
{
    /* EAIOpStatus */ BYTE Status;
};

struct AAIActor_eventEndScriptOp_Parms
{
    /* EAIOpStatus */ BYTE Status;
};

struct AAIActor_eventNotifyScriptOpExitState_Parms
{
    /* EAIStateStatus */ BYTE Status;
};

struct AAIActor_eventScriptOpAllowsLook_Parms
{
    /* EAIOp */ BYTE Op;
    BITFIELD ReturnValue;
};

struct AAIActor_eventIsOverrideScriptOp_Parms
{
    /* EAIOp */ BYTE Op;
    BITFIELD ReturnValue;
};

struct AAIActor_eventShouldScriptOpFinish_Parms
{
    /* EAIOp */ BYTE Op;
    BITFIELD ReturnValue;
};

struct AAIActor_eventMustScriptOpFinish_Parms
{
    /* EAIOp */ BYTE Op;
    BITFIELD ReturnValue;
};

struct AAIActor_eventExecuteScriptOp_Parms
{
    /* EAIOp */ BYTE Op;
    BITFIELD ReturnValue;
};

struct AAIActor_eventCanUseScriptOp_Parms
{
    /* EAIOp */ BYTE Op;
    /* EAICode */ BYTE ReturnValue;
};

struct AAIActor_eventNotifyOpEnded_Parms
{
    /* EAIOp */ BYTE Op;
    /* EAIOpStatus */ BYTE Status;
};

struct AAIActor_eventNotifyOpStarted_Parms
{
    /* EAIOp */ BYTE NewOp;
    /* EAIOp */ BYTE OldOp;
};

struct AAIActor_eventForceGameplayOverridePhysics_Parms
{
    BITFIELD ReturnValue;
};

struct AAIActor_eventAIStateOverrideLinearDamping_Parms
{
    BITFIELD ReturnValue;
};

struct AAIActor_eventAllowZMovementWhenNotFlying_Parms
{
    BITFIELD ReturnValue;
};

struct AAIActor_eventShouldHaveFullCollisionInAir_Parms
{
    BITFIELD ReturnValue;
};

struct AAIActor_eventGetDynamicPathingTieBreaker_Parms
{
    FLOAT ReturnValue;
};

struct AAIActor_eventGetDynamicPathingPriority_Parms
{
    /* EAIDynamicPathPriority */ BYTE ReturnValue;
};

struct AAIActor_eventGetGroundGravityScale_Parms
{
    FLOAT ReturnValue;
};

struct AAIActor_eventCalculateGroundConstraintStrengthScalar_Parms
{
    FLOAT ReturnValue;
};

struct AAIActor_eventCalculatePlayerPhysics_GameplayOverride_Parms
{
    FLOAT DeltaTime;
    BITFIELD ReturnValue;
};

struct AAIActor_eventCalculatePhysics_CutScene_Parms
{
    FLOAT DeltaTime;
};

struct AAIActor_eventCalculatePhysics_Falling_Parms
{
    FLOAT DeltaTime;
};

struct AAIActor_eventCalculatePhysics_Flying_Parms
{
    FLOAT DeltaTime;
};

struct AAIActor_eventCalculatePhysics_OnGround_Parms
{
    FLOAT dt;
};

struct AAIActor_eventShouldEnableGroundFinder_Parms
{
    FLOAT DeltaTime;
    BITFIELD ReturnValue;
};

struct AAIActor_eventAICheckActionPointClearTarget_Parms
{
    BITFIELD ReturnValue;
};

struct AAIActor_eventAIMustCheckActionUsable_Parms
{
    BITFIELD ReturnValue;
};

struct AAIActor_eventCOND_ShouldTeleportToAP_Parms
{
    /* EAICode */ BYTE ReturnValue;
};

struct AAIActor_eventCOND_ShouldJumpToAirAP_Parms
{
    /* EAICode */ BYTE ReturnValue;
};

struct AAIActor_eventCOND_HasNormalAP_Parms
{
    /* EAICode */ BYTE ReturnValue;
};

struct AAIActor_eventCOND_HasJumpAP_Parms
{
    /* EAICode */ BYTE ReturnValue;
};

struct AAIActor_eventCOND_ShouldGotoJumpOrNormalAP_Parms
{
    /* EAICode */ BYTE ReturnValue;
};

struct AAIActor_eventCOND_ShouldJumpToFlyAP_Parms
{
    /* EAICode */ BYTE ReturnValue;
};

struct AAIActor_eventCOND_ShouldWalkToNextAPClosestTarget_Parms
{
    /* EAICode */ BYTE ReturnValue;
};

struct AAIActor_eventCOND_ShouldWalkToNextAP_Parms
{
    /* EAICode */ BYTE ReturnValue;
};

struct AAIActor_eventCOND_ShouldGotoToNextAPCheckLOS_Parms
{
    /* EAICode */ BYTE ReturnValue;
};

struct AAIActor_eventCOND_ShouldFlyToNextAP_Parms
{
    /* EAICode */ BYTE ReturnValue;
};

struct AAIActor_eventCOND_ShouldJumpToNextAP_Parms
{
    /* EAICode */ BYTE ReturnValue;
};

struct AAIActor_eventCOND_ShouldJumpToNextAPNoTarget_Parms
{
    /* EAICode */ BYTE ReturnValue;
};

struct AAIActor_eventCOND_ShouldGotoJumpAP_Parms
{
    /* EAICode */ BYTE ReturnValue;
};

struct AAIActor_eventCOND_ShouldVaultAP_Parms
{
    /* EAICode */ BYTE ReturnValue;
};

struct AAIActor_eventCOND_ReleaseActionPoint_Parms
{
    /* EAICode */ BYTE ReturnValue;
};

struct AAIActor_eventCOND_ActionPointCompletelyCompromised_Parms
{
    /* EAICode */ BYTE ReturnValue;
};

struct AAIActor_eventCOND_ShouldLateralAP_Parms
{
    /* EAICode */ BYTE ReturnValue;
};

struct AAIActor_eventCOND_ShouldFlankAP_Parms
{
    /* EAICode */ BYTE ReturnValue;
};

struct AAIActor_eventCOND_ShouldRetreatAP_Parms
{
    /* EAICode */ BYTE ReturnValue;
};

struct AAIActor_eventCOND_ShouldAdvanceAP_Parms
{
    /* EAICode */ BYTE ReturnValue;
};

struct AAIActor_eventCOND_AvailableActionPoint_Parms
{
    /* EAICode */ BYTE ReturnValue;
};

struct AAIActor_eventChooseBestAPClosestTarget_Parms
{
    class AActionPoint* ReturnValue;
};

struct AAIActor_eventChooseBestNeighborAP_Parms
{
    dnArray<FSActionPointNeighborInfo> APNInfoList;
    BITFIELD bCheckCompromised;
    FLOAT MinDotToAp;
    BITFIELD NoClearPathRequired;
    BITFIELD NoClearPathAllowed;
    BITFIELD GetJumpInfo;
    FSJumpPreset JumpPreset;
    class AActionPoint* ReturnValue;
};

struct AAIActor_eventOverridePopoutHoldTime_Parms
{
    FLOAT HoldTime;
};

struct AAIActor_eventCOND_ShouldMeleeActionPoint_Parms
{
    /* EAICode */ BYTE ReturnValue;
};

struct AAIActor_eventCOND_ShouldGotoActionPointFlyer_Parms
{
    /* EAICode */ BYTE ReturnValue;
};

struct AAIActor_eventCOND_ShouldGotoActionPoint_Parms
{
    /* EAICode */ BYTE ReturnValue;
};

struct AAIActor_eventCOND_ShouldUseActionPoint_Parms
{
    /* EAICode */ BYTE ReturnValue;
};

struct AAIActor_eventCOND_NoForcedActionPoints_Parms
{
    /* EAICode */ BYTE ReturnValue;
};

struct AAIActor_eventCOND_ForcedActionPoints_Parms
{
    /* EAICode */ BYTE ReturnValue;
};

struct AAIActor_eventIsReturningToBerzerk_Parms
{
    BITFIELD ReturnValue;
};

struct AAIActor_eventIsBezerked_Parms
{
    BITFIELD ReturnValue;
};

struct AAIActor_eventNotifyArmorLoss_Parms
{
    class ADestructible_Armor* Armor;
};

struct AAIActor_eventSetHiddenSelfAndArmor_Parms
{
    BITFIELD NewHidden;
};

struct AAIActor_eventGetIdleExIndex_Parms
{
    INT ReturnValue;
};

struct AAIActor_eventCOND_ShouldAbortGotoStomp_Parms
{
    /* EAICode */ BYTE ReturnValue;
};

struct AAIActor_eventCOND_ShouldGotoStompLostTarget_Parms
{
    /* EAICode */ BYTE ReturnValue;
};

struct AAIActor_eventCOND_ShouldGotoStomp_Parms
{
    /* EAICode */ BYTE ReturnValue;
};

struct AAIActor_eventCOND_ShouldUseX_Parms
{
    /* EAICode */ BYTE ReturnValue;
};

struct AAIActor_eventEndTeleportOverlayEffectsOnActor_Parms
{
    class AActor* A;
};

struct AAIActor_eventStartTeleportOverlayEffectsOnActor_Parms
{
    class AActor* A;
};

struct AAIActor_eventShouldPainImpulse_Parms
{
    BITFIELD ReturnValue;
};

struct AAIActor_eventShouldAlwaysBeDynamicallyPathedAround_Parms
{
    BITFIELD ReturnValue;
};

struct AAIActor_eventDisableCollisionOnStuck_Parms
{
    BITFIELD ReturnValue;
};

struct AAIActor_eventShouldDampenWhileTurning_Parms
{
    BITFIELD ReturnValue;
};

struct AAIActor_eventPrioritizePopups_Parms
{
    /* EAIPopUpType */ BYTE PopupType;
};

struct AAIActor_eventFindGoal_ScriptCustom_Parms
{
    FVector OutGoalPos;
    BITFIELD ReturnValue;
};

struct AAIActor_eventScriptCanHaywire_Parms
{
    BITFIELD ReturnValue;
};

struct AAIActor_eventSetMaterial_Parms
{
    class AActor* SwapActor;
    class UMaterialEx* NewMaterial;
};

struct AAIActor_eventInput_Parms
{
    /* EControlRemapperKeyType */ BYTE KeyType;
    /* EAIInputAction */ BYTE ActionType;
};

struct AAIActor_eventCOND_ShouldSeek_Parms
{
    /* EAICode */ BYTE ReturnValue;
};

struct AAIActor_eventCOND_ShouldGotoSearch_Parms
{
    /* EAICode */ BYTE ReturnValue;
};

struct AAIActor_eventCOND_ShouldStepAside_Parms
{
    /* EAICode */ BYTE ReturnValue;
};

struct AAIActor_eventCOND_ShouldEndMelee_Parms
{
    /* EAICode */ BYTE ReturnValue;
};

struct AAIActor_eventCOND_ShouldMelee_Parms
{
    /* EAICode */ BYTE ReturnValue;
};

struct AAIActor_eventCOND_ShouldGuardAttackMelee_Parms
{
    /* EAICode */ BYTE ReturnValue;
};

struct AAIActor_eventCOND_ShouldAlignWithGuardedActor_Parms
{
    /* EAICode */ BYTE ReturnValue;
};

struct AAIActor_eventCOND_ShouldGotoGuardPos_Parms
{
    /* EAICode */ BYTE ReturnValue;
};

struct AAIActor_eventIsTooCloseToGuardedActor_Parms
{
    FVector TestLocation;
    BITFIELD ReturnValue;
};

struct AAIActor_eventCOND_ShouldGotoGuardAttack_Parms
{
    /* EAICode */ BYTE ReturnValue;
};

struct AAIActor_eventCOND_BeginWaitState_Parms
{
    /* EAICode */ BYTE ReturnValue;
};

struct AAIActor_eventCOND_ShouldGotoSafeReload_Parms
{
    /* EAICode */ BYTE ReturnValue;
};

struct AAIActor_eventCOND_ShouldGotoReload_Parms
{
    /* EAICode */ BYTE ReturnValue;
};

struct AAIActor_eventCOND_ShouldMoveAround_Parms
{
    /* EAICode */ BYTE ReturnValue;
};

struct AAIActor_eventCOND_ShouldMoveSide_Parms
{
    /* EAICode */ BYTE ReturnValue;
};

struct AAIActor_eventCOND_ShouldGotoAttack_Parms
{
    /* EAICode */ BYTE ReturnValue;
};

struct AAIActor_eventCOND_NeedToMoveToAttack_Parms
{
    /* EAICode */ BYTE ReturnValue;
};

struct AAIActor_eventCOND_ShouldGotoAvoidGoal_Parms
{
    /* EAICode */ BYTE ReturnValue;
};

struct AAIActor_eventCOND_NotSafeFromBigEnemy_Parms
{
    /* EAICode */ BYTE ReturnValue;
};

struct AAIActor_eventCOND_SafeFromBiggerEnemy_Parms
{
    /* EAICode */ BYTE ReturnValue;
};

struct AAIActor_eventCOND_ShouldAvoidTarget_Parms
{
    /* EAICode */ BYTE ReturnValue;
};

struct AAIActor_eventCOND_ShouldNotAvoidTarget_Parms
{
    /* EAICode */ BYTE ReturnValue;
};

struct AAIActor_eventCOND_ShouldAvoidDanger_Parms
{
    /* EAICode */ BYTE ReturnValue;
};

struct AAIActor_eventCOND_ShouldPickupTKObj_Parms
{
    /* EAICode */ BYTE ReturnValue;
};

struct AAIActor_eventCOND_ShouldThrowTKObj_Parms
{
    /* EAICode */ BYTE ReturnValue;
};

struct AAIActor_eventCOND_ShouldCatchTKObj_Parms
{
    /* EAICode */ BYTE ReturnValue;
};

struct AAIActor_eventCOND_ShouldAttackPipeBomb_Parms
{
    /* EAICode */ BYTE ReturnValue;
};

struct AAIActor_eventCOND_ShouldTryAttackPipeBomb_Parms
{
    /* EAICode */ BYTE ReturnValue;
};

struct AAIActor_eventIgnoreDangerActor_Parms
{
    class AActor* A;
};

struct AAIActor_eventGetStompIndex_Parms
{
    INT ReturnValue;
};

struct AAIActor_eventGetWeaponFireLocation_Parms
{
    FVector ReturnValue;
};

struct AAIActor_eventGetProjectileFireLocation_Parms
{
    FVector ReturnValue;
};

struct AAIActor_eventGetWeaponError_Parms
{
    FLOAT HorizError;
    FLOAT VertError;
};

struct AAIActor_eventDebugDrawBone_Parms
{
    FName TrackBone;
};

struct AAIActor_eventShouldProceduralHeadAim_Parms
{
    BITFIELD ReturnValue;
};

struct AAIActor_eventShouldProceduralFire_Parms
{
    BITFIELD ReturnValue;
};

struct AAIActor_eventNotifyTargetSpotted_Parms
{
    FLOAT TimeSinceLastScene;
};

struct AAIActor_eventSetExecuteAmbientSoundCallbackTimer_Parms
{
    FLOAT Delay;
};

struct AAIActor_eventShouldTargetNoiseMaker_Parms
{
    class AActor* NoiseMaker;
    BITFIELD ReturnValue;
};

struct AAIActor_eventEvaluateTargets_Parms
{
    /* EAITargetEval */ BYTE TargetEvaluator;
};

struct AAIActor_eventBlinkingEnabled_Parms
{
    BITFIELD ReturnValue;
};

struct AAIActor_eventSetFactoryActionPointTags_Parms
{
    INT NewCurrent;
    INT NewDesired;
    dnArray<FName> NewTags;
    FName FactoryTag;
};

struct AAIActor_eventSetFactoryActionPointIndex_Parms
{
    INT NewCurrent;
    INT NewDesired;
    FName FactoryTag;
};

struct AAIActor_eventGetPropName_Parms
{
    class AInteractiveActor* MyProp;
    FName ReturnValue;
};

struct AAIActor_eventDisablePropInteractions_Parms
{
    BITFIELD Disable;
};

struct AAIActor_eventDischargeTKObj_Parms
{
    FVector Vel;
    BITFIELD Constrain;
};

struct AAIActor_eventPerformCatchTKObj_Parms
{
    class AInteractiveActor* NewTKObj;
};

struct AAIActor_eventShouldCatchTKObj_Parms
{
    class AInteractiveActor* CandidateTKObj;
    BITFIELD bCheckLOS;
    BITFIELD ReturnValue;
};

struct AAIActor_eventCreateTKShield_Parms
{
    BITFIELD ReturnValue;
};

struct AAIActor_eventNotifyCloakingState_Parms
{
    /* EAICloaking */ BYTE NewState;
};

struct AAIActor_eventGetGotoMeleeRange_Parms
{
    FLOAT ReturnValue;
};

struct AAIActor_eventDie_Parms
{
    class APawn* Killer;
    INT Damage;
    FVector DamageOrigin;
    FVector DamageDirection;
    class UClass* DamageType;
    FName HitBoneName;
};

struct AAIActor_eventForceDieOp_Parms
{
    /* EAIOp */ BYTE DieOp;
    /* EAICode */ BYTE ReturnValue;
};

struct AAIActor_eventNotifyHeadTargetLost_Parms
{
    FString TargetID;
};

struct AAIActor_eventNotifyHeadTargetInThreshold_Parms
{
    FString TargetID;
};

struct AAIActor_eventNotifyWeaponTargetLost_Parms
{
    FString TargetID;
};

struct AAIActor_eventNotifyWeaponTargetInThreshold_Parms
{
    FString TargetID;
};

struct AAIActor_eventNotifyEyeAimState_Parms
{
    /* EAIAim */ BYTE NewState;
};

struct AAIActor_eventNotifyHeadAimState_Parms
{
    /* EAIAim */ BYTE NewState;
};

struct AAIActor_eventNotifyWeaponAimState_Parms
{
    /* EAIAim */ BYTE NewState;
};

struct AAIActor_eventNotifyWeaponManagerMode_Parms
{
    /* EAIWeapManMode */ BYTE NewMode;
};

struct AAIActor_eventBumpedBy_Parms
{
    class AActor* Bumper;
};

struct AAIActor_eventBumpedInto_Parms
{
    class AActor* Obstruction;
    FVector vNormal;
};

struct AAIActor_eventTickState_Parms
{
    FLOAT Secs;
};

struct AAIActor_eventUpdateStateOPNotWorking_Parms
{
    FLOAT DeltaSecs;
};

struct AAIActor_eventUpdateState_Parms
{
    FLOAT DeltaSecs;
};

struct AAIActor_eventScriptCalcRotation_Parms
{
    FRotator OldRotation;
    FRotator NewRotation;
    FLOAT DeltaTime;
};

struct AAIActor_eventExtractSpawnAnimSeq_Parms
{
    FName OutSequenceName;
    INT OutLoopSequence;
    FLOAT OutStartFrame;
    FLOAT OutSpawnAnimRate;
    BITFIELD ReturnValue;
};

struct AAIActor_eventDefaultBodyAlignRate_Parms
{
    FLOAT ReturnValue;
};

struct AAIActor_eventSetAnimSync_Parms
{
    /* EBitModifier */ BYTE UseAnimDispSpeedMod;
    /* EBitModifier */ BYTE UseAnimDispDirMod;
    /* EBitModifier */ BYTE UseAnimRotationMod;
    /* EBitModifier */ BYTE AnimCutSceneMod;
    /* EBitModifier */ BYTE UseAccelerationMod;
};

struct AAIActor_eventEnumerateUsableAnimationControllers_Parms
{
    class UPrecacheIndex* PrecacheIndex;
    dnArray</* EAIAnimController */ BYTE> UsableControllers;
};

struct AAIActor_eventEnumerateWeaponClasses_Parms
{
    class UPrecacheIndex* PrecacheIndex;
    dnArray<class UClass*> WeaponClasses;
};

struct AAIActor_eventClientSetAnimGridState_Parms
{
    FName AnimGridName;
    FLOAT X;
    FLOAT Y;
    BITFIELD bKeepChannelAlpha;
    BITFIELD ReturnValue;
};

struct AAIActor_eventReceiveWeapon_Parms
{
    class UClass* WeaponClass;
};
class DNAI_API AAIActor : public ABaseAI
{
public:
    FVector DisplacementLastFrame;
    FVector LocationLastFrame;
    dnArray<class UMesh*> OverrideMeshList;
    class UMesh* OverrideMesh;
    dnArray<FColor> RandomActorColor;
    FName RandomActorColorGroupID;
    BITFIELD MountLightEx:1 GCC_PACK(4);
    class UClass* MountedLightExClass GCC_PACK(4);
    FSMountedActorPrefab MountedLightExMountPrefab;
    class ALightEx* MountedLightEx;
    dnArray<FSPathCache> PathCache;
    BITFIELD AllowFrozenExecution:1 GCC_PACK(4);
    FSAIDamageInfo DamageInfo GCC_PACK(4);
    dnArray<FSAIDamageScale> DamageScaleInfo;
    /* EAIExecutive */ BYTE Executive;
    BITFIELD ExecutiveSuspended:1 GCC_PACK(4);
    FLOAT DecisionTreeGate GCC_PACK(4);
    FLOAT DecisionTreeInterval;
    dnArray<FAINode> Nodes;
    dnArray<FAIState> FSMStates;
    dnArray<FAITransitionAction> TransitionHistory;
    dnArray<FString> StateEndMessages;
    FSAISquadChannel SquadChannel;
    /* EAIOp */ BYTE CurrentOp;
    INT CurrentOpRef;
    /* EAIOpStatus */ BYTE CurrentOpStatus;
    BITFIELD CurrentOpMustFinish:1 GCC_PACK(4);
    BITFIELD CurrentOpShouldFinish:1;
    INT CurrentOpMode GCC_PACK(4);
    /* EPawnBodyPart */ BYTE WoundedBodyPart;
    /* EAIArcSector */ BYTE WoundedBodySector;
    /* EAIAnimController */ BYTE PostOpAnimCtrl;
    BITFIELD CanSeeTargets:1 GCC_PACK(4);
    BITFIELD CanHearTargets:1;
    FLOAT ClearTargetTime GCC_PACK(4);
    FLOAT TargetVisTestInt;
    FLOAT SightCounter;
    BITFIELD HasWeaponTargetEvaluator:1 GCC_PACK(4);
    FSTargetEvalInfo WeaponTargetEvalInfo GCC_PACK(4);
    class UTargetEvaluator* WeaponTargetEvaluator;
    FLOAT WeaponConeAngle;
    FLOAT PlayerHate;
    FLOAT MinPlayerHate;
    FLOAT MaxPlayerHate;
    FLOAT PlayerHateRecoverRate;
    BITFIELD HasLookTargetEvaluator:1 GCC_PACK(4);
    FSTargetEvalInfo LookTargetEvalInfo GCC_PACK(4);
    class UTargetEvaluator* LookTargetEvaluator;
    FLOAT LookConeAngle;
    FStringNoInit BaseLookTargetString;
    FStringNoInit GlanceLookTargetString;
    FLOAT MinGlanceTime;
    FLOAT RndGlanceTime;
    FLOAT SameGlanceTargetInterval;
    FLOAT ChanceTryGlanceAgain;
    FLOAT MinGlanceRest;
    FLOAT RndGlanceRest;
    dnArray<FSTargetSlot> TargetActors;
    class UAITarget* PrimaryTarget;
    class AActor* PrimaryTargetActor;
    class UAITarget* FollowTarget;
    class AActor* FollowTargetActor;
    BITFIELD DebugDrawLOS:1 GCC_PACK(4);
    FLOAT CachedLOSDistance GCC_PACK(4);
    FLOAT CachedWeaponLOSDistance;
    FLOAT CachedProjectileLOSDistance;
    FSAimerInfo WeaponAimerInfo;
    FSAimerInfo MuzzleAimerInfo;
    FSAimerInfo HeadAimerInfo;
    class UAimer* WeaponAimer;
    class UAimer* HeadAimer;
    FLOAT WeaponTrackRate;
    FLOAT HeadTrackRate;
    FLOAT ShootAngleThresh;
    BITFIELD InShootAngleThresh:1 GCC_PACK(4);
    BITFIELD EndStateOnWeaponTargetLost:1;
    BITFIELD EndStateOnWeaponTargetInThresh:1;
    BITFIELD EndStateOnLookTargetLost:1;
    BITFIELD EndStateOnLookTargetInThresh:1;
    BITFIELD bSpecialMeshAccurateLOSChecks:1;
    BITFIELD HasWeaponManager:1;
    FSWeaponManager WeaponManager GCC_PACK(4);
    class UClass* WeaponConfig;
    dnArray<class UClass*> Weapons;
    dnArray<class UClass*> RandomWeapons;
    BITFIELD SpawnWithWeaponDrawn:1 GCC_PACK(4);
    BITFIELD ForceWeaponActive:1;
    class UClass* InitialWeapon GCC_PACK(4);
    class UClass* PistolClass;
    FLOAT WpnSteadyHorizError;
    FLOAT WpnSteadyVertError;
    FLOAT WpnMovingHorizError;
    FLOAT WpnMovingVertError;
    FLOAT LeadTimeK;
    BITFIELD ForceDirectShot:1 GCC_PACK(4);
    BITFIELD ForceNonDirectShot:1;
    FLOAT AimAtTargetTimeThresh GCC_PACK(4);
    BITFIELD CanScan:1 GCC_PACK(4);
    FLOAT MinWeaponScanTrackRate GCC_PACK(4);
    FLOAT RndWeaponScanTrackRate;
    FLOAT LookTrackRateK;
    FLOAT MinScanInterval;
    FLOAT RndScanInterval;
    FLOAT MinScanDuration;
    FLOAT RndScanDuration;
    FLOAT MinScanRefreshTime;
    FLOAT RndScanRefreshTime;
    INT MinScanPitch;
    INT MaxScanPitch;
    INT MinScanYaw;
    INT MaxScanYaw;
    INT NumPipeBombs;
    FLOAT MinPipeBombInterval;
    class UClass* PipeBombClass;
    class AdnGrenade* MyPipeBomb;
    FVector PipeBombVel;
    FName RightHandPipebombMount;
    FName LeftHandPipebombMount;
    INT NumPipeBombBeeps;
    FLOAT MinPipeBombTime;
    FLOAT MaxPipeBombTime;
    FLOAT MinHorizDistPipeBomb;
    FLOAT MaxHorizDistPipeBomb;
    FLOAT MinVertDistPipeBomb;
    FLOAT MaxVertDistPipeBomb;
    FLOAT MinPipeBombArcHeight;
    FLOAT MaxPipeBombArcHeight;
    FLOAT PipeBombChance;
    FLOAT PipeBombGate;
    BITFIELD bIgnoreTripMines:1 GCC_PACK(4);
    dnArray<class ALaserMine*> TripMines GCC_PACK(4);
    FLOAT MinTargetVisibleTime;
    BITFIELD bDisableWeaponDrops:1 GCC_PACK(4);
    BITFIELD bAllowWeaponDropsPlayerNotSameSize:1;
    FSGuardInfo GuardInf GCC_PACK(4);
    dnArray<FPopUpInfo> Popups;
    class UPopUpCfg* PopUp;
    FSPopUpState PopUpState;
    BITFIELD bNoWeaponChargePopUp:1 GCC_PACK(4);
    FLOAT BlindFireGate GCC_PACK(4);
    BITFIELD UseActionPoints:1 GCC_PACK(4);
    dnArray<FName> ActionPointTags GCC_PACK(4);
    FLOAT ChanceStayAtActionPoint;
    INT ActionPointIndex;
    INT ActionPointDesiredIndex;
    dnArray<class AActionPoint*> ActionPoints;
    dnArray<class AActionPoint*> ReloadActionPoints;
    class AActionPoint* ReloadActionPoint;
    class AActionPoint* NextActionPoint;
    FLOAT ActionPointMeleeK;
    class AActionPoint* ActionPoint;
    FVector ActionPointUserLoc;
    BITFIELD PreShrinkUseActionPoints:1 GCC_PACK(4);
    class AActionPoint* LastActionPoint GCC_PACK(4);
    FName LastActionPointGroup;
    BITFIELD UseActionFollow:1 GCC_PACK(4);
    BITFIELD FaceAnims:1;
    FLOAT MinBlinkTime GCC_PACK(4);
    FLOAT MaxBlinkTime;
    INT NumEyeSets;
    FName EyesClosedAnim;
    dnArray<FSEyeAimInfo> EyeAimInfos;
    FVector RollForwardInfo;
    FVector RollLeftInfo;
    FVector RollRightInfo;
    FLOAT RollTime;
    /* EAICloaking */ BYTE Cloaking;
    FLOAT CloakValue;
    FLOAT CloakRate;
    class UMaterialEx* CloakMaterial;
    BITFIELD HasTKShield:1 GCC_PACK(4);
    INT TKShieldCollisionRadius GCC_PACK(4);
    INT TKShieldCollisionHeight;
    class AActor* TKShield;
    class AInteractiveActor* TKObj;
    FVector TKObjVel;
    INT TKCatchAnim;
    INT NumSecondaryTKCatchAnims;
    dnArray<FName> TKIgnoreClasses;
    FLOAT MaxTKDistance;
    FLOAT MinTKDot;
    BITFIELD bForceTK:1 GCC_PACK(4);
    class AInteractiveActor* DesiredProp GCC_PACK(4);
    class AInteractiveActor* Prop;
    FName ThrowPropTag;
    BITFIELD CanAnimHurl:1 GCC_PACK(4);
    FLOAT PickupItemRange GCC_PACK(4);
    class UAIRelationshipMgr* RelationshipMgr;
    dnArray<FSRelationship> Relations;
    dnArray<FSRelationship> Relationships;
    dnArray<FSRelationship> m_RelationOverrides;
    BITFIELD bUseNormalPhysicsRotation:1 GCC_PACK(4);
    BITFIELD UseLatentMovement:1;
    BITFIELD UseTurnAnimRot:1;
    FLOAT DecelerationDist GCC_PACK(4);
    FLOAT DesiredSpeed;
    FLOAT AIBaseMoveSpeed;
    BITFIELD ZeroMoveSpeed:1 GCC_PACK(4);
    BITFIELD ZeroMoveSpeedEnabled:1;
    BITFIELD bDampenSpeedWhileTurning:1;
    BITFIELD AutoRollWhileTurning:1;
    FLOAT AutoRollRate GCC_PACK(4);
    FLOAT AutoUnrollRate;
    BITFIELD AutoPitchWhileTurning:1 GCC_PACK(4);
    FLOAT AutoPitchRate GCC_PACK(4);
    FLOAT AutoUnPitchRate;
    FVector LocalUp;
    FRotator DesiredDir;
    BITFIELD DisablePhysics:1 GCC_PACK(4);
    BITFIELD bUseAnimDispSpeed:1;
    BITFIELD bUseAnimDispDir:1;
    BITFIELD bUseAnimRotation:1;
    BITFIELD bAnimCutScene:1;
    BITFIELD bApplyAnimCutSceneVelocity:1;
    FVector AnimCutSceneVelocity GCC_PACK(4);
    BITFIELD bUseAcceleration:1 GCC_PACK(4);
    BITFIELD SavedUseAnimDispSpeed:1;
    BITFIELD SavedUseAnimDispDir:1;
    BITFIELD SavedUseAnimRotation:1;
    BITFIELD SavedAnimCutScene:1;
    BITFIELD SavedUseAcceleration:1;
    class UPointTracker* BodyTargetTracker GCC_PACK(4);
    FLOAT BodyAlignRate;
    FLOAT BodyAlignRateFlying;
    FLOAT BodyAlignThresh;
    FLOAT BodyAlignScale;
    BITFIELD AlignYaw:1 GCC_PACK(4);
    BITFIELD AlignPitch:1;
    FLOAT AirSpeedScale GCC_PACK(4);
    FLOAT GroundSpeedScale;
    FLOAT AnimDispSpeedScale;
    BITFIELD bIgnoreZAnimDisp:1 GCC_PACK(4);
    BITFIELD bUseWeaponMovementAnims:1;
    BITFIELD bUseWeaponIdle:1;
    BITFIELD bWeaponActiveAnimsActive:1;
    BITFIELD bUseWeaponReadyIdle:1;
    BITFIELD AimAtEye:1;
    BITFIELD bTryBackupPathingOnFailure:1;
    FLOAT NextBackupPathingTime GCC_PACK(4);
    FLOAT BackupPathingCooldown;
    FVector AIAdditiveVelocity;
    FLOAT InstaGibRandomImpulse;
    FSAnimPreset AnimPreset;
    FSGotoPreset GotoPreset;
    FSJumpPreset JumpPreset;
    FSTripMinePreset TripMinePreset;
    FSTurnToPreset TurnToPreset;
    FSWeaponPreset WeaponPreset;
    FSUsePreset UsePreset;
    dnArray<FSIdle> IdleInfo;
    FSAIAmbientSoundInfo AmbientSoundInfo;
    class UScriptPlayer* ScriptPlayer;
    FSAbortScriptInfo AbortScriptInfo;
    class UScriptObj* SpawnScript;
    FName ScriptTag;
    FName UsedScriptTag;
    FLOAT LastScriptLoopTime;
    BITFIELD bFailedBecauseStuck:1 GCC_PACK(4);
    FName TargetAquiredEvent GCC_PACK(4);
    FName TargetClearedEvent;
    FLOAT NextMessageTime;
    dnArray<FSAIMessage> MessageQueue;
    /* EAIAnimController */ BYTE InitialAnimController;
    FSAIAnimController AnimControllers[10];
    FSAICurAnimController AnimCtrl;
    FSAnimX AnimXParms;
    FSControlX ControlXParms;
    FSFall FallParms;
    FSGotoX GotoXParms;
    FSFreeMove FreeMoveParms;
    FSHaywire HaywireParms;
    FSJump JumpParms;
    FSTakeOff TakeOffParms;
    FSJumpAttack JumpAttackParms;
    FSCharge ChargeParms;
    FSDroolInfo DroolParms;
    FSHover HoverParms;
    FSAIRangeInfo RangeParms;
    FSAIPhysics PhysicsParms;
    FSAIShrunkInfo ShrunkParms;
    dnArray<FSMultiAnimInfo> MultiAnimParms;
    INT MultiAnimIndex;
    INT MultiAnimMode;
    FSMoveUnderground MoveUndergroundParms;
    FSPause PauseParms;
    FSPlaceTripMine PlaceTripMineParms;
    FSSelectWeapon SelectWeaponParms;
    FSSetAim SetAimParms;
    FSSetFireMode SetFireModeParms;
    FSTurnToX TurnToXParms;
    FSUseX UseXParms;
    FSTeleport TeleportParms;
    FSRappel RappelParms;
    dnArray<FSUseXItemInfo> UseableItems;
    class AAIActorFactory* Factory;
    class AAIActorFactoryManager* FactoryManager;
    FName SpawnAnimSeq;
    FName SpawnAnim;
    FName InitAnim;
    class AScriptTrigger* LastScriptTrigger;
    BITFIELD Invulnerable:1 GCC_PACK(4);
    BITFIELD bPlayDeathSound:1;
    FLOAT LedgeDistOverride GCC_PACK(4);
    FLOAT SizeLedgeImpulse;
    BITFIELD DieOnExitState:1 GCC_PACK(4);
    FLOAT PainOpGate GCC_PACK(4);
    BITFIELD ShowPain:1 GCC_PACK(4);
    BITFIELD bHackNoDeathAnim:1;
    FLOAT DeathAnimChance GCC_PACK(4);
    FLOAT ThrownObjectDeathAnimChance;
    class UClass* FinishMeControlType;
    FName FinishMeAnimName;
    FName FinishMeReviveAnimName;
    FLOAT FinishMeTimeout;
    BITFIELD FaceDamage:1 GCC_PACK(4);
    BITFIELD FaceDeath:1;
    BITFIELD WasExecuted:1;
    FSDeathImpulseInfo DeathImpulseOverride GCC_PACK(4);
    BITFIELD bDisableCorpseCleanup:1 GCC_PACK(4);
    BITFIELD bFixCorpseRoot:1;
    FSSoundInfo ExpandPopSound GCC_PACK(4);
    class APawn* ExpandInstigator;
    BITFIELD bHealthTriggerMultiple:1 GCC_PACK(4);
    dnArray<FSAIHealthTrigger> HealthTriggers GCC_PACK(4);
    BITFIELD bMeleeResetPainOpGate:1 GCC_PACK(4);
    FLOAT MinPainOpInterval GCC_PACK(4);
    FLOAT RndPainOpInterval;
    INT MaxConsecutivePainOp;
    FLOAT MaxConsecutivePainInterval;
    INT ConsecutivePainOp;
    FLOAT PainImpulseMagnitude;
    FLOAT PainImpulseMinDamage;
    BITFIELD bDontUseAIOPPain:1 GCC_PACK(4);
    INT PainAnimRefID GCC_PACK(4);
    dnArray<FSBoneAim> BoneAim;
    dnArray<FSBoneAim> MuzzleBoneAim;
    BITFIELD HasBoneAimer:1 GCC_PACK(4);
    BITFIELD DisableAimGrids:1;
    BITFIELD ProceduralMovingFire:1;
    dnArray<FName> ProcFireStates GCC_PACK(4);
    dnArray</* EAIOp */ BYTE> ProcFireOps;
    BITFIELD ProcAimingEnabledThisFrame:1 GCC_PACK(4);
    BITFIELD CanProcFire:1;
    BITFIELD CanPopupAim:1;
    FLOAT PopUpFireGate GCC_PACK(4);
    FLOAT ProcFireMaxTimeSinceSeen;
    dnArray<FSBoneAim> BoneHeadAim;
    BITFIELD HasBoneHeadAimer:1 GCC_PACK(4);
    class AActor* HackAimFromRotationActor GCC_PACK(4);
    FName WeaponIdle;
    FLOAT MovingFireGate;
    BITFIELD ShouldFire:1 GCC_PACK(4);
    FLOAT MinMovingFireInterval GCC_PACK(4);
    FLOAT RndMovingFireInterval;
    FSBoneAimConstraints MuzzleBoneAimConstraints;
    FSBoneAimConstraints WeaponBoneAimConstraints;
    FSBoneAimConstraints HeadBoneAimConstraints;
    FSBoneAimConstraints BodyBoneAimConstraints;
    FSBoneAimConstraints WeaponBoneAimConstraintsOverride;
    BITFIELD bWeaponBoneAimConstraintsOverrideEnabled:1 GCC_PACK(4);
    BITFIELD BoneAimerOnTarget:1;
    BITFIELD HasWeaponAimer:1;
    BITFIELD HasHeadAimer:1;
    BITFIELD AimBodyAtHeadTarget:1;
    FVector GoalPos GCC_PACK(4);
    BITFIELD StartTickDisabled:1 GCC_PACK(4);
    /* EAIAttackConstraint */ BYTE AttackConstraint GCC_PACK(4);
    BITFIELD AllowBezerk:1 GCC_PACK(4);
    BITFIELD AllowProne:1;
    FLOAT TryGotoAttackTime GCC_PACK(4);
    FLOAT MaxTravelDist;
    FLOAT MinIdleTime;
    FLOAT RndIdleTime;
    FLOAT MinAggressiveIdleTime;
    FLOAT RndAggressiveIdleTime;
    FLOAT MinPauseTime;
    FLOAT RndPauseTime;
    FLOAT MinStunTime;
    FLOAT RndStunTime;
    FLOAT MaxTryTurnTime;
    FLOAT ShouldTurnThreshold;
    FLOAT FaceThreshold;
    BITFIELD bNeverPlayerTurnAnim:1 GCC_PACK(4);
    FLOAT WalkSpeedScale GCC_PACK(4);
    FLOAT RunSpeedScale;
    FLOAT SideArcTurnSpeedThresh;
    FLOAT StepBackwardsSpeedThresh;
    FLOAT StartAngleSideSector;
    FLOAT StartAngleBackSector;
    FLOAT MoveBackwardsDistThresh;
    FLOAT SideStepDistThresh;
    FLOAT WalkDistThresh;
    FLOAT GotoPosRange;
    FLOAT GotoPosHeight;
    FLOAT GotoPosFlyingRange;
    FLOAT GotoPosFlyingHeight;
    FLOAT MinDistToGoal;
    FLOAT MinMoveAroundDist;
    FLOAT RndMoveAroundDist;
    FLOAT MinBackOffDist;
    FLOAT RndBackOffDist;
    FLOAT MinMoveSideDist;
    FLOAT RndMoveSideDist;
    FLOAT MinSpreadOutTime;
    FLOAT RndSpreadOutTime;
    FLOAT MinMeleeRange;
    FLOAT RndMeleeRange;
    FLOAT MinMeleeHeight;
    FLOAT RndMeleeHeight;
    INT MaxGotoMeleeSteps;
    BITFIELD bForceMelee:1 GCC_PACK(4);
    FLOAT MeleeZone GCC_PACK(4);
    FLOAT MeleeZoneHeight;
    FLOAT MinMeleeStrafeRange;
    FLOAT RndMeleeStrafeRange;
    INT MinMeleeStrafeCycles;
    INT RndMeleeStrafeCycles;
    FLOAT MeleeAttackRange;
    FLOAT MeleeAttackArc;
    BITFIELD MeleeFaceTarget:1 GCC_PACK(4);
    FLOAT BiteDamageAmount GCC_PACK(4);
    FVector BiteDamageVel;
    FLOAT ClawDamageAmount;
    FVector ClawDamageVel;
    FLOAT KickDamageAmount;
    FVector KickDamageVel;
    dnArray<FSStompInfo> StompInfo;
    INT StompIndex;
    INT ForcedStompIndex;
    FSStubToeInfo ToeStubInfo;
    dnArray<FSDodgeInfo> DodgeInfo;
    INT DodgeIndex;
    FLOAT DodgeGate;
    FLOAT DodgeInterval;
    FSViewShakeInfo PlayerShrunkFootstepViewShake;
    BITFIELD bPlayerShrunkSpecialFootstep:1 GCC_PACK(4);
    FLOAT MinChargeRange GCC_PACK(4);
    FLOAT MaxChargeRange;
    FLOAT MinChargeHeightDelta;
    FLOAT MaxChargeHeightDelta;
    FLOAT MinChargeAttackRange;
    FLOAT MaxChargeAttackRange;
    INT MaxChargeSteps;
    INT MinWeaponStrafeCycles;
    INT RndWeaponStrafeCycles;
    class UClass* ProjectileClass;
    FName ProjectileMuzzleName;
    FLOAT MinProjectileFireInterval;
    FLOAT RndProjectileFireInterval;
    FLOAT ProjecilteFireGate;
    BITFIELD ForceShootProjectile:1 GCC_PACK(4);
    BITFIELD bShootProjectileRequireLOS:1;
    BITFIELD bShootProjectileRequireSemiClearShot:1;
    BITFIELD bShootProjectileRequireTargetNotInStrTap:1;
    BITFIELD bShootProjectileFaceTarget:1;
    FLOAT MinAirAttackHeight GCC_PACK(4);
    FLOAT MaxAirAttackHeight;
    FLOAT MinJumpAttackRange;
    FLOAT MaxJumpAttackRange;
    FLOAT MaxJumpAttackHeight;
    BITFIELD bJumpAttackRequireTargetNotInStrTap:1 GCC_PACK(4);
    BITFIELD JumpAttackOnTakeOff:1;
    BITFIELD ForceJumpAttack:1;
    FLOAT JumpAttackBearingVariance GCC_PACK(4);
    FLOAT JumpAttackHeightDelta;
    BITFIELD CanJump:1 GCC_PACK(4);
    BITFIELD HasStartFallAnim:1;
    BITFIELD HasTouchedGround:1;
    FVector JumpVel GCC_PACK(4);
    FLOAT StartFallHeight;
    FLOAT FallDistThresh;
    FLOAT LandingThresh;
    FLOAT HeavyLandingThresh;
    FLOAT ChanceLand;
    /* EBitModifier */ BYTE ForceStartJetpack;
    BITFIELD DoJetPackWobble:1 GCC_PACK(4);
    BITFIELD bIsFlying:1;
    FLOAT TimeTargetNotVisible GCC_PACK(4);
    BITFIELD CanOpenDoors:1 GCC_PACK(4);
    BITFIELD AvoidDangers:1;
    BITFIELD InDanger:1;
    FVector DangerPos GCC_PACK(4);
    dnArray<class AActor*> IgnoredDangerActors;
    FLOAT MaxThreatAimAngle;
    FLOAT MoveAroundTime;
    FLOAT RndMoveAroundTime;
    FLOAT HaywireChance;
    FLOAT HaywireMinDuration;
    FLOAT HaywireMaxDuration;
    FVector HaywireLinearAccel;
    FVector HaywireLinearAccelVar;
    FVector HaywireAngularAccel;
    FVector HaywireAngularAccelVar;
    BITFIELD bForceHaywire:1 GCC_PACK(4);
    FName PathID GCC_PACK(4);
    class UClass* OptionalPathClass;
    BITFIELD bNeverFailOnDynamicPath:1 GCC_PACK(4);
    FName ActionPointJumpType GCC_PACK(4);
    FLOAT ChanceSayPain;
    FLOAT ChanceSayFireInTheHole;
    FLOAT ChanceSayTakeCover;
    FLOAT ChanceSayLowHealth;
    FLOAT ChanceSayConfirmKill;
    FLOAT ChanceSayReloading;
    FLOAT ChanceSayManDown;
    FLOAT ChanceSayFriendlyFire;
    FLOAT ChanceSayEnemySpotted;
    FLOAT PainSoundMinInterval;
    FLOAT PainSoundRndInterval;
    BITFIELD bDebugAISounds:1 GCC_PACK(4);
    BITFIELD bDisableSounds:1;
    FLOAT PainSoundGate GCC_PACK(4);
    FOutputDevice* MyLog;
    BITFIELD bUseMyLog:1 GCC_PACK(4);
    BITFIELD bValidateDecisionTree:1;
    FStringNoInit ShouldFireStr GCC_PACK(4);
    BITFIELD DebugInfiniteLoop:1 GCC_PACK(4);
    FLOAT NumTransitions GCC_PACK(4);
    BITFIELD bAutoOpenDoors:1 GCC_PACK(4);
    BITFIELD bWasInAir:1;
    FLOAT FramesWithoutGroundContact GCC_PACK(4);
    FStringNoInit TreeDescentLog;
    FVector TrailMarkerLoc;
    dnArray<FSGotoXHistory> GotoXHistory;
    BITFIELD bGotoXTracking:1 GCC_PACK(4);
    dnArray<FSPathingHistory> PathingHistory GCC_PACK(4);
    dnArray<FSAIDebugMessage> AIDebugMessageQueue;
    dnArray<FSScriptFailInfo> ScriptFailHistory;
    FLOAT LastMoveSpeed;
    FVector LastMoveDir;
    FVector LastFrameVelocity;
    class AAIAnimHUD* MyAnimHUD;
    FLOAT PathingErrors;
    FLOAT OpenDoorGate;
    FVector PreviousLocation;
    FVector DesiredMovement;
    BITFIELD bTrackPhysicsContacts:1 GCC_PACK(4);
    dnArray<class AActor*> PhysicsContactActors GCC_PACK(4);
    INT AIRotation;
    /* EAIDynamicPathPriority */ BYTE DynamicPathingPriority;
    FLOAT DynamicPathingPriorityTieBreaker;
    FLOAT GroundConstraintScalerOverride;
    BITFIELD bScriptPathingEnabled:1 GCC_PACK(4);
    /* EAIDynamicPathPriority */ BYTE ScriptPathingOverride GCC_PACK(4);
    FLOAT ScriptPathingTieBreakerOverride;
    BITFIELD bSpawnedPhysicsControllerActive:1 GCC_PACK(4);
    FLOAT PathSizeOverrideHeight GCC_PACK(4);
    FLOAT PathSizeOverrideRadius;
    BITFIELD bForcePhysicsCutScene:1 GCC_PACK(4);
    FLOAT EvalGateOverride GCC_PACK(4);
    BITFIELD bPathRover:1 GCC_PACK(4);
    BITFIELD bRestorePhysControllerAfterKeyframe:1;
    FLOAT GameplayCurrentScaleConstraintStrength GCC_PACK(4);
    FLOAT GameplayDesiredScaleConstraintStrength;
    BITFIELD bAutoStartWeaponTargetEval:1 GCC_PACK(4);
    BITFIELD bAutoStartLookTargetEval:1;
    BITFIELD bAutoStartDecisionTree:1;
    BITFIELD bHolsterWeapons:1;
    BITFIELD bOpSuspendedLookTargetEval:1;
    FSAIPerformanceInfo PerfInfo GCC_PACK(4);
    BITFIELD bHackAIWantsToFire:1 GCC_PACK(4);
    BITFIELD bDontPlayShootAnim:1;
    INT AINoTick GCC_PACK(4);
    BITFIELD DumbAI:1 GCC_PACK(4);
    BITFIELD bSpecialStepHeightCollisionEnabled:1;
    BITFIELD bIsBoss:1;
    BITFIELD bDisableThrowAttack:1;
    DECLARE_FUNCTION(execSetWeaponManagerMode);
    DECLARE_FUNCTION(execInitialiseWeaponManager);
    DECLARE_FUNCTION(execWeaponIsActive);
    DECLARE_FUNCTION(execSetCurrentWeapon);
    DECLARE_FUNCTION(execAddWeapon);
    DECLARE_FUNCTION(execInitialiseWeapons);
    DECLARE_FUNCTION(execIsDoingSyncedAnim);
    DECLARE_FUNCTION(execEndOp);
    DECLARE_FUNCTION(execNotifyOpExitState);
    DECLARE_FUNCTION(execExecuteOp);
    DECLARE_FUNCTION(execCanUseOp);
    DECLARE_FUNCTION(execPhysicsEndOfFrame_Generic);
    DECLARE_FUNCTION(execCalculatePhysics_OnGround);
    DECLARE_FUNCTION(execHasTripMineAttached);
    DECLARE_FUNCTION(execShouldProceduralAim);
    DECLARE_FUNCTION(execPassDamageType);
    DECLARE_FUNCTION(execIsInProcFireOp);
    DECLARE_FUNCTION(execIsInProcFireState);
    DECLARE_FUNCTION(execRegisterAIAnimationControllerEntry);
    DECLARE_FUNCTION(execClearGlobalPathingCache);
    DECLARE_FUNCTION(execAIShouldTick);
    DECLARE_FUNCTION(execShowDebugInfoBubbles);
    DECLARE_FUNCTION(execIsFalling);
    DECLARE_FUNCTION(execIsFlying);
    DECLARE_FUNCTION(execIsInAir);
    DECLARE_FUNCTION(execSortHealthTriggers);
    DECLARE_FUNCTION(execGetRealNAVID);
    DECLARE_FUNCTION(execPointIsInWorld);
    DECLARE_FUNCTION(execNotifyDied);
    DECLARE_FUNCTION(execAddTrailMarker);
    DECLARE_FUNCTION(execGetMaxHeightError);
    DECLARE_FUNCTION(execGetMaxRangeError);
    DECLARE_FUNCTION(execTargetInHorizRangeLimits);
    DECLARE_FUNCTION(execFacingTarget);
    DECLARE_FUNCTION(execTargetContact);
    DECLARE_FUNCTION(execForcePosIntoPath);
    DECLARE_FUNCTION(execPortalDoorIsClosed);
    DECLARE_FUNCTION(execFindClosestLedge);
    DECLARE_FUNCTION(execVectorInLimits);
    DECLARE_FUNCTION(execFloatInLimits);
    DECLARE_FUNCTION(execCanSeePosFrom);
    DECLARE_FUNCTION(execClearShot);
    DECLARE_FUNCTION(execCanSeeActor);
    DECLARE_FUNCTION(execCanReloadWeapon);
    DECLARE_FUNCTION(execCalcMapRange);
    DECLARE_FUNCTION(execCalcProjectileVelocity);
    DECLARE_FUNCTION(execCalcPipeBombVelocity);
    DECLARE_FUNCTION(execCalcJumpAttackVelocity);
    DECLARE_FUNCTION(execCalcJumpVelocity);
    DECLARE_FUNCTION(execValidateTargetPos);
    DECLARE_FUNCTION(execCalcHorizRangeToActor);
    DECLARE_FUNCTION(execCalcRangeForDist);
    DECLARE_FUNCTION(execCalcDistForRange);
    DECLARE_FUNCTION(execCalcDirToTargetRelOffsetPos3D);
    DECLARE_FUNCTION(execCalcDirToTargetRelOffsetPos2D);
    DECLARE_FUNCTION(execCalcTargetRelOffsetPos3D);
    DECLARE_FUNCTION(execCalcTargetRelOffsetPos2D);
    DECLARE_FUNCTION(execCalcTargetOffsetPos3D);
    DECLARE_FUNCTION(execCalcTargetOffsetPos2D);
    DECLARE_FUNCTION(execCalcRelOffsetPos);
    DECLARE_FUNCTION(execCalcRndPos);
    DECLARE_FUNCTION(execCalcRelativeSector);
    DECLARE_FUNCTION(execCalcSector);
    DECLARE_FUNCTION(execCalcJumpRange);
    DECLARE_FUNCTION(execCalcNumWeaponStrafeCycles);
    DECLARE_FUNCTION(execCalcNumMeleeStrafeCylces);
    DECLARE_FUNCTION(execCalcMeleeStrafeRange);
    DECLARE_FUNCTION(execCalcMeleeRange);
    DECLARE_FUNCTION(execCalcWeaponRange);
    DECLARE_FUNCTION(execCalcPerpSpeed);
    DECLARE_FUNCTION(execCanTurnToPos);
    DECLARE_FUNCTION(execCanTurnToActor);
    DECLARE_FUNCTION(execCanGotoPos);
    DECLARE_FUNCTION(execCanGotoPos2D);
    DECLARE_FUNCTION(execCanGotoActorOffset);
    DECLARE_FUNCTION(execCanGotoActor2D);
    DECLARE_FUNCTION(execPosInAcceptableProx);
    DECLARE_FUNCTION(execPosInProx);
    DECLARE_FUNCTION(execPosInAcceptableHorizProx);
    DECLARE_FUNCTION(execPosInHorizProx);
    DECLARE_FUNCTION(execAtActorOffset);
    DECLARE_FUNCTION(execActorInRange);
    DECLARE_FUNCTION(execActorInHorizRangeLimits);
    DECLARE_FUNCTION(execActorInHorizRange);
    DECLARE_FUNCTION(execPosInAngularThreshold);
    DECLARE_FUNCTION(execFacingPos);
    DECLARE_FUNCTION(execFacingActor);
    DECLARE_FUNCTION(execCheckCondition);
    DECLARE_FUNCTION(execGetTargetActor);
    DECLARE_FUNCTION(execGetTarget);
    DECLARE_FUNCTION(execGetUnusedTargetActorSlot);
    DECLARE_FUNCTION(execSetTargetActorSlot);
    DECLARE_FUNCTION(execTargetActor);
    DECLARE_FUNCTION(execFreeTargetActorSlot);
    DECLARE_FUNCTION(execClearTarget);
    DECLARE_FUNCTION(execSetTarget);
    DECLARE_FUNCTION(execGetLatentAction);
    DECLARE_FUNCTION(execEnableMovement);
    DECLARE_FUNCTION(execMoveToEx);
    DECLARE_FUNCTION(execIsFacing);
    DECLARE_FUNCTION(execIsFacingInYaw);
    DECLARE_FUNCTION(execNative_PostSpawn);
    DECLARE_FUNCTION(execNative_PostLoadMap);
    DECLARE_FUNCTION(execNative_PostBeginPlay);
    DECLARE_FUNCTION(execNative_PreBeginPlay);
    DECLARE_FUNCTION(execNative_PreGameInit);
    DECLARE_FUNCTION(execCalcAimToMeAngle);
    DECLARE_FUNCTION(execCalcTargetsAimAngle);
    DECLARE_FUNCTION(execSetGotoPresets);
    DECLARE_FUNCTION(execSetGoal);
    DECLARE_FUNCTION(execForceLookTargetEval);
    DECLARE_FUNCTION(execSuspendLookTargetEvaluation);
    DECLARE_FUNCTION(execPotentialLookTargetSound);
    DECLARE_FUNCTION(execSuspendWeaponTargetEvaluation);
    DECLARE_FUNCTION(execPotentialWeaponTargetSound);
    DECLARE_FUNCTION(execHeardSound);
    DECLARE_FUNCTION(execAbortScript_Shrunk);
    DECLARE_FUNCTION(execAbortScript_Triggered);
    DECLARE_FUNCTION(execAbortScript_Bumped);
    DECLARE_FUNCTION(execAbortScript_Damaged);
    DECLARE_FUNCTION(execAbortScript_HearSound);
    DECLARE_FUNCTION(execAbortScript_SeeActor);
    DECLARE_FUNCTION(execAbortScripts);
    DECLARE_FUNCTION(execStopScript);
    DECLARE_FUNCTION(execPlayScript);
    DECLARE_FUNCTION(execPrintExecutive);
    DECLARE_FUNCTION(execForceExecutive);
    DECLARE_FUNCTION(execExecuteExecutive);
    DECLARE_FUNCTION(execIsExecutiveSuspended);
    DECLARE_FUNCTION(execSuspendExecutive);
    DECLARE_FUNCTION(execInitialiseExecutive);
    DECLARE_FUNCTION(execGetExecutive);
    DECLARE_FUNCTION(execSetExecutive);
    DECLARE_FUNCTION(execSetNewActionPoint);
    DECLARE_FUNCTION(execHasUseableActionPoint);
    DECLARE_FUNCTION(execReleaseActionPoint);
    DECLARE_FUNCTION(execUseActionPoint);
    DECLARE_FUNCTION(execActionPointCompromised);
    DECLARE_FUNCTION(execGetActionPointAction);
    DECLARE_FUNCTION(execCanUseActionPoint);
    DECLARE_FUNCTION(execCanUseNewActionPoint);
    DECLARE_FUNCTION(execAtActionPoint);
    DECLARE_FUNCTION(execLockActionPoint);
    DECLARE_FUNCTION(execSetActionPointIndex);
    DECLARE_FUNCTION(execPopUpCompromised);
    DECLARE_FUNCTION(execSetPopUp);
    DECLARE_FUNCTION(execClearGuard);
    DECLARE_FUNCTION(execSetAbortGuardThresh);
    DECLARE_FUNCTION(execGuardPos);
    DECLARE_FUNCTION(execGuardActor);
    DECLARE_FUNCTION(execIsGuardingPos);
    DECLARE_FUNCTION(execIsGuardingActor);
    DECLARE_FUNCTION(execIsGuardingPlayer);
    DECLARE_FUNCTION(execIsGuarding);
    DECLARE_FUNCTION(execCanGuard);
    DECLARE_FUNCTION(execHeadAimerGetTargetString);
    DECLARE_FUNCTION(execHeadAimerGetNumTargets);
    DECLARE_FUNCTION(execGetHeadAimerState);
    DECLARE_FUNCTION(execIsHeadAimerOn);
    DECLARE_FUNCTION(execHeadAimerRemoveSpecificTarget);
    DECLARE_FUNCTION(execHeadAimerRemoveTarget);
    DECLARE_FUNCTION(execHeadAimerAddTargetAITarget);
    DECLARE_FUNCTION(execHeadAimerAddTargetPos);
    DECLARE_FUNCTION(execHeadAimerAddTargetActor);
    DECLARE_FUNCTION(execWeaponAimerGetTargetString);
    DECLARE_FUNCTION(execWeaponAimerGetNumTargets);
    DECLARE_FUNCTION(execGetWeaponAimerState);
    DECLARE_FUNCTION(execIsWeaponAimerOn);
    DECLARE_FUNCTION(execWeaponAimerRemoveSpecificTarget);
    DECLARE_FUNCTION(execWeaponAimerRemoveTarget);
    DECLARE_FUNCTION(execWeaponAimerAddTargetAITarget);
    DECLARE_FUNCTION(execWeaponAimerAddTargetPos);
    DECLARE_FUNCTION(execWeaponAimerAddTargetActor);
    DECLARE_FUNCTION(execEndMyLog);
    DECLARE_FUNCTION(execBeginMyLog);
    DECLARE_FUNCTION(execLogMyLog);
    DECLARE_FUNCTION(execClearDangerPos);
    DECLARE_FUNCTION(execSetDangerPos);
    DECLARE_FUNCTION(execIsCloaked);
    DECLARE_FUNCTION(execGetCloaking);
    DECLARE_FUNCTION(execActivateCloaking);
    DECLARE_FUNCTION(execSetJumpPresets);
    DECLARE_FUNCTION(execSetTurnToPresets);
    DECLARE_FUNCTION(execSetAnimPresets);
    inline BITFIELD __fastcall eventWeaponManagerCompletelyOff()
    {
        AAIActor_eventWeaponManagerCompletelyOff_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNAI_WeaponManagerCompletelyOff), &Parms);
        return Parms.ReturnValue;
    }
    inline void __fastcall eventWeaponManagerResumeFire()
    {
        ProcessEvent(FindFunctionChecked(DNAI_WeaponManagerResumeFire), NULL);
    }
    inline void __fastcall eventWeaponManagerHoldFire(BITFIELD Expedite)
    {
        AAIActor_eventWeaponManagerHoldFire_Parms Parms;
        Parms.Expedite=Expedite;
        ProcessEvent(FindFunctionChecked(DNAI_WeaponManagerHoldFire), &Parms);
    }
    inline void __fastcall eventWeaponManagerForceFire(BITFIELD NewForceFire)
    {
        AAIActor_eventWeaponManagerForceFire_Parms Parms;
        Parms.NewForceFire=NewForceFire;
        ProcessEvent(FindFunctionChecked(DNAI_WeaponManagerForceFire), &Parms);
    }
    inline void __fastcall eventAIActor_Weapon_Holster(class ARenderActor* MyWeapon)
    {
        AAIActor_eventAIActor_Weapon_Holster_Parms Parms;
        Parms.MyWeapon=MyWeapon;
        ProcessEvent(FindFunctionChecked(DNAI_AIActor_Weapon_Holster), &Parms);
    }
    inline BITFIELD __fastcall eventAIActor_Weapon_ReloadFinished()
    {
        AAIActor_eventAIActor_Weapon_ReloadFinished_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNAI_AIActor_Weapon_ReloadFinished), &Parms);
        return Parms.ReturnValue;
    }
    inline BITFIELD __fastcall eventAIActor_Weapon_GiveAmmo()
    {
        AAIActor_eventAIActor_Weapon_GiveAmmo_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNAI_AIActor_Weapon_GiveAmmo), &Parms);
        return Parms.ReturnValue;
    }
    inline BITFIELD __fastcall eventAIActor_Weapon_Reload()
    {
        AAIActor_eventAIActor_Weapon_Reload_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNAI_AIActor_Weapon_Reload), &Parms);
        return Parms.ReturnValue;
    }
    inline void __fastcall eventForceWeaponFire()
    {
        ProcessEvent(FindFunctionChecked(DNAI_ForceWeaponFire), NULL);
    }
    inline BITFIELD __fastcall eventAIActor_Weapon_Fire()
    {
        AAIActor_eventAIActor_Weapon_Fire_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNAI_AIActor_Weapon_Fire), &Parms);
        return Parms.ReturnValue;
    }
    inline BITFIELD __fastcall eventClearForShot(class UAITarget* MyTarget, FVector StartPos, FVector EndPos)
    {
        AAIActor_eventClearForShot_Parms Parms;
        Parms.ReturnValue=0;
        Parms.MyTarget=MyTarget;
        Parms.StartPos=StartPos;
        Parms.EndPos=EndPos;
        ProcessEvent(FindFunctionChecked(DNAI_ClearForShot), &Parms);
        return Parms.ReturnValue;
    }
    inline BITFIELD __fastcall eventShouldFireWeapon(class UAITarget* MyTarget)
    {
        AAIActor_eventShouldFireWeapon_Parms Parms;
        Parms.ReturnValue=0;
        Parms.MyTarget=MyTarget;
        ProcessEvent(FindFunctionChecked(DNAI_ShouldFireWeapon), &Parms);
        return Parms.ReturnValue;
    }
    inline BITFIELD __fastcall eventAIActor_Weapon_CanFire()
    {
        AAIActor_eventAIActor_Weapon_CanFire_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNAI_AIActor_Weapon_CanFire), &Parms);
        return Parms.ReturnValue;
    }
    inline FLOAT __fastcall eventWeaponGetWeightForArea(FVector pos, FRotator Rot)
    {
        AAIActor_eventWeaponGetWeightForArea_Parms Parms;
        Parms.ReturnValue=0;
        Parms.pos=pos;
        Parms.Rot=Rot;
        ProcessEvent(FindFunctionChecked(DNAI_WeaponGetWeightForArea), &Parms);
        return Parms.ReturnValue;
    }
    inline FName __fastcall eventAIActor_Weapon_GetName()
    {
        AAIActor_eventAIActor_Weapon_GetName_Parms Parms;
        Parms.ReturnValue=NAME_None;
        ProcessEvent(FindFunctionChecked(DNAI_AIActor_Weapon_GetName), &Parms);
        return Parms.ReturnValue;
    }
    inline class AWeapon* __fastcall eventGetWeapon()
    {
        AAIActor_eventGetWeapon_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNAI_GetWeapon), &Parms);
        return Parms.ReturnValue;
    }
    inline INT __fastcall eventSearchWeaponConfigs(class UClass* DesiredWeaponClass)
    {
        AAIActor_eventSearchWeaponConfigs_Parms Parms;
        Parms.ReturnValue=0;
        Parms.DesiredWeaponClass=DesiredWeaponClass;
        ProcessEvent(FindFunctionChecked(DNAI_SearchWeaponConfigs), &Parms);
        return Parms.ReturnValue;
    }
    inline class AWeapon* __fastcall eventSearchInventoryForWeapon(class UClass* DesiredWeaponClass)
    {
        AAIActor_eventSearchInventoryForWeapon_Parms Parms;
        Parms.ReturnValue=0;
        Parms.DesiredWeaponClass=DesiredWeaponClass;
        ProcessEvent(FindFunctionChecked(DNAI_SearchInventoryForWeapon), &Parms);
        return Parms.ReturnValue;
    }
    inline class UClass* __fastcall eventChooseBestWeapon()
    {
        AAIActor_eventChooseBestWeapon_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNAI_ChooseBestWeapon), &Parms);
        return Parms.ReturnValue;
    }
    inline void __fastcall eventDrawWeaponFromHolster(class UClass* NewWeaponClass)
    {
        AAIActor_eventDrawWeaponFromHolster_Parms Parms;
        Parms.NewWeaponClass=NewWeaponClass;
        ProcessEvent(FindFunctionChecked(DNAI_DrawWeaponFromHolster), &Parms);
    }
    inline void __fastcall eventTmpHackAroundTheWeaponSystem(class AWeapon* NewWeapon)
    {
        AAIActor_eventTmpHackAroundTheWeaponSystem_Parms Parms;
        Parms.NewWeapon=NewWeapon;
        ProcessEvent(FindFunctionChecked(DNAI_TmpHackAroundTheWeaponSystem), &Parms);
    }
    inline BITFIELD __fastcall eventInitRelationshipOverrides()
    {
        AAIActor_eventInitRelationshipOverrides_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNAI_InitRelationshipOverrides), &Parms);
        return Parms.ReturnValue;
    }
    inline BITFIELD __fastcall eventInitRelationships()
    {
        AAIActor_eventInitRelationships_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNAI_InitRelationships), &Parms);
        return Parms.ReturnValue;
    }
    inline void __fastcall eventSetRelations(dnArray<FSRelationship> NewRelations)
    {
        AAIActor_eventSetRelations_Parms Parms;
        Parms.NewRelations=NewRelations;
        ProcessEvent(FindFunctionChecked(DNAI_SetRelations), &Parms);
    }
    inline BITFIELD __fastcall eventShouldCallForHelp()
    {
        AAIActor_eventShouldCallForHelp_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNAI_ShouldCallForHelp), &Parms);
        return Parms.ReturnValue;
    }
    inline BITFIELD __fastcall eventCallForHelp(class AAIActor* FriendAI)
    {
        AAIActor_eventCallForHelp_Parms Parms;
        Parms.ReturnValue=0;
        Parms.FriendAI=FriendAI;
        ProcessEvent(FindFunctionChecked(DNAI_CallForHelp), &Parms);
        return Parms.ReturnValue;
    }
    inline void __fastcall eventServiceMessages()
    {
        ProcessEvent(FindFunctionChecked(DNAI_ServiceMessages), NULL);
    }
    inline BITFIELD __fastcall eventClearOverrideAnim(FName AnimName)
    {
        AAIActor_eventClearOverrideAnim_Parms Parms;
        Parms.ReturnValue=0;
        Parms.AnimName=AnimName;
        ProcessEvent(FindFunctionChecked(DNAI_ClearOverrideAnim), &Parms);
        return Parms.ReturnValue;
    }
    inline BITFIELD __fastcall eventOverrideAnim(FName AnimName, FName NewSequenceName, FName NewChannelName, FLOAT NewRate, FLOAT NewTween, BITFIELD NewLoop, FLOAT NewStartFrame, FLOAT NewAnimEarlyEndTime, FLOAT NewBlendInTime, FLOAT NewBlendOutTime, BITFIELD NewAdjustStart, BITFIELD NewInterrupt)
    {
        AAIActor_eventOverrideAnim_Parms Parms;
        Parms.ReturnValue=0;
        Parms.AnimName=AnimName;
        Parms.NewSequenceName=NewSequenceName;
        Parms.NewChannelName=NewChannelName;
        Parms.NewRate=NewRate;
        Parms.NewTween=NewTween;
        Parms.NewLoop=NewLoop;
        Parms.NewStartFrame=NewStartFrame;
        Parms.NewAnimEarlyEndTime=NewAnimEarlyEndTime;
        Parms.NewBlendInTime=NewBlendInTime;
        Parms.NewBlendOutTime=NewBlendOutTime;
        Parms.NewAdjustStart=NewAdjustStart;
        Parms.NewInterrupt=NewInterrupt;
        ProcessEvent(FindFunctionChecked(DNAI_OverrideAnim), &Parms);
        return Parms.ReturnValue;
    }
    inline BITFIELD __fastcall eventIsPlayingOnChannel(FName AnimName, INT ChannelIndex)
    {
        AAIActor_eventIsPlayingOnChannel_Parms Parms;
        Parms.ReturnValue=0;
        Parms.AnimName=AnimName;
        Parms.ChannelIndex=ChannelIndex;
        ProcessEvent(FindFunctionChecked(DNAI_IsPlayingOnChannel), &Parms);
        return Parms.ReturnValue;
    }
    inline BITFIELD __fastcall eventSetAnimGridState(FName AnimGridName, FLOAT X, FLOAT Y, BITFIELD bKeepChannelAlpha)
    {
        AAIActor_eventSetAnimGridState_Parms Parms;
        Parms.ReturnValue=0;
        Parms.AnimGridName=AnimGridName;
        Parms.X=X;
        Parms.Y=Y;
        Parms.bKeepChannelAlpha=bKeepChannelAlpha;
        ProcessEvent(FindFunctionChecked(DNAI_SetAnimGridState), &Parms);
        return Parms.ReturnValue;
    }
    inline BITFIELD __fastcall eventPlayAnim(FName AnimName, FLOAT Rate, BITFIELD Reset, BITFIELD UseExactAnimName)
    {
        AAIActor_eventPlayAnim_Parms Parms;
        Parms.ReturnValue=0;
        Parms.AnimName=AnimName;
        Parms.Rate=Rate;
        Parms.Reset=Reset;
        Parms.UseExactAnimName=UseExactAnimName;
        ProcessEvent(FindFunctionChecked(DNAI_PlayAnim), &Parms);
        return Parms.ReturnValue;
    }
    inline BITFIELD __fastcall eventSetAnimController(/* EAIAnimController */ BYTE eController)
    {
        AAIActor_eventSetAnimController_Parms Parms;
        Parms.ReturnValue=0;
        Parms.eController=eController;
        ProcessEvent(FindFunctionChecked(DNAI_SetAnimController), &Parms);
        return Parms.ReturnValue;
    }
    inline void __fastcall eventInitializeAnimControllers()
    {
        ProcessEvent(FindFunctionChecked(DNAI_InitializeAnimControllers), NULL);
    }
    inline BITFIELD __fastcall eventGetPainAnimName(FName& AnimName, /* EAIAnimController */ BYTE& NextAnimCtrl, /* EPawnBodyPart */ BYTE& WoundedPart, /* EAIArcSector */ BYTE& WoundSector)
    {
        AAIActor_eventGetPainAnimName_Parms Parms;
        Parms.ReturnValue=0;
        Parms.AnimName=AnimName;
        Parms.NextAnimCtrl=NextAnimCtrl;
        Parms.WoundedPart=WoundedPart;
        Parms.WoundSector=WoundSector;
        ProcessEvent(FindFunctionChecked(DNAI_GetPainAnimName), &Parms);
        AnimName=Parms.AnimName;
        NextAnimCtrl=Parms.NextAnimCtrl;
        WoundedPart=Parms.WoundedPart;
        WoundSector=Parms.WoundSector;
        return Parms.ReturnValue;
    }
    inline BITFIELD __fastcall eventGetDeathAnimName(FName& AnimName, FName& FinishMeAnimName, FName& FinishMeReviveAnimName, FLOAT& FinishMeTimeout, INT& UseExactAnimName)
    {
        AAIActor_eventGetDeathAnimName_Parms Parms;
        Parms.ReturnValue=0;
        Parms.AnimName=AnimName;
        Parms.FinishMeAnimName=FinishMeAnimName;
        Parms.FinishMeReviveAnimName=FinishMeReviveAnimName;
        Parms.FinishMeTimeout=FinishMeTimeout;
        Parms.UseExactAnimName=UseExactAnimName;
        ProcessEvent(FindFunctionChecked(DNAI_GetDeathAnimName), &Parms);
        AnimName=Parms.AnimName;
        FinishMeAnimName=Parms.FinishMeAnimName;
        FinishMeReviveAnimName=Parms.FinishMeReviveAnimName;
        FinishMeTimeout=Parms.FinishMeTimeout;
        UseExactAnimName=Parms.UseExactAnimName;
        return Parms.ReturnValue;
    }
    inline void __fastcall eventSetRefPose()
    {
        ProcessEvent(FindFunctionChecked(DNAI_SetRefPose), NULL);
    }
    inline BITFIELD __fastcall eventWeaponActive()
    {
        AAIActor_eventWeaponActive_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNAI_WeaponActive), &Parms);
        return Parms.ReturnValue;
    }
    inline BITFIELD __fastcall eventShouldUseWeaponActiveIdle()
    {
        AAIActor_eventShouldUseWeaponActiveIdle_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNAI_ShouldUseWeaponActiveIdle), &Parms);
        return Parms.ReturnValue;
    }
    inline BITFIELD __fastcall eventShouldUseWeaponActiveMovement()
    {
        AAIActor_eventShouldUseWeaponActiveMovement_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNAI_ShouldUseWeaponActiveMovement), &Parms);
        return Parms.ReturnValue;
    }
    inline FName __fastcall eventGetIdleAnimName()
    {
        AAIActor_eventGetIdleAnimName_Parms Parms;
        Parms.ReturnValue=NAME_None;
        ProcessEvent(FindFunctionChecked(DNAI_GetIdleAnimName), &Parms);
        return Parms.ReturnValue;
    }
    inline FName __fastcall eventGetShootProjectileAnimName()
    {
        AAIActor_eventGetShootProjectileAnimName_Parms Parms;
        Parms.ReturnValue=NAME_None;
        ProcessEvent(FindFunctionChecked(DNAI_GetShootProjectileAnimName), &Parms);
        return Parms.ReturnValue;
    }
    inline FName __fastcall eventGetMeleeAttackAnimName()
    {
        AAIActor_eventGetMeleeAttackAnimName_Parms Parms;
        Parms.ReturnValue=NAME_None;
        ProcessEvent(FindFunctionChecked(DNAI_GetMeleeAttackAnimName), &Parms);
        return Parms.ReturnValue;
    }
    inline BITFIELD __fastcall eventExecuteState_FreeMove()
    {
        AAIActor_eventExecuteState_FreeMove_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNAI_ExecuteState_FreeMove), &Parms);
        return Parms.ReturnValue;
    }
    inline /* EAICode */ BYTE __fastcall eventCanUseState_FreeMoveGoto(FVector TargetPos, FLOAT ExitTime)
    {
        AAIActor_eventCanUseState_FreeMoveGoto_Parms Parms;
        Parms.ReturnValue=0;
        Parms.TargetPos=TargetPos;
        Parms.ExitTime=ExitTime;
        ProcessEvent(FindFunctionChecked(DNAI_CanUseState_FreeMoveGoto), &Parms);
        return Parms.ReturnValue;
    }
    inline /* EAICode */ BYTE __fastcall eventCanUseState_FreeMoveCharge(FLOAT ExitTime)
    {
        AAIActor_eventCanUseState_FreeMoveCharge_Parms Parms;
        Parms.ReturnValue=0;
        Parms.ExitTime=ExitTime;
        ProcessEvent(FindFunctionChecked(DNAI_CanUseState_FreeMoveCharge), &Parms);
        return Parms.ReturnValue;
    }
    inline /* EAICode */ BYTE __fastcall eventCanUseState_FreeMoveRest(FLOAT ExitTime)
    {
        AAIActor_eventCanUseState_FreeMoveRest_Parms Parms;
        Parms.ReturnValue=0;
        Parms.ExitTime=ExitTime;
        ProcessEvent(FindFunctionChecked(DNAI_CanUseState_FreeMoveRest), &Parms);
        return Parms.ReturnValue;
    }
    inline /* EAICode */ BYTE __fastcall eventCanUseState_FreeMoveHover(FLOAT ExitTime)
    {
        AAIActor_eventCanUseState_FreeMoveHover_Parms Parms;
        Parms.ReturnValue=0;
        Parms.ExitTime=ExitTime;
        ProcessEvent(FindFunctionChecked(DNAI_CanUseState_FreeMoveHover), &Parms);
        return Parms.ReturnValue;
    }
    inline /* EAICode */ BYTE __fastcall eventCanUseState_FreeMoveFloat(FLOAT ExitTime)
    {
        AAIActor_eventCanUseState_FreeMoveFloat_Parms Parms;
        Parms.ReturnValue=0;
        Parms.ExitTime=ExitTime;
        ProcessEvent(FindFunctionChecked(DNAI_CanUseState_FreeMoveFloat), &Parms);
        return Parms.ReturnValue;
    }
    inline /* EAICode */ BYTE __fastcall eventCanUseState_FreeMoveCircleStrafe(FLOAT ExitTime)
    {
        AAIActor_eventCanUseState_FreeMoveCircleStrafe_Parms Parms;
        Parms.ReturnValue=0;
        Parms.ExitTime=ExitTime;
        ProcessEvent(FindFunctionChecked(DNAI_CanUseState_FreeMoveCircleStrafe), &Parms);
        return Parms.ReturnValue;
    }
    inline /* EAICode */ BYTE __fastcall eventCanUseState_FreeMoveFlank(FLOAT ExitTime)
    {
        AAIActor_eventCanUseState_FreeMoveFlank_Parms Parms;
        Parms.ReturnValue=0;
        Parms.ExitTime=ExitTime;
        ProcessEvent(FindFunctionChecked(DNAI_CanUseState_FreeMoveFlank), &Parms);
        return Parms.ReturnValue;
    }
    inline BITFIELD __fastcall eventExecuteState_UseX()
    {
        AAIActor_eventExecuteState_UseX_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNAI_ExecuteState_UseX), &Parms);
        return Parms.ReturnValue;
    }
    inline /* EAICode */ BYTE __fastcall eventCanUseState_UseXExplicit(class AdnUsableSomething* UsableSomething, class AAIInputDispatcher_Base* InputDispatcher)
    {
        AAIActor_eventCanUseState_UseXExplicit_Parms Parms;
        Parms.ReturnValue=0;
        Parms.UsableSomething=UsableSomething;
        Parms.InputDispatcher=InputDispatcher;
        ProcessEvent(FindFunctionChecked(DNAI_CanUseState_UseXExplicit), &Parms);
        return Parms.ReturnValue;
    }
    inline /* EAICode */ BYTE __fastcall eventCanUseState_UseX(class AActor* TargetActor, FName InputDispatcherTag, FName AttachedEvent, INT Attempts, FLOAT AttemptInterval, BITFIELD ForceAttach, BITFIELD AllowProceduralAim)
    {
        AAIActor_eventCanUseState_UseX_Parms Parms;
        Parms.ReturnValue=0;
        Parms.TargetActor=TargetActor;
        Parms.InputDispatcherTag=InputDispatcherTag;
        Parms.AttachedEvent=AttachedEvent;
        Parms.Attempts=Attempts;
        Parms.AttemptInterval=AttemptInterval;
        Parms.ForceAttach=ForceAttach;
        Parms.AllowProceduralAim=AllowProceduralAim;
        ProcessEvent(FindFunctionChecked(DNAI_CanUseState_UseX), &Parms);
        return Parms.ReturnValue;
    }
    inline void __fastcall eventFinalizeTurn(FVector FacePos)
    {
        AAIActor_eventFinalizeTurn_Parms Parms;
        Parms.FacePos=FacePos;
        ProcessEvent(FindFunctionChecked(DNAI_FinalizeTurn), &Parms);
    }
    inline BITFIELD __fastcall eventExecuteState_TurnToX()
    {
        AAIActor_eventExecuteState_TurnToX_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNAI_ExecuteState_TurnToX), &Parms);
        return Parms.ReturnValue;
    }
    inline /* EAICode */ BYTE __fastcall eventCanUseState_TurnToTarget(/* EAITarget */ BYTE Targ, FLOAT ShouldTurnThresh, FLOAT FaceThresh, FLOAT ExitTime, FLOAT AnimThresh)
    {
        AAIActor_eventCanUseState_TurnToTarget_Parms Parms;
        Parms.ReturnValue=0;
        Parms.Targ=Targ;
        Parms.ShouldTurnThresh=ShouldTurnThresh;
        Parms.FaceThresh=FaceThresh;
        Parms.ExitTime=ExitTime;
        Parms.AnimThresh=AnimThresh;
        ProcessEvent(FindFunctionChecked(DNAI_CanUseState_TurnToTarget), &Parms);
        return Parms.ReturnValue;
    }
    inline /* EAICode */ BYTE __fastcall eventCanUseState_TurnToPos(FVector TargetPos, FLOAT ShouldTurnThresh, FLOAT FaceThresh, FLOAT ExitTime, FLOAT AnimThresh)
    {
        AAIActor_eventCanUseState_TurnToPos_Parms Parms;
        Parms.ReturnValue=0;
        Parms.TargetPos=TargetPos;
        Parms.ShouldTurnThresh=ShouldTurnThresh;
        Parms.FaceThresh=FaceThresh;
        Parms.ExitTime=ExitTime;
        Parms.AnimThresh=AnimThresh;
        ProcessEvent(FindFunctionChecked(DNAI_CanUseState_TurnToPos), &Parms);
        return Parms.ReturnValue;
    }
    inline /* EAICode */ BYTE __fastcall eventCanUseState_TurnToActor(class AActor* TargetActor, FLOAT ShouldTurnThresh, FLOAT FaceThresh, FLOAT ExitTime, FLOAT AnimThresh)
    {
        AAIActor_eventCanUseState_TurnToActor_Parms Parms;
        Parms.ReturnValue=0;
        Parms.TargetActor=TargetActor;
        Parms.ShouldTurnThresh=ShouldTurnThresh;
        Parms.FaceThresh=FaceThresh;
        Parms.ExitTime=ExitTime;
        Parms.AnimThresh=AnimThresh;
        ProcessEvent(FindFunctionChecked(DNAI_CanUseState_TurnToActor), &Parms);
        return Parms.ReturnValue;
    }
    inline BITFIELD __fastcall eventExecuteState_Stun()
    {
        AAIActor_eventExecuteState_Stun_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNAI_ExecuteState_Stun), &Parms);
        return Parms.ReturnValue;
    }
    inline /* EAICode */ BYTE __fastcall eventCanUseState_Stun(FLOAT Time)
    {
        AAIActor_eventCanUseState_Stun_Parms Parms;
        Parms.ReturnValue=0;
        Parms.Time=Time;
        ProcessEvent(FindFunctionChecked(DNAI_CanUseState_Stun), &Parms);
        return Parms.ReturnValue;
    }
    inline void __fastcall eventSetFireModeDontIdle(BITFIELD bDontPlayIdle)
    {
        AAIActor_eventSetFireModeDontIdle_Parms Parms;
        Parms.bDontPlayIdle=bDontPlayIdle;
        ProcessEvent(FindFunctionChecked(DNAI_SetFireModeDontIdle), &Parms);
    }
    inline BITFIELD __fastcall eventExecuteState_SetFireMode()
    {
        AAIActor_eventExecuteState_SetFireMode_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNAI_ExecuteState_SetFireMode), &Parms);
        return Parms.ReturnValue;
    }
    inline /* EAICode */ BYTE __fastcall eventCanUseState_SetFireMode(BITFIELD On, BITFIELD Expedite)
    {
        AAIActor_eventCanUseState_SetFireMode_Parms Parms;
        Parms.ReturnValue=0;
        Parms.On=On;
        Parms.Expedite=Expedite;
        ProcessEvent(FindFunctionChecked(DNAI_CanUseState_SetFireMode), &Parms);
        return Parms.ReturnValue;
    }
    inline BITFIELD __fastcall eventExecuteState_SetAim(FLOAT Time)
    {
        AAIActor_eventExecuteState_SetAim_Parms Parms;
        Parms.ReturnValue=0;
        Parms.Time=Time;
        ProcessEvent(FindFunctionChecked(DNAI_ExecuteState_SetAim), &Parms);
        return Parms.ReturnValue;
    }
    inline /* EAICode */ BYTE __fastcall eventCanUseState_SetAim(BITFIELD On)
    {
        AAIActor_eventCanUseState_SetAim_Parms Parms;
        Parms.ReturnValue=0;
        Parms.On=On;
        ProcessEvent(FindFunctionChecked(DNAI_CanUseState_SetAim), &Parms);
        return Parms.ReturnValue;
    }
    inline BITFIELD __fastcall eventExecuteState_SelectWeapon()
    {
        AAIActor_eventExecuteState_SelectWeapon_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNAI_ExecuteState_SelectWeapon), &Parms);
        return Parms.ReturnValue;
    }
    inline /* EAICode */ BYTE __fastcall eventCanUseState_SelectWeapon(class UClass* DesiredWeaponClass, BITFIELD QuickWeaponSwitch)
    {
        AAIActor_eventCanUseState_SelectWeapon_Parms Parms;
        Parms.ReturnValue=0;
        Parms.DesiredWeaponClass=DesiredWeaponClass;
        Parms.QuickWeaponSwitch=QuickWeaponSwitch;
        ProcessEvent(FindFunctionChecked(DNAI_CanUseState_SelectWeapon), &Parms);
        return Parms.ReturnValue;
    }
    inline BITFIELD __fastcall eventExecuteState_PhysicsGotoX()
    {
        AAIActor_eventExecuteState_PhysicsGotoX_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNAI_ExecuteState_PhysicsGotoX), &Parms);
        return Parms.ReturnValue;
    }
    inline /* EAICode */ BYTE __fastcall eventCanUseState_PhysicsGotoTargetActor()
    {
        AAIActor_eventCanUseState_PhysicsGotoTargetActor_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNAI_CanUseState_PhysicsGotoTargetActor), &Parms);
        return Parms.ReturnValue;
    }
    inline BITFIELD __fastcall eventExecuteState_PlaceTripMine()
    {
        AAIActor_eventExecuteState_PlaceTripMine_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNAI_ExecuteState_PlaceTripMine), &Parms);
        return Parms.ReturnValue;
    }
    inline /* EAICode */ BYTE __fastcall eventCanUseState_PlaceTripMine(class AActor* TargetActor)
    {
        AAIActor_eventCanUseState_PlaceTripMine_Parms Parms;
        Parms.ReturnValue=0;
        Parms.TargetActor=TargetActor;
        ProcessEvent(FindFunctionChecked(DNAI_CanUseState_PlaceTripMine), &Parms);
        return Parms.ReturnValue;
    }
    inline BITFIELD __fastcall eventExecuteState_Pause()
    {
        AAIActor_eventExecuteState_Pause_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNAI_ExecuteState_Pause), &Parms);
        return Parms.ReturnValue;
    }
    inline /* EAICode */ BYTE __fastcall eventCanUseState_Pause(FLOAT Time)
    {
        AAIActor_eventCanUseState_Pause_Parms Parms;
        Parms.ReturnValue=0;
        Parms.Time=Time;
        ProcessEvent(FindFunctionChecked(DNAI_CanUseState_Pause), &Parms);
        return Parms.ReturnValue;
    }
    inline BITFIELD __fastcall eventExecuteState_MoveUnderground()
    {
        AAIActor_eventExecuteState_MoveUnderground_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNAI_ExecuteState_MoveUnderground), &Parms);
        return Parms.ReturnValue;
    }
    inline /* EAICode */ BYTE __fastcall eventCanUseState_MoveUnderground(FVector DestLocation, FRotator DestRotation, FLOAT Time)
    {
        AAIActor_eventCanUseState_MoveUnderground_Parms Parms;
        Parms.ReturnValue=0;
        Parms.DestLocation=DestLocation;
        Parms.DestRotation=DestRotation;
        Parms.Time=Time;
        ProcessEvent(FindFunctionChecked(DNAI_CanUseState_MoveUnderground), &Parms);
        return Parms.ReturnValue;
    }
    inline FLOAT __fastcall eventCalcJumpAttackHeight(class AActor* TargetActor)
    {
        AAIActor_eventCalcJumpAttackHeight_Parms Parms;
        Parms.ReturnValue=0;
        Parms.TargetActor=TargetActor;
        ProcessEvent(FindFunctionChecked(DNAI_CalcJumpAttackHeight), &Parms);
        return Parms.ReturnValue;
    }
    inline FVector __fastcall eventGetJumpAttackTargetPos(class AActor* TargetActor)
    {
        AAIActor_eventGetJumpAttackTargetPos_Parms Parms;
        Parms.ReturnValue.Init();
        Parms.TargetActor=TargetActor;
        ProcessEvent(FindFunctionChecked(DNAI_GetJumpAttackTargetPos), &Parms);
        return Parms.ReturnValue;
    }
    inline BITFIELD __fastcall eventShouldJumpAttackShrunk(class AActor* Target)
    {
        AAIActor_eventShouldJumpAttackShrunk_Parms Parms;
        Parms.ReturnValue=0;
        Parms.Target=Target;
        ProcessEvent(FindFunctionChecked(DNAI_ShouldJumpAttackShrunk), &Parms);
        return Parms.ReturnValue;
    }
    inline void __fastcall eventStateJumpAttack_Apply(FVector& MyJumpVel)
    {
        AAIActor_eventStateJumpAttack_Apply_Parms Parms;
        Parms.MyJumpVel=MyJumpVel;
        ProcessEvent(FindFunctionChecked(DNAI_StateJumpAttack_Apply), &Parms);
        MyJumpVel=Parms.MyJumpVel;
    }
    inline BITFIELD __fastcall eventExecuteState_JumpAttack(class AActor* TargetActor, INT Type, BITFIELD AttackOnTakeoff)
    {
        AAIActor_eventExecuteState_JumpAttack_Parms Parms;
        Parms.ReturnValue=0;
        Parms.TargetActor=TargetActor;
        Parms.Type=Type;
        Parms.AttackOnTakeoff=AttackOnTakeoff;
        ProcessEvent(FindFunctionChecked(DNAI_ExecuteState_JumpAttack), &Parms);
        return Parms.ReturnValue;
    }
    inline /* EAICode */ BYTE __fastcall eventCanUseState_JumpAttackPreset(FVector PresetVelocity)
    {
        AAIActor_eventCanUseState_JumpAttackPreset_Parms Parms;
        Parms.ReturnValue=0;
        Parms.PresetVelocity=PresetVelocity;
        ProcessEvent(FindFunctionChecked(DNAI_CanUseState_JumpAttackPreset), &Parms);
        return Parms.ReturnValue;
    }
    inline /* EAICode */ BYTE __fastcall eventCanUseState_JumpAttackPresetInstant(FVector PresetVelocity)
    {
        AAIActor_eventCanUseState_JumpAttackPresetInstant_Parms Parms;
        Parms.ReturnValue=0;
        Parms.PresetVelocity=PresetVelocity;
        ProcessEvent(FindFunctionChecked(DNAI_CanUseState_JumpAttackPresetInstant), &Parms);
        return Parms.ReturnValue;
    }
    inline /* EAICode */ BYTE __fastcall eventCanUseState_JumpAttackDodge()
    {
        AAIActor_eventCanUseState_JumpAttackDodge_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNAI_CanUseState_JumpAttackDodge), &Parms);
        return Parms.ReturnValue;
    }
    inline /* EAICode */ BYTE __fastcall eventCanUseState_JumpAttack()
    {
        AAIActor_eventCanUseState_JumpAttack_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNAI_CanUseState_JumpAttack), &Parms);
        return Parms.ReturnValue;
    }
    inline BITFIELD __fastcall eventExecuteState_Jump()
    {
        AAIActor_eventExecuteState_Jump_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNAI_ExecuteState_Jump), &Parms);
        return Parms.ReturnValue;
    }
    inline /* EAICode */ BYTE __fastcall eventCanUseState_JumpToTargetPos()
    {
        AAIActor_eventCanUseState_JumpToTargetPos_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNAI_CanUseState_JumpToTargetPos), &Parms);
        return Parms.ReturnValue;
    }
    inline /* EAICode */ BYTE __fastcall eventCanUseState_JumpTakeOff(FVector JumpVel, FLOAT TakeOffIdleTime, class AActor* FocusActor, FLOAT GravityScale, FVector TakeOffTarget)
    {
        AAIActor_eventCanUseState_JumpTakeOff_Parms Parms;
        Parms.ReturnValue=0;
        Parms.JumpVel=JumpVel;
        Parms.TakeOffIdleTime=TakeOffIdleTime;
        Parms.FocusActor=FocusActor;
        Parms.GravityScale=GravityScale;
        Parms.TakeOffTarget=TakeOffTarget;
        ProcessEvent(FindFunctionChecked(DNAI_CanUseState_JumpTakeOff), &Parms);
        return Parms.ReturnValue;
    }
    inline /* EAICode */ BYTE __fastcall eventCanUseState_Jump(FVector JumpVel, FLOAT HeavyLandingThresh, class AActor* FocusActor, FLOAT FlyingGravityScale, FLOAT JumpTime, FVector TargetPos, INT JumpType, BITFIELD bSnapToTargetDuringLand, BITFIELD bUseAccelaration, BITFIELD bFaceTarget)
    {
        AAIActor_eventCanUseState_Jump_Parms Parms;
        Parms.ReturnValue=0;
        Parms.JumpVel=JumpVel;
        Parms.HeavyLandingThresh=HeavyLandingThresh;
        Parms.FocusActor=FocusActor;
        Parms.FlyingGravityScale=FlyingGravityScale;
        Parms.JumpTime=JumpTime;
        Parms.TargetPos=TargetPos;
        Parms.JumpType=JumpType;
        Parms.bSnapToTargetDuringLand=bSnapToTargetDuringLand;
        Parms.bUseAccelaration=bUseAccelaration;
        Parms.bFaceTarget=bFaceTarget;
        ProcessEvent(FindFunctionChecked(DNAI_CanUseState_Jump), &Parms);
        return Parms.ReturnValue;
    }
    inline BITFIELD __fastcall eventExecuteState_Hide()
    {
        AAIActor_eventExecuteState_Hide_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNAI_ExecuteState_Hide), &Parms);
        return Parms.ReturnValue;
    }
    inline /* EAICode */ BYTE __fastcall eventCanUseState_Hide()
    {
        AAIActor_eventCanUseState_Hide_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNAI_CanUseState_Hide), &Parms);
        return Parms.ReturnValue;
    }
    inline BITFIELD __fastcall eventShouldHaywireExplode()
    {
        AAIActor_eventShouldHaywireExplode_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNAI_ShouldHaywireExplode), &Parms);
        return Parms.ReturnValue;
    }
    inline void __fastcall eventExecuteHaywireExplode(FVector HitNormal)
    {
        AAIActor_eventExecuteHaywireExplode_Parms Parms;
        Parms.HitNormal=HitNormal;
        ProcessEvent(FindFunctionChecked(DNAI_ExecuteHaywireExplode), &Parms);
    }
    inline BITFIELD __fastcall eventExecuteState_Haywire()
    {
        AAIActor_eventExecuteState_Haywire_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNAI_ExecuteState_Haywire), &Parms);
        return Parms.ReturnValue;
    }
    inline /* EAICode */ BYTE __fastcall eventCanUseState_Haywire(FLOAT MinDuration, FLOAT MaxDuration, FVector LinearAccel, FVector LinearAccelVar, FVector AngularAccel, FVector AngularAccelVar)
    {
        AAIActor_eventCanUseState_Haywire_Parms Parms;
        Parms.ReturnValue=0;
        Parms.MinDuration=MinDuration;
        Parms.MaxDuration=MaxDuration;
        Parms.LinearAccel=LinearAccel;
        Parms.LinearAccelVar=LinearAccelVar;
        Parms.AngularAccel=AngularAccel;
        Parms.AngularAccelVar=AngularAccelVar;
        ProcessEvent(FindFunctionChecked(DNAI_CanUseState_Haywire), &Parms);
        return Parms.ReturnValue;
    }
    inline BITFIELD __fastcall eventShouldSnapToDestination()
    {
        AAIActor_eventShouldSnapToDestination_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNAI_ShouldSnapToDestination), &Parms);
        return Parms.ReturnValue;
    }
    inline BITFIELD __fastcall eventExecuteState_GotoX(/* EAIMoveSpeed */ BYTE Speed, FLOAT SideArcTurnSpeedThresh, FLOAT StepBackwardsSpeedThresh, FLOAT StartAngleSideSector, FLOAT StartAngleBackSector, FLOAT MoveBackwardsDistThresh, FLOAT SideStepDistThresh)
    {
        AAIActor_eventExecuteState_GotoX_Parms Parms;
        Parms.ReturnValue=0;
        Parms.Speed=Speed;
        Parms.SideArcTurnSpeedThresh=SideArcTurnSpeedThresh;
        Parms.StepBackwardsSpeedThresh=StepBackwardsSpeedThresh;
        Parms.StartAngleSideSector=StartAngleSideSector;
        Parms.StartAngleBackSector=StartAngleBackSector;
        Parms.MoveBackwardsDistThresh=MoveBackwardsDistThresh;
        Parms.SideStepDistThresh=SideStepDistThresh;
        ProcessEvent(FindFunctionChecked(DNAI_ExecuteState_GotoX), &Parms);
        return Parms.ReturnValue;
    }
    inline FLOAT __fastcall eventGetDefaultGotoXHeight()
    {
        AAIActor_eventGetDefaultGotoXHeight_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNAI_GetDefaultGotoXHeight), &Parms);
        return Parms.ReturnValue;
    }
    inline FLOAT __fastcall eventGetDefaultGotoXRange(FLOAT Range)
    {
        AAIActor_eventGetDefaultGotoXRange_Parms Parms;
        Parms.ReturnValue=0;
        Parms.Range=Range;
        ProcessEvent(FindFunctionChecked(DNAI_GetDefaultGotoXRange), &Parms);
        return Parms.ReturnValue;
    }
    inline /* EAICode */ BYTE __fastcall eventCanUseState_GotoLandPos(FVector GoalPos, class AActor* FocusActor)
    {
        AAIActor_eventCanUseState_GotoLandPos_Parms Parms;
        Parms.ReturnValue=0;
        Parms.GoalPos=GoalPos;
        Parms.FocusActor=FocusActor;
        ProcessEvent(FindFunctionChecked(DNAI_CanUseState_GotoLandPos), &Parms);
        return Parms.ReturnValue;
    }
    inline /* EAICode */ BYTE __fastcall eventCanUseState_GotoPos(FVector TargetPos, class AActor* RefActor, FLOAT Range, FLOAT Height, FLOAT ClipTolerance, /* EAIFocus */ BYTE Focus, class AActor* FocusActor, INT MaxSteps, BITFIELD bDebug, FVector TargetExtent)
    {
        AAIActor_eventCanUseState_GotoPos_Parms Parms;
        Parms.ReturnValue=0;
        Parms.TargetPos=TargetPos;
        Parms.RefActor=RefActor;
        Parms.Range=Range;
        Parms.Height=Height;
        Parms.ClipTolerance=ClipTolerance;
        Parms.Focus=Focus;
        Parms.FocusActor=FocusActor;
        Parms.MaxSteps=MaxSteps;
        Parms.bDebug=bDebug;
        Parms.TargetExtent=TargetExtent;
        ProcessEvent(FindFunctionChecked(DNAI_CanUseState_GotoPos), &Parms);
        return Parms.ReturnValue;
    }
    inline /* EAICode */ BYTE __fastcall eventCanUseState_GotoActor(class AActor* TargetActor, class AActor* RefActor, /* EAIOffsetType */ BYTE OffsetType, FLOAT Range, FLOAT Bearing, FLOAT Height, FLOAT ClipTolerance, /* EAIFocus */ BYTE Focus, class AActor* FocusActor, INT MaxSteps, BITFIELD bDebug, FVector TargetExtent)
    {
        AAIActor_eventCanUseState_GotoActor_Parms Parms;
        Parms.ReturnValue=0;
        Parms.TargetActor=TargetActor;
        Parms.RefActor=RefActor;
        Parms.OffsetType=OffsetType;
        Parms.Range=Range;
        Parms.Bearing=Bearing;
        Parms.Height=Height;
        Parms.ClipTolerance=ClipTolerance;
        Parms.Focus=Focus;
        Parms.FocusActor=FocusActor;
        Parms.MaxSteps=MaxSteps;
        Parms.bDebug=bDebug;
        Parms.TargetExtent=TargetExtent;
        ProcessEvent(FindFunctionChecked(DNAI_CanUseState_GotoActor), &Parms);
        return Parms.ReturnValue;
    }
    inline void __fastcall eventUpdateDoor()
    {
        ProcessEvent(FindFunctionChecked(DNAI_UpdateDoor), NULL);
    }
    inline BITFIELD __fastcall eventExecuteState_FUBAR()
    {
        AAIActor_eventExecuteState_FUBAR_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNAI_ExecuteState_FUBAR), &Parms);
        return Parms.ReturnValue;
    }
    inline /* EAICode */ BYTE __fastcall eventCanUseState_FUBAR()
    {
        AAIActor_eventCanUseState_FUBAR_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNAI_CanUseState_FUBAR), &Parms);
        return Parms.ReturnValue;
    }
    inline BITFIELD __fastcall eventExecuteState_FireWeapon()
    {
        AAIActor_eventExecuteState_FireWeapon_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNAI_ExecuteState_FireWeapon), &Parms);
        return Parms.ReturnValue;
    }
    inline /* EAICode */ BYTE __fastcall eventCanUseState_FireWeapon(INT ShotsToFire)
    {
        AAIActor_eventCanUseState_FireWeapon_Parms Parms;
        Parms.ReturnValue=0;
        Parms.ShotsToFire=ShotsToFire;
        ProcessEvent(FindFunctionChecked(DNAI_CanUseState_FireWeapon), &Parms);
        return Parms.ReturnValue;
    }
    inline BITFIELD __fastcall eventExecuteState_Fall()
    {
        AAIActor_eventExecuteState_Fall_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNAI_ExecuteState_Fall), &Parms);
        return Parms.ReturnValue;
    }
    inline /* EAICode */ BYTE __fastcall eventCanUseState_Fall(FLOAT LandingThresh, FLOAT HeavyLandingThresh)
    {
        AAIActor_eventCanUseState_Fall_Parms Parms;
        Parms.ReturnValue=0;
        Parms.LandingThresh=LandingThresh;
        Parms.HeavyLandingThresh=HeavyLandingThresh;
        ProcessEvent(FindFunctionChecked(DNAI_CanUseState_Fall), &Parms);
        return Parms.ReturnValue;
    }
    inline BITFIELD __fastcall eventExecuteState_ControlX()
    {
        AAIActor_eventExecuteState_ControlX_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNAI_ExecuteState_ControlX), &Parms);
        return Parms.ReturnValue;
    }
    inline void __fastcall eventAttachControlX(class AdnControl* MyControl)
    {
        AAIActor_eventAttachControlX_Parms Parms;
        Parms.MyControl=MyControl;
        ProcessEvent(FindFunctionChecked(DNAI_AttachControlX), &Parms);
    }
    inline /* EAICode */ BYTE __fastcall eventCanUseState_ControlX(class UClass* ControlType, FName AnimName, FLOAT MaxTime)
    {
        AAIActor_eventCanUseState_ControlX_Parms Parms;
        Parms.ReturnValue=0;
        Parms.ControlType=ControlType;
        Parms.AnimName=AnimName;
        Parms.MaxTime=MaxTime;
        ProcessEvent(FindFunctionChecked(DNAI_CanUseState_ControlX), &Parms);
        return Parms.ReturnValue;
    }
    inline BITFIELD __fastcall eventIsSyncing(class AAIActor*& TargetSyncActor)
    {
        AAIActor_eventIsSyncing_Parms Parms;
        Parms.ReturnValue=0;
        Parms.TargetSyncActor=TargetSyncActor;
        ProcessEvent(FindFunctionChecked(DNAI_IsSyncing), &Parms);
        TargetSyncActor=Parms.TargetSyncActor;
        return Parms.ReturnValue;
    }
    inline BITFIELD __fastcall eventExecuteState_Anim()
    {
        AAIActor_eventExecuteState_Anim_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNAI_ExecuteState_Anim), &Parms);
        return Parms.ReturnValue;
    }
    inline /* EAICode */ BYTE __fastcall eventCanUseState_AnimSyncActor(FName AnimName, FName SyncWaitAnimName, BITFIELD UseExactAnimName, class AAIActor* TargetSyncActor, FVector TargetSyncPos, FVector TargetFacePos, BITFIELD MustFinish, BITFIELD FinishAlone, FLOAT ExitTime)
    {
        AAIActor_eventCanUseState_AnimSyncActor_Parms Parms;
        Parms.ReturnValue=0;
        Parms.AnimName=AnimName;
        Parms.SyncWaitAnimName=SyncWaitAnimName;
        Parms.UseExactAnimName=UseExactAnimName;
        Parms.TargetSyncActor=TargetSyncActor;
        Parms.TargetSyncPos=TargetSyncPos;
        Parms.TargetFacePos=TargetFacePos;
        Parms.MustFinish=MustFinish;
        Parms.FinishAlone=FinishAlone;
        Parms.ExitTime=ExitTime;
        ProcessEvent(FindFunctionChecked(DNAI_CanUseState_AnimSyncActor), &Parms);
        return Parms.ReturnValue;
    }
    inline /* EAICode */ BYTE __fastcall eventCanUseState_AnimSyncPosRot(FName AnimName, FName SyncWaitAnimName, BITFIELD UseExactAnimName, FVector TargetSyncPos, FVector TargetFacePos, BITFIELD MustFinish, FLOAT ExitTime)
    {
        AAIActor_eventCanUseState_AnimSyncPosRot_Parms Parms;
        Parms.ReturnValue=0;
        Parms.AnimName=AnimName;
        Parms.SyncWaitAnimName=SyncWaitAnimName;
        Parms.UseExactAnimName=UseExactAnimName;
        Parms.TargetSyncPos=TargetSyncPos;
        Parms.TargetFacePos=TargetFacePos;
        Parms.MustFinish=MustFinish;
        Parms.ExitTime=ExitTime;
        ProcessEvent(FindFunctionChecked(DNAI_CanUseState_AnimSyncPosRot), &Parms);
        return Parms.ReturnValue;
    }
    inline /* EAICode */ BYTE __fastcall eventCanUseState_AnimFaceTarget(FName AnimName, BITFIELD UseExactAnimName, /* EAITarget */ BYTE Targ, FLOAT FaceThreshold, FLOAT ExitTime)
    {
        AAIActor_eventCanUseState_AnimFaceTarget_Parms Parms;
        Parms.ReturnValue=0;
        Parms.AnimName=AnimName;
        Parms.UseExactAnimName=UseExactAnimName;
        Parms.Targ=Targ;
        Parms.FaceThreshold=FaceThreshold;
        Parms.ExitTime=ExitTime;
        ProcessEvent(FindFunctionChecked(DNAI_CanUseState_AnimFaceTarget), &Parms);
        return Parms.ReturnValue;
    }
    inline /* EAICode */ BYTE __fastcall eventCanUseState_AnimFacePos(FName AnimName, BITFIELD UseExactAnimName, FVector TargetFacePos, FLOAT FaceThreshold, FLOAT ExitTime)
    {
        AAIActor_eventCanUseState_AnimFacePos_Parms Parms;
        Parms.ReturnValue=0;
        Parms.AnimName=AnimName;
        Parms.UseExactAnimName=UseExactAnimName;
        Parms.TargetFacePos=TargetFacePos;
        Parms.FaceThreshold=FaceThreshold;
        Parms.ExitTime=ExitTime;
        ProcessEvent(FindFunctionChecked(DNAI_CanUseState_AnimFacePos), &Parms);
        return Parms.ReturnValue;
    }
    inline /* EAICode */ BYTE __fastcall eventCanUseState_AnimFaceActor(FName AnimName, BITFIELD UseExactAnimName, class AActor* TargetActor, FLOAT FaceThreshold, FLOAT ExitTime)
    {
        AAIActor_eventCanUseState_AnimFaceActor_Parms Parms;
        Parms.ReturnValue=0;
        Parms.AnimName=AnimName;
        Parms.UseExactAnimName=UseExactAnimName;
        Parms.TargetActor=TargetActor;
        Parms.FaceThreshold=FaceThreshold;
        Parms.ExitTime=ExitTime;
        ProcessEvent(FindFunctionChecked(DNAI_CanUseState_AnimFaceActor), &Parms);
        return Parms.ReturnValue;
    }
    inline /* EAICode */ BYTE __fastcall eventCanUseState_AnimFull(FName AnimName, BITFIELD UseExactAnimName, FLOAT ExitTime)
    {
        AAIActor_eventCanUseState_AnimFull_Parms Parms;
        Parms.ReturnValue=0;
        Parms.AnimName=AnimName;
        Parms.UseExactAnimName=UseExactAnimName;
        Parms.ExitTime=ExitTime;
        ProcessEvent(FindFunctionChecked(DNAI_CanUseState_AnimFull), &Parms);
        return Parms.ReturnValue;
    }
    inline /* EAICode */ BYTE __fastcall eventCanUseState_AnimMustFinish(FName AnimName, BITFIELD UseExactAnimName, FLOAT ExitTime)
    {
        AAIActor_eventCanUseState_AnimMustFinish_Parms Parms;
        Parms.ReturnValue=0;
        Parms.AnimName=AnimName;
        Parms.UseExactAnimName=UseExactAnimName;
        Parms.ExitTime=ExitTime;
        ProcessEvent(FindFunctionChecked(DNAI_CanUseState_AnimMustFinish), &Parms);
        return Parms.ReturnValue;
    }
    inline /* EAICode */ BYTE __fastcall eventCanUseState_AnimFullExitOnLand(FName AnimName, BITFIELD UseExactAnimName, FLOAT ExitTime)
    {
        AAIActor_eventCanUseState_AnimFullExitOnLand_Parms Parms;
        Parms.ReturnValue=0;
        Parms.AnimName=AnimName;
        Parms.UseExactAnimName=UseExactAnimName;
        Parms.ExitTime=ExitTime;
        ProcessEvent(FindFunctionChecked(DNAI_CanUseState_AnimFullExitOnLand), &Parms);
        return Parms.ReturnValue;
    }
    inline /* EAICode */ BYTE __fastcall eventCanUseState_AnimExitOnLand(FName AnimName, BITFIELD UseExactAnimName, FLOAT ExitTime)
    {
        AAIActor_eventCanUseState_AnimExitOnLand_Parms Parms;
        Parms.ReturnValue=0;
        Parms.AnimName=AnimName;
        Parms.UseExactAnimName=UseExactAnimName;
        Parms.ExitTime=ExitTime;
        ProcessEvent(FindFunctionChecked(DNAI_CanUseState_AnimExitOnLand), &Parms);
        return Parms.ReturnValue;
    }
    inline /* EAICode */ BYTE __fastcall eventCanUseState_AnimFailOK(FName AnimName, BITFIELD UseExactAnimName, FLOAT ExitTime)
    {
        AAIActor_eventCanUseState_AnimFailOK_Parms Parms;
        Parms.ReturnValue=0;
        Parms.AnimName=AnimName;
        Parms.UseExactAnimName=UseExactAnimName;
        Parms.ExitTime=ExitTime;
        ProcessEvent(FindFunctionChecked(DNAI_CanUseState_AnimFailOK), &Parms);
        return Parms.ReturnValue;
    }
    inline /* EAICode */ BYTE __fastcall eventCanUseState_Anim(FName AnimName, BITFIELD UseExactAnimName, FLOAT ExitTime)
    {
        AAIActor_eventCanUseState_Anim_Parms Parms;
        Parms.ReturnValue=0;
        Parms.AnimName=AnimName;
        Parms.UseExactAnimName=UseExactAnimName;
        Parms.ExitTime=ExitTime;
        ProcessEvent(FindFunctionChecked(DNAI_CanUseState_Anim), &Parms);
        return Parms.ReturnValue;
    }
    inline void __fastcall eventExitAIState(/* EAIStateStatus */ BYTE Status, const FString& DbgMsg)
    {
        AAIActor_eventExitAIState_Parms Parms;
        Parms.Status=Status;
        Parms.DbgMsg=DbgMsg;
        ProcessEvent(FindFunctionChecked(DNAI_ExitAIState), &Parms);
    }
    inline BITFIELD __fastcall eventExecuteState(FName NewState, FName NewLabel)
    {
        AAIActor_eventExecuteState_Parms Parms;
        Parms.ReturnValue=0;
        Parms.NewState=NewState;
        Parms.NewLabel=NewLabel;
        ProcessEvent(FindFunctionChecked(DNAI_ExecuteState), &Parms);
        return Parms.ReturnValue;
    }
    inline void __fastcall eventEndScriptOp_MoveToPodProtectorBase(/* EAIOpStatus */ BYTE Status)
    {
        AAIActor_eventEndScriptOp_MoveToPodProtectorBase_Parms Parms;
        Parms.Status=Status;
        ProcessEvent(FindFunctionChecked(DNAI_EndScriptOp_MoveToPodProtectorBase), &Parms);
    }
    inline void __fastcall eventEndScriptOp_Example(/* EAIOpStatus */ BYTE Status)
    {
        AAIActor_eventEndScriptOp_Example_Parms Parms;
        Parms.Status=Status;
        ProcessEvent(FindFunctionChecked(DNAI_EndScriptOp_Example), &Parms);
    }
    inline void __fastcall eventEndScriptOp(/* EAIOpStatus */ BYTE Status)
    {
        AAIActor_eventEndScriptOp_Parms Parms;
        Parms.Status=Status;
        ProcessEvent(FindFunctionChecked(DNAI_EndScriptOp), &Parms);
    }
    inline void __fastcall eventNotifyScriptOpExitState(/* EAIStateStatus */ BYTE Status)
    {
        AAIActor_eventNotifyScriptOpExitState_Parms Parms;
        Parms.Status=Status;
        ProcessEvent(FindFunctionChecked(DNAI_NotifyScriptOpExitState), &Parms);
    }
    inline BITFIELD __fastcall eventScriptOpAllowsLook(/* EAIOp */ BYTE Op)
    {
        AAIActor_eventScriptOpAllowsLook_Parms Parms;
        Parms.ReturnValue=0;
        Parms.Op=Op;
        ProcessEvent(FindFunctionChecked(DNAI_ScriptOpAllowsLook), &Parms);
        return Parms.ReturnValue;
    }
    inline BITFIELD __fastcall eventIsOverrideScriptOp(/* EAIOp */ BYTE Op)
    {
        AAIActor_eventIsOverrideScriptOp_Parms Parms;
        Parms.ReturnValue=0;
        Parms.Op=Op;
        ProcessEvent(FindFunctionChecked(DNAI_IsOverrideScriptOp), &Parms);
        return Parms.ReturnValue;
    }
    inline BITFIELD __fastcall eventShouldScriptOpFinish(/* EAIOp */ BYTE Op)
    {
        AAIActor_eventShouldScriptOpFinish_Parms Parms;
        Parms.ReturnValue=0;
        Parms.Op=Op;
        ProcessEvent(FindFunctionChecked(DNAI_ShouldScriptOpFinish), &Parms);
        return Parms.ReturnValue;
    }
    inline BITFIELD __fastcall eventMustScriptOpFinish(/* EAIOp */ BYTE Op)
    {
        AAIActor_eventMustScriptOpFinish_Parms Parms;
        Parms.ReturnValue=0;
        Parms.Op=Op;
        ProcessEvent(FindFunctionChecked(DNAI_MustScriptOpFinish), &Parms);
        return Parms.ReturnValue;
    }
    inline BITFIELD __fastcall eventExecuteScriptOp(/* EAIOp */ BYTE Op)
    {
        AAIActor_eventExecuteScriptOp_Parms Parms;
        Parms.ReturnValue=0;
        Parms.Op=Op;
        ProcessEvent(FindFunctionChecked(DNAI_ExecuteScriptOp), &Parms);
        return Parms.ReturnValue;
    }
    inline /* EAICode */ BYTE __fastcall eventCanUseScriptOp(/* EAIOp */ BYTE Op)
    {
        AAIActor_eventCanUseScriptOp_Parms Parms;
        Parms.ReturnValue=0;
        Parms.Op=Op;
        ProcessEvent(FindFunctionChecked(DNAI_CanUseScriptOp), &Parms);
        return Parms.ReturnValue;
    }
    inline void __fastcall eventNotifyOpEnded(/* EAIOp */ BYTE Op, /* EAIOpStatus */ BYTE Status)
    {
        AAIActor_eventNotifyOpEnded_Parms Parms;
        Parms.Op=Op;
        Parms.Status=Status;
        ProcessEvent(FindFunctionChecked(DNAI_NotifyOpEnded), &Parms);
    }
    inline void __fastcall eventNotifyOpStarted(/* EAIOp */ BYTE NewOp, /* EAIOp */ BYTE OldOp)
    {
        AAIActor_eventNotifyOpStarted_Parms Parms;
        Parms.NewOp=NewOp;
        Parms.OldOp=OldOp;
        ProcessEvent(FindFunctionChecked(DNAI_NotifyOpStarted), &Parms);
    }
    inline BITFIELD __fastcall eventForceGameplayOverridePhysics()
    {
        AAIActor_eventForceGameplayOverridePhysics_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNAI_ForceGameplayOverridePhysics), &Parms);
        return Parms.ReturnValue;
    }
    inline BITFIELD __fastcall eventAIStateOverrideLinearDamping()
    {
        AAIActor_eventAIStateOverrideLinearDamping_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNAI_AIStateOverrideLinearDamping), &Parms);
        return Parms.ReturnValue;
    }
    inline BITFIELD __fastcall eventAllowZMovementWhenNotFlying()
    {
        AAIActor_eventAllowZMovementWhenNotFlying_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNAI_AllowZMovementWhenNotFlying), &Parms);
        return Parms.ReturnValue;
    }
    inline void __fastcall eventKeyFrameEnded()
    {
        ProcessEvent(FindFunctionChecked(DNAI_KeyFrameEnded), NULL);
    }
    inline void __fastcall eventKeyFrameStarted()
    {
        ProcessEvent(FindFunctionChecked(DNAI_KeyFrameStarted), NULL);
    }
    inline BITFIELD __fastcall eventShouldHaveFullCollisionInAir()
    {
        AAIActor_eventShouldHaveFullCollisionInAir_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNAI_ShouldHaveFullCollisionInAir), &Parms);
        return Parms.ReturnValue;
    }
    inline FLOAT __fastcall eventGetDynamicPathingTieBreaker()
    {
        AAIActor_eventGetDynamicPathingTieBreaker_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNAI_GetDynamicPathingTieBreaker), &Parms);
        return Parms.ReturnValue;
    }
    inline /* EAIDynamicPathPriority */ BYTE __fastcall eventGetDynamicPathingPriority()
    {
        AAIActor_eventGetDynamicPathingPriority_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNAI_GetDynamicPathingPriority), &Parms);
        return Parms.ReturnValue;
    }
    inline FLOAT __fastcall eventGetGroundGravityScale()
    {
        AAIActor_eventGetGroundGravityScale_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNAI_GetGroundGravityScale), &Parms);
        return Parms.ReturnValue;
    }
    inline FLOAT __fastcall eventCalculateGroundConstraintStrengthScalar()
    {
        AAIActor_eventCalculateGroundConstraintStrengthScalar_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNAI_CalculateGroundConstraintStrengthScalar), &Parms);
        return Parms.ReturnValue;
    }
    inline BITFIELD __fastcall eventCalculatePlayerPhysics_GameplayOverride(FLOAT DeltaTime)
    {
        AAIActor_eventCalculatePlayerPhysics_GameplayOverride_Parms Parms;
        Parms.ReturnValue=0;
        Parms.DeltaTime=DeltaTime;
        ProcessEvent(FindFunctionChecked(DNAI_CalculatePlayerPhysics_GameplayOverride), &Parms);
        return Parms.ReturnValue;
    }
    inline void __fastcall eventCalculatePhysics_CutScene(FLOAT DeltaTime)
    {
        AAIActor_eventCalculatePhysics_CutScene_Parms Parms;
        Parms.DeltaTime=DeltaTime;
        ProcessEvent(FindFunctionChecked(DNAI_CalculatePhysics_CutScene), &Parms);
    }
    inline void __fastcall eventCalculatePhysics_Falling(FLOAT DeltaTime)
    {
        AAIActor_eventCalculatePhysics_Falling_Parms Parms;
        Parms.DeltaTime=DeltaTime;
        ProcessEvent(FindFunctionChecked(DNAI_CalculatePhysics_Falling), &Parms);
    }
    inline void __fastcall eventCalculatePhysics_Flying(FLOAT DeltaTime)
    {
        AAIActor_eventCalculatePhysics_Flying_Parms Parms;
        Parms.DeltaTime=DeltaTime;
        ProcessEvent(FindFunctionChecked(DNAI_CalculatePhysics_Flying), &Parms);
    }
    inline void __fastcall eventCalculatePhysics_OnGround(FLOAT dt)
    {
        AAIActor_eventCalculatePhysics_OnGround_Parms Parms;
        Parms.dt=dt;
        ProcessEvent(FindFunctionChecked(DNAI_CalculatePhysics_OnGround), &Parms);
    }
    inline BITFIELD __fastcall eventShouldEnableGroundFinder(FLOAT DeltaTime)
    {
        AAIActor_eventShouldEnableGroundFinder_Parms Parms;
        Parms.ReturnValue=0;
        Parms.DeltaTime=DeltaTime;
        ProcessEvent(FindFunctionChecked(DNAI_ShouldEnableGroundFinder), &Parms);
        return Parms.ReturnValue;
    }
    inline BITFIELD __fastcall eventAICheckActionPointClearTarget()
    {
        AAIActor_eventAICheckActionPointClearTarget_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNAI_AICheckActionPointClearTarget), &Parms);
        return Parms.ReturnValue;
    }
    inline BITFIELD __fastcall eventAIMustCheckActionUsable()
    {
        AAIActor_eventAIMustCheckActionUsable_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNAI_AIMustCheckActionUsable), &Parms);
        return Parms.ReturnValue;
    }
    inline /* EAICode */ BYTE __fastcall eventCOND_ShouldTeleportToAP()
    {
        AAIActor_eventCOND_ShouldTeleportToAP_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNAI_COND_ShouldTeleportToAP), &Parms);
        return Parms.ReturnValue;
    }
    inline /* EAICode */ BYTE __fastcall eventCOND_ShouldJumpToAirAP()
    {
        AAIActor_eventCOND_ShouldJumpToAirAP_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNAI_COND_ShouldJumpToAirAP), &Parms);
        return Parms.ReturnValue;
    }
    inline /* EAICode */ BYTE __fastcall eventCOND_HasNormalAP()
    {
        AAIActor_eventCOND_HasNormalAP_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNAI_COND_HasNormalAP), &Parms);
        return Parms.ReturnValue;
    }
    inline /* EAICode */ BYTE __fastcall eventCOND_HasJumpAP()
    {
        AAIActor_eventCOND_HasJumpAP_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNAI_COND_HasJumpAP), &Parms);
        return Parms.ReturnValue;
    }
    inline /* EAICode */ BYTE __fastcall eventCOND_ShouldGotoJumpOrNormalAP()
    {
        AAIActor_eventCOND_ShouldGotoJumpOrNormalAP_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNAI_COND_ShouldGotoJumpOrNormalAP), &Parms);
        return Parms.ReturnValue;
    }
    inline /* EAICode */ BYTE __fastcall eventCOND_ShouldJumpToFlyAP()
    {
        AAIActor_eventCOND_ShouldJumpToFlyAP_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNAI_COND_ShouldJumpToFlyAP), &Parms);
        return Parms.ReturnValue;
    }
    inline /* EAICode */ BYTE __fastcall eventCOND_ShouldWalkToNextAPClosestTarget()
    {
        AAIActor_eventCOND_ShouldWalkToNextAPClosestTarget_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNAI_COND_ShouldWalkToNextAPClosestTarget), &Parms);
        return Parms.ReturnValue;
    }
    inline /* EAICode */ BYTE __fastcall eventCOND_ShouldWalkToNextAP()
    {
        AAIActor_eventCOND_ShouldWalkToNextAP_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNAI_COND_ShouldWalkToNextAP), &Parms);
        return Parms.ReturnValue;
    }
    inline /* EAICode */ BYTE __fastcall eventCOND_ShouldGotoToNextAPCheckLOS()
    {
        AAIActor_eventCOND_ShouldGotoToNextAPCheckLOS_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNAI_COND_ShouldGotoToNextAPCheckLOS), &Parms);
        return Parms.ReturnValue;
    }
    inline /* EAICode */ BYTE __fastcall eventCOND_ShouldFlyToNextAP()
    {
        AAIActor_eventCOND_ShouldFlyToNextAP_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNAI_COND_ShouldFlyToNextAP), &Parms);
        return Parms.ReturnValue;
    }
    inline /* EAICode */ BYTE __fastcall eventCOND_ShouldJumpToNextAP()
    {
        AAIActor_eventCOND_ShouldJumpToNextAP_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNAI_COND_ShouldJumpToNextAP), &Parms);
        return Parms.ReturnValue;
    }
    inline /* EAICode */ BYTE __fastcall eventCOND_ShouldJumpToNextAPNoTarget()
    {
        AAIActor_eventCOND_ShouldJumpToNextAPNoTarget_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNAI_COND_ShouldJumpToNextAPNoTarget), &Parms);
        return Parms.ReturnValue;
    }
    inline /* EAICode */ BYTE __fastcall eventCOND_ShouldGotoJumpAP()
    {
        AAIActor_eventCOND_ShouldGotoJumpAP_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNAI_COND_ShouldGotoJumpAP), &Parms);
        return Parms.ReturnValue;
    }
    inline /* EAICode */ BYTE __fastcall eventCOND_ShouldVaultAP()
    {
        AAIActor_eventCOND_ShouldVaultAP_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNAI_COND_ShouldVaultAP), &Parms);
        return Parms.ReturnValue;
    }
    inline /* EAICode */ BYTE __fastcall eventCOND_ReleaseActionPoint()
    {
        AAIActor_eventCOND_ReleaseActionPoint_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNAI_COND_ReleaseActionPoint), &Parms);
        return Parms.ReturnValue;
    }
    inline /* EAICode */ BYTE __fastcall eventCOND_ActionPointCompletelyCompromised()
    {
        AAIActor_eventCOND_ActionPointCompletelyCompromised_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNAI_COND_ActionPointCompletelyCompromised), &Parms);
        return Parms.ReturnValue;
    }
    inline /* EAICode */ BYTE __fastcall eventCOND_ShouldLateralAP()
    {
        AAIActor_eventCOND_ShouldLateralAP_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNAI_COND_ShouldLateralAP), &Parms);
        return Parms.ReturnValue;
    }
    inline /* EAICode */ BYTE __fastcall eventCOND_ShouldFlankAP()
    {
        AAIActor_eventCOND_ShouldFlankAP_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNAI_COND_ShouldFlankAP), &Parms);
        return Parms.ReturnValue;
    }
    inline /* EAICode */ BYTE __fastcall eventCOND_ShouldRetreatAP()
    {
        AAIActor_eventCOND_ShouldRetreatAP_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNAI_COND_ShouldRetreatAP), &Parms);
        return Parms.ReturnValue;
    }
    inline /* EAICode */ BYTE __fastcall eventCOND_ShouldAdvanceAP()
    {
        AAIActor_eventCOND_ShouldAdvanceAP_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNAI_COND_ShouldAdvanceAP), &Parms);
        return Parms.ReturnValue;
    }
    inline /* EAICode */ BYTE __fastcall eventCOND_AvailableActionPoint()
    {
        AAIActor_eventCOND_AvailableActionPoint_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNAI_COND_AvailableActionPoint), &Parms);
        return Parms.ReturnValue;
    }
    inline class AActionPoint* __fastcall eventChooseBestAPClosestTarget()
    {
        AAIActor_eventChooseBestAPClosestTarget_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNAI_ChooseBestAPClosestTarget), &Parms);
        return Parms.ReturnValue;
    }
    inline class AActionPoint* __fastcall eventChooseBestNeighborAP(dnArray<FSActionPointNeighborInfo>& APNInfoList, BITFIELD bCheckCompromised, FLOAT MinDotToAp, BITFIELD NoClearPathRequired, BITFIELD NoClearPathAllowed, BITFIELD GetJumpInfo, FSJumpPreset& JumpPreset)
    {
        AAIActor_eventChooseBestNeighborAP_Parms Parms;
        Parms.ReturnValue=0;
        Parms.APNInfoList=APNInfoList;
        Parms.bCheckCompromised=bCheckCompromised;
        Parms.MinDotToAp=MinDotToAp;
        Parms.NoClearPathRequired=NoClearPathRequired;
        Parms.NoClearPathAllowed=NoClearPathAllowed;
        Parms.GetJumpInfo=GetJumpInfo;
        Parms.JumpPreset=JumpPreset;
        ProcessEvent(FindFunctionChecked(DNAI_ChooseBestNeighborAP), &Parms);
        APNInfoList=Parms.APNInfoList;
        JumpPreset=Parms.JumpPreset;
        return Parms.ReturnValue;
    }
    inline void __fastcall eventOverridePopoutHoldTime(FLOAT& HoldTime)
    {
        AAIActor_eventOverridePopoutHoldTime_Parms Parms;
        Parms.HoldTime=HoldTime;
        ProcessEvent(FindFunctionChecked(DNAI_OverridePopoutHoldTime), &Parms);
        HoldTime=Parms.HoldTime;
    }
    inline /* EAICode */ BYTE __fastcall eventCOND_ShouldMeleeActionPoint()
    {
        AAIActor_eventCOND_ShouldMeleeActionPoint_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNAI_COND_ShouldMeleeActionPoint), &Parms);
        return Parms.ReturnValue;
    }
    inline /* EAICode */ BYTE __fastcall eventCOND_ShouldGotoActionPointFlyer()
    {
        AAIActor_eventCOND_ShouldGotoActionPointFlyer_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNAI_COND_ShouldGotoActionPointFlyer), &Parms);
        return Parms.ReturnValue;
    }
    inline /* EAICode */ BYTE __fastcall eventCOND_ShouldGotoActionPoint()
    {
        AAIActor_eventCOND_ShouldGotoActionPoint_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNAI_COND_ShouldGotoActionPoint), &Parms);
        return Parms.ReturnValue;
    }
    inline /* EAICode */ BYTE __fastcall eventCOND_ShouldUseActionPoint()
    {
        AAIActor_eventCOND_ShouldUseActionPoint_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNAI_COND_ShouldUseActionPoint), &Parms);
        return Parms.ReturnValue;
    }
    inline /* EAICode */ BYTE __fastcall eventCOND_NoForcedActionPoints()
    {
        AAIActor_eventCOND_NoForcedActionPoints_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNAI_COND_NoForcedActionPoints), &Parms);
        return Parms.ReturnValue;
    }
    inline /* EAICode */ BYTE __fastcall eventCOND_ForcedActionPoints()
    {
        AAIActor_eventCOND_ForcedActionPoints_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNAI_COND_ForcedActionPoints), &Parms);
        return Parms.ReturnValue;
    }
    inline void __fastcall eventInitializeActionPoints()
    {
        ProcessEvent(FindFunctionChecked(DNAI_InitializeActionPoints), NULL);
    }
    inline BITFIELD __fastcall eventIsReturningToBerzerk()
    {
        AAIActor_eventIsReturningToBerzerk_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNAI_IsReturningToBerzerk), &Parms);
        return Parms.ReturnValue;
    }
    inline BITFIELD __fastcall eventIsBezerked()
    {
        AAIActor_eventIsBezerked_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNAI_IsBezerked), &Parms);
        return Parms.ReturnValue;
    }
    inline void __fastcall eventNotifyMultiAnimStop()
    {
        ProcessEvent(FindFunctionChecked(DNAI_NotifyMultiAnimStop), NULL);
    }
    inline void __fastcall eventNotifyMultiAnimLoop()
    {
        ProcessEvent(FindFunctionChecked(DNAI_NotifyMultiAnimLoop), NULL);
    }
    inline void __fastcall eventNotifyMultiAnimStart()
    {
        ProcessEvent(FindFunctionChecked(DNAI_NotifyMultiAnimStart), NULL);
    }
    inline void __fastcall eventNotifyArmorLoss(class ADestructible_Armor* Armor)
    {
        AAIActor_eventNotifyArmorLoss_Parms Parms;
        Parms.Armor=Armor;
        ProcessEvent(FindFunctionChecked(DNAI_NotifyArmorLoss), &Parms);
    }
    inline void __fastcall eventSetHiddenSelfAndArmor(BITFIELD NewHidden)
    {
        AAIActor_eventSetHiddenSelfAndArmor_Parms Parms;
        Parms.NewHidden=NewHidden;
        ProcessEvent(FindFunctionChecked(DNAI_SetHiddenSelfAndArmor), &Parms);
    }
    inline void __fastcall eventLogFailedScript()
    {
        ProcessEvent(FindFunctionChecked(DNAI_LogFailedScript), NULL);
    }
    inline INT __fastcall eventGetIdleExIndex()
    {
        AAIActor_eventGetIdleExIndex_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNAI_GetIdleExIndex), &Parms);
        return Parms.ReturnValue;
    }
    inline /* EAICode */ BYTE __fastcall eventCOND_ShouldAbortGotoStomp()
    {
        AAIActor_eventCOND_ShouldAbortGotoStomp_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNAI_COND_ShouldAbortGotoStomp), &Parms);
        return Parms.ReturnValue;
    }
    inline /* EAICode */ BYTE __fastcall eventCOND_ShouldGotoStompLostTarget()
    {
        AAIActor_eventCOND_ShouldGotoStompLostTarget_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNAI_COND_ShouldGotoStompLostTarget), &Parms);
        return Parms.ReturnValue;
    }
    inline /* EAICode */ BYTE __fastcall eventCOND_ShouldGotoStomp()
    {
        AAIActor_eventCOND_ShouldGotoStomp_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNAI_COND_ShouldGotoStomp), &Parms);
        return Parms.ReturnValue;
    }
    inline /* EAICode */ BYTE __fastcall eventCOND_ShouldUseX()
    {
        AAIActor_eventCOND_ShouldUseX_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNAI_COND_ShouldUseX), &Parms);
        return Parms.ReturnValue;
    }
    inline void __fastcall eventInitUsableItems()
    {
        ProcessEvent(FindFunctionChecked(DNAI_InitUsableItems), NULL);
    }
    inline void __fastcall eventDestroyRappelEffects()
    {
        ProcessEvent(FindFunctionChecked(DNAI_DestroyRappelEffects), NULL);
    }
    inline void __fastcall eventExecuteRappelEffects()
    {
        ProcessEvent(FindFunctionChecked(DNAI_ExecuteRappelEffects), NULL);
    }
    inline void __fastcall eventNotifyTeleportEnd()
    {
        ProcessEvent(FindFunctionChecked(DNAI_NotifyTeleportEnd), NULL);
    }
    inline void __fastcall eventNotifyTeleportLocationSet()
    {
        ProcessEvent(FindFunctionChecked(DNAI_NotifyTeleportLocationSet), NULL);
    }
    inline void __fastcall eventForceEndAllOverlayEffects()
    {
        ProcessEvent(FindFunctionChecked(DNAI_ForceEndAllOverlayEffects), NULL);
    }
    inline void __fastcall eventEndTeleportOverlayEffectsOnActor(class AActor* A)
    {
        AAIActor_eventEndTeleportOverlayEffectsOnActor_Parms Parms;
        Parms.A=A;
        ProcessEvent(FindFunctionChecked(DNAI_EndTeleportOverlayEffectsOnActor), &Parms);
    }
    inline void __fastcall eventEndTeleportOverlayEffects()
    {
        ProcessEvent(FindFunctionChecked(DNAI_EndTeleportOverlayEffects), NULL);
    }
    inline void __fastcall eventStartTeleportOverlayEffectsOnActor(class AActor* A)
    {
        AAIActor_eventStartTeleportOverlayEffectsOnActor_Parms Parms;
        Parms.A=A;
        ProcessEvent(FindFunctionChecked(DNAI_StartTeleportOverlayEffectsOnActor), &Parms);
    }
    inline void __fastcall eventStartTeleportOverlayEffects()
    {
        ProcessEvent(FindFunctionChecked(DNAI_StartTeleportOverlayEffects), NULL);
    }
    inline void __fastcall eventNotifyTeleportStart()
    {
        ProcessEvent(FindFunctionChecked(DNAI_NotifyTeleportStart), NULL);
    }
    inline BITFIELD __fastcall eventShouldPainImpulse()
    {
        AAIActor_eventShouldPainImpulse_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNAI_ShouldPainImpulse), &Parms);
        return Parms.ReturnValue;
    }
    inline void __fastcall eventCalculateTakeoffVel()
    {
        ProcessEvent(FindFunctionChecked(DNAI_CalculateTakeoffVel), NULL);
    }
    inline void __fastcall eventNotifyChargeEnd()
    {
        ProcessEvent(FindFunctionChecked(DNAI_NotifyChargeEnd), NULL);
    }
    inline void __fastcall eventAIEnableInventoryIK()
    {
        ProcessEvent(FindFunctionChecked(DNAI_AIEnableInventoryIK), NULL);
    }
    inline void __fastcall eventAIDisableInventoryIK()
    {
        ProcessEvent(FindFunctionChecked(DNAI_AIDisableInventoryIK), NULL);
    }
    inline void __fastcall eventAIEnableIK()
    {
        ProcessEvent(FindFunctionChecked(DNAI_AIEnableIK), NULL);
    }
    inline void __fastcall eventAIDisableIK()
    {
        ProcessEvent(FindFunctionChecked(DNAI_AIDisableIK), NULL);
    }
    inline BITFIELD __fastcall eventShouldAlwaysBeDynamicallyPathedAround()
    {
        AAIActor_eventShouldAlwaysBeDynamicallyPathedAround_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNAI_ShouldAlwaysBeDynamicallyPathedAround), &Parms);
        return Parms.ReturnValue;
    }
    inline void __fastcall eventUpdateBodyTarget()
    {
        ProcessEvent(FindFunctionChecked(DNAI_UpdateBodyTarget), NULL);
    }
    inline void __fastcall eventExecuteGotoX()
    {
        ProcessEvent(FindFunctionChecked(DNAI_ExecuteGotoX), NULL);
    }
    inline BITFIELD __fastcall eventDisableCollisionOnStuck()
    {
        AAIActor_eventDisableCollisionOnStuck_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNAI_DisableCollisionOnStuck), &Parms);
        return Parms.ReturnValue;
    }
    inline BITFIELD __fastcall eventShouldDampenWhileTurning()
    {
        AAIActor_eventShouldDampenWhileTurning_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNAI_ShouldDampenWhileTurning), &Parms);
        return Parms.ReturnValue;
    }
    inline void __fastcall eventPrioritizePopups(/* EAIPopUpType */ BYTE PopupType)
    {
        AAIActor_eventPrioritizePopups_Parms Parms;
        Parms.PopupType=PopupType;
        ProcessEvent(FindFunctionChecked(DNAI_PrioritizePopups), &Parms);
    }
    inline BITFIELD __fastcall eventFindGoal_ScriptCustom(FVector& OutGoalPos)
    {
        AAIActor_eventFindGoal_ScriptCustom_Parms Parms;
        Parms.ReturnValue=0;
        Parms.OutGoalPos=OutGoalPos;
        ProcessEvent(FindFunctionChecked(DNAI_FindGoal_ScriptCustom), &Parms);
        OutGoalPos=Parms.OutGoalPos;
        return Parms.ReturnValue;
    }
    inline BITFIELD __fastcall eventScriptCanHaywire()
    {
        AAIActor_eventScriptCanHaywire_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNAI_ScriptCanHaywire), &Parms);
        return Parms.ReturnValue;
    }
    inline void __fastcall eventSetMaterial(class AActor* SwapActor, class UMaterialEx* NewMaterial)
    {
        AAIActor_eventSetMaterial_Parms Parms;
        Parms.SwapActor=SwapActor;
        Parms.NewMaterial=NewMaterial;
        ProcessEvent(FindFunctionChecked(DNAI_SetMaterial), &Parms);
    }
    inline void __fastcall eventInput(/* EControlRemapperKeyType */ BYTE KeyType, /* EAIInputAction */ BYTE ActionType)
    {
        AAIActor_eventInput_Parms Parms;
        Parms.KeyType=KeyType;
        Parms.ActionType=ActionType;
        ProcessEvent(FindFunctionChecked(DNAI_Input), &Parms);
    }
    inline /* EAICode */ BYTE __fastcall eventCOND_ShouldSeek()
    {
        AAIActor_eventCOND_ShouldSeek_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNAI_COND_ShouldSeek), &Parms);
        return Parms.ReturnValue;
    }
    inline /* EAICode */ BYTE __fastcall eventCOND_ShouldGotoSearch()
    {
        AAIActor_eventCOND_ShouldGotoSearch_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNAI_COND_ShouldGotoSearch), &Parms);
        return Parms.ReturnValue;
    }
    inline /* EAICode */ BYTE __fastcall eventCOND_ShouldStepAside()
    {
        AAIActor_eventCOND_ShouldStepAside_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNAI_COND_ShouldStepAside), &Parms);
        return Parms.ReturnValue;
    }
    inline /* EAICode */ BYTE __fastcall eventCOND_ShouldEndMelee()
    {
        AAIActor_eventCOND_ShouldEndMelee_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNAI_COND_ShouldEndMelee), &Parms);
        return Parms.ReturnValue;
    }
    inline /* EAICode */ BYTE __fastcall eventCOND_ShouldMelee()
    {
        AAIActor_eventCOND_ShouldMelee_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNAI_COND_ShouldMelee), &Parms);
        return Parms.ReturnValue;
    }
    inline /* EAICode */ BYTE __fastcall eventCOND_ShouldGuardAttackMelee()
    {
        AAIActor_eventCOND_ShouldGuardAttackMelee_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNAI_COND_ShouldGuardAttackMelee), &Parms);
        return Parms.ReturnValue;
    }
    inline /* EAICode */ BYTE __fastcall eventCOND_ShouldAlignWithGuardedActor()
    {
        AAIActor_eventCOND_ShouldAlignWithGuardedActor_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNAI_COND_ShouldAlignWithGuardedActor), &Parms);
        return Parms.ReturnValue;
    }
    inline /* EAICode */ BYTE __fastcall eventCOND_ShouldGotoGuardPos()
    {
        AAIActor_eventCOND_ShouldGotoGuardPos_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNAI_COND_ShouldGotoGuardPos), &Parms);
        return Parms.ReturnValue;
    }
    inline BITFIELD __fastcall eventIsTooCloseToGuardedActor(FVector TestLocation)
    {
        AAIActor_eventIsTooCloseToGuardedActor_Parms Parms;
        Parms.ReturnValue=0;
        Parms.TestLocation=TestLocation;
        ProcessEvent(FindFunctionChecked(DNAI_IsTooCloseToGuardedActor), &Parms);
        return Parms.ReturnValue;
    }
    inline /* EAICode */ BYTE __fastcall eventCOND_ShouldGotoGuardAttack()
    {
        AAIActor_eventCOND_ShouldGotoGuardAttack_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNAI_COND_ShouldGotoGuardAttack), &Parms);
        return Parms.ReturnValue;
    }
    inline /* EAICode */ BYTE __fastcall eventCOND_BeginWaitState()
    {
        AAIActor_eventCOND_BeginWaitState_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNAI_COND_BeginWaitState), &Parms);
        return Parms.ReturnValue;
    }
    inline /* EAICode */ BYTE __fastcall eventCOND_ShouldGotoSafeReload()
    {
        AAIActor_eventCOND_ShouldGotoSafeReload_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNAI_COND_ShouldGotoSafeReload), &Parms);
        return Parms.ReturnValue;
    }
    inline /* EAICode */ BYTE __fastcall eventCOND_ShouldGotoReload()
    {
        AAIActor_eventCOND_ShouldGotoReload_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNAI_COND_ShouldGotoReload), &Parms);
        return Parms.ReturnValue;
    }
    inline /* EAICode */ BYTE __fastcall eventCOND_ShouldMoveAround()
    {
        AAIActor_eventCOND_ShouldMoveAround_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNAI_COND_ShouldMoveAround), &Parms);
        return Parms.ReturnValue;
    }
    inline /* EAICode */ BYTE __fastcall eventCOND_ShouldMoveSide()
    {
        AAIActor_eventCOND_ShouldMoveSide_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNAI_COND_ShouldMoveSide), &Parms);
        return Parms.ReturnValue;
    }
    inline /* EAICode */ BYTE __fastcall eventCOND_ShouldGotoAttack()
    {
        AAIActor_eventCOND_ShouldGotoAttack_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNAI_COND_ShouldGotoAttack), &Parms);
        return Parms.ReturnValue;
    }
    inline /* EAICode */ BYTE __fastcall eventCOND_NeedToMoveToAttack()
    {
        AAIActor_eventCOND_NeedToMoveToAttack_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNAI_COND_NeedToMoveToAttack), &Parms);
        return Parms.ReturnValue;
    }
    inline /* EAICode */ BYTE __fastcall eventCOND_ShouldGotoAvoidGoal()
    {
        AAIActor_eventCOND_ShouldGotoAvoidGoal_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNAI_COND_ShouldGotoAvoidGoal), &Parms);
        return Parms.ReturnValue;
    }
    inline /* EAICode */ BYTE __fastcall eventCOND_NotSafeFromBigEnemy()
    {
        AAIActor_eventCOND_NotSafeFromBigEnemy_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNAI_COND_NotSafeFromBigEnemy), &Parms);
        return Parms.ReturnValue;
    }
    inline /* EAICode */ BYTE __fastcall eventCOND_SafeFromBiggerEnemy()
    {
        AAIActor_eventCOND_SafeFromBiggerEnemy_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNAI_COND_SafeFromBiggerEnemy), &Parms);
        return Parms.ReturnValue;
    }
    inline /* EAICode */ BYTE __fastcall eventCOND_ShouldAvoidTarget()
    {
        AAIActor_eventCOND_ShouldAvoidTarget_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNAI_COND_ShouldAvoidTarget), &Parms);
        return Parms.ReturnValue;
    }
    inline /* EAICode */ BYTE __fastcall eventCOND_ShouldNotAvoidTarget()
    {
        AAIActor_eventCOND_ShouldNotAvoidTarget_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNAI_COND_ShouldNotAvoidTarget), &Parms);
        return Parms.ReturnValue;
    }
    inline /* EAICode */ BYTE __fastcall eventCOND_ShouldAvoidDanger()
    {
        AAIActor_eventCOND_ShouldAvoidDanger_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNAI_COND_ShouldAvoidDanger), &Parms);
        return Parms.ReturnValue;
    }
    inline /* EAICode */ BYTE __fastcall eventCOND_ShouldPickupTKObj()
    {
        AAIActor_eventCOND_ShouldPickupTKObj_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNAI_COND_ShouldPickupTKObj), &Parms);
        return Parms.ReturnValue;
    }
    inline /* EAICode */ BYTE __fastcall eventCOND_ShouldThrowTKObj()
    {
        AAIActor_eventCOND_ShouldThrowTKObj_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNAI_COND_ShouldThrowTKObj), &Parms);
        return Parms.ReturnValue;
    }
    inline /* EAICode */ BYTE __fastcall eventCOND_ShouldCatchTKObj()
    {
        AAIActor_eventCOND_ShouldCatchTKObj_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNAI_COND_ShouldCatchTKObj), &Parms);
        return Parms.ReturnValue;
    }
    inline /* EAICode */ BYTE __fastcall eventCOND_ShouldAttackPipeBomb()
    {
        AAIActor_eventCOND_ShouldAttackPipeBomb_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNAI_COND_ShouldAttackPipeBomb), &Parms);
        return Parms.ReturnValue;
    }
    inline /* EAICode */ BYTE __fastcall eventCOND_ShouldTryAttackPipeBomb()
    {
        AAIActor_eventCOND_ShouldTryAttackPipeBomb_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNAI_COND_ShouldTryAttackPipeBomb), &Parms);
        return Parms.ReturnValue;
    }
    inline void __fastcall eventDropMyPipeBomb()
    {
        ProcessEvent(FindFunctionChecked(DNAI_DropMyPipeBomb), NULL);
    }
    inline void __fastcall eventIgnoreDangerActor(class AActor* A)
    {
        AAIActor_eventIgnoreDangerActor_Parms Parms;
        Parms.A=A;
        ProcessEvent(FindFunctionChecked(DNAI_IgnoreDangerActor), &Parms);
    }
    inline INT __fastcall eventGetStompIndex()
    {
        AAIActor_eventGetStompIndex_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNAI_GetStompIndex), &Parms);
        return Parms.ReturnValue;
    }
    inline void __fastcall eventDestroyShootProjectileEffects()
    {
        ProcessEvent(FindFunctionChecked(DNAI_DestroyShootProjectileEffects), NULL);
    }
    inline void __fastcall eventCreateShootProjectileEffects()
    {
        ProcessEvent(FindFunctionChecked(DNAI_CreateShootProjectileEffects), NULL);
    }
    inline FVector __fastcall eventGetWeaponFireLocation()
    {
        AAIActor_eventGetWeaponFireLocation_Parms Parms;
        Parms.ReturnValue.Init();
        ProcessEvent(FindFunctionChecked(DNAI_GetWeaponFireLocation), &Parms);
        return Parms.ReturnValue;
    }
    inline FVector __fastcall eventGetProjectileFireLocation()
    {
        AAIActor_eventGetProjectileFireLocation_Parms Parms;
        Parms.ReturnValue.Init();
        ProcessEvent(FindFunctionChecked(DNAI_GetProjectileFireLocation), &Parms);
        return Parms.ReturnValue;
    }
    inline void __fastcall eventGetWeaponError(FLOAT& HorizError, FLOAT& VertError)
    {
        AAIActor_eventGetWeaponError_Parms Parms;
        Parms.HorizError=HorizError;
        Parms.VertError=VertError;
        ProcessEvent(FindFunctionChecked(DNAI_GetWeaponError), &Parms);
        HorizError=Parms.HorizError;
        VertError=Parms.VertError;
    }
    inline void __fastcall eventDebugDrawBone(FName TrackBone)
    {
        AAIActor_eventDebugDrawBone_Parms Parms;
        Parms.TrackBone=TrackBone;
        ProcessEvent(FindFunctionChecked(DNAI_DebugDrawBone), &Parms);
    }
    inline BITFIELD __fastcall eventShouldProceduralHeadAim()
    {
        AAIActor_eventShouldProceduralHeadAim_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNAI_ShouldProceduralHeadAim), &Parms);
        return Parms.ReturnValue;
    }
    inline BITFIELD __fastcall eventShouldProceduralFire()
    {
        AAIActor_eventShouldProceduralFire_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNAI_ShouldProceduralFire), &Parms);
        return Parms.ReturnValue;
    }
    inline void __fastcall eventNotifyTargetSpotted(FLOAT TimeSinceLastScene)
    {
        AAIActor_eventNotifyTargetSpotted_Parms Parms;
        Parms.TimeSinceLastScene=TimeSinceLastScene;
        ProcessEvent(FindFunctionChecked(DNAI_NotifyTargetSpotted), &Parms);
    }
    inline void __fastcall eventSetExecuteAmbientSoundCallbackTimer(FLOAT Delay)
    {
        AAIActor_eventSetExecuteAmbientSoundCallbackTimer_Parms Parms;
        Parms.Delay=Delay;
        ProcessEvent(FindFunctionChecked(DNAI_SetExecuteAmbientSoundCallbackTimer), &Parms);
    }
    inline BITFIELD __fastcall eventShouldTargetNoiseMaker(class AActor* NoiseMaker)
    {
        AAIActor_eventShouldTargetNoiseMaker_Parms Parms;
        Parms.ReturnValue=0;
        Parms.NoiseMaker=NoiseMaker;
        ProcessEvent(FindFunctionChecked(DNAI_ShouldTargetNoiseMaker), &Parms);
        return Parms.ReturnValue;
    }
    inline void __fastcall eventEvaluateTargets(/* EAITargetEval */ BYTE TargetEvaluator)
    {
        AAIActor_eventEvaluateTargets_Parms Parms;
        Parms.TargetEvaluator=TargetEvaluator;
        ProcessEvent(FindFunctionChecked(DNAI_EvaluateTargets), &Parms);
    }
    inline void __fastcall eventNotifyTargetLost()
    {
        ProcessEvent(FindFunctionChecked(DNAI_NotifyTargetLost), NULL);
    }
    inline void __fastcall eventNotifySetTargetActor()
    {
        ProcessEvent(FindFunctionChecked(DNAI_NotifySetTargetActor), NULL);
    }
    inline void __fastcall eventInitializeTargets()
    {
        ProcessEvent(FindFunctionChecked(DNAI_InitializeTargets), NULL);
    }
    inline void __fastcall eventDroolSpit()
    {
        ProcessEvent(FindFunctionChecked(DNAI_DroolSpit), NULL);
    }
    inline void __fastcall eventInitDrool()
    {
        ProcessEvent(FindFunctionChecked(DNAI_InitDrool), NULL);
    }
    inline void __fastcall eventbLink()
    {
        ProcessEvent(FindFunctionChecked(DNAI_bLink), NULL);
    }
    inline void __fastcall eventDisableBlinking()
    {
        ProcessEvent(FindFunctionChecked(DNAI_DisableBlinking), NULL);
    }
    inline void __fastcall eventEnableBlinking()
    {
        ProcessEvent(FindFunctionChecked(DNAI_EnableBlinking), NULL);
    }
    inline BITFIELD __fastcall eventBlinkingEnabled()
    {
        AAIActor_eventBlinkingEnabled_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNAI_BlinkingEnabled), &Parms);
        return Parms.ReturnValue;
    }
    inline void __fastcall eventSetFactoryActionPointTags(INT NewCurrent, INT NewDesired, dnArray<FName> NewTags, FName FactoryTag)
    {
        AAIActor_eventSetFactoryActionPointTags_Parms Parms;
        Parms.NewCurrent=NewCurrent;
        Parms.NewDesired=NewDesired;
        Parms.NewTags=NewTags;
        Parms.FactoryTag=FactoryTag;
        ProcessEvent(FindFunctionChecked(DNAI_SetFactoryActionPointTags), &Parms);
    }
    inline void __fastcall eventSetFactoryActionPointIndex(INT NewCurrent, INT NewDesired, FName FactoryTag)
    {
        AAIActor_eventSetFactoryActionPointIndex_Parms Parms;
        Parms.NewCurrent=NewCurrent;
        Parms.NewDesired=NewDesired;
        Parms.FactoryTag=FactoryTag;
        ProcessEvent(FindFunctionChecked(DNAI_SetFactoryActionPointIndex), &Parms);
    }
    inline void __fastcall eventDropProp()
    {
        ProcessEvent(FindFunctionChecked(DNAI_DropProp), NULL);
    }
    inline FName __fastcall eventGetPropName(class AInteractiveActor* MyProp)
    {
        AAIActor_eventGetPropName_Parms Parms;
        Parms.ReturnValue=NAME_None;
        Parms.MyProp=MyProp;
        ProcessEvent(FindFunctionChecked(DNAI_GetPropName), &Parms);
        return Parms.ReturnValue;
    }
    inline void __fastcall eventDisablePropInteractions(BITFIELD Disable)
    {
        AAIActor_eventDisablePropInteractions_Parms Parms;
        Parms.Disable=Disable;
        ProcessEvent(FindFunctionChecked(DNAI_DisablePropInteractions), &Parms);
    }
    inline void __fastcall eventDischargeTKObj(FVector Vel, BITFIELD Constrain)
    {
        AAIActor_eventDischargeTKObj_Parms Parms;
        Parms.Vel=Vel;
        Parms.Constrain=Constrain;
        ProcessEvent(FindFunctionChecked(DNAI_DischargeTKObj), &Parms);
    }
    inline void __fastcall eventPerformCatchTKObj(class AInteractiveActor* NewTKObj)
    {
        AAIActor_eventPerformCatchTKObj_Parms Parms;
        Parms.NewTKObj=NewTKObj;
        ProcessEvent(FindFunctionChecked(DNAI_PerformCatchTKObj), &Parms);
    }
    inline BITFIELD __fastcall eventShouldCatchTKObj(class AInteractiveActor* CandidateTKObj, BITFIELD bCheckLOS)
    {
        AAIActor_eventShouldCatchTKObj_Parms Parms;
        Parms.ReturnValue=0;
        Parms.CandidateTKObj=CandidateTKObj;
        Parms.bCheckLOS=bCheckLOS;
        ProcessEvent(FindFunctionChecked(DNAI_ShouldCatchTKObj), &Parms);
        return Parms.ReturnValue;
    }
    inline void __fastcall eventDropTKObjStraightDown()
    {
        ProcessEvent(FindFunctionChecked(DNAI_DropTKObjStraightDown), NULL);
    }
    inline BITFIELD __fastcall eventCreateTKShield()
    {
        AAIActor_eventCreateTKShield_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNAI_CreateTKShield), &Parms);
        return Parms.ReturnValue;
    }
    inline void __fastcall eventNotifyCloakingState(/* EAICloaking */ BYTE NewState)
    {
        AAIActor_eventNotifyCloakingState_Parms Parms;
        Parms.NewState=NewState;
        ProcessEvent(FindFunctionChecked(DNAI_NotifyCloakingState), &Parms);
    }
    inline FLOAT __fastcall eventGetGotoMeleeRange()
    {
        AAIActor_eventGetGotoMeleeRange_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNAI_GetGotoMeleeRange), &Parms);
        return Parms.ReturnValue;
    }
    inline void __fastcall eventDie(class APawn* Killer, INT Damage, FVector DamageOrigin, FVector DamageDirection, class UClass* DamageType, FName HitBoneName)
    {
        AAIActor_eventDie_Parms Parms;
        Parms.Killer=Killer;
        Parms.Damage=Damage;
        Parms.DamageOrigin=DamageOrigin;
        Parms.DamageDirection=DamageDirection;
        Parms.DamageType=DamageType;
        Parms.HitBoneName=HitBoneName;
        ProcessEvent(FindFunctionChecked(DNAI_Die), &Parms);
    }
    inline /* EAICode */ BYTE __fastcall eventForceDieOp(/* EAIOp */ BYTE DieOp)
    {
        AAIActor_eventForceDieOp_Parms Parms;
        Parms.ReturnValue=0;
        Parms.DieOp=DieOp;
        ProcessEvent(FindFunctionChecked(DNAI_ForceDieOp), &Parms);
        return Parms.ReturnValue;
    }
    inline void __fastcall eventAIForceDeath()
    {
        ProcessEvent(FindFunctionChecked(DNAI_AIForceDeath), NULL);
    }
    inline void __fastcall eventNotifyHeadTargetLost(const FString& TargetID)
    {
        AAIActor_eventNotifyHeadTargetLost_Parms Parms;
        Parms.TargetID=TargetID;
        ProcessEvent(FindFunctionChecked(DNAI_NotifyHeadTargetLost), &Parms);
    }
    inline void __fastcall eventNotifyHeadTargetInThreshold(const FString& TargetID)
    {
        AAIActor_eventNotifyHeadTargetInThreshold_Parms Parms;
        Parms.TargetID=TargetID;
        ProcessEvent(FindFunctionChecked(DNAI_NotifyHeadTargetInThreshold), &Parms);
    }
    inline void __fastcall eventNotifyWeaponTargetLost(const FString& TargetID)
    {
        AAIActor_eventNotifyWeaponTargetLost_Parms Parms;
        Parms.TargetID=TargetID;
        ProcessEvent(FindFunctionChecked(DNAI_NotifyWeaponTargetLost), &Parms);
    }
    inline void __fastcall eventNotifyWeaponTargetInThreshold(const FString& TargetID)
    {
        AAIActor_eventNotifyWeaponTargetInThreshold_Parms Parms;
        Parms.TargetID=TargetID;
        ProcessEvent(FindFunctionChecked(DNAI_NotifyWeaponTargetInThreshold), &Parms);
    }
    inline void __fastcall eventNotifyFaceAnimEnd()
    {
        ProcessEvent(FindFunctionChecked(DNAI_NotifyFaceAnimEnd), NULL);
    }
    inline void __fastcall eventNotifyHeadAnimEnd()
    {
        ProcessEvent(FindFunctionChecked(DNAI_NotifyHeadAnimEnd), NULL);
    }
    inline void __fastcall eventNotifyEyeAimState(/* EAIAim */ BYTE NewState)
    {
        AAIActor_eventNotifyEyeAimState_Parms Parms;
        Parms.NewState=NewState;
        ProcessEvent(FindFunctionChecked(DNAI_NotifyEyeAimState), &Parms);
    }
    inline void __fastcall eventNotifyHeadAimState(/* EAIAim */ BYTE NewState)
    {
        AAIActor_eventNotifyHeadAimState_Parms Parms;
        Parms.NewState=NewState;
        ProcessEvent(FindFunctionChecked(DNAI_NotifyHeadAimState), &Parms);
    }
    inline void __fastcall eventNotifyWeaponAimState(/* EAIAim */ BYTE NewState)
    {
        AAIActor_eventNotifyWeaponAimState_Parms Parms;
        Parms.NewState=NewState;
        ProcessEvent(FindFunctionChecked(DNAI_NotifyWeaponAimState), &Parms);
    }
    inline void __fastcall eventSetHeadAimAnims()
    {
        ProcessEvent(FindFunctionChecked(DNAI_SetHeadAimAnims), NULL);
    }
    inline void __fastcall eventInitSkin()
    {
        ProcessEvent(FindFunctionChecked(DNAI_InitSkin), NULL);
    }
    inline void __fastcall eventInitMesh()
    {
        ProcessEvent(FindFunctionChecked(DNAI_InitMesh), NULL);
    }
    inline void __fastcall eventNotifyJumpLand()
    {
        ProcessEvent(FindFunctionChecked(DNAI_NotifyJumpLand), NULL);
    }
    inline void __fastcall eventNotifyJumpTakeOff()
    {
        ProcessEvent(FindFunctionChecked(DNAI_NotifyJumpTakeOff), NULL);
    }
    inline void __fastcall eventNotifyLand()
    {
        ProcessEvent(FindFunctionChecked(DNAI_NotifyLand), NULL);
    }
    inline void __fastcall eventNotifyTakeOff()
    {
        ProcessEvent(FindFunctionChecked(DNAI_NotifyTakeOff), NULL);
    }
    inline void __fastcall eventNotifyWeaponManagerMode(/* EAIWeapManMode */ BYTE NewMode)
    {
        AAIActor_eventNotifyWeaponManagerMode_Parms Parms;
        Parms.NewMode=NewMode;
        ProcessEvent(FindFunctionChecked(DNAI_NotifyWeaponManagerMode), &Parms);
    }
    inline void __fastcall eventBumpedBy(class AActor* Bumper)
    {
        AAIActor_eventBumpedBy_Parms Parms;
        Parms.Bumper=Bumper;
        ProcessEvent(FindFunctionChecked(DNAI_BumpedBy), &Parms);
    }
    inline void __fastcall eventBumpedInto(class AActor* Obstruction, FVector vNormal)
    {
        AAIActor_eventBumpedInto_Parms Parms;
        Parms.Obstruction=Obstruction;
        Parms.vNormal=vNormal;
        ProcessEvent(FindFunctionChecked(DNAI_BumpedInto), &Parms);
    }
    inline void __fastcall eventTickState(FLOAT Secs)
    {
        AAIActor_eventTickState_Parms Parms;
        Parms.Secs=Secs;
        ProcessEvent(FindFunctionChecked(DNAI_TickState), &Parms);
    }
    inline void __fastcall eventUpdateStateOPNotWorking(FLOAT DeltaSecs)
    {
        AAIActor_eventUpdateStateOPNotWorking_Parms Parms;
        Parms.DeltaSecs=DeltaSecs;
        ProcessEvent(FindFunctionChecked(DNAI_UpdateStateOPNotWorking), &Parms);
    }
    inline void __fastcall eventUpdateState(FLOAT DeltaSecs)
    {
        AAIActor_eventUpdateState_Parms Parms;
        Parms.DeltaSecs=DeltaSecs;
        ProcessEvent(FindFunctionChecked(DNAI_UpdateState), &Parms);
    }
    inline void __fastcall eventProceduralFire()
    {
        ProcessEvent(FindFunctionChecked(DNAI_ProceduralFire), NULL);
    }
    inline void __fastcall eventFireWeapon()
    {
        ProcessEvent(FindFunctionChecked(DNAI_FireWeapon), NULL);
    }
    inline void __fastcall eventScriptCalcRotation(FRotator& OldRotation, FRotator& NewRotation, FLOAT DeltaTime)
    {
        AAIActor_eventScriptCalcRotation_Parms Parms;
        Parms.OldRotation=OldRotation;
        Parms.NewRotation=NewRotation;
        Parms.DeltaTime=DeltaTime;
        ProcessEvent(FindFunctionChecked(DNAI_ScriptCalcRotation), &Parms);
        OldRotation=Parms.OldRotation;
        NewRotation=Parms.NewRotation;
    }
    inline void __fastcall eventPostInit()
    {
        ProcessEvent(FindFunctionChecked(DNAI_PostInit), NULL);
    }
    inline void __fastcall eventPreInit()
    {
        ProcessEvent(FindFunctionChecked(DNAI_PreInit), NULL);
    }
    inline BITFIELD __fastcall eventExtractSpawnAnimSeq(FName& OutSequenceName, INT& OutLoopSequence, FLOAT& OutStartFrame, FLOAT& OutSpawnAnimRate)
    {
        AAIActor_eventExtractSpawnAnimSeq_Parms Parms;
        Parms.ReturnValue=0;
        Parms.OutSequenceName=OutSequenceName;
        Parms.OutLoopSequence=OutLoopSequence;
        Parms.OutStartFrame=OutStartFrame;
        Parms.OutSpawnAnimRate=OutSpawnAnimRate;
        ProcessEvent(FindFunctionChecked(DNAI_ExtractSpawnAnimSeq), &Parms);
        OutSequenceName=Parms.OutSequenceName;
        OutLoopSequence=Parms.OutLoopSequence;
        OutStartFrame=Parms.OutStartFrame;
        OutSpawnAnimRate=Parms.OutSpawnAnimRate;
        return Parms.ReturnValue;
    }
    inline void __fastcall eventPostSpawn()
    {
        ProcessEvent(FindFunctionChecked(DNAI_PostSpawn), NULL);
    }
    inline void __fastcall eventPlayDefaultSpawnAnim()
    {
        ProcessEvent(FindFunctionChecked(DNAI_PlayDefaultSpawnAnim), NULL);
    }
    inline FLOAT __fastcall eventDefaultBodyAlignRate()
    {
        AAIActor_eventDefaultBodyAlignRate_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNAI_DefaultBodyAlignRate), &Parms);
        return Parms.ReturnValue;
    }
    inline void __fastcall eventRestoreDefaultBodyAlignRate()
    {
        ProcessEvent(FindFunctionChecked(DNAI_RestoreDefaultBodyAlignRate), NULL);
    }
    inline void __fastcall eventRestoreDefaultAnimSync()
    {
        ProcessEvent(FindFunctionChecked(DNAI_RestoreDefaultAnimSync), NULL);
    }
    inline void __fastcall eventRestoreSavedAnimSync()
    {
        ProcessEvent(FindFunctionChecked(DNAI_RestoreSavedAnimSync), NULL);
    }
    inline void __fastcall eventSetAnimSync(/* EBitModifier */ BYTE UseAnimDispSpeedMod, /* EBitModifier */ BYTE UseAnimDispDirMod, /* EBitModifier */ BYTE UseAnimRotationMod, /* EBitModifier */ BYTE AnimCutSceneMod, /* EBitModifier */ BYTE UseAccelerationMod)
    {
        AAIActor_eventSetAnimSync_Parms Parms;
        Parms.UseAnimDispSpeedMod=UseAnimDispSpeedMod;
        Parms.UseAnimDispDirMod=UseAnimDispDirMod;
        Parms.UseAnimRotationMod=UseAnimRotationMod;
        Parms.AnimCutSceneMod=AnimCutSceneMod;
        Parms.UseAccelerationMod=UseAccelerationMod;
        ProcessEvent(FindFunctionChecked(DNAI_SetAnimSync), &Parms);
    }
    inline void __fastcall eventSaveAnimSync()
    {
        ProcessEvent(FindFunctionChecked(DNAI_SaveAnimSync), NULL);
    }
    inline void __fastcall eventEnumerateUsableAnimationControllers(class UPrecacheIndex* PrecacheIndex, dnArray</* EAIAnimController */ BYTE>& UsableControllers)
    {
        AAIActor_eventEnumerateUsableAnimationControllers_Parms Parms;
        Parms.PrecacheIndex=PrecacheIndex;
        Parms.UsableControllers=UsableControllers;
        ProcessEvent(FindFunctionChecked(DNAI_EnumerateUsableAnimationControllers), &Parms);
        UsableControllers=Parms.UsableControllers;
    }
    inline void __fastcall eventEnumerateWeaponClasses(class UPrecacheIndex* PrecacheIndex, dnArray<class UClass*>& WeaponClasses)
    {
        AAIActor_eventEnumerateWeaponClasses_Parms Parms;
        Parms.PrecacheIndex=PrecacheIndex;
        Parms.WeaponClasses=WeaponClasses;
        ProcessEvent(FindFunctionChecked(DNAI_EnumerateWeaponClasses), &Parms);
        WeaponClasses=Parms.WeaponClasses;
    }
    inline BITFIELD __fastcall eventClientSetAnimGridState(FName AnimGridName, FLOAT X, FLOAT Y, BITFIELD bKeepChannelAlpha)
    {
        AAIActor_eventClientSetAnimGridState_Parms Parms;
        Parms.ReturnValue=0;
        Parms.AnimGridName=AnimGridName;
        Parms.X=X;
        Parms.Y=Y;
        Parms.bKeepChannelAlpha=bKeepChannelAlpha;
        ProcessEvent(FindFunctionChecked(DNAI_ClientSetAnimGridState), &Parms);
        return Parms.ReturnValue;
    }
    inline void __fastcall eventReceiveWeapon(class UClass* WeaponClass)
    {
        AAIActor_eventReceiveWeapon_Parms Parms;
        Parms.WeaponClass=WeaponClass;
        ProcessEvent(FindFunctionChecked(DNAI_ReceiveWeapon), &Parms);
    }
    DECLARE_CLASS(AAIActor,ABaseAI,0|CLASS_Config,dnAI)
    NO_DEFAULT_CONSTRUCTOR_START(AAIActor)
    NO_DEFAULT_CONSTRUCTOR_INIT(OverrideMeshList)
    NO_DEFAULT_CONSTRUCTOR_INIT(RandomActorColor)
    NO_DEFAULT_CONSTRUCTOR_INIT(PathCache)
    NO_DEFAULT_CONSTRUCTOR_INIT(DamageScaleInfo)
    NO_DEFAULT_CONSTRUCTOR_INIT(Nodes)
    NO_DEFAULT_CONSTRUCTOR_INIT(FSMStates)
    NO_DEFAULT_CONSTRUCTOR_INIT(TransitionHistory)
    NO_DEFAULT_CONSTRUCTOR_INIT(StateEndMessages)
    NO_DEFAULT_CONSTRUCTOR_INIT(TargetActors)
    NO_DEFAULT_CONSTRUCTOR_INIT(WeaponAimerInfo)
    NO_DEFAULT_CONSTRUCTOR_INIT(MuzzleAimerInfo)
    NO_DEFAULT_CONSTRUCTOR_INIT(HeadAimerInfo)
    NO_DEFAULT_CONSTRUCTOR_INIT(Weapons)
    NO_DEFAULT_CONSTRUCTOR_INIT(RandomWeapons)
    NO_DEFAULT_CONSTRUCTOR_INIT(TripMines)
    NO_DEFAULT_CONSTRUCTOR_INIT(Popups)
    NO_DEFAULT_CONSTRUCTOR_INIT(ActionPointTags)
    NO_DEFAULT_CONSTRUCTOR_INIT(ActionPoints)
    NO_DEFAULT_CONSTRUCTOR_INIT(ReloadActionPoints)
    NO_DEFAULT_CONSTRUCTOR_INIT(EyeAimInfos)
    NO_DEFAULT_CONSTRUCTOR_INIT(TKIgnoreClasses)
    NO_DEFAULT_CONSTRUCTOR_INIT(Relations)
    NO_DEFAULT_CONSTRUCTOR_INIT(Relationships)
    NO_DEFAULT_CONSTRUCTOR_INIT(m_RelationOverrides)
    NO_DEFAULT_CONSTRUCTOR_INIT(IdleInfo)
    NO_DEFAULT_CONSTRUCTOR_INIT(MessageQueue)
    NO_DEFAULT_CONSTRUCTOR_INIT(MultiAnimParms)
    NO_DEFAULT_CONSTRUCTOR_INIT(UseableItems)
    NO_DEFAULT_CONSTRUCTOR_INIT(ExpandPopSound)
    NO_DEFAULT_CONSTRUCTOR_INIT(HealthTriggers)
    NO_DEFAULT_CONSTRUCTOR_INIT(BoneAim)
    NO_DEFAULT_CONSTRUCTOR_INIT(MuzzleBoneAim)
    NO_DEFAULT_CONSTRUCTOR_INIT(ProcFireStates)
    NO_DEFAULT_CONSTRUCTOR_INIT(ProcFireOps)
    NO_DEFAULT_CONSTRUCTOR_INIT(BoneHeadAim)
    NO_DEFAULT_CONSTRUCTOR_INIT(StompInfo)
    NO_DEFAULT_CONSTRUCTOR_INIT(DodgeInfo)
    NO_DEFAULT_CONSTRUCTOR_INIT(IgnoredDangerActors)
    NO_DEFAULT_CONSTRUCTOR_INIT(GotoXHistory)
    NO_DEFAULT_CONSTRUCTOR_INIT(PathingHistory)
    NO_DEFAULT_CONSTRUCTOR_INIT(AIDebugMessageQueue)
    NO_DEFAULT_CONSTRUCTOR_INIT(ScriptFailHistory)
    NO_DEFAULT_CONSTRUCTOR_INIT(PhysicsContactActors)
    NO_DEFAULT_CONSTRUCTOR_INITLAST(PerfInfo)
};
// Class AIActor exported:
//   Properties size: 5236 bytes (10064 total)


//***************************************************************************//
/*	\class AMaleCombat
*/
//***************************************************************************//

class DNAI_API AMaleCombat : public AAIActor
{
public:
    DECLARE_CLASS(AMaleCombat,AAIActor,0|CLASS_Config,dnAI)
    NO_DEFAULT_CONSTRUCTOR(AMaleCombat)
};
// Class MaleCombat exported:
//   Properties size: 0 bytes (10064 total)


//***************************************************************************//
/*	\class ADukeClone_Base
*/
//***************************************************************************//

class DNAI_API ADukeClone_Base : public AMaleCombat
{
public:
    class APlayerPawn* PlayerPawnOwner;
    DECLARE_CLASS(ADukeClone_Base,AMaleCombat,0|CLASS_Config,dnAI)
};
// Class DukeClone_Base exported:
//   Properties size: 4 bytes (10068 total)


//***************************************************************************//
/*	\class AEggPod_Base
*/
//***************************************************************************//

class DNAI_API AEggPod_Base : public AAIActor
{
public:
    INT StartPreOpenDist;
    INT OpenFastDist;
    DECLARE_CLASS(AEggPod_Base,AAIActor,0|CLASS_Config,dnAI)
};
// Class EggPod_Base exported:
//   Properties size: 8 bytes (10072 total)


//***************************************************************************//
/*	\class APathRover
*/
//***************************************************************************//

class DNAI_API APathRover : public ABaseAI
{
public:
    class AActor* MyTarget;
    FVector NextPosition;
    INT FinalDest;
    DECLARE_FUNCTION(execCanPathToPos);
    DECLARE_CLASS(APathRover,ABaseAI,0|CLASS_Config,dnAI)
    NO_DEFAULT_CONSTRUCTOR(APathRover)
};
// Class PathRover exported:
//   Properties size: 20 bytes (4848 total)


//***************************************************************************//
/*	\class AdnAlienDropship_Base
*/
//***************************************************************************//

class DNAI_API AdnAlienDropship_Base : public AdnDecoration
{
public:
    dnArray<FSDropShipSpawnInfo> SpawnInfo;
    DECLARE_CLASS(AdnAlienDropship_Base,AdnDecoration,0,dnAI)

    // properties that must be constructed special for AdnAlienDropship_Base:
    //       * SpawnInfo

};
// Class dnAlienDropship_Base exported:
//   Properties size: 12 bytes (2968 total)


//***************************************************************************//
/*	\class APodGirl_Base
*/
//***************************************************************************//

class DNAI_API APodGirl_Base : public AdnDecoration
{
public:
    class UClass* ClassToSpawn;
    FLOAT SensorRadius;
    DECLARE_CLASS(APodGirl_Base,AdnDecoration,0,dnAI)
};
// Class PodGirl_Base exported:
//   Properties size: 8 bytes (2964 total)


//***************************************************************************//
/*	\class AScriptTrigger
*/
//***************************************************************************//

class DNAI_API AScriptTrigger : public ATriggers
{
public:
    class UScriptObj* Script;
    BITFIELD PushScript:1 GCC_PACK(4);
    BITFIELD DebugScriptTrigger:1;
    DECLARE_CLASS(AScriptTrigger,ATriggers,0,dnAI)
    NO_DEFAULT_CONSTRUCTOR(AScriptTrigger)
};
// Class ScriptTrigger exported:
//   Properties size: 8 bytes (1196 total)


//***************************************************************************//
/*	\class AAIInputDispatcher_Base
*/
//***************************************************************************//

class DNAI_API AAIInputDispatcher_Base : public ATriggers
{
public:
    BITFIELD Dispatching:1 GCC_PACK(4);
    class AAIActor* MyActor GCC_PACK(4);
    DECLARE_CLASS(AAIInputDispatcher_Base,ATriggers,0,dnAI)
    NO_DEFAULT_CONSTRUCTOR(AAIInputDispatcher_Base)
};
// Class AIInputDispatcher_Base exported:
//   Properties size: 8 bytes (1196 total)


//***************************************************************************//
/*	\class AAIInputDispatcher_Auto
*/
//***************************************************************************//

class DNAI_API AAIInputDispatcher_Auto : public AAIInputDispatcher_Base
{
public:
    DECLARE_CLASS(AAIInputDispatcher_Auto,AAIInputDispatcher_Base,0,dnAI)
    NO_DEFAULT_CONSTRUCTOR(AAIInputDispatcher_Auto)
};
// Class AIInputDispatcher_Auto exported:
//   Properties size: 0 bytes (1196 total)


//***************************************************************************//
/*	\class AAIInputDispatcher_Vehicle
*/
//***************************************************************************//

class DNAI_API AAIInputDispatcher_Vehicle : public AAIInputDispatcher_Auto
{
public:
    BITFIELD bUsePathing:1 GCC_PACK(4);
    BITFIELD bDebugVehicleAI:1;
    BITFIELD bPowerSlider:1;
    FLOAT DestTolerance GCC_PACK(4);
    FLOAT PowerSlideStopDelay;
    FLOAT PowerSlideMinVelocity;
    FLOAT StraightMinDot;
    class AVehicleSpaceBase* DriverSeat;
    class AVehicleBase* Vehicle;
    FLOAT PowerSlideStopTime;
    FLOAT DestToleranceSquared;
    BITFIELD bFinalDest:1 GCC_PACK(4);
    BITFIELD bNavCached:1;
    FVector TargetPos GCC_PACK(4);
    FVector LastTargetPos;
    FVector LastGoalPos;
    DECLARE_CLASS(AAIInputDispatcher_Vehicle,AAIInputDispatcher_Auto,0,dnAI)
    NO_DEFAULT_CONSTRUCTOR(AAIInputDispatcher_Vehicle)
};
// Class AIInputDispatcher_Vehicle exported:
//   Properties size: 76 bytes (1272 total)


//***************************************************************************//
/*	\class AAIActorFactory
*/
//***************************************************************************//


struct AAIActorFactory_eventGetSpawnClass_Parms
{
    class UClass* SourceClass;
    class UClass* ReturnValue;
};

struct AAIActorFactory_eventInternalSpawn_Parms
{
    class AActor* Other;
    class APawn* EventInstigator;
    class AAIActor* SpawnedActor;
    BITFIELD ReturnValue;
};

struct AAIActorFactory_eventSetActionPointTags_Parms
{
    INT NewCurrent;
    INT NewDesired;
    dnArray<FName> NewTags;
};

struct AAIActorFactory_eventSetActionPointIndex_Parms
{
    INT NewCurrent;
    INT NewDesired;
};
class DNAI_API AAIActorFactory : public ATriggers
{
public:
    INT m_nMaxSpawnOverLifeTime;
    INT m_nMaxConcurrentSpawns;
    BITFIELD m_bOneSpawnPerFrame:1 GCC_PACK(4);
    BITFIELD ForceDropToFloor:1;
    BITFIELD bAllowNotFittingSpawn:1;
    class ATriggerAssign* AutoAssignActor GCC_PACK(4);
    FLOAT SpawnDelay;
    FLOAT SpawnDelayVariance;
    FLOAT MinSpawnInterval;
    FName TriggerWhenAllDead;
    BITFIELD bSpawnOnlyWhenPlayerNotFacing:1 GCC_PACK(4);
    BITFIELD bSpawnOnlyWhenPlayerNotInView:1;
    BITFIELD bRetrySpawnUntilSuccess:1;
    FLOAT SpawnRetryDelay GCC_PACK(4);
    class UClass* m_Class;
    dnArray<FSRandomClassSpawn> m_RandomClasses;
    dnArray<FSRandomClassSpawn> m_OrderedClasses;
    INT OrderedClassesIndex;
    FName m_strTag;
    FName m_strOwnerTag;
    FName m_strEvent;
    BITFIELD m_bStartTickDisabled:1 GCC_PACK(4);
    /* EBitModifier */ BYTE SimplePawnPhysicsCollisionModifier GCC_PACK(4);
    FLOAT m_fSpawnTimeWarp;
    BITFIELD InitialAnimControllerOverride:1 GCC_PACK(4);
    /* EAIAnimController */ BYTE InitialAnimController GCC_PACK(4);
    BITFIELD StartShrunk:1 GCC_PACK(4);
    FName PathIDOverride GCC_PACK(4);
    BITFIELD PathForceFlySwim:1 GCC_PACK(4);
    FName PhysicsEntityGroupOverride GCC_PACK(4);
    BITFIELD MountLight:1 GCC_PACK(4);
    /* EBitModifier */ BYTE bCastStencilShadowsModifier GCC_PACK(4);
    /* EBitModifier */ BYTE ForceStartJetpack;
    /* EFloatModifier */ BYTE ChanceFlyModifier;
    FLOAT ChanceFly;
    /* EFloatModifier */ BYTE ChanceLandModifier;
    FLOAT ChanceLand;
    /* EAIAttackConstraint */ BYTE AttackConstraint;
    /* EBitModifier */ BYTE AllowBezerkModifier;
    BITFIELD StartBezerk:1 GCC_PACK(4);
    BITFIELD DisableJumpAttack:1;
    /* EBitModifier */ BYTE AllowProneModifier GCC_PACK(4);
    /* EBitModifier */ BYTE AllowStasisModifier;
    /* EBitModifier */ BYTE AllowHaywireModifier;
    /* EBitModifier */ BYTE AllowQuickTeleports;
    FLOAT MeleeZone;
    dnArray<FName> ActionPointTags;
    INT ActionPointIndex;
    INT ActionPointDesiredIndex;
    /* EFloatModifier */ BYTE MinPlayerHateModifier;
    FLOAT MinPlayerHate;
    /* EFloatModifier */ BYTE MaxPlayerHateModifier;
    FLOAT MaxPlayerHate;
    /* EFloatModifier */ BYTE PlayerHateRecoverRateModifier;
    FLOAT PlayerHateRecoverRate;
    /* EBitModifier */ BYTE AvoidDangersModifier;
    /* EBitModifier */ BYTE UseActionFollowModifier;
    dnArray<FSUseXItemInfo> UseableItems;
    /* EBitModifier */ BYTE AvoidGuardedPlayerModifier;
    BITFIELD DisableAllCollision:1 GCC_PACK(4);
    /* EBitModifier */ BYTE SpecialStepHeightCollisionModifier GCC_PACK(4);
    /* EFloatModifier */ BYTE ChanceSayPainModifier;
    FLOAT ChanceSayPain;
    /* EFloatModifier */ BYTE ChanceSayTakeCoverModifier;
    FLOAT ChanceSayTakeCover;
    /* EFloatModifier */ BYTE ChanceSayFireInTheHoleModifier;
    FLOAT ChanceSayFireInTheHole;
    /* EFloatModifier */ BYTE ChanceSayLowHealthModifier;
    FLOAT ChanceSayLowHealth;
    /* EFloatModifier */ BYTE ChanceSayConfirmKillModifier;
    FLOAT ChanceSayConfirmKill;
    /* EFloatModifier */ BYTE ChanceSayReloadingModifier;
    FLOAT ChanceSayReloading;
    /* EFloatModifier */ BYTE ChanceSayManDownModifier;
    FLOAT ChanceSayManDown;
    /* EFloatModifier */ BYTE ChanceSayFriendlyFireModifier;
    FLOAT ChanceSayFriendlyFire;
    /* EFloatModifier */ BYTE ChanceSayEnemySpottedModifier;
    FLOAT ChanceSayEnemySpotted;
    class UClass* VoicePackOverride;
    INT m_nHealth;
    BITFIELD m_bOverrideHealth:1 GCC_PACK(4);
    dnArray<FSAIHealthTrigger> HealthTriggers GCC_PACK(4);
    FLOAT m_fDeathAnimChance;
    BITFIELD m_bOverrideDeathAnimChance:1 GCC_PACK(4);
    BITFIELD bAllowFrozenExecution:1;
    BITFIELD bOverrideAllowFrozenExecution:1;
    BITFIELD bPlayDeathSound:1;
    FLOAT LedgeDistOverride GCC_PACK(4);
    FLOAT SizeLedgeImpulse;
    BITFIELD bDisableWeaponDrops:1 GCC_PACK(4);
    BITFIELD bDisableCorpseCleanup:1;
    BITFIELD m_bSetRelations:1;
    dnArray<FSRelationship> m_Relations GCC_PACK(4);
    BITFIELD SetFaction:1 GCC_PACK(4);
    class UClass* Faction GCC_PACK(4);
    dnArray<class UMesh*> OverrideMeshList;
    dnArray<FSUpdateMaterialEx> OverrideSkinList;
    INT OverrideMeshListIndex;
    dnArray<class UClass*> Weapons;
    dnArray<class UClass*> RandomWeapons;
    BITFIELD SpawnWithWeaponDrawn:1 GCC_PACK(4);
    INT NumPipeBombs GCC_PACK(4);
    FLOAT PipeBombChance;
    dnArray<FSMountedActorPrefab> MountOnSpawn;
    FName ThrowPropTag;
    FName m_fnInitialTargetTag;
    FName ScriptTag;
    FName UsedScriptTag;
    class UScriptObj* SpawnScript;
    FName TargetAquiredEvent;
    FName TargetClearedEvent;
    FName FactoryFinishedEvent;
    /* EBitModifier */ BYTE TickOnlyNearbyModifier;
    /* EBitModifier */ BYTE TickOnlyRecentModifier;
    /* EBitModifier */ BYTE TickOnlyZoneRecentModifier;
    /* EFloatModifier */ BYTE TickNearbyRadiusModifier;
    FLOAT TickNearbyRadiusChange;
    /* EFloatModifier */ BYTE TickSelfRecentTimeModifier;
    FLOAT TickSelfRecentTimeChange;
    /* EFloatModifier */ BYTE TickZoneRecentTimeModifier;
    FLOAT TickZoneRecentTimeChange;
    dnArray<class AAIActorFactoryListener*> SpawnEventListeners;
    dnArray<class AAIActorFactoryListener*> DeathEventListeners;
    /* EBitModifier */ BYTE DebugTickingModifier;
    /* EBitModifier */ BYTE DebugWeaponAimerModifier;
    /* EBitModifier */ BYTE DebugHeadAimerModifier;
    /* EBitModifier */ BYTE DebugEyeAimerModifier;
    /* EBitModifier */ BYTE DebugExecutiveModifier;
    /* EBitModifier */ BYTE DebugOpChangesModifier;
    /* EBitModifier */ BYTE DebugDecisionTreeModifier;
    /* EBitModifier */ BYTE DebugScriptExecModifier;
    /* EBitModifier */ BYTE DebugTargetModifier;
    /* EBitModifier */ BYTE DebugWeaponTargetEvalModifier;
    /* EBitModifier */ BYTE DebugLookTargetEvalModifier;
    /* EBitModifier */ BYTE DebugHeardSoundModifier;
    /* EBitModifier */ BYTE DebugGoalSelectionModifier;
    /* EBitModifier */ BYTE DebugGotoXModifier;
    /* EBitModifier */ BYTE DebugCloakingModifier;
    /* EBitModifier */ BYTE DebugPipeBombsModifier;
    /* EBitModifier */ BYTE DebugDangerEvaluationModifier;
    /* EBitModifier */ BYTE DebugTKModifier;
    /* EBitModifier */ BYTE DebugRollsModifier;
    /* EBitModifier */ BYTE DebugPropsModifier;
    /* EBitModifier */ BYTE DebugLOSChecksModifier;
    /* EBitModifier */ BYTE DebugContractsModifier;
    /* EBitModifier */ BYTE DebugGuardingModifier;
    /* EBitModifier */ BYTE DebugRangeModifier;
    /* EBitModifier */ BYTE DebugDistModifier;
    /* EBitModifier */ BYTE DebugTrailModifier;
    /* EBitModifier */ BYTE DebugDrawExecModifier;
    /* EBitModifier */ BYTE DebugActionPointsModifier;
    /* EBitModifier */ BYTE DebugRelationsModifier;
    /* EBitModifier */ BYTE DebugHateModifier;
    /* EBitModifier */ BYTE DebugLedgesModifier;
    /* EBitModifier */ BYTE DebugHealthModifier;
    /* EBitModifier */ BYTE DebugDrawActionPointsModifier;
    /* EBitModifier */ BYTE DebugDrawCollisionModifier;
    /* EBitModifier */ BYTE DebugDrawFOVModifier;
    /* EBitModifier */ BYTE DebugDrawLOSModifier;
    /* EBitModifier */ BYTE DebugWeaponManager;
    /* EBitModifier */ BYTE DebugStateAnimX;
    /* EBitModifier */ BYTE DebugDoors;
    /* EBitModifier */ BYTE DebugTurn;
    BITFIELD bUseMyLog:1 GCC_PACK(4);
    BITFIELD DebugFactory:1;
    class AAIActor* LastSpawnedActor GCC_PACK(4);
    dnArray<class AAIActor*> CurrentSpawns;
    class AAIActorFactoryManager* Manager;
    INT TotalSpawned;
    INT SpawnedFrameStamp;
    FLOAT LastPendingSpawnTime;
    INT PendingSpawns;
    BITFIELD ClearSpawnAnimSeq:1 GCC_PACK(4);
    INT TotalDead GCC_PACK(4);
    class APlayerPawn* LocalPlayerPawn;
    inline class UClass* __fastcall eventGetSpawnClass(class UClass* SourceClass)
    {
        AAIActorFactory_eventGetSpawnClass_Parms Parms;
        Parms.ReturnValue=0;
        Parms.SourceClass=SourceClass;
        ProcessEvent(FindFunctionChecked(DNAI_GetSpawnClass), &Parms);
        return Parms.ReturnValue;
    }
    inline BITFIELD __fastcall eventInternalSpawn(class AActor* Other, class APawn* EventInstigator, class AAIActor*& SpawnedActor)
    {
        AAIActorFactory_eventInternalSpawn_Parms Parms;
        Parms.ReturnValue=0;
        Parms.Other=Other;
        Parms.EventInstigator=EventInstigator;
        Parms.SpawnedActor=SpawnedActor;
        ProcessEvent(FindFunctionChecked(DNAI_InternalSpawn), &Parms);
        SpawnedActor=Parms.SpawnedActor;
        return Parms.ReturnValue;
    }
    inline void __fastcall eventSetActionPointTags(INT NewCurrent, INT NewDesired, dnArray<FName> NewTags)
    {
        AAIActorFactory_eventSetActionPointTags_Parms Parms;
        Parms.NewCurrent=NewCurrent;
        Parms.NewDesired=NewDesired;
        Parms.NewTags=NewTags;
        ProcessEvent(FindFunctionChecked(DNAI_SetActionPointTags), &Parms);
    }
    inline void __fastcall eventSetActionPointIndex(INT NewCurrent, INT NewDesired)
    {
        AAIActorFactory_eventSetActionPointIndex_Parms Parms;
        Parms.NewCurrent=NewCurrent;
        Parms.NewDesired=NewDesired;
        ProcessEvent(FindFunctionChecked(DNAI_SetActionPointIndex), &Parms);
    }
    DECLARE_CLASS(AAIActorFactory,ATriggers,0,dnAI)

    // properties that must be constructed special for AAIActorFactory:
    //       * m_RandomClasses
    //       * m_OrderedClasses
    //       * ActionPointTags
    //       * UseableItems
    //       * HealthTriggers
    //       * m_Relations
    //       * OverrideMeshList
    //       * OverrideSkinList
    //       * Weapons
    //       * RandomWeapons
    //       * MountOnSpawn
    //       * SpawnEventListeners
    //       * DeathEventListeners
    //       * CurrentSpawns

};
// Class AIActorFactory exported:
//   Properties size: 608 bytes (1796 total)


//***************************************************************************//
/*	\class AAIHUD
*/
//***************************************************************************//

class DNAI_API AAIHUD : public ADukeHUD
{
public:
    class AAIActor* m_aTarget;
    INT m_iLineHeight;
    INT m_iCurLine;
    INT m_iStartX;
    INT m_iStartY;
    FLOAT m_maxLineSize;
    FName CachedAnimName;
    BITFIELD bActiveTargeting:1 GCC_PACK(4);
    DECLARE_CLASS(AAIHUD,ADukeHUD,0,dnAI)
};
// Class AIHUD exported:
//   Properties size: 32 bytes (10688 total)


//***************************************************************************//
/*	\class AAIBrainEditor
*/
//***************************************************************************//

#define UCONST_STATE_EDIT_USER 8
#define UCONST_TRANS_REPLACEALL_USER_VAR 7
#define UCONST_TRANS_REPLACE_USER_VAR 6
#define UCONST_TRANS_REMOVE_USER_VAR 5
#define UCONST_BROWSE_USER_VAR 4
#define UCONST_OP_USER_VAR 3
#define UCONST_FSM_TEST_USER_VAR 2
#define UCONST_FSM_EDIT_USER_VAR 1
class DNAI_API AAIBrainEditor : public AAIHUD
{
public:
    class AAIActorFactory* Factory;
    FVector PositionOffset;
    class UClass* ClassToEdit;
    FName FSMToEdit;
    FAINode FSMNode;
    dnArray<FAIState> FSMStates;
    FName StateToEdit;
    FAITransition NewTransition;
    dnArray<FName> WatchList_Ident;
    dnArray<FName> WatchList_Func;
    dnArray</* EAICondition */ BYTE> WatchList_Cond;
    INT MaxHistory;
    BITFIELD ShowPass:1 GCC_PACK(4);
    BITFIELD ShowFail:1;
    dnArray<FAINode> OPNodes GCC_PACK(4);
    FBGInfo TransitionHistoryBG;
    FBGInfo StateHistoryBG;
    /* EAIOp */ BYTE SelectedOP;
    INT TransitionHistMax;
    DECLARE_FUNCTION(execExecuteOp);
    DECLARE_FUNCTION(execExportFSMToText);
    DECLARE_FUNCTION(execNative_BeginFSMTest);
    DECLARE_CLASS(AAIBrainEditor,AAIHUD,0,dnAI)

    // properties that must be constructed special for AAIBrainEditor:
    //       * FSMNode
    //       * FSMStates
    //       * WatchList_Ident
    //       * WatchList_Func
    //       * WatchList_Cond
    //       * OPNodes

};
// Class AIBrainEditor exported:
//   Properties size: 220 bytes (10908 total)


//***************************************************************************//
/*	\class UAction_Teleport
*/
//***************************************************************************//

class DNAI_API UAction_Teleport : public UAction
{
public:
    DECLARE_CLASS(UAction_Teleport,UAction,0,dnAI)
};
// Class Action_Teleport exported:
//   Properties size: 0 bytes (40 total)


//***************************************************************************//
/*	\class UAction_PopUp
*/
//***************************************************************************//

class DNAI_API UAction_PopUp : public UAction
{
public:
    dnArray</* EAIPopUpType */ BYTE> Popups;
    /* EAIPopUpSelectionMethod */ BYTE SelectionMethod;
    dnArray<class UClass*> RestrictedPopups;
    /* EAIPopUpType */ BYTE PopUpTypeIndex;
    INT PopUpIndex;
    DECLARE_CLASS(UAction_PopUp,UAction,0,dnAI)

    // properties that must be constructed special for UAction_PopUp:
    //       * Popups
    //       * RestrictedPopups

};
// Class Action_PopUp exported:
//   Properties size: 36 bytes (76 total)


//***************************************************************************//
/*	\class UAction_CircularCover
*/
//***************************************************************************//

class DNAI_API UAction_CircularCover : public UAction_PopUp
{
public:
    INT MinAngleToCover;
    INT MaxAngleToCover;
    FLOAT Radius;
    DECLARE_CLASS(UAction_CircularCover,UAction_PopUp,0,dnAI)
};
// Class Action_CircularCover exported:
//   Properties size: 12 bytes (88 total)


//***************************************************************************//
/*	\class UAIAnimationControllerEx
*/
//***************************************************************************//


struct UAIAnimationControllerEx_eventGetTransitionAnimName_Parms
{
    /* EAIAnimController */ BYTE DesiredController;
    FName OutAnimName;
    BITFIELD ReturnValue;
};

struct UAIAnimationControllerEx_eventShouldPlayBigPain_Parms
{
    /* EPawnBodyPart */ BYTE Part;
    class UClass* DamageType;
    INT Damage;
    FVector Dir;
    BITFIELD ReturnValue;
};
class DNAI_API UAIAnimationControllerEx : public UAnimationControllerEx
{
public:
    INT LastPrimaryRefId;
    class UAIAnimationControllerEx* FallbackController;
    FSDeathAnim DeathAnims[20];
    BITFIELD HasDeathScriptAnim:1 GCC_PACK(4);
    BITFIELD bUseSimplePain:1;
    BITFIELD bNonDirectionalPains:1;
    FSPainAnim PainAnims[20] GCC_PACK(4);
    FSMeleePainAnim MeleePainAnims;
    FSBoneAimConstraints MuzzleAimerContraints;
    FSBoneAimConstraints WeaponAimerContraints;
    FSBoneAimConstraints HeadAimerContraints;
    FSBoneAimConstraints BodyAimerContraints;
    DECLARE_FUNCTION(execSetAnimState);
    DECLARE_FUNCTION(execSetAnimState_RateScaled);
    inline BITFIELD __fastcall eventGetTransitionAnimName(/* EAIAnimController */ BYTE DesiredController, FName& OutAnimName)
    {
        UAIAnimationControllerEx_eventGetTransitionAnimName_Parms Parms;
        Parms.ReturnValue=0;
        Parms.DesiredController=DesiredController;
        Parms.OutAnimName=OutAnimName;
        ProcessEvent(FindFunctionChecked(DNAI_GetTransitionAnimName), &Parms);
        OutAnimName=Parms.OutAnimName;
        return Parms.ReturnValue;
    }
    inline BITFIELD __fastcall eventShouldPlayBigPain(/* EPawnBodyPart */ BYTE Part, class UClass* DamageType, INT Damage, FVector Dir)
    {
        UAIAnimationControllerEx_eventShouldPlayBigPain_Parms Parms;
        Parms.ReturnValue=0;
        Parms.Part=Part;
        Parms.DamageType=DamageType;
        Parms.Damage=Damage;
        Parms.Dir=Dir;
        ProcessEvent(FindFunctionChecked(DNAI_ShouldPlayBigPain), &Parms);
        return Parms.ReturnValue;
    }
    DECLARE_CLASS(UAIAnimationControllerEx,UAnimationControllerEx,0,dnAI)
};
// Class AIAnimationControllerEx exported:
//   Properties size: 1596 bytes (1812 total)


//***************************************************************************//
/*	\class UTargetEvaluator
*/
//***************************************************************************//

class DNAI_API UTargetEvaluator : public UObject
{
public:
    DECLARE_CLASS(UTargetEvaluator,UObject,0,dnAI)
    NO_DEFAULT_CONSTRUCTOR(UTargetEvaluator)
};
// Class TargetEvaluator exported:
//   Properties size: 0 bytes (40 total)


//***************************************************************************//
/*	\class UScriptPlayer
*/
//***************************************************************************//

class DNAI_API UScriptPlayer : public UObject
{
public:
    class AAIActor* MyOwner;
    dnArray<FSScriptObjInfo> ScriptStack;
    BITFIELD Playing:1 GCC_PACK(4);
    INT ExecutingCount GCC_PACK(4);
    BITFIELD bDestroyAfterExecute:1 GCC_PACK(4);
    DECLARE_FUNCTION(execGoBackOne);
    DECLARE_FUNCTION(execGetMethodString);
    DECLARE_FUNCTION(execGetMethodIndex);
    DECLARE_FUNCTION(execGetNumMethods);
    DECLARE_FUNCTION(execGetScriptName);
    DECLARE_FUNCTION(execGetNumScripts);
    DECLARE_FUNCTION(execIsPlaying);
    DECLARE_FUNCTION(execStopScript);
    DECLARE_FUNCTION(execPlayScript);
    DECLARE_FUNCTION(execInit);
    DECLARE_FUNCTION(execShouldTickNoRules);
    DECLARE_CLASS(UScriptPlayer,UObject,0,dnAI)
    NO_DEFAULT_CONSTRUCTOR_START(UScriptPlayer)
    NO_DEFAULT_CONSTRUCTOR_INITLAST(ScriptStack)
};
// Class ScriptPlayer exported:
//   Properties size: 28 bytes (68 total)


//***************************************************************************//
/*	\class UScriptObj
*/
//***************************************************************************//


struct UScriptObj_eventRegisterPrecacheComponents_Parms
{
    class UPrecacheIndex* PrecacheIndex;
    class AAIActor* Actor;
};
class DNAI_API UScriptObj : public UObject
{
public:
    FName ScriptName;
    dnArray<class UScriptMethod*> Methods;
    BITFIELD SingleUser:1 GCC_PACK(4);
    BITFIELD bForceTickNoRules:1;
    class AAIActor* User GCC_PACK(4);
    BITFIELD Suicide:1 GCC_PACK(4);
    inline void __fastcall eventRegisterPrecacheComponents(class UPrecacheIndex* PrecacheIndex, class AAIActor* Actor)
    {
        UScriptObj_eventRegisterPrecacheComponents_Parms Parms;
        Parms.PrecacheIndex=PrecacheIndex;
        Parms.Actor=Actor;
        ProcessEvent(FindFunctionChecked(DNAI_RegisterPrecacheComponents), &Parms);
    }
    DECLARE_CLASS(UScriptObj,UObject,0,dnAI)
    NO_DEFAULT_CONSTRUCTOR_START(UScriptObj)
    NO_DEFAULT_CONSTRUCTOR_INITLAST(Methods)
};
// Class ScriptObj exported:
//   Properties size: 28 bytes (68 total)


//***************************************************************************//
/*	\class UScriptMethod
*/
//***************************************************************************//


struct UScriptMethod_eventGetMethodString_Parms
{
    FString ReturnValue;
};

struct UScriptMethod_eventExecute_Parms
{
    class AAIActor* MyActor;
    BITFIELD PrintDebug;
    /* EScriptState */ BYTE ReturnValue;
};
class DNAI_API UScriptMethod : public UObject
{
public:
    BITFIELD Latent:1 GCC_PACK(4);
    DECLARE_FUNCTION(execRegisterPrecacheComponents);
    DECLARE_FUNCTION(execExecuteNative);
    inline FString __fastcall eventGetMethodString()
    {
        UScriptMethod_eventGetMethodString_Parms Parms;
        ProcessEvent(FindFunctionChecked(DNAI_GetMethodString), &Parms);
        return Parms.ReturnValue;
    }
    inline /* EScriptState */ BYTE __fastcall eventExecute(class AAIActor* MyActor, BITFIELD PrintDebug)
    {
        UScriptMethod_eventExecute_Parms Parms;
        Parms.ReturnValue=0;
        Parms.MyActor=MyActor;
        Parms.PrintDebug=PrintDebug;
        ProcessEvent(FindFunctionChecked(DNAI_Execute), &Parms);
        return Parms.ReturnValue;
    }
    DECLARE_CLASS(UScriptMethod,UObject,0,dnAI)
};
// Class ScriptMethod exported:
//   Properties size: 4 bytes (44 total)


//***************************************************************************//
/*	\class UScriptMethod_DigsGirl_FinishFlirt_NativeBase
*/
//***************************************************************************//


struct UScriptMethod_DigsGirl_FinishFlirt_NativeBase_eventFinishFlirt_Parms
{
    class AAIActor* MyGirl;
};
class DNAI_API UScriptMethod_DigsGirl_FinishFlirt_NativeBase : public UScriptMethod
{
public:
    inline void __fastcall eventFinishFlirt(class AAIActor* MyGirl)
    {
        UScriptMethod_DigsGirl_FinishFlirt_NativeBase_eventFinishFlirt_Parms Parms;
        Parms.MyGirl=MyGirl;
        ProcessEvent(FindFunctionChecked(DNAI_FinishFlirt), &Parms);
    }
    DECLARE_CLASS(UScriptMethod_DigsGirl_FinishFlirt_NativeBase,UScriptMethod,0,dnAI)
};
// Class ScriptMethod_DigsGirl_FinishFlirt_NativeBase exported:
//   Properties size: 0 bytes (44 total)


//***************************************************************************//
/*	\class UScriptMethod_X_TEST_Op
*/
//***************************************************************************//

class DNAI_API UScriptMethod_X_TEST_Op : public UScriptMethod
{
public:
    /* EAIOp */ BYTE Op;
    DECLARE_CLASS(UScriptMethod_X_TEST_Op,UScriptMethod,0,dnAI)
};
// Class ScriptMethod_X_TEST_Op exported:
//   Properties size: 4 bytes (48 total)


//***************************************************************************//
/*	\class UScriptMethod_OverrideExecution
*/
//***************************************************************************//

class DNAI_API UScriptMethod_OverrideExecution : public UScriptMethod
{
public:
    FLOAT m_fDeathAnimChance;
    BITFIELD m_bAllowFrozenExecution:1 GCC_PACK(4);
    DECLARE_CLASS(UScriptMethod_OverrideExecution,UScriptMethod,0,dnAI)
};
// Class ScriptMethod_OverrideExecution exported:
//   Properties size: 8 bytes (52 total)


//***************************************************************************//
/*	\class UScriptMethod_DropProp
*/
//***************************************************************************//

class DNAI_API UScriptMethod_DropProp : public UScriptMethod
{
public:
    BITFIELD DestroyProp:1 GCC_PACK(4);
    DECLARE_CLASS(UScriptMethod_DropProp,UScriptMethod,0,dnAI)
};
// Class ScriptMethod_DropProp exported:
//   Properties size: 4 bytes (48 total)


//***************************************************************************//
/*	\class UScriptMethod_AnimFadeChannelBlock
*/
//***************************************************************************//

class DNAI_API UScriptMethod_AnimFadeChannelBlock : public UScriptMethod
{
public:
    FName ChannelBlockName;
    FLOAT TargetAlpha;
    FLOAT FadeTime;
    BITFIELD bClearAnimsOnFinish:1 GCC_PACK(4);
    FName Anim GCC_PACK(4);
    DECLARE_CLASS(UScriptMethod_AnimFadeChannelBlock,UScriptMethod,0,dnAI)
};
// Class ScriptMethod_AnimFadeChannelBlock exported:
//   Properties size: 20 bytes (64 total)


//***************************************************************************//
/*	\class UScriptMethod_BoneAimer
*/
//***************************************************************************//

class DNAI_API UScriptMethod_BoneAimer : public UScriptMethod
{
public:
    BITFIELD NewHasBoneAimer:1 GCC_PACK(4);
    DECLARE_CLASS(UScriptMethod_BoneAimer,UScriptMethod,0,dnAI)
};
// Class ScriptMethod_BoneAimer exported:
//   Properties size: 4 bytes (48 total)


//***************************************************************************//
/*	\class UScriptMethod_UseItem
*/
//***************************************************************************//

class DNAI_API UScriptMethod_UseItem : public UScriptMethod
{
public:
    FName TargetItemTag;
    FName InputDispatcherTag;
    FName AttachedEvent;
    BITFIELD ForceAttach:1 GCC_PACK(4);
    BITFIELD AllowProceduralAim:1;
    DECLARE_CLASS(UScriptMethod_UseItem,UScriptMethod,0,dnAI)
};
// Class ScriptMethod_UseItem exported:
//   Properties size: 16 bytes (60 total)


//***************************************************************************//
/*	\class UScriptMethod_TurnToPos
*/
//***************************************************************************//

class DNAI_API UScriptMethod_TurnToPos : public UScriptMethod
{
public:
    FVector TargetPos;
    FLOAT ShouldTurnThreshold;
    FLOAT FaceThreshold;
    BITFIELD RelativeLocation:1 GCC_PACK(4);
    BITFIELD RelativeRotation:1;
    DECLARE_CLASS(UScriptMethod_TurnToPos,UScriptMethod,0,dnAI)
};
// Class ScriptMethod_TurnToPos exported:
//   Properties size: 24 bytes (68 total)


//***************************************************************************//
/*	\class UScriptMethod_TurnToActor
*/
//***************************************************************************//

class DNAI_API UScriptMethod_TurnToActor : public UScriptMethod
{
public:
    FName TargetActorTag;
    FLOAT ShouldTurnThreshold;
    FLOAT FaceThreshold;
    DECLARE_CLASS(UScriptMethod_TurnToActor,UScriptMethod,0,dnAI)
};
// Class ScriptMethod_TurnToActor exported:
//   Properties size: 12 bytes (56 total)


//***************************************************************************//
/*	\class UScriptMethod_Trigger
*/
//***************************************************************************//

class DNAI_API UScriptMethod_Trigger : public UScriptMethod
{
public:
    FName TargetTag;
    DECLARE_CLASS(UScriptMethod_Trigger,UScriptMethod,0,dnAI)
};
// Class ScriptMethod_Trigger exported:
//   Properties size: 4 bytes (48 total)


//***************************************************************************//
/*	\class UScriptMethod_TKThrow
*/
//***************************************************************************//

class DNAI_API UScriptMethod_TKThrow : public UScriptMethod
{
public:
    DECLARE_CLASS(UScriptMethod_TKThrow,UScriptMethod,0,dnAI)
};
// Class ScriptMethod_TKThrow exported:
//   Properties size: 0 bytes (44 total)


//***************************************************************************//
/*	\class UScriptMethod_TKCatch
*/
//***************************************************************************//

class DNAI_API UScriptMethod_TKCatch : public UScriptMethod
{
public:
    FName TargetActorTag;
    DECLARE_CLASS(UScriptMethod_TKCatch,UScriptMethod,0,dnAI)
};
// Class ScriptMethod_TKCatch exported:
//   Properties size: 4 bytes (48 total)


//***************************************************************************//
/*	\class UScriptMethod_ThrowPipeBomb
*/
//***************************************************************************//

class DNAI_API UScriptMethod_ThrowPipeBomb : public UScriptMethod
{
public:
    FName TargetActorTag;
    BITFIELD ThrowAtCurrentTarget:1 GCC_PACK(4);
    FVector TargetPosition GCC_PACK(4);
    BITFIELD bTargetPositionRelative:1 GCC_PACK(4);
    FLOAT MaxHeight GCC_PACK(4);
    BITFIELD DrawDebug:1 GCC_PACK(4);
    DECLARE_CLASS(UScriptMethod_ThrowPipeBomb,UScriptMethod,0,dnAI)
};
// Class ScriptMethod_ThrowPipeBomb exported:
//   Properties size: 32 bytes (76 total)


//***************************************************************************//
/*	\class UScriptMethod_Throw
*/
//***************************************************************************//

class DNAI_API UScriptMethod_Throw : public UScriptMethod
{
public:
    DECLARE_CLASS(UScriptMethod_Throw,UScriptMethod,0,dnAI)
};
// Class ScriptMethod_Throw exported:
//   Properties size: 0 bytes (44 total)


//***************************************************************************//
/*	\class UScriptMethod_TeleportToPos
*/
//***************************************************************************//

class DNAI_API UScriptMethod_TeleportToPos : public UScriptMethod
{
public:
    FVector TargetPos;
    FRotator Rotn;
    BITFIELD FaceTarget:1 GCC_PACK(4);
    BITFIELD bInstantTeleport:1;
    BITFIELD bEndingOnly:1;
    DECLARE_CLASS(UScriptMethod_TeleportToPos,UScriptMethod,0,dnAI)
};
// Class ScriptMethod_TeleportToPos exported:
//   Properties size: 28 bytes (72 total)


//***************************************************************************//
/*	\class UScriptMethod_TeleportToActor
*/
//***************************************************************************//

class DNAI_API UScriptMethod_TeleportToActor : public UScriptMethod
{
public:
    FName TargetActorTag;
    BITFIELD FaceTarget:1 GCC_PACK(4);
    BITFIELD bInstantTeleport:1;
    BITFIELD bEndingOnly:1;
    DECLARE_CLASS(UScriptMethod_TeleportToActor,UScriptMethod,0,dnAI)
};
// Class ScriptMethod_TeleportToActor exported:
//   Properties size: 8 bytes (52 total)


//***************************************************************************//
/*	\class UScriptMethod_TakeOff
*/
//***************************************************************************//

class DNAI_API UScriptMethod_TakeOff : public UScriptMethod
{
public:
    FVector TakeOffVelocity;
    DECLARE_CLASS(UScriptMethod_TakeOff,UScriptMethod,0,dnAI)
};
// Class ScriptMethod_TakeOff exported:
//   Properties size: 12 bytes (56 total)


//***************************************************************************//
/*	\class UScriptMethod_SuspendWeaponTargetEval
*/
//***************************************************************************//

class DNAI_API UScriptMethod_SuspendWeaponTargetEval : public UScriptMethod
{
public:
    BITFIELD Suspend:1 GCC_PACK(4);
    BITFIELD ClearTarget:1;
    DECLARE_CLASS(UScriptMethod_SuspendWeaponTargetEval,UScriptMethod,0,dnAI)
};
// Class ScriptMethod_SuspendWeaponTargetEval exported:
//   Properties size: 4 bytes (48 total)


//***************************************************************************//
/*	\class UScriptMethod_SuspendLookTargetEval
*/
//***************************************************************************//

class DNAI_API UScriptMethod_SuspendLookTargetEval : public UScriptMethod
{
public:
    BITFIELD Suspend:1 GCC_PACK(4);
    BITFIELD ClearTarget:1;
    DECLARE_CLASS(UScriptMethod_SuspendLookTargetEval,UScriptMethod,0,dnAI)
};
// Class ScriptMethod_SuspendLookTargetEval exported:
//   Properties size: 4 bytes (48 total)


//***************************************************************************//
/*	\class UScriptMethod_Stomp
*/
//***************************************************************************//

class DNAI_API UScriptMethod_Stomp : public UScriptMethod
{
public:
    INT ForcedStompIndex;
    DECLARE_CLASS(UScriptMethod_Stomp,UScriptMethod,0,dnAI)
};
// Class ScriptMethod_Stomp exported:
//   Properties size: 4 bytes (48 total)


//***************************************************************************//
/*	\class UScriptMethod_StandPassive
*/
//***************************************************************************//

class DNAI_API UScriptMethod_StandPassive : public UScriptMethod
{
public:
    DECLARE_CLASS(UScriptMethod_StandPassive,UScriptMethod,0,dnAI)
};
// Class ScriptMethod_StandPassive exported:
//   Properties size: 0 bytes (44 total)


//***************************************************************************//
/*	\class UScriptMethod_StandScared
*/
//***************************************************************************//

class DNAI_API UScriptMethod_StandScared : public UScriptMethod
{
public:
    DECLARE_CLASS(UScriptMethod_StandScared,UScriptMethod,0,dnAI)
};
// Class ScriptMethod_StandScared exported:
//   Properties size: 0 bytes (44 total)


//***************************************************************************//
/*	\class UScriptMethod_StandCombat
*/
//***************************************************************************//

class DNAI_API UScriptMethod_StandCombat : public UScriptMethod
{
public:
    DECLARE_CLASS(UScriptMethod_StandCombat,UScriptMethod,0,dnAI)
};
// Class ScriptMethod_StandCombat exported:
//   Properties size: 0 bytes (44 total)


//***************************************************************************//
/*	\class UScriptMethod_Speak
*/
//***************************************************************************//

class DNAI_API UScriptMethod_Speak : public UScriptMethod
{
public:
    FName CharPackSoundName;
    BITFIELD WaitTilDone:1 GCC_PACK(4);
    BITFIELD IgnoreOthers:1;
    DECLARE_CLASS(UScriptMethod_Speak,UScriptMethod,0,dnAI)
};
// Class ScriptMethod_Speak exported:
//   Properties size: 8 bytes (52 total)


//***************************************************************************//
/*	\class UScriptMethod_SpawnAttachment
*/
//***************************************************************************//

class DNAI_API UScriptMethod_SpawnAttachment : public UScriptMethod
{
public:
    FName AttachmentClassName;
    FSMountPrefab AttachmentPrefab;
    DECLARE_CLASS(UScriptMethod_SpawnAttachment,UScriptMethod,0,dnAI)
};
// Class ScriptMethod_SpawnAttachment exported:
//   Properties size: 84 bytes (128 total)


//***************************************************************************//
/*	\class UScriptMethod_ShootProjectile
*/
//***************************************************************************//

class DNAI_API UScriptMethod_ShootProjectile : public UScriptMethod
{
public:
    DECLARE_CLASS(UScriptMethod_ShootProjectile,UScriptMethod,0,dnAI)
};
// Class ScriptMethod_ShootProjectile exported:
//   Properties size: 0 bytes (44 total)


//***************************************************************************//
/*	\class UScriptMethod_SetUsedScriptTag
*/
//***************************************************************************//

class DNAI_API UScriptMethod_SetUsedScriptTag : public UScriptMethod
{
public:
    FName NewUsedScriptTag;
    DECLARE_CLASS(UScriptMethod_SetUsedScriptTag,UScriptMethod,0,dnAI)
};
// Class ScriptMethod_SetUsedScriptTag exported:
//   Properties size: 4 bytes (48 total)


//***************************************************************************//
/*	\class UScriptMethod_SetShouldCauseKillSound
*/
//***************************************************************************//

class DNAI_API UScriptMethod_SetShouldCauseKillSound : public UScriptMethod
{
public:
    BITFIELD bShouldCauseKillSound:1 GCC_PACK(4);
    DECLARE_CLASS(UScriptMethod_SetShouldCauseKillSound,UScriptMethod,0,dnAI)
};
// Class ScriptMethod_SetShouldCauseKillSound exported:
//   Properties size: 4 bytes (48 total)


//***************************************************************************//
/*	\class UScriptMethod_SetScriptTag
*/
//***************************************************************************//

class DNAI_API UScriptMethod_SetScriptTag : public UScriptMethod
{
public:
    FName NewScriptTag;
    DECLARE_CLASS(UScriptMethod_SetScriptTag,UScriptMethod,0,dnAI)
};
// Class ScriptMethod_SetScriptTag exported:
//   Properties size: 4 bytes (48 total)


//***************************************************************************//
/*	\class UScriptMethod_SetRelations
*/
//***************************************************************************//

class DNAI_API UScriptMethod_SetRelations : public UScriptMethod
{
public:
    dnArray<FSRelationship> NewRelations;
    DECLARE_CLASS(UScriptMethod_SetRelations,UScriptMethod,0,dnAI)

    // properties that must be constructed special for UScriptMethod_SetRelations:
    //       * NewRelations

};
// Class ScriptMethod_SetRelations exported:
//   Properties size: 12 bytes (56 total)


//***************************************************************************//
/*	\class UScriptMethod_SetTarget
*/
//***************************************************************************//

class DNAI_API UScriptMethod_SetTarget : public UScriptMethod
{
public:
    FName TargetActorTag;
    BITFIELD bTargetMayNotExist:1 GCC_PACK(4);
    BITFIELD ForceUpdate:1;
    BITFIELD AllowClear:1;
    BITFIELD SuspendTargetEval:1;
    DECLARE_CLASS(UScriptMethod_SetTarget,UScriptMethod,0,dnAI)
};
// Class ScriptMethod_SetTarget exported:
//   Properties size: 8 bytes (52 total)


//***************************************************************************//
/*	\class UScriptMethod_SetSoundState
*/
//***************************************************************************//

class DNAI_API UScriptMethod_SetSoundState : public UScriptMethod
{
public:
    BITFIELD EnableSounds:1 GCC_PACK(4);
    DECLARE_CLASS(UScriptMethod_SetSoundState,UScriptMethod,0,dnAI)
};
// Class ScriptMethod_SetSoundState exported:
//   Properties size: 4 bytes (48 total)


//***************************************************************************//
/*	\class UScriptMethod_SetPerformLipsync
*/
//***************************************************************************//

class DNAI_API UScriptMethod_SetPerformLipsync : public UScriptMethod
{
public:
    BITFIELD bPerformLipSync:1 GCC_PACK(4);
    DECLARE_CLASS(UScriptMethod_SetPerformLipsync,UScriptMethod,0,dnAI)
};
// Class ScriptMethod_SetPerformLipsync exported:
//   Properties size: 4 bytes (48 total)


//***************************************************************************//
/*	\class UScriptMethod_SetLookTarget
*/
//***************************************************************************//

class DNAI_API UScriptMethod_SetLookTarget : public UScriptMethod
{
public:
    FName TargetActorTag;
    FName TargetBoneName;
    /* EAITargetStackOp */ BYTE TargetStackOp;
    FLOAT TargetLifeTime;
    FLOAT BlendTime;
    FLOAT AngularThresh;
    FLOAT EyeTrackRate;
    FLOAT HeadTrackRate;
    BITFIELD RemoveBeyondConsts:1 GCC_PACK(4);
    FStringNoInit TargetIDString GCC_PACK(4);
    DECLARE_CLASS(UScriptMethod_SetLookTarget,UScriptMethod,0,dnAI)
};
// Class ScriptMethod_SetLookTarget exported:
//   Properties size: 48 bytes (92 total)


//***************************************************************************//
/*	\class UScriptMethod_SetJetPackWobble
*/
//***************************************************************************//

class DNAI_API UScriptMethod_SetJetPackWobble : public UScriptMethod
{
public:
    BITFIELD DoJetPackWobble:1 GCC_PACK(4);
    DECLARE_CLASS(UScriptMethod_SetJetPackWobble,UScriptMethod,0,dnAI)
};
// Class ScriptMethod_SetJetPackWobble exported:
//   Properties size: 4 bytes (48 total)


//***************************************************************************//
/*	\class UScriptMethod_SetHeadTarget
*/
//***************************************************************************//

class DNAI_API UScriptMethod_SetHeadTarget : public UScriptMethod
{
public:
    FName TargetActorTag;
    FName TargetBoneName;
    /* EAITargetStackOp */ BYTE TargetStackOp;
    FLOAT TargetLifeTime;
    FLOAT BlendTime;
    FLOAT AngularThresh;
    FLOAT TrackRate;
    BITFIELD RemoveBeyondConsts:1 GCC_PACK(4);
    BITFIELD SuspendHeadTargetEval:1;
    FStringNoInit TargetIDString GCC_PACK(4);
    DECLARE_CLASS(UScriptMethod_SetHeadTarget,UScriptMethod,0,dnAI)
};
// Class ScriptMethod_SetHeadTarget exported:
//   Properties size: 44 bytes (88 total)


//***************************************************************************//
/*	\class UScriptMethod_SetFactoryActionPointTags
*/
//***************************************************************************//

class DNAI_API UScriptMethod_SetFactoryActionPointTags : public UScriptMethod
{
public:
    INT NewIndex;
    INT NewDesiredIndex;
    dnArray<FName> NewActionPointTags;
    FName FactoryTag;
    DECLARE_CLASS(UScriptMethod_SetFactoryActionPointTags,UScriptMethod,0,dnAI)

    // properties that must be constructed special for UScriptMethod_SetFactoryActionPointTags:
    //       * NewActionPointTags

};
// Class ScriptMethod_SetFactoryActionPointTags exported:
//   Properties size: 24 bytes (68 total)


//***************************************************************************//
/*	\class UScriptMethod_SetFactoryActionPointIndex
*/
//***************************************************************************//

class DNAI_API UScriptMethod_SetFactoryActionPointIndex : public UScriptMethod
{
public:
    INT NewIndex;
    INT NewDesiredIndex;
    FName FactoryTag;
    DECLARE_CLASS(UScriptMethod_SetFactoryActionPointIndex,UScriptMethod,0,dnAI)
};
// Class ScriptMethod_SetFactoryActionPointIndex exported:
//   Properties size: 12 bytes (56 total)


//***************************************************************************//
/*	\class UScriptMethod_SetFaction
*/
//***************************************************************************//

class DNAI_API UScriptMethod_SetFaction : public UScriptMethod
{
public:
    class UClass* NewFaction;
    DECLARE_CLASS(UScriptMethod_SetFaction,UScriptMethod,0,dnAI)
};
// Class ScriptMethod_SetFaction exported:
//   Properties size: 4 bytes (48 total)


//***************************************************************************//
/*	\class UScriptMethod_SetEyeTarget
*/
//***************************************************************************//

class DNAI_API UScriptMethod_SetEyeTarget : public UScriptMethod
{
public:
    FName TargetActorTag;
    FName TargetBoneName;
    /* EAITargetStackOp */ BYTE TargetStackOp;
    FLOAT TargetLifeTime;
    FLOAT BlendTime;
    FLOAT AngularThresh;
    FLOAT TrackRate;
    BITFIELD RemoveBeyondConsts:1 GCC_PACK(4);
    FStringNoInit TargetIDString GCC_PACK(4);
    DECLARE_CLASS(UScriptMethod_SetEyeTarget,UScriptMethod,0,dnAI)
};
// Class ScriptMethod_SetEyeTarget exported:
//   Properties size: 44 bytes (88 total)


//***************************************************************************//
/*	\class UScriptMethod_SetEvent
*/
//***************************************************************************//

class DNAI_API UScriptMethod_SetEvent : public UScriptMethod
{
public:
    FName NewEvent;
    DECLARE_CLASS(UScriptMethod_SetEvent,UScriptMethod,0,dnAI)
};
// Class ScriptMethod_SetEvent exported:
//   Properties size: 4 bytes (48 total)


//***************************************************************************//
/*	\class UScriptMethod_SetEnemyMustBeSighted
*/
//***************************************************************************//

class DNAI_API UScriptMethod_SetEnemyMustBeSighted : public UScriptMethod
{
public:
    BITFIELD MustBeSighted:1 GCC_PACK(4);
    BITFIELD ClearTarget:1;
    DECLARE_CLASS(UScriptMethod_SetEnemyMustBeSighted,UScriptMethod,0,dnAI)
};
// Class ScriptMethod_SetEnemyMustBeSighted exported:
//   Properties size: 4 bytes (48 total)


//***************************************************************************//
/*	\class UScriptMethod_SetDeathAnim
*/
//***************************************************************************//

class DNAI_API UScriptMethod_SetDeathAnim : public UScriptMethod
{
public:
    FName SequenceName;
    FLOAT Chance;
    DECLARE_CLASS(UScriptMethod_SetDeathAnim,UScriptMethod,0,dnAI)
};
// Class ScriptMethod_SetDeathAnim exported:
//   Properties size: 8 bytes (52 total)


//***************************************************************************//
/*	\class UScriptMethod_SetDamageReactions
*/
//***************************************************************************//

class DNAI_API UScriptMethod_SetDamageReactions : public UScriptMethod
{
public:
    /* EBitModifier */ BYTE Invulnerable;
    /* EBitModifier */ BYTE ShowPain;
    DECLARE_CLASS(UScriptMethod_SetDamageReactions,UScriptMethod,0,dnAI)
};
// Class ScriptMethod_SetDamageReactions exported:
//   Properties size: 4 bytes (48 total)


//***************************************************************************//
/*	\class UScriptMethod_SetCurrentOpMustFinish
*/
//***************************************************************************//

class DNAI_API UScriptMethod_SetCurrentOpMustFinish : public UScriptMethod
{
public:
    BITFIELD CurrentOpMustFinish:1 GCC_PACK(4);
    DECLARE_CLASS(UScriptMethod_SetCurrentOpMustFinish,UScriptMethod,0,dnAI)
};
// Class ScriptMethod_SetCurrentOpMustFinish exported:
//   Properties size: 4 bytes (48 total)


//***************************************************************************//
/*	\class UScriptMethod_SetCollision
*/
//***************************************************************************//

class DNAI_API UScriptMethod_SetCollision : public UScriptMethod
{
public:
    /* EBitModifier */ BYTE CollideWorld;
    /* EBitModifier */ BYTE CollideActors;
    /* EBitModifier */ BYTE BlockActors;
    /* EBitModifier */ BYTE BlockPlayers;
    /* EBitModifier */ BYTE BlockKarma;
    /* EBitModifier */ BYTE AssumeValid;
    DECLARE_CLASS(UScriptMethod_SetCollision,UScriptMethod,0,dnAI)
};
// Class ScriptMethod_SetCollision exported:
//   Properties size: 8 bytes (52 total)


//***************************************************************************//
/*	\class UScriptMethod_SetBodyTarget
*/
//***************************************************************************//

class DNAI_API UScriptMethod_SetBodyTarget : public UScriptMethod
{
public:
    FName TargetActorTag;
    /* EAITargetStackOp */ BYTE TargetStackOp;
    FLOAT TargetLifeTime;
    FLOAT BlendTime;
    FLOAT AngularThresh;
    FLOAT TrackRate;
    BITFIELD RemoveBeyondConsts:1 GCC_PACK(4);
    FStringNoInit TargetIDString GCC_PACK(4);
    DECLARE_CLASS(UScriptMethod_SetBodyTarget,UScriptMethod,0,dnAI)
};
// Class ScriptMethod_SetBodyTarget exported:
//   Properties size: 40 bytes (84 total)


//***************************************************************************//
/*	\class UScriptMethod_SetAttackConstraint
*/
//***************************************************************************//

class DNAI_API UScriptMethod_SetAttackConstraint : public UScriptMethod
{
public:
    /* EAIAttackConstraint */ BYTE AttackConstraint;
    DECLARE_CLASS(UScriptMethod_SetAttackConstraint,UScriptMethod,0,dnAI)
};
// Class ScriptMethod_SetAttackConstraint exported:
//   Properties size: 4 bytes (48 total)


//***************************************************************************//
/*	\class UScriptMethod_SetAnimController
*/
//***************************************************************************//

class DNAI_API UScriptMethod_SetAnimController : public UScriptMethod
{
public:
    /* EAIAnimController */ BYTE NewController;
    DECLARE_CLASS(UScriptMethod_SetAnimController,UScriptMethod,0,dnAI)
};
// Class ScriptMethod_SetAnimController exported:
//   Properties size: 4 bytes (48 total)


//***************************************************************************//
/*	\class UScriptMethod_SetAimAssist
*/
//***************************************************************************//

class DNAI_API UScriptMethod_SetAimAssist : public UScriptMethod
{
public:
    BITFIELD EnableAimAssist:1 GCC_PACK(4);
    DECLARE_CLASS(UScriptMethod_SetAimAssist,UScriptMethod,0,dnAI)
};
// Class ScriptMethod_SetAimAssist exported:
//   Properties size: 4 bytes (48 total)


//***************************************************************************//
/*	\class UScriptMethod_SetActionPointIndex
*/
//***************************************************************************//

class DNAI_API UScriptMethod_SetActionPointIndex : public UScriptMethod
{
public:
    INT NewIndex;
    INT NewDesiredIndex;
    DECLARE_CLASS(UScriptMethod_SetActionPointIndex,UScriptMethod,0,dnAI)
};
// Class ScriptMethod_SetActionPointIndex exported:
//   Properties size: 8 bytes (52 total)


//***************************************************************************//
/*	\class UScriptMethod_SetActionPointTags
*/
//***************************************************************************//

class DNAI_API UScriptMethod_SetActionPointTags : public UScriptMethod
{
public:
    INT NewIndex;
    INT NewDesiredIndex;
    dnArray<FName> NewActionPointTags;
    DECLARE_CLASS(UScriptMethod_SetActionPointTags,UScriptMethod,0,dnAI)

    // properties that must be constructed special for UScriptMethod_SetActionPointTags:
    //       * NewActionPointTags

};
// Class ScriptMethod_SetActionPointTags exported:
//   Properties size: 20 bytes (64 total)


//***************************************************************************//
/*	\class UScriptMethod_SetAbortable
*/
//***************************************************************************//

class DNAI_API UScriptMethod_SetAbortable : public UScriptMethod
{
public:
    FSAbortScriptMotive_SeeActor MotiveSeeActor;
    FSAbortScriptMotive_HearSound MotiveHearSound;
    FSAbortScriptMotive_Damaged MotiveDamaged;
    FSAbortScriptMotive_Bumped MotiveBumped;
    FSAbortScriptMotive_Triggered MotiveTriggered;
    FSAbortScriptMotive_Shrunk MotiveShrunk;
    BITFIELD PlayPainAnimsWithoutAborting:1 GCC_PACK(4);
    BITFIELD AllowFall:1;
    INT EgoChange GCC_PACK(4);
    FName AbortActorTag;
    FName AbortEvent;
    BITFIELD ChangeScriptTag:1 GCC_PACK(4);
    FName ChangedScriptTag GCC_PACK(4);
    BITFIELD KeepProp:1 GCC_PACK(4);
    BITFIELD bUseAbortEventStuck:1;
    FName AbortEventStuck GCC_PACK(4);
    DECLARE_CLASS(UScriptMethod_SetAbortable,UScriptMethod,0,dnAI)
};
// Class ScriptMethod_SetAbortable exported:
//   Properties size: 120 bytes (164 total)


//***************************************************************************//
/*	\class UScriptMethod_SelectWeapon
*/
//***************************************************************************//

class DNAI_API UScriptMethod_SelectWeapon : public UScriptMethod
{
public:
    class UClass* NewWeapon;
    BITFIELD QuickSwitch:1 GCC_PACK(4);
    DECLARE_CLASS(UScriptMethod_SelectWeapon,UScriptMethod,0,dnAI)
};
// Class ScriptMethod_SelectWeapon exported:
//   Properties size: 8 bytes (52 total)


//***************************************************************************//
/*	\class UScriptMethod_ResumeFire
*/
//***************************************************************************//

class DNAI_API UScriptMethod_ResumeFire : public UScriptMethod
{
public:
    DECLARE_CLASS(UScriptMethod_ResumeFire,UScriptMethod,0,dnAI)
};
// Class ScriptMethod_ResumeFire exported:
//   Properties size: 0 bytes (44 total)


//***************************************************************************//
/*	\class UScriptMethod_Reload
*/
//***************************************************************************//

class DNAI_API UScriptMethod_Reload : public UScriptMethod
{
public:
    DECLARE_CLASS(UScriptMethod_Reload,UScriptMethod,0,dnAI)
};
// Class ScriptMethod_Reload exported:
//   Properties size: 0 bytes (44 total)


//***************************************************************************//
/*	\class UScriptMethod_Rappel
*/
//***************************************************************************//

class DNAI_API UScriptMethod_Rappel : public UScriptMethod
{
public:
    FName AttachActorTag;
    FName AttachActorBone;
    DECLARE_CLASS(UScriptMethod_Rappel,UScriptMethod,0,dnAI)
};
// Class ScriptMethod_Rappel exported:
//   Properties size: 8 bytes (52 total)


//***************************************************************************//
/*	\class UScriptMethod_Prone
*/
//***************************************************************************//

class DNAI_API UScriptMethod_Prone : public UScriptMethod
{
public:
    DECLARE_CLASS(UScriptMethod_Prone,UScriptMethod,0,dnAI)
};
// Class ScriptMethod_Prone exported:
//   Properties size: 0 bytes (44 total)


//***************************************************************************//
/*	\class UScriptMethod_Print
*/
//***************************************************************************//

class DNAI_API UScriptMethod_Print : public UScriptMethod
{
public:
    FStringNoInit TextOut;
    DECLARE_CLASS(UScriptMethod_Print,UScriptMethod,0,dnAI)
};
// Class ScriptMethod_Print exported:
//   Properties size: 12 bytes (56 total)


//***************************************************************************//
/*	\class UScriptMethod_PopUpExplicit
*/
//***************************************************************************//

class DNAI_API UScriptMethod_PopUpExplicit : public UScriptMethod
{
public:
    dnArray<class UPopUpCfg*> Popups;
    class UClass* PopUpCfgBase;
    DECLARE_CLASS(UScriptMethod_PopUpExplicit,UScriptMethod,0,dnAI)

    // properties that must be constructed special for UScriptMethod_PopUpExplicit:
    //       * Popups

};
// Class ScriptMethod_PopUpExplicit exported:
//   Properties size: 16 bytes (60 total)


//***************************************************************************//
/*	\class UScriptMethod_PopUp
*/
//***************************************************************************//

class DNAI_API UScriptMethod_PopUp : public UScriptMethod
{
public:
    /* EAIPopUpType */ BYTE PopupType;
    DECLARE_CLASS(UScriptMethod_PopUp,UScriptMethod,0,dnAI)
};
// Class ScriptMethod_PopUp exported:
//   Properties size: 4 bytes (48 total)


//***************************************************************************//
/*	\class UScriptMethod_PlayTransientExplicitAnim
*/
//***************************************************************************//

class DNAI_API UScriptMethod_PlayTransientExplicitAnim : public UScriptMethod
{
public:
    FName SequenceName;
    FName ChannelName;
    FLOAT Rate;
    FLOAT Tween;
    BITFIELD Loop:1 GCC_PACK(4);
    FLOAT StartFrame GCC_PACK(4);
    FLOAT AnimEarlyEndTime;
    FLOAT BlendInTime;
    FLOAT BlendOutTime;
    BITFIELD AdjustStart:1 GCC_PACK(4);
    BITFIELD bForceRestart:1;
    DECLARE_CLASS(UScriptMethod_PlayTransientExplicitAnim,UScriptMethod,0,dnAI)
};
// Class ScriptMethod_PlayTransientExplicitAnim exported:
//   Properties size: 40 bytes (84 total)


//***************************************************************************//
/*	\class UScriptMethod_PlayTransientAnim
*/
//***************************************************************************//

class DNAI_API UScriptMethod_PlayTransientAnim : public UScriptMethod
{
public:
    FName AnimName;
    BITFIELD UseExactAnimName:1 GCC_PACK(4);
    DECLARE_CLASS(UScriptMethod_PlayTransientAnim,UScriptMethod,0,dnAI)
};
// Class ScriptMethod_PlayTransientAnim exported:
//   Properties size: 8 bytes (52 total)


//***************************************************************************//
/*	\class UScriptMethod_PlaySound
*/
//***************************************************************************//

class DNAI_API UScriptMethod_PlaySound : public UScriptMethod
{
public:
    FSSoundInfo MySound;
    DECLARE_CLASS(UScriptMethod_PlaySound,UScriptMethod,0,dnAI)

    // properties that must be constructed special for UScriptMethod_PlaySound:
    //       * MySound

};
// Class ScriptMethod_PlaySound exported:
//   Properties size: 172 bytes (216 total)


//***************************************************************************//
/*	\class UScriptMethod_PlayScript
*/
//***************************************************************************//

class DNAI_API UScriptMethod_PlayScript : public UScriptMethod
{
public:
    FName TargetActorTag;
    class UScriptObj* Script;
    BITFIELD PushScript:1 GCC_PACK(4);
    DECLARE_CLASS(UScriptMethod_PlayScript,UScriptMethod,0,dnAI)
};
// Class ScriptMethod_PlayScript exported:
//   Properties size: 12 bytes (56 total)


//***************************************************************************//
/*	\class UScriptMethod_PlayExplicitAnim
*/
//***************************************************************************//

class DNAI_API UScriptMethod_PlayExplicitAnim : public UScriptMethod
{
public:
    /* EAIAnimXType */ BYTE AnimType;
    FName SequenceName;
    FName ChannelName;
    FLOAT Rate;
    FLOAT Tween;
    BITFIELD Loop:1 GCC_PACK(4);
    FLOAT StartFrame GCC_PACK(4);
    FLOAT AnimEarlyEndTime;
    FLOAT BlendInTime;
    FLOAT BlendOutTime;
    BITFIELD AdjustStart:1 GCC_PACK(4);
    FLOAT ExitTime GCC_PACK(4);
    BITFIELD Infinite:1 GCC_PACK(4);
    FName FaceActorTag GCC_PACK(4);
    FVector FacePos;
    BITFIELD bDisableWalkingIK:1 GCC_PACK(4);
    BITFIELD bForceAnimTick:1;
    BITFIELD bForceRestart:1;
    BITFIELD bClearLookTarget:1;
    BITFIELD bSuspendLookTargetEval:1;
    BITFIELD bDisableBlinking:1;
    DECLARE_CLASS(UScriptMethod_PlayExplicitAnim,UScriptMethod,0,dnAI)
};
// Class ScriptMethod_PlayExplicitAnim exported:
//   Properties size: 72 bytes (116 total)


//***************************************************************************//
/*	\class UScriptMethod_PlayAnim
*/
//***************************************************************************//

class DNAI_API UScriptMethod_PlayAnim : public UScriptMethod
{
public:
    /* EAIAnimXType */ BYTE AnimType;
    FName AnimName;
    BITFIELD UseExactAnimName:1 GCC_PACK(4);
    FLOAT ExitTime GCC_PACK(4);
    BITFIELD Infinite:1 GCC_PACK(4);
    FName FaceActorTag GCC_PACK(4);
    FVector FacePos;
    DECLARE_CLASS(UScriptMethod_PlayAnim,UScriptMethod,0,dnAI)
};
// Class ScriptMethod_PlayAnim exported:
//   Properties size: 36 bytes (80 total)


//***************************************************************************//
/*	\class UScriptMethod_PlayAmbientSound
*/
//***************************************************************************//

class DNAI_API UScriptMethod_PlayAmbientSound : public UScriptMethod
{
public:
    FSAmbientSoundInfo MySoundInfo;
    BITFIELD ClearSound:1 GCC_PACK(4);
    DECLARE_CLASS(UScriptMethod_PlayAmbientSound,UScriptMethod,0,dnAI)

    // properties that must be constructed special for UScriptMethod_PlayAmbientSound:
    //       * MySoundInfo

};
// Class ScriptMethod_PlayAmbientSound exported:
//   Properties size: 48 bytes (92 total)


//***************************************************************************//
/*	\class UScriptMethod_PlaceTripMine
*/
//***************************************************************************//

class DNAI_API UScriptMethod_PlaceTripMine : public UScriptMethod
{
public:
    FName TargetActorTag;
    DECLARE_CLASS(UScriptMethod_PlaceTripMine,UScriptMethod,0,dnAI)
};
// Class ScriptMethod_PlaceTripMine exported:
//   Properties size: 4 bytes (48 total)


//***************************************************************************//
/*	\class UScriptMethod_Pickup
*/
//***************************************************************************//

class DNAI_API UScriptMethod_Pickup : public UScriptMethod
{
public:
    FName TargetActorTag;
    DECLARE_CLASS(UScriptMethod_Pickup,UScriptMethod,0,dnAI)
};
// Class ScriptMethod_Pickup exported:
//   Properties size: 4 bytes (48 total)


//***************************************************************************//
/*	\class UScriptMethod_Pause
*/
//***************************************************************************//

class DNAI_API UScriptMethod_Pause : public UScriptMethod
{
public:
    FLOAT MinPauseTime;
    FLOAT RndPauseTime;
    DECLARE_CLASS(UScriptMethod_Pause,UScriptMethod,0,dnAI)
};
// Class ScriptMethod_Pause exported:
//   Properties size: 8 bytes (52 total)


//***************************************************************************//
/*	\class UScriptMethod_OverrideTarget_Clear
*/
//***************************************************************************//

class DNAI_API UScriptMethod_OverrideTarget_Clear : public UScriptMethod
{
public:
    DECLARE_CLASS(UScriptMethod_OverrideTarget_Clear,UScriptMethod,0,dnAI)
};
// Class ScriptMethod_OverrideTarget_Clear exported:
//   Properties size: 0 bytes (44 total)


//***************************************************************************//
/*	\class UScriptMethod_OverrideTarget
*/
//***************************************************************************//

class DNAI_API UScriptMethod_OverrideTarget : public UScriptMethod
{
public:
    FName TargetActorTag;
    BITFIELD ForceUpdate:1 GCC_PACK(4);
    BITFIELD AllowClear:1;
    DECLARE_CLASS(UScriptMethod_OverrideTarget,UScriptMethod,0,dnAI)
};
// Class ScriptMethod_OverrideTarget exported:
//   Properties size: 8 bytes (52 total)


//***************************************************************************//
/*	\class UScriptMethod_OverrideAnim_Clear
*/
//***************************************************************************//

class DNAI_API UScriptMethod_OverrideAnim_Clear : public UScriptMethod
{
public:
    FName AnimName;
    DECLARE_CLASS(UScriptMethod_OverrideAnim_Clear,UScriptMethod,0,dnAI)
};
// Class ScriptMethod_OverrideAnim_Clear exported:
//   Properties size: 4 bytes (48 total)


//***************************************************************************//
/*	\class UScriptMethod_OverrideAnim
*/
//***************************************************************************//

class DNAI_API UScriptMethod_OverrideAnim : public UScriptMethod
{
public:
    FName AnimName;
    FName SequenceName;
    FName ChannelName;
    FLOAT Rate;
    FLOAT Tween;
    BITFIELD Loop:1 GCC_PACK(4);
    FLOAT StartFrame GCC_PACK(4);
    FLOAT AnimEarlyEndTime;
    FLOAT BlendInTime;
    FLOAT BlendOutTime;
    BITFIELD AdjustStart:1 GCC_PACK(4);
    BITFIELD bForceRestart:1;
    DECLARE_CLASS(UScriptMethod_OverrideAnim,UScriptMethod,0,dnAI)
};
// Class ScriptMethod_OverrideAnim exported:
//   Properties size: 44 bytes (88 total)


//***************************************************************************//
/*	\class UScriptMethod_MultiAnimPreset
*/
//***************************************************************************//

class DNAI_API UScriptMethod_MultiAnimPreset : public UScriptMethod
{
public:
    INT ForcedMultiAnimIndex;
    DECLARE_CLASS(UScriptMethod_MultiAnimPreset,UScriptMethod,0,dnAI)
};
// Class ScriptMethod_MultiAnimPreset exported:
//   Properties size: 4 bytes (48 total)


//***************************************************************************//
/*	\class UScriptMethod_Melee
*/
//***************************************************************************//

class DNAI_API UScriptMethod_Melee : public UScriptMethod
{
public:
    DECLARE_CLASS(UScriptMethod_Melee,UScriptMethod,0,dnAI)
};
// Class ScriptMethod_Melee exported:
//   Properties size: 0 bytes (44 total)


//***************************************************************************//
/*	\class UScriptMethod_Land
*/
//***************************************************************************//

class DNAI_API UScriptMethod_Land : public UScriptMethod
{
public:
    DECLARE_CLASS(UScriptMethod_Land,UScriptMethod,0,dnAI)
};
// Class ScriptMethod_Land exported:
//   Properties size: 0 bytes (44 total)


//***************************************************************************//
/*	\class UScriptMethod_JumpToActorsPos
*/
//***************************************************************************//

class DNAI_API UScriptMethod_JumpToActorsPos : public UScriptMethod
{
public:
    FName TargetActorTag;
    FLOAT MaxHeight;
    FLOAT HeavyLandingThresh;
    BITFIELD DrawDebug:1 GCC_PACK(4);
    BITFIELD FacePrimaryTarget:1;
    BITFIELD bUseDefaultGravity:1;
    FLOAT NonDefaultGravityScale GCC_PACK(4);
    DECLARE_CLASS(UScriptMethod_JumpToActorsPos,UScriptMethod,0,dnAI)
};
// Class ScriptMethod_JumpToActorsPos exported:
//   Properties size: 20 bytes (64 total)


//***************************************************************************//
/*	\class UScriptMethod_JumpAttack
*/
//***************************************************************************//

class DNAI_API UScriptMethod_JumpAttack : public UScriptMethod
{
public:
    FVector JumpVelocityPreset;
    DECLARE_CLASS(UScriptMethod_JumpAttack,UScriptMethod,0,dnAI)
};
// Class ScriptMethod_JumpAttack exported:
//   Properties size: 12 bytes (56 total)


//***************************************************************************//
/*	\class UScriptMethod_Jump
*/
//***************************************************************************//

class DNAI_API UScriptMethod_Jump : public UScriptMethod
{
public:
    FVector JumpVel;
    FLOAT HeavyLandingThresh;
    BITFIELD bUseDefaultGravity:1 GCC_PACK(4);
    FLOAT NonDefaultGravityScale GCC_PACK(4);
    BITFIELD FacePrimaryTarget:1 GCC_PACK(4);
    DECLARE_CLASS(UScriptMethod_Jump,UScriptMethod,0,dnAI)
};
// Class ScriptMethod_Jump exported:
//   Properties size: 28 bytes (72 total)


//***************************************************************************//
/*	\class UScriptMethod_IK
*/
//***************************************************************************//

class DNAI_API UScriptMethod_IK : public UScriptMethod
{
public:
    BITFIELD Enabled:1 GCC_PACK(4);
    class UClass* IKSystem GCC_PACK(4);
    DECLARE_CLASS(UScriptMethod_IK,UScriptMethod,0,dnAI)
};
// Class ScriptMethod_IK exported:
//   Properties size: 8 bytes (52 total)


//***************************************************************************//
/*	\class UScriptMethod_Idle
*/
//***************************************************************************//

class DNAI_API UScriptMethod_Idle : public UScriptMethod
{
public:
    FLOAT MinIdleTime;
    FLOAT RndIdleTime;
    BITFIELD Infinite:1 GCC_PACK(4);
    DECLARE_CLASS(UScriptMethod_Idle,UScriptMethod,0,dnAI)
};
// Class ScriptMethod_Idle exported:
//   Properties size: 12 bytes (56 total)


//***************************************************************************//
/*	\class UScriptMethod_Hurl
*/
//***************************************************************************//

class DNAI_API UScriptMethod_Hurl : public UScriptMethod
{
public:
    FName TargetActorTag;
    DECLARE_CLASS(UScriptMethod_Hurl,UScriptMethod,0,dnAI)
};
// Class ScriptMethod_Hurl exported:
//   Properties size: 4 bytes (48 total)


//***************************************************************************//
/*	\class UScriptMethod_HoldFire
*/
//***************************************************************************//

class DNAI_API UScriptMethod_HoldFire : public UScriptMethod
{
public:
    DECLARE_CLASS(UScriptMethod_HoldFire,UScriptMethod,0,dnAI)
};
// Class ScriptMethod_HoldFire exported:
//   Properties size: 0 bytes (44 total)


//***************************************************************************//
/*	\class UScriptMethod_HealthChange
*/
//***************************************************************************//

class DNAI_API UScriptMethod_HealthChange : public UScriptMethod
{
public:
    FLOAT HealthChange;
    class UClass* DamageType;
    BITFIELD Kill:1 GCC_PACK(4);
    BITFIELD Gib:1;
    DECLARE_CLASS(UScriptMethod_HealthChange,UScriptMethod,0,dnAI)
};
// Class ScriptMethod_HealthChange exported:
//   Properties size: 12 bytes (56 total)


//***************************************************************************//
/*	\class UScriptMethod_GuardPos
*/
//***************************************************************************//

class DNAI_API UScriptMethod_GuardPos : public UScriptMethod
{
public:
    FLOAT InnerRange;
    FLOAT OuterRange;
    FLOAT AbortRange;
    BITFIELD AbortMustBeVisible:1 GCC_PACK(4);
    BITFIELD AllowAvoidDanger:1;
    BITFIELD AllowDodge:1;
    BITFIELD bDontScaleRangeWithDrawScale:1;
    BITFIELD bStaticGuard:1;
    DECLARE_CLASS(UScriptMethod_GuardPos,UScriptMethod,0,dnAI)
};
// Class ScriptMethod_GuardPos exported:
//   Properties size: 16 bytes (60 total)


//***************************************************************************//
/*	\class UScriptMethod_GuardActor
*/
//***************************************************************************//

class DNAI_API UScriptMethod_GuardActor : public UScriptMethod
{
public:
    FName GuardedActorTag;
    FLOAT InnerRange;
    FLOAT OuterRange;
    BITFIELD AlignWith:1 GCC_PACK(4);
    FLOAT AlignmentOffset GCC_PACK(4);
    FLOAT AbortRange;
    BITFIELD AbortMustBeVisible:1 GCC_PACK(4);
    BITFIELD AllowAvoidDanger:1;
    BITFIELD AllowDodge:1;
    BITFIELD bDontScaleRangeWithDrawScale:1;
    BITFIELD bStaticGuard:1;
    DECLARE_CLASS(UScriptMethod_GuardActor,UScriptMethod,0,dnAI)
};
// Class ScriptMethod_GuardActor exported:
//   Properties size: 28 bytes (72 total)


//***************************************************************************//
/*	\class UScriptMethod_GotoBase
*/
//***************************************************************************//

class DNAI_API UScriptMethod_GotoBase : public UScriptMethod
{
public:
    BITFIELD bScriptPathingEnabled:1 GCC_PACK(4);
    /* EAIDynamicPathPriority */ BYTE ScriptPathingOverride GCC_PACK(4);
    FLOAT ScriptPathingTieBreakerOverride;
    BITFIELD bDebugPathing:1 GCC_PACK(4);
    DECLARE_CLASS(UScriptMethod_GotoBase,UScriptMethod,0,dnAI)
};
// Class ScriptMethod_GotoBase exported:
//   Properties size: 16 bytes (60 total)


//***************************************************************************//
/*	\class UScriptMethod_GotoAndPlaceTripMine
*/
//***************************************************************************//

class DNAI_API UScriptMethod_GotoAndPlaceTripMine : public UScriptMethod_GotoBase
{
public:
    FName PlaceTargetActorTag;
    FLOAT RangeFromPlaceTarget;
    class UClass* TripMineClass;
    BITFIELD Run:1 GCC_PACK(4);
    DECLARE_CLASS(UScriptMethod_GotoAndPlaceTripMine,UScriptMethod_GotoBase,0,dnAI)
};
// Class ScriptMethod_GotoAndPlaceTripMine exported:
//   Properties size: 16 bytes (76 total)


//***************************************************************************//
/*	\class UScriptMethod_GotoAndUseItem
*/
//***************************************************************************//

class DNAI_API UScriptMethod_GotoAndUseItem : public UScriptMethod_GotoBase
{
public:
    FName TargetItemTag;
    BITFIELD Run:1 GCC_PACK(4);
    FName InputDispatcherTag GCC_PACK(4);
    FName AttachedEvent;
    BITFIELD AllowProceduralAim:1 GCC_PACK(4);
    DECLARE_CLASS(UScriptMethod_GotoAndUseItem,UScriptMethod_GotoBase,0,dnAI)
};
// Class ScriptMethod_GotoAndUseItem exported:
//   Properties size: 20 bytes (80 total)


//***************************************************************************//
/*	\class UScriptMethod_GotoAndPickup
*/
//***************************************************************************//

class DNAI_API UScriptMethod_GotoAndPickup : public UScriptMethod_GotoBase
{
public:
    FName TargetTag;
    BITFIELD Run:1 GCC_PACK(4);
    DECLARE_CLASS(UScriptMethod_GotoAndPickup,UScriptMethod_GotoBase,0,dnAI)
};
// Class ScriptMethod_GotoAndPickup exported:
//   Properties size: 8 bytes (68 total)


//***************************************************************************//
/*	\class UScriptMethod_GotoAndHurl
*/
//***************************************************************************//

class DNAI_API UScriptMethod_GotoAndHurl : public UScriptMethod_GotoBase
{
public:
    FName TargetTag;
    BITFIELD Run:1 GCC_PACK(4);
    DECLARE_CLASS(UScriptMethod_GotoAndHurl,UScriptMethod_GotoBase,0,dnAI)
};
// Class ScriptMethod_GotoAndHurl exported:
//   Properties size: 8 bytes (68 total)


//***************************************************************************//
/*	\class UScriptMethod_GotoPos
*/
//***************************************************************************//

class DNAI_API UScriptMethod_GotoPos : public UScriptMethod_GotoBase
{
public:
    FVector TargetPos;
    FVector TargetPosVar;
    FLOAT Range;
    FLOAT RangeVar;
    /* EAIFocus */ BYTE Focus;
    FName FocusActorTag;
    BITFIELD FocusTarget:1 GCC_PACK(4);
    BITFIELD Run:1;
    DECLARE_CLASS(UScriptMethod_GotoPos,UScriptMethod_GotoBase,0,dnAI)
};
// Class ScriptMethod_GotoPos exported:
//   Properties size: 44 bytes (104 total)


//***************************************************************************//
/*	\class UScriptMethod_GotoActorsPos
*/
//***************************************************************************//

class DNAI_API UScriptMethod_GotoActorsPos : public UScriptMethod_GotoBase
{
public:
    FName TargetActorTag;
    FVector TargetPosVar;
    FLOAT Range;
    FLOAT RangeVar;
    /* EAIFocus */ BYTE Focus;
    FName FocusActorTag;
    BITFIELD FocusTarget:1 GCC_PACK(4);
    BITFIELD Run:1;
    DECLARE_CLASS(UScriptMethod_GotoActorsPos,UScriptMethod_GotoBase,0,dnAI)
};
// Class ScriptMethod_GotoActorsPos exported:
//   Properties size: 36 bytes (96 total)


//***************************************************************************//
/*	\class UScriptMethod_GotoActor
*/
//***************************************************************************//

class DNAI_API UScriptMethod_GotoActor : public UScriptMethod_GotoBase
{
public:
    FName TargetActorTag;
    /* EAIOffsetType */ BYTE OffsetType;
    FLOAT Range;
    FLOAT RangeVar;
    FLOAT Bearing;
    FLOAT BearingVar;
    FLOAT Height;
    /* EAIFocus */ BYTE Focus;
    FName FocusActorTag;
    BITFIELD FocusTarget:1 GCC_PACK(4);
    BITFIELD Run:1;
    DECLARE_CLASS(UScriptMethod_GotoActor,UScriptMethod_GotoBase,0,dnAI)
};
// Class ScriptMethod_GotoActor exported:
//   Properties size: 40 bytes (100 total)


//***************************************************************************//
/*	\class UScriptMethod_GotoAndVault
*/
//***************************************************************************//

class DNAI_API UScriptMethod_GotoAndVault : public UScriptMethod
{
public:
    FName VaultActorTag;
    DECLARE_CLASS(UScriptMethod_GotoAndVault,UScriptMethod,0,dnAI)
};
// Class ScriptMethod_GotoAndVault exported:
//   Properties size: 4 bytes (48 total)


//***************************************************************************//
/*	\class UScriptMethod_ForceFire
*/
//***************************************************************************//

class DNAI_API UScriptMethod_ForceFire : public UScriptMethod
{
public:
    /* EBitModifier */ BYTE ForceFire;
    BITFIELD bForceFireImmediately:1 GCC_PACK(4);
    DECLARE_CLASS(UScriptMethod_ForceFire,UScriptMethod,0,dnAI)
};
// Class ScriptMethod_ForceFire exported:
//   Properties size: 8 bytes (52 total)


//***************************************************************************//
/*	\class UScriptMethod_ForceActionPointTag
*/
//***************************************************************************//

class DNAI_API UScriptMethod_ForceActionPointTag : public UScriptMethod
{
public:
    FName NewActionPointTag;
    DECLARE_CLASS(UScriptMethod_ForceActionPointTag,UScriptMethod,0,dnAI)
};
// Class ScriptMethod_ForceActionPointTag exported:
//   Properties size: 4 bytes (48 total)


//***************************************************************************//
/*	\class UScriptMethod_FreeMove
*/
//***************************************************************************//


struct UScriptMethod_FreeMove_eventGetAnimName_Parms
{
    FName ReturnValue;
};
class DNAI_API UScriptMethod_FreeMove : public UScriptMethod
{
public:
    BITFIELD bRun:1 GCC_PACK(4);
    /* EAIArcSector */ BYTE Direction GCC_PACK(4);
    BITFIELD Infinite:1 GCC_PACK(4);
    FLOAT Time GCC_PACK(4);
    BITFIELD bDisableCollsion:1 GCC_PACK(4);
    inline FName __fastcall eventGetAnimName()
    {
        UScriptMethod_FreeMove_eventGetAnimName_Parms Parms;
        Parms.ReturnValue=NAME_None;
        ProcessEvent(FindFunctionChecked(DNAI_GetAnimName), &Parms);
        return Parms.ReturnValue;
    }
    DECLARE_CLASS(UScriptMethod_FreeMove,UScriptMethod,0,dnAI)
};
// Class ScriptMethod_FreeMove exported:
//   Properties size: 20 bytes (64 total)


//***************************************************************************//
/*	\class UScriptMethod_Fall
*/
//***************************************************************************//

class DNAI_API UScriptMethod_Fall : public UScriptMethod
{
public:
    DECLARE_CLASS(UScriptMethod_Fall,UScriptMethod,0,dnAI)
};
// Class ScriptMethod_Fall exported:
//   Properties size: 0 bytes (44 total)


//***************************************************************************//
/*	\class UScriptMethod_EndUseItem
*/
//***************************************************************************//

class DNAI_API UScriptMethod_EndUseItem : public UScriptMethod
{
public:
    DECLARE_CLASS(UScriptMethod_EndUseItem,UScriptMethod,0,dnAI)
};
// Class ScriptMethod_EndUseItem exported:
//   Properties size: 0 bytes (44 total)


//***************************************************************************//
/*	\class UScriptMethod_EditPathingSettings
*/
//***************************************************************************//

class DNAI_API UScriptMethod_EditPathingSettings : public UScriptMethod
{
public:
    /* EAIDynamicPathPriority */ BYTE PathingOverride;
    FLOAT PathingTieBreakerOverride;
    DECLARE_CLASS(UScriptMethod_EditPathingSettings,UScriptMethod,0,dnAI)
};
// Class ScriptMethod_EditPathingSettings exported:
//   Properties size: 8 bytes (52 total)


//***************************************************************************//
/*	\class UScriptMethod_ExplicitAnim
*/
//***************************************************************************//

class DNAI_API UScriptMethod_ExplicitAnim : public UScriptMethod
{
public:
    /* EAIAnimXType */ BYTE AnimType;
    FName SequenceName;
    FName ChannelName;
    FLOAT Rate;
    FLOAT Tween;
    BITFIELD Loop:1 GCC_PACK(4);
    FLOAT AnimEarlyEndTime GCC_PACK(4);
    FLOAT BlendInTime;
    FLOAT BlendOutTime;
    BITFIELD AdjustStart:1 GCC_PACK(4);
    FLOAT ExitTime GCC_PACK(4);
    FName FaceActorTag;
    FVector FacePos;
    BITFIELD bForceRestart:1 GCC_PACK(4);
    DECLARE_CLASS(UScriptMethod_ExplicitAnim,UScriptMethod,0,dnAI)
};
// Class ScriptMethod_ExplicitAnim exported:
//   Properties size: 64 bytes (108 total)


//***************************************************************************//
/*	\class UScriptMethod_ExitDropship
*/
//***************************************************************************//

class DNAI_API UScriptMethod_ExitDropship : public UScriptMethod
{
public:
    DECLARE_CLASS(UScriptMethod_ExitDropship,UScriptMethod,0,dnAI)
};
// Class ScriptMethod_ExitDropship exported:
//   Properties size: 0 bytes (44 total)


//***************************************************************************//
/*	\class UScriptMethod_Destroy
*/
//***************************************************************************//

class DNAI_API UScriptMethod_Destroy : public UScriptMethod
{
public:
    BITFIELD bSilent:1 GCC_PACK(4);
    DECLARE_CLASS(UScriptMethod_Destroy,UScriptMethod,0,dnAI)
};
// Class ScriptMethod_Destroy exported:
//   Properties size: 4 bytes (48 total)


//***************************************************************************//
/*	\class UScriptMethod_DebugGoalSelection
*/
//***************************************************************************//

class DNAI_API UScriptMethod_DebugGoalSelection : public UScriptMethod
{
public:
    /* EAIGoalType */ BYTE GoalType;
    /* EAIOp */ BYTE GotoOp;
    DECLARE_CLASS(UScriptMethod_DebugGoalSelection,UScriptMethod,0,dnAI)
};
// Class ScriptMethod_DebugGoalSelection exported:
//   Properties size: 4 bytes (48 total)


//***************************************************************************//
/*	\class UScriptMethod_Crouch
*/
//***************************************************************************//

class DNAI_API UScriptMethod_Crouch : public UScriptMethod
{
public:
    DECLARE_CLASS(UScriptMethod_Crouch,UScriptMethod,0,dnAI)
};
// Class ScriptMethod_Crouch exported:
//   Properties size: 0 bytes (44 total)


//***************************************************************************//
/*	\class UScriptMethod_ClearGuard
*/
//***************************************************************************//

class DNAI_API UScriptMethod_ClearGuard : public UScriptMethod
{
public:
    DECLARE_CLASS(UScriptMethod_ClearGuard,UScriptMethod,0,dnAI)
};
// Class ScriptMethod_ClearGuard exported:
//   Properties size: 0 bytes (44 total)


//***************************************************************************//
/*	\class UScriptMethod_Blink
*/
//***************************************************************************//

enum EBlinkAction
{
    BLINK_Force             =0,
    BLINK_Enable            =1,
    BLINK_Disable           =2,
    BLINK_MAX               =3,
};
class DNAI_API UScriptMethod_Blink : public UScriptMethod
{
public:
    /* EBlinkAction */ BYTE Action;
    DECLARE_CLASS(UScriptMethod_Blink,UScriptMethod,0,dnAI)
};
// Class ScriptMethod_Blink exported:
//   Properties size: 4 bytes (48 total)


//***************************************************************************//
/*	\class UScriptMethod_Bezerk
*/
//***************************************************************************//

class DNAI_API UScriptMethod_Bezerk : public UScriptMethod
{
public:
    DECLARE_CLASS(UScriptMethod_Bezerk,UScriptMethod,0,dnAI)
};
// Class ScriptMethod_Bezerk exported:
//   Properties size: 0 bytes (44 total)


//***************************************************************************//
/*	\class UScriptMethod_BallModeStart
*/
//***************************************************************************//

class DNAI_API UScriptMethod_BallModeStart : public UScriptMethod
{
public:
    DECLARE_CLASS(UScriptMethod_BallModeStart,UScriptMethod,0,dnAI)
};
// Class ScriptMethod_BallModeStart exported:
//   Properties size: 0 bytes (44 total)


//***************************************************************************//
/*	\class UScriptMethod_BallModeEnd
*/
//***************************************************************************//

class DNAI_API UScriptMethod_BallModeEnd : public UScriptMethod
{
public:
    DECLARE_CLASS(UScriptMethod_BallModeEnd,UScriptMethod,0,dnAI)
};
// Class ScriptMethod_BallModeEnd exported:
//   Properties size: 0 bytes (44 total)


//***************************************************************************//
/*	\class UScriptMethod_Anim
*/
//***************************************************************************//

class DNAI_API UScriptMethod_Anim : public UScriptMethod
{
public:
    /* EAIAnimXType */ BYTE AnimType;
    FName AnimName;
    BITFIELD UseExactAnimName:1 GCC_PACK(4);
    FLOAT ExitTime GCC_PACK(4);
    FName FaceActorTag;
    FVector FacePos;
    DECLARE_CLASS(UScriptMethod_Anim,UScriptMethod,0,dnAI)
};
// Class ScriptMethod_Anim exported:
//   Properties size: 32 bytes (76 total)


//***************************************************************************//
/*	\class UScriptMethod_AlignWithActor
*/
//***************************************************************************//

class DNAI_API UScriptMethod_AlignWithActor : public UScriptMethod
{
public:
    FName TargetActorTag;
    FLOAT Offset;
    DECLARE_CLASS(UScriptMethod_AlignWithActor,UScriptMethod,0,dnAI)
};
// Class ScriptMethod_AlignWithActor exported:
//   Properties size: 8 bytes (52 total)


//***************************************************************************//
/*	\class UScriptMethod_AbortScript
*/
//***************************************************************************//

class DNAI_API UScriptMethod_AbortScript : public UScriptMethod
{
public:
    DECLARE_CLASS(UScriptMethod_AbortScript,UScriptMethod,0,dnAI)
};
// Class ScriptMethod_AbortScript exported:
//   Properties size: 0 bytes (44 total)


//***************************************************************************//
/*	\class UPopUpCfg
*/
//***************************************************************************//

class DNAI_API UPopUpCfg : public UObject
{
public:
    /* EAIAnimController */ BYTE AnimCtrler;
    FStringNoInit AnimExtension;
    BITFIELD SingleAnim:1 GCC_PACK(4);
    BITFIELD FullAnim:1;
    BITFIELD WaitMustFinish:1;
    BITFIELD OutMustFinish:1;
    BITFIELD HoldMustFinish:1;
    BITFIELD InMustFinish:1;
    FVector UserOffset GCC_PACK(4);
    FLOAT YawOffset;
    BITFIELD RequiresTarget:1 GCC_PACK(4);
    INT MinAngleToTarget GCC_PACK(4);
    INT MaxAngleToTarget;
    BITFIELD AllowFireOnOut:1 GCC_PACK(4);
    BITFIELD AllowFireOnHold:1;
    FLOAT IntervalMin GCC_PACK(4);
    FLOAT IntervalRnd;
    FLOAT IntervalMinDamaged;
    FLOAT IntervalDamageWin;
    FLOAT IntervalDamageThresh;
    FLOAT ExposureMin;
    FLOAT ExposureRnd;
    FLOAT Priority;
    BITFIELD bRestoreLocation:1 GCC_PACK(4);
    BITFIELD bDebugCanUse:1;
    FVector UserLocation GCC_PACK(4);
    FLOAT MaxWaitDamage;
    FLOAT MaxHoldDamage;
    INT MinHoldShots;
    BITFIELD bUsesWeaponIdle:1 GCC_PACK(4);
    BITFIELD bCheckLOS:1;
    FVector LOSOffset GCC_PACK(4);
    BITFIELD bDisableBoneAimerOnWait:1 GCC_PACK(4);
    BITFIELD bDisableBoneAimerOnIn:1;
    BITFIELD bDisableBoneAimerOnOut:1;
    BITFIELD bDisableBoneAimer:1;
    BITFIELD bDisableForceDirectShot:1;
    BITFIELD bHasTurnToIdleAnim:1;
    BITFIELD BoneAimerDisabled:1;
    BITFIELD OverrideHoldTime:1;
    BITFIELD AvoidDanger:1;
    BITFIELD AllowPain:1;
    BITFIELD bCanSkipPopIn:1;
    DECLARE_CLASS(UPopUpCfg,UObject,0,dnAI)
};
// Class PopUpCfg exported:
//   Properties size: 132 bytes (172 total)


//***************************************************************************//
/*	\class UPopUpCfg_Vault
*/
//***************************************************************************//

class DNAI_API UPopUpCfg_Vault : public UPopUpCfg
{
public:
    DECLARE_CLASS(UPopUpCfg_Vault,UPopUpCfg,0,dnAI)
    NO_DEFAULT_CONSTRUCTOR(UPopUpCfg_Vault)
};
// Class PopUpCfg_Vault exported:
//   Properties size: 0 bytes (172 total)


//***************************************************************************//
/*	\class UPopUpCfg_RightPipeBomb
*/
//***************************************************************************//

class DNAI_API UPopUpCfg_RightPipeBomb : public UPopUpCfg
{
public:
    DECLARE_CLASS(UPopUpCfg_RightPipeBomb,UPopUpCfg,0,dnAI)
};
// Class PopUpCfg_RightPipeBomb exported:
//   Properties size: 0 bytes (172 total)


//***************************************************************************//
/*	\class UPopUpCfg_LeftPipeBomb
*/
//***************************************************************************//

class DNAI_API UPopUpCfg_LeftPipeBomb : public UPopUpCfg
{
public:
    DECLARE_CLASS(UPopUpCfg_LeftPipeBomb,UPopUpCfg,0,dnAI)
};
// Class PopUpCfg_LeftPipeBomb exported:
//   Properties size: 0 bytes (172 total)


//***************************************************************************//
/*	\class UPopUpCfg_CrouchUpPipeBomb
*/
//***************************************************************************//

class DNAI_API UPopUpCfg_CrouchUpPipeBomb : public UPopUpCfg
{
public:
    DECLARE_CLASS(UPopUpCfg_CrouchUpPipeBomb,UPopUpCfg,0,dnAI)
};
// Class PopUpCfg_CrouchUpPipeBomb exported:
//   Properties size: 0 bytes (172 total)


//***************************************************************************//
/*	\class UPopUpCfg_CrouchRightPipeBomb
*/
//***************************************************************************//

class DNAI_API UPopUpCfg_CrouchRightPipeBomb : public UPopUpCfg
{
public:
    DECLARE_CLASS(UPopUpCfg_CrouchRightPipeBomb,UPopUpCfg,0,dnAI)
};
// Class PopUpCfg_CrouchRightPipeBomb exported:
//   Properties size: 0 bytes (172 total)


//***************************************************************************//
/*	\class UPopUpCfg_CrouchLeftPipeBomb
*/
//***************************************************************************//

class DNAI_API UPopUpCfg_CrouchLeftPipeBomb : public UPopUpCfg
{
public:
    DECLARE_CLASS(UPopUpCfg_CrouchLeftPipeBomb,UPopUpCfg,0,dnAI)
};
// Class PopUpCfg_CrouchLeftPipeBomb exported:
//   Properties size: 0 bytes (172 total)


//***************************************************************************//
/*	\class UPopUpCfg_CrouchBackUpPipeBomb
*/
//***************************************************************************//

class DNAI_API UPopUpCfg_CrouchBackUpPipeBomb : public UPopUpCfg
{
public:
    DECLARE_CLASS(UPopUpCfg_CrouchBackUpPipeBomb,UPopUpCfg,0,dnAI)
};
// Class PopUpCfg_CrouchBackUpPipeBomb exported:
//   Properties size: 0 bytes (172 total)


//***************************************************************************//
/*	\class UPopUpCfg_CrouchBackRightPipeBomb
*/
//***************************************************************************//

class DNAI_API UPopUpCfg_CrouchBackRightPipeBomb : public UPopUpCfg
{
public:
    DECLARE_CLASS(UPopUpCfg_CrouchBackRightPipeBomb,UPopUpCfg,0,dnAI)
};
// Class PopUpCfg_CrouchBackRightPipeBomb exported:
//   Properties size: 0 bytes (172 total)


//***************************************************************************//
/*	\class UPopUpCfg_CrouchBackLeftPipeBomb
*/
//***************************************************************************//

class DNAI_API UPopUpCfg_CrouchBackLeftPipeBomb : public UPopUpCfg
{
public:
    DECLARE_CLASS(UPopUpCfg_CrouchBackLeftPipeBomb,UPopUpCfg,0,dnAI)
};
// Class PopUpCfg_CrouchBackLeftPipeBomb exported:
//   Properties size: 0 bytes (172 total)


//***************************************************************************//
/*	\class UPopUpCfg_BackRightPipeBomb
*/
//***************************************************************************//

class DNAI_API UPopUpCfg_BackRightPipeBomb : public UPopUpCfg
{
public:
    DECLARE_CLASS(UPopUpCfg_BackRightPipeBomb,UPopUpCfg,0,dnAI)
};
// Class PopUpCfg_BackRightPipeBomb exported:
//   Properties size: 0 bytes (172 total)


//***************************************************************************//
/*	\class UPopUpCfg_BackLeftPipeBomb
*/
//***************************************************************************//

class DNAI_API UPopUpCfg_BackLeftPipeBomb : public UPopUpCfg
{
public:
    DECLARE_CLASS(UPopUpCfg_BackLeftPipeBomb,UPopUpCfg,0,dnAI)
};
// Class PopUpCfg_BackLeftPipeBomb exported:
//   Properties size: 0 bytes (172 total)


//***************************************************************************//
/*	\class UPointTracker
*/
//***************************************************************************//


struct UPointTracker_eventGetDirection_Parms
{
    FVector ReturnValue;
};

struct UPointTracker_eventSetConstraints_Parms
{
    FLOAT fPitchDegrees;
    FLOAT fYawDegrees;
    FLOAT fRollDegrees;
};
class DNAI_API UPointTracker : public UObject
{
public:
    FLOAT m_fMaxRate;
    FLOAT m_fNextRate;
    FQuat m_qCurRot;
    FVector m_vConstraints;
    DECLARE_FUNCTION(execUpdate);
    inline FVector __fastcall eventGetDirection()
    {
        UPointTracker_eventGetDirection_Parms Parms;
        Parms.ReturnValue.Init();
        ProcessEvent(FindFunctionChecked(DNAI_GetDirection), &Parms);
        return Parms.ReturnValue;
    }
    inline void __fastcall eventSetConstraints(FLOAT fPitchDegrees, FLOAT fYawDegrees, FLOAT fRollDegrees)
    {
        UPointTracker_eventSetConstraints_Parms Parms;
        Parms.fPitchDegrees=fPitchDegrees;
        Parms.fYawDegrees=fYawDegrees;
        Parms.fRollDegrees=fRollDegrees;
        ProcessEvent(FindFunctionChecked(DNAI_SetConstraints), &Parms);
    }
    DECLARE_CLASS(UPointTracker,UObject,0,dnAI)
    NO_DEFAULT_CONSTRUCTOR(UPointTracker)
};
// Class PointTracker exported:
//   Properties size: 36 bytes (76 total)


//***************************************************************************//
/*	\class UAITarget
*/
//***************************************************************************//

class DNAI_API UAITarget : public UObject
{
public:
    class AAIActor* AIOwner;
    INT TargetActorIndex;
    FLOAT ClearTargetTime;
    FLOAT VisibilityTestInterval;
    BITFIELD TrackVisually:1 GCC_PACK(4);
    BITFIELD TrackAurally:1;
    BITFIELD ForceTargetUpdate:1;
    BITFIELD AllowClear:1;
    FLOAT VisibilityTestGate GCC_PACK(4);
    BITFIELD ValidTarget:1 GCC_PACK(4);
    BITFIELD TargetIsActor:1;
    FVector Posn GCC_PACK(4);
    FVector BodyPosn;
    FVector EyePosn;
    FRotator Rotn;
    FVector Vel;
    FLOAT LastSeenTime;
    FLOAT LastHeardTime;
    FLOAT LastContactTime;
    FLOAT VisibleSinceTime;
    BITFIELD StoredValidTarget:1 GCC_PACK(4);
    BITFIELD StoredTargetIsActor:1;
    FVector StoredPos GCC_PACK(4);
    FVector StoredBodyPosn;
    FVector StoredEyePosn;
    FRotator StoredRotn;
    FVector StoredVel;
    FLOAT StoredSpeed;
    FLOAT StoredLastSeenTime;
    FLOAT StoredLastHeardTime;
    FLOAT StoredLastContactTime;
    FVector Disp;
    INT DispFrame;
    FVector Disp2D;
    INT Disp2DFrame;
    FLOAT Dist3D;
    INT Dist3DFrame;
    FLOAT Dist2D;
    INT Dist2DFrame;
    FLOAT Range2D;
    INT Range2DFrame;
    FVector DirTo;
    INT DirToFrame;
    FVector Dir2DTo;
    INT Dir2DToFrame;
    FLOAT AimFromAngle;
    INT AimFromAngleFrame;
    DECLARE_FUNCTION(execGetAimFromAngle);
    DECLARE_FUNCTION(execGetDir2DTo);
    DECLARE_FUNCTION(execGetDirTo);
    DECLARE_FUNCTION(execGetRange2D);
    DECLARE_FUNCTION(execGetDist2D);
    DECLARE_FUNCTION(execGetDist);
    DECLARE_FUNCTION(execGetDisp2D);
    DECLARE_FUNCTION(execGetDisp);
    DECLARE_FUNCTION(execGetTimeVisible);
    DECLARE_FUNCTION(execGetTimeSinceContact);
    DECLARE_FUNCTION(execGetTimeSinceHeard);
    DECLARE_FUNCTION(execGetTimeSinceSeen);
    DECLARE_FUNCTION(execGetVel);
    DECLARE_FUNCTION(execGetAimPos);
    DECLARE_FUNCTION(execGetEyePos);
    DECLARE_FUNCTION(execGetRotn);
    DECLARE_FUNCTION(execGetBodyPos);
    DECLARE_FUNCTION(execGetPos);
    DECLARE_FUNCTION(execGetActor);
    DECLARE_FUNCTION(execIsAllowedToClear);
    DECLARE_FUNCTION(execIsAnActor);
    DECLARE_FUNCTION(execIsValidTarget);
    DECLARE_FUNCTION(execForceContactUpdate);
    DECLARE_FUNCTION(execClearTarget);
    DECLARE_FUNCTION(execHeardSound);
    DECLARE_FUNCTION(execSetVisibilityInterval);
    DECLARE_FUNCTION(execSetClearTime);
    DECLARE_FUNCTION(execSetTargetPos);
    DECLARE_FUNCTION(execSetTargetActor);
    DECLARE_FUNCTION(execTickNative);
    DECLARE_FUNCTION(execInitialise);
    DECLARE_CLASS(UAITarget,UObject,0,dnAI)
    NO_DEFAULT_CONSTRUCTOR(UAITarget)
};
// Class AITarget exported:
//   Properties size: 280 bytes (320 total)


//***************************************************************************//
/*	\class UAimer
*/
//***************************************************************************//

class DNAI_API UAimer : public UObject
{
public:
    FVector LastTargetLocation;
    DECLARE_CLASS(UAimer,UObject,0,dnAI)
    NO_DEFAULT_CONSTRUCTOR(UAimer)
};
// Class Aimer exported:
//   Properties size: 12 bytes (52 total)


//***************************************************************************//
/*	\class UAITracker
*/
//***************************************************************************//

class DNAI_API UAITracker : public UObject
{
public:
    DECLARE_CLASS(UAITracker,UObject,0,dnAI)
};
// Class AITracker exported:
//   Properties size: 0 bytes (40 total)


//***************************************************************************//
/*	\class UAIRelationshipMgr
*/
//***************************************************************************//

class DNAI_API UAIRelationshipMgr : public UObject
{
public:
    DECLARE_FUNCTION(execGetAttitudeTowards);
    DECLARE_FUNCTION(execAddClassRelation);
    DECLARE_FUNCTION(execAttitudeForWeight);
    DECLARE_FUNCTION(execWeightForAttitude);
    DECLARE_CLASS(UAIRelationshipMgr,UObject,0,dnAI)
};
// Class AIRelationshipMgr exported:
//   Properties size: 0 bytes (40 total)


//***************************************************************************//
/*	\class UWeaponCfg
*/
//***************************************************************************//

class DNAI_API UWeaponCfg : public UObject
{
public:
    dnArray<FSWeaponCfg> Cfg;
    dnArray<class UClass*> PreferredWeapons;
    DECLARE_CLASS(UWeaponCfg,UObject,0,dnAI)
    NO_DEFAULT_CONSTRUCTOR_START(UWeaponCfg)
    NO_DEFAULT_CONSTRUCTOR_INIT(Cfg)
    NO_DEFAULT_CONSTRUCTOR_INITLAST(PreferredWeapons)
};
// Class WeaponCfg exported:
//   Properties size: 24 bytes (64 total)

#endif

AUTOGENERATE_FUNCTION(UScriptPlayer,-1,execGoBackOne);
AUTOGENERATE_FUNCTION(UScriptPlayer,-1,execGetMethodString);
AUTOGENERATE_FUNCTION(UScriptPlayer,-1,execGetMethodIndex);
AUTOGENERATE_FUNCTION(UScriptPlayer,-1,execGetNumMethods);
AUTOGENERATE_FUNCTION(UScriptPlayer,-1,execGetScriptName);
AUTOGENERATE_FUNCTION(UScriptPlayer,-1,execGetNumScripts);
AUTOGENERATE_FUNCTION(UScriptPlayer,-1,execIsPlaying);
AUTOGENERATE_FUNCTION(UScriptPlayer,-1,execStopScript);
AUTOGENERATE_FUNCTION(UScriptPlayer,-1,execPlayScript);
AUTOGENERATE_FUNCTION(UScriptPlayer,-1,execInit);
AUTOGENERATE_FUNCTION(UScriptPlayer,-1,execShouldTickNoRules);
AUTOGENERATE_FUNCTION(UScriptMethod,-1,execRegisterPrecacheComponents);
AUTOGENERATE_FUNCTION(UScriptMethod,-1,execExecuteNative);
AUTOGENERATE_FUNCTION(UPointTracker,-1,execUpdate);
AUTOGENERATE_FUNCTION(UAITarget,-1,execGetAimFromAngle);
AUTOGENERATE_FUNCTION(UAITarget,-1,execGetDir2DTo);
AUTOGENERATE_FUNCTION(UAITarget,-1,execGetDirTo);
AUTOGENERATE_FUNCTION(UAITarget,-1,execGetRange2D);
AUTOGENERATE_FUNCTION(UAITarget,-1,execGetDist2D);
AUTOGENERATE_FUNCTION(UAITarget,-1,execGetDist);
AUTOGENERATE_FUNCTION(UAITarget,-1,execGetDisp2D);
AUTOGENERATE_FUNCTION(UAITarget,-1,execGetDisp);
AUTOGENERATE_FUNCTION(UAITarget,-1,execGetTimeVisible);
AUTOGENERATE_FUNCTION(UAITarget,-1,execGetTimeSinceContact);
AUTOGENERATE_FUNCTION(UAITarget,-1,execGetTimeSinceHeard);
AUTOGENERATE_FUNCTION(UAITarget,-1,execGetTimeSinceSeen);
AUTOGENERATE_FUNCTION(UAITarget,-1,execGetVel);
AUTOGENERATE_FUNCTION(UAITarget,-1,execGetAimPos);
AUTOGENERATE_FUNCTION(UAITarget,-1,execGetEyePos);
AUTOGENERATE_FUNCTION(UAITarget,-1,execGetRotn);
AUTOGENERATE_FUNCTION(UAITarget,-1,execGetBodyPos);
AUTOGENERATE_FUNCTION(UAITarget,-1,execGetPos);
AUTOGENERATE_FUNCTION(UAITarget,-1,execGetActor);
AUTOGENERATE_FUNCTION(UAITarget,-1,execIsAllowedToClear);
AUTOGENERATE_FUNCTION(UAITarget,-1,execIsAnActor);
AUTOGENERATE_FUNCTION(UAITarget,-1,execIsValidTarget);
AUTOGENERATE_FUNCTION(UAITarget,-1,execForceContactUpdate);
AUTOGENERATE_FUNCTION(UAITarget,-1,execClearTarget);
AUTOGENERATE_FUNCTION(UAITarget,-1,execHeardSound);
AUTOGENERATE_FUNCTION(UAITarget,-1,execSetVisibilityInterval);
AUTOGENERATE_FUNCTION(UAITarget,-1,execSetClearTime);
AUTOGENERATE_FUNCTION(UAITarget,-1,execSetTargetPos);
AUTOGENERATE_FUNCTION(UAITarget,-1,execSetTargetActor);
AUTOGENERATE_FUNCTION(UAITarget,-1,execTickNative);
AUTOGENERATE_FUNCTION(UAITarget,-1,execInitialise);
AUTOGENERATE_FUNCTION(UAIAnimationControllerEx,-1,execSetAnimState);
AUTOGENERATE_FUNCTION(UAIAnimationControllerEx,-1,execSetAnimState_RateScaled);
AUTOGENERATE_FUNCTION(UAIRelationshipMgr,-1,execGetAttitudeTowards);
AUTOGENERATE_FUNCTION(UAIRelationshipMgr,-1,execAddClassRelation);
AUTOGENERATE_FUNCTION(UAIRelationshipMgr,-1,execAttitudeForWeight);
AUTOGENERATE_FUNCTION(UAIRelationshipMgr,-1,execWeightForAttitude);
AUTOGENERATE_FUNCTION(AAIActor,1335,execSetWeaponManagerMode);
AUTOGENERATE_FUNCTION(AAIActor,-1,execInitialiseWeaponManager);
AUTOGENERATE_FUNCTION(AAIActor,-1,execWeaponIsActive);
AUTOGENERATE_FUNCTION(AAIActor,-1,execSetCurrentWeapon);
AUTOGENERATE_FUNCTION(AAIActor,-1,execAddWeapon);
AUTOGENERATE_FUNCTION(AAIActor,1334,execInitialiseWeapons);
AUTOGENERATE_FUNCTION(AAIActor,1333,execIsDoingSyncedAnim);
AUTOGENERATE_FUNCTION(AAIActor,-1,execEndOp);
AUTOGENERATE_FUNCTION(AAIActor,-1,execNotifyOpExitState);
AUTOGENERATE_FUNCTION(AAIActor,-1,execExecuteOp);
AUTOGENERATE_FUNCTION(AAIActor,-1,execCanUseOp);
AUTOGENERATE_FUNCTION(AAIActor,1332,execPhysicsEndOfFrame_Generic);
AUTOGENERATE_FUNCTION(AAIActor,1331,execCalculatePhysics_OnGround);
AUTOGENERATE_FUNCTION(AAIActor,-1,execHasTripMineAttached);
AUTOGENERATE_FUNCTION(AAIActor,1330,execShouldProceduralAim);
AUTOGENERATE_FUNCTION(AAIActor,-1,execPassDamageType);
AUTOGENERATE_FUNCTION(AAIActor,1329,execIsInProcFireOp);
AUTOGENERATE_FUNCTION(AAIActor,1328,execIsInProcFireState);
AUTOGENERATE_FUNCTION(AAIActor,-1,execRegisterAIAnimationControllerEntry);
AUTOGENERATE_FUNCTION(AAIActor,-1,execClearGlobalPathingCache);
AUTOGENERATE_FUNCTION(AAIActor,-1,execAIShouldTick);
AUTOGENERATE_FUNCTION(AAIActor,-1,execShowDebugInfoBubbles);
AUTOGENERATE_FUNCTION(AAIActor,-1,execIsFalling);
AUTOGENERATE_FUNCTION(AAIActor,-1,execIsFlying);
AUTOGENERATE_FUNCTION(AAIActor,-1,execIsInAir);
AUTOGENERATE_FUNCTION(AAIActor,-1,execSortHealthTriggers);
AUTOGENERATE_FUNCTION(AAIActor,-1,execGetRealNAVID);
AUTOGENERATE_FUNCTION(AAIActor,-1,execPointIsInWorld);
AUTOGENERATE_FUNCTION(AAIActor,-1,execNotifyDied);
AUTOGENERATE_FUNCTION(AAIActor,-1,execAddTrailMarker);
AUTOGENERATE_FUNCTION(AAIActor,-1,execGetMaxHeightError);
AUTOGENERATE_FUNCTION(AAIActor,-1,execGetMaxRangeError);
AUTOGENERATE_FUNCTION(AAIActor,-1,execTargetInHorizRangeLimits);
AUTOGENERATE_FUNCTION(AAIActor,-1,execFacingTarget);
AUTOGENERATE_FUNCTION(AAIActor,-1,execTargetContact);
AUTOGENERATE_FUNCTION(AAIActor,-1,execForcePosIntoPath);
AUTOGENERATE_FUNCTION(AAIActor,-1,execPortalDoorIsClosed);
AUTOGENERATE_FUNCTION(AAIActor,-1,execFindClosestLedge);
AUTOGENERATE_FUNCTION(AAIActor,-1,execVectorInLimits);
AUTOGENERATE_FUNCTION(AAIActor,-1,execFloatInLimits);
AUTOGENERATE_FUNCTION(AAIActor,-1,execCanSeePosFrom);
AUTOGENERATE_FUNCTION(AAIActor,-1,execClearShot);
AUTOGENERATE_FUNCTION(AAIActor,-1,execCanSeeActor);
AUTOGENERATE_FUNCTION(AAIActor,-1,execCanReloadWeapon);
AUTOGENERATE_FUNCTION(AAIActor,-1,execCalcMapRange);
AUTOGENERATE_FUNCTION(AAIActor,-1,execCalcProjectileVelocity);
AUTOGENERATE_FUNCTION(AAIActor,-1,execCalcPipeBombVelocity);
AUTOGENERATE_FUNCTION(AAIActor,-1,execCalcJumpAttackVelocity);
AUTOGENERATE_FUNCTION(AAIActor,-1,execCalcJumpVelocity);
AUTOGENERATE_FUNCTION(AAIActor,-1,execValidateTargetPos);
AUTOGENERATE_FUNCTION(AAIActor,-1,execCalcHorizRangeToActor);
AUTOGENERATE_FUNCTION(AAIActor,-1,execCalcRangeForDist);
AUTOGENERATE_FUNCTION(AAIActor,-1,execCalcDistForRange);
AUTOGENERATE_FUNCTION(AAIActor,-1,execCalcDirToTargetRelOffsetPos3D);
AUTOGENERATE_FUNCTION(AAIActor,-1,execCalcDirToTargetRelOffsetPos2D);
AUTOGENERATE_FUNCTION(AAIActor,-1,execCalcTargetRelOffsetPos3D);
AUTOGENERATE_FUNCTION(AAIActor,-1,execCalcTargetRelOffsetPos2D);
AUTOGENERATE_FUNCTION(AAIActor,-1,execCalcTargetOffsetPos3D);
AUTOGENERATE_FUNCTION(AAIActor,-1,execCalcTargetOffsetPos2D);
AUTOGENERATE_FUNCTION(AAIActor,-1,execCalcRelOffsetPos);
AUTOGENERATE_FUNCTION(AAIActor,-1,execCalcRndPos);
AUTOGENERATE_FUNCTION(AAIActor,-1,execCalcRelativeSector);
AUTOGENERATE_FUNCTION(AAIActor,-1,execCalcSector);
AUTOGENERATE_FUNCTION(AAIActor,-1,execCalcJumpRange);
AUTOGENERATE_FUNCTION(AAIActor,-1,execCalcNumWeaponStrafeCycles);
AUTOGENERATE_FUNCTION(AAIActor,-1,execCalcNumMeleeStrafeCylces);
AUTOGENERATE_FUNCTION(AAIActor,-1,execCalcMeleeStrafeRange);
AUTOGENERATE_FUNCTION(AAIActor,-1,execCalcMeleeRange);
AUTOGENERATE_FUNCTION(AAIActor,-1,execCalcWeaponRange);
AUTOGENERATE_FUNCTION(AAIActor,-1,execCalcPerpSpeed);
AUTOGENERATE_FUNCTION(AAIActor,-1,execCanTurnToPos);
AUTOGENERATE_FUNCTION(AAIActor,-1,execCanTurnToActor);
AUTOGENERATE_FUNCTION(AAIActor,-1,execCanGotoPos);
AUTOGENERATE_FUNCTION(AAIActor,-1,execCanGotoPos2D);
AUTOGENERATE_FUNCTION(AAIActor,-1,execCanGotoActorOffset);
AUTOGENERATE_FUNCTION(AAIActor,-1,execCanGotoActor2D);
AUTOGENERATE_FUNCTION(AAIActor,-1,execPosInAcceptableProx);
AUTOGENERATE_FUNCTION(AAIActor,-1,execPosInProx);
AUTOGENERATE_FUNCTION(AAIActor,-1,execPosInAcceptableHorizProx);
AUTOGENERATE_FUNCTION(AAIActor,-1,execPosInHorizProx);
AUTOGENERATE_FUNCTION(AAIActor,-1,execAtActorOffset);
AUTOGENERATE_FUNCTION(AAIActor,-1,execActorInRange);
AUTOGENERATE_FUNCTION(AAIActor,-1,execActorInHorizRangeLimits);
AUTOGENERATE_FUNCTION(AAIActor,-1,execActorInHorizRange);
AUTOGENERATE_FUNCTION(AAIActor,-1,execPosInAngularThreshold);
AUTOGENERATE_FUNCTION(AAIActor,-1,execFacingPos);
AUTOGENERATE_FUNCTION(AAIActor,-1,execFacingActor);
AUTOGENERATE_FUNCTION(AAIActor,-1,execCheckCondition);
AUTOGENERATE_FUNCTION(AAIActor,-1,execGetTargetActor);
AUTOGENERATE_FUNCTION(AAIActor,-1,execGetTarget);
AUTOGENERATE_FUNCTION(AAIActor,-1,execGetUnusedTargetActorSlot);
AUTOGENERATE_FUNCTION(AAIActor,-1,execSetTargetActorSlot);
AUTOGENERATE_FUNCTION(AAIActor,-1,execTargetActor);
AUTOGENERATE_FUNCTION(AAIActor,-1,execFreeTargetActorSlot);
AUTOGENERATE_FUNCTION(AAIActor,-1,execClearTarget);
AUTOGENERATE_FUNCTION(AAIActor,-1,execSetTarget);
AUTOGENERATE_FUNCTION(AAIActor,-1,execGetLatentAction);
AUTOGENERATE_FUNCTION(AAIActor,-1,execEnableMovement);
AUTOGENERATE_FUNCTION(AAIActor,-1,execMoveToEx);
AUTOGENERATE_FUNCTION(AAIActor,-1,execIsFacing);
AUTOGENERATE_FUNCTION(AAIActor,-1,execIsFacingInYaw);
AUTOGENERATE_FUNCTION(AAIActor,-1,execNative_PostSpawn);
AUTOGENERATE_FUNCTION(AAIActor,-1,execNative_PostLoadMap);
AUTOGENERATE_FUNCTION(AAIActor,-1,execNative_PostBeginPlay);
AUTOGENERATE_FUNCTION(AAIActor,-1,execNative_PreBeginPlay);
AUTOGENERATE_FUNCTION(AAIActor,-1,execNative_PreGameInit);
AUTOGENERATE_FUNCTION(AAIActor,-1,execCalcAimToMeAngle);
AUTOGENERATE_FUNCTION(AAIActor,-1,execCalcTargetsAimAngle);
AUTOGENERATE_FUNCTION(AAIActor,-1,execSetGotoPresets);
AUTOGENERATE_FUNCTION(AAIActor,-1,execSetGoal);
AUTOGENERATE_FUNCTION(AAIActor,-1,execForceLookTargetEval);
AUTOGENERATE_FUNCTION(AAIActor,-1,execSuspendLookTargetEvaluation);
AUTOGENERATE_FUNCTION(AAIActor,-1,execPotentialLookTargetSound);
AUTOGENERATE_FUNCTION(AAIActor,-1,execSuspendWeaponTargetEvaluation);
AUTOGENERATE_FUNCTION(AAIActor,-1,execPotentialWeaponTargetSound);
AUTOGENERATE_FUNCTION(AAIActor,-1,execHeardSound);
AUTOGENERATE_FUNCTION(AAIActor,-1,execAbortScript_Shrunk);
AUTOGENERATE_FUNCTION(AAIActor,-1,execAbortScript_Triggered);
AUTOGENERATE_FUNCTION(AAIActor,-1,execAbortScript_Bumped);
AUTOGENERATE_FUNCTION(AAIActor,-1,execAbortScript_Damaged);
AUTOGENERATE_FUNCTION(AAIActor,-1,execAbortScript_HearSound);
AUTOGENERATE_FUNCTION(AAIActor,-1,execAbortScript_SeeActor);
AUTOGENERATE_FUNCTION(AAIActor,-1,execAbortScripts);
AUTOGENERATE_FUNCTION(AAIActor,-1,execStopScript);
AUTOGENERATE_FUNCTION(AAIActor,-1,execPlayScript);
AUTOGENERATE_FUNCTION(AAIActor,-1,execPrintExecutive);
AUTOGENERATE_FUNCTION(AAIActor,-1,execForceExecutive);
AUTOGENERATE_FUNCTION(AAIActor,-1,execExecuteExecutive);
AUTOGENERATE_FUNCTION(AAIActor,-1,execIsExecutiveSuspended);
AUTOGENERATE_FUNCTION(AAIActor,-1,execSuspendExecutive);
AUTOGENERATE_FUNCTION(AAIActor,-1,execInitialiseExecutive);
AUTOGENERATE_FUNCTION(AAIActor,-1,execGetExecutive);
AUTOGENERATE_FUNCTION(AAIActor,-1,execSetExecutive);
AUTOGENERATE_FUNCTION(AAIActor,-1,execSetNewActionPoint);
AUTOGENERATE_FUNCTION(AAIActor,-1,execHasUseableActionPoint);
AUTOGENERATE_FUNCTION(AAIActor,-1,execReleaseActionPoint);
AUTOGENERATE_FUNCTION(AAIActor,-1,execUseActionPoint);
AUTOGENERATE_FUNCTION(AAIActor,-1,execActionPointCompromised);
AUTOGENERATE_FUNCTION(AAIActor,-1,execGetActionPointAction);
AUTOGENERATE_FUNCTION(AAIActor,-1,execCanUseActionPoint);
AUTOGENERATE_FUNCTION(AAIActor,-1,execCanUseNewActionPoint);
AUTOGENERATE_FUNCTION(AAIActor,-1,execAtActionPoint);
AUTOGENERATE_FUNCTION(AAIActor,-1,execLockActionPoint);
AUTOGENERATE_FUNCTION(AAIActor,-1,execSetActionPointIndex);
AUTOGENERATE_FUNCTION(AAIActor,-1,execPopUpCompromised);
AUTOGENERATE_FUNCTION(AAIActor,-1,execSetPopUp);
AUTOGENERATE_FUNCTION(AAIActor,-1,execClearGuard);
AUTOGENERATE_FUNCTION(AAIActor,-1,execSetAbortGuardThresh);
AUTOGENERATE_FUNCTION(AAIActor,-1,execGuardPos);
AUTOGENERATE_FUNCTION(AAIActor,-1,execGuardActor);
AUTOGENERATE_FUNCTION(AAIActor,-1,execIsGuardingPos);
AUTOGENERATE_FUNCTION(AAIActor,-1,execIsGuardingActor);
AUTOGENERATE_FUNCTION(AAIActor,-1,execIsGuardingPlayer);
AUTOGENERATE_FUNCTION(AAIActor,-1,execIsGuarding);
AUTOGENERATE_FUNCTION(AAIActor,-1,execCanGuard);
AUTOGENERATE_FUNCTION(AAIActor,-1,execHeadAimerGetTargetString);
AUTOGENERATE_FUNCTION(AAIActor,-1,execHeadAimerGetNumTargets);
AUTOGENERATE_FUNCTION(AAIActor,-1,execGetHeadAimerState);
AUTOGENERATE_FUNCTION(AAIActor,-1,execIsHeadAimerOn);
AUTOGENERATE_FUNCTION(AAIActor,-1,execHeadAimerRemoveSpecificTarget);
AUTOGENERATE_FUNCTION(AAIActor,-1,execHeadAimerRemoveTarget);
AUTOGENERATE_FUNCTION(AAIActor,-1,execHeadAimerAddTargetAITarget);
AUTOGENERATE_FUNCTION(AAIActor,-1,execHeadAimerAddTargetPos);
AUTOGENERATE_FUNCTION(AAIActor,-1,execHeadAimerAddTargetActor);
AUTOGENERATE_FUNCTION(AAIActor,-1,execWeaponAimerGetTargetString);
AUTOGENERATE_FUNCTION(AAIActor,-1,execWeaponAimerGetNumTargets);
AUTOGENERATE_FUNCTION(AAIActor,-1,execGetWeaponAimerState);
AUTOGENERATE_FUNCTION(AAIActor,-1,execIsWeaponAimerOn);
AUTOGENERATE_FUNCTION(AAIActor,-1,execWeaponAimerRemoveSpecificTarget);
AUTOGENERATE_FUNCTION(AAIActor,-1,execWeaponAimerRemoveTarget);
AUTOGENERATE_FUNCTION(AAIActor,-1,execWeaponAimerAddTargetAITarget);
AUTOGENERATE_FUNCTION(AAIActor,-1,execWeaponAimerAddTargetPos);
AUTOGENERATE_FUNCTION(AAIActor,-1,execWeaponAimerAddTargetActor);
AUTOGENERATE_FUNCTION(AAIActor,-1,execEndMyLog);
AUTOGENERATE_FUNCTION(AAIActor,-1,execBeginMyLog);
AUTOGENERATE_FUNCTION(AAIActor,-1,execLogMyLog);
AUTOGENERATE_FUNCTION(AAIActor,-1,execClearDangerPos);
AUTOGENERATE_FUNCTION(AAIActor,-1,execSetDangerPos);
AUTOGENERATE_FUNCTION(AAIActor,-1,execIsCloaked);
AUTOGENERATE_FUNCTION(AAIActor,-1,execGetCloaking);
AUTOGENERATE_FUNCTION(AAIActor,-1,execActivateCloaking);
AUTOGENERATE_FUNCTION(AAIActor,-1,execSetJumpPresets);
AUTOGENERATE_FUNCTION(AAIActor,-1,execSetTurnToPresets);
AUTOGENERATE_FUNCTION(AAIActor,-1,execSetAnimPresets);
AUTOGENERATE_FUNCTION(APathRover,-1,execCanPathToPos);
AUTOGENERATE_FUNCTION(AAIBrainEditor,-1,execExecuteOp);
AUTOGENERATE_FUNCTION(AAIBrainEditor,-1,execExportFSMToText);
AUTOGENERATE_FUNCTION(AAIBrainEditor,-1,execNative_BeginFSMTest);

#ifndef NAMES_ONLY
#undef AUTOGENERATE_NAME
#undef AUTOGENERATE_FUNCTION
#endif // NAMES_ONLY

#if _MSC_VER
#pragma pack (pop)
#elif defined PS3
#pragma pack (pop)
#endif


#ifdef NATIVE_DEFS_ONLY
#if _MSC_VER
#pragma message("*** Including native definitions from dnAI.")
#endif
DECLARE_NATIVE_TYPE(dnAI,UTargetEvaluator);
DECLARE_NATIVE_TYPE(dnAI,UScriptPlayer);
DECLARE_NATIVE_TYPE(dnAI,UScriptObj);
DECLARE_NATIVE_TYPE(dnAI,UScriptMethod_DigsGirl_FinishFlirt_NativeBase);
DECLARE_NATIVE_TYPE(dnAI,UScriptMethod);
DECLARE_NATIVE_TYPE(dnAI,UScriptMethod_X_TEST_Op);
DECLARE_NATIVE_TYPE(dnAI,UScriptMethod_OverrideExecution);
DECLARE_NATIVE_TYPE(dnAI,UScriptMethod_DropProp);
DECLARE_NATIVE_TYPE(dnAI,UScriptMethod_AnimFadeChannelBlock);
DECLARE_NATIVE_TYPE(dnAI,UScriptMethod_BoneAimer);
DECLARE_NATIVE_TYPE(dnAI,UScriptMethod_UseItem);
DECLARE_NATIVE_TYPE(dnAI,UScriptMethod_TurnToPos);
DECLARE_NATIVE_TYPE(dnAI,UScriptMethod_TurnToActor);
DECLARE_NATIVE_TYPE(dnAI,UScriptMethod_Trigger);
DECLARE_NATIVE_TYPE(dnAI,UScriptMethod_TKThrow);
DECLARE_NATIVE_TYPE(dnAI,UScriptMethod_TKCatch);
DECLARE_NATIVE_TYPE(dnAI,UScriptMethod_ThrowPipeBomb);
DECLARE_NATIVE_TYPE(dnAI,UScriptMethod_Throw);
DECLARE_NATIVE_TYPE(dnAI,UScriptMethod_TeleportToPos);
DECLARE_NATIVE_TYPE(dnAI,UScriptMethod_TeleportToActor);
DECLARE_NATIVE_TYPE(dnAI,UScriptMethod_TakeOff);
DECLARE_NATIVE_TYPE(dnAI,UScriptMethod_SuspendWeaponTargetEval);
DECLARE_NATIVE_TYPE(dnAI,UScriptMethod_SuspendLookTargetEval);
DECLARE_NATIVE_TYPE(dnAI,UScriptMethod_Stomp);
DECLARE_NATIVE_TYPE(dnAI,UScriptMethod_StandPassive);
DECLARE_NATIVE_TYPE(dnAI,UScriptMethod_StandScared);
DECLARE_NATIVE_TYPE(dnAI,UScriptMethod_StandCombat);
DECLARE_NATIVE_TYPE(dnAI,UScriptMethod_Speak);
DECLARE_NATIVE_TYPE(dnAI,UScriptMethod_SpawnAttachment);
DECLARE_NATIVE_TYPE(dnAI,UScriptMethod_ShootProjectile);
DECLARE_NATIVE_TYPE(dnAI,UScriptMethod_SetUsedScriptTag);
DECLARE_NATIVE_TYPE(dnAI,UScriptMethod_SetShouldCauseKillSound);
DECLARE_NATIVE_TYPE(dnAI,UScriptMethod_SetScriptTag);
DECLARE_NATIVE_TYPE(dnAI,UScriptMethod_SetRelations);
DECLARE_NATIVE_TYPE(dnAI,UScriptMethod_SetTarget);
DECLARE_NATIVE_TYPE(dnAI,UScriptMethod_SetSoundState);
DECLARE_NATIVE_TYPE(dnAI,UScriptMethod_SetPerformLipsync);
DECLARE_NATIVE_TYPE(dnAI,UScriptMethod_SetLookTarget);
DECLARE_NATIVE_TYPE(dnAI,UScriptMethod_SetJetPackWobble);
DECLARE_NATIVE_TYPE(dnAI,UScriptMethod_SetHeadTarget);
DECLARE_NATIVE_TYPE(dnAI,UScriptMethod_SetFactoryActionPointTags);
DECLARE_NATIVE_TYPE(dnAI,UScriptMethod_SetFactoryActionPointIndex);
DECLARE_NATIVE_TYPE(dnAI,UScriptMethod_SetFaction);
DECLARE_NATIVE_TYPE(dnAI,UScriptMethod_SetEyeTarget);
DECLARE_NATIVE_TYPE(dnAI,UScriptMethod_SetEvent);
DECLARE_NATIVE_TYPE(dnAI,UScriptMethod_SetEnemyMustBeSighted);
DECLARE_NATIVE_TYPE(dnAI,UScriptMethod_SetDeathAnim);
DECLARE_NATIVE_TYPE(dnAI,UScriptMethod_SetDamageReactions);
DECLARE_NATIVE_TYPE(dnAI,UScriptMethod_SetCurrentOpMustFinish);
DECLARE_NATIVE_TYPE(dnAI,UScriptMethod_SetCollision);
DECLARE_NATIVE_TYPE(dnAI,UScriptMethod_SetBodyTarget);
DECLARE_NATIVE_TYPE(dnAI,UScriptMethod_SetAttackConstraint);
DECLARE_NATIVE_TYPE(dnAI,UScriptMethod_SetAnimController);
DECLARE_NATIVE_TYPE(dnAI,UScriptMethod_SetAimAssist);
DECLARE_NATIVE_TYPE(dnAI,UScriptMethod_SetActionPointIndex);
DECLARE_NATIVE_TYPE(dnAI,UScriptMethod_SetActionPointTags);
DECLARE_NATIVE_TYPE(dnAI,UScriptMethod_SetAbortable);
DECLARE_NATIVE_TYPE(dnAI,UScriptMethod_SelectWeapon);
DECLARE_NATIVE_TYPE(dnAI,UScriptMethod_ResumeFire);
DECLARE_NATIVE_TYPE(dnAI,UScriptMethod_Reload);
DECLARE_NATIVE_TYPE(dnAI,UScriptMethod_Rappel);
DECLARE_NATIVE_TYPE(dnAI,UScriptMethod_Prone);
DECLARE_NATIVE_TYPE(dnAI,UScriptMethod_Print);
DECLARE_NATIVE_TYPE(dnAI,UScriptMethod_PopUpExplicit);
DECLARE_NATIVE_TYPE(dnAI,UScriptMethod_PopUp);
DECLARE_NATIVE_TYPE(dnAI,UScriptMethod_PlayTransientExplicitAnim);
DECLARE_NATIVE_TYPE(dnAI,UScriptMethod_PlayTransientAnim);
DECLARE_NATIVE_TYPE(dnAI,UScriptMethod_PlaySound);
DECLARE_NATIVE_TYPE(dnAI,UScriptMethod_PlayScript);
DECLARE_NATIVE_TYPE(dnAI,UScriptMethod_PlayExplicitAnim);
DECLARE_NATIVE_TYPE(dnAI,UScriptMethod_PlayAnim);
DECLARE_NATIVE_TYPE(dnAI,UScriptMethod_PlayAmbientSound);
DECLARE_NATIVE_TYPE(dnAI,UScriptMethod_PlaceTripMine);
DECLARE_NATIVE_TYPE(dnAI,UScriptMethod_Pickup);
DECLARE_NATIVE_TYPE(dnAI,UScriptMethod_Pause);
DECLARE_NATIVE_TYPE(dnAI,UScriptMethod_OverrideTarget_Clear);
DECLARE_NATIVE_TYPE(dnAI,UScriptMethod_OverrideTarget);
DECLARE_NATIVE_TYPE(dnAI,UScriptMethod_OverrideAnim_Clear);
DECLARE_NATIVE_TYPE(dnAI,UScriptMethod_OverrideAnim);
DECLARE_NATIVE_TYPE(dnAI,UScriptMethod_MultiAnimPreset);
DECLARE_NATIVE_TYPE(dnAI,UScriptMethod_Melee);
DECLARE_NATIVE_TYPE(dnAI,UScriptMethod_Land);
DECLARE_NATIVE_TYPE(dnAI,UScriptMethod_JumpToActorsPos);
DECLARE_NATIVE_TYPE(dnAI,UScriptMethod_JumpAttack);
DECLARE_NATIVE_TYPE(dnAI,UScriptMethod_Jump);
DECLARE_NATIVE_TYPE(dnAI,UScriptMethod_IK);
DECLARE_NATIVE_TYPE(dnAI,UScriptMethod_Idle);
DECLARE_NATIVE_TYPE(dnAI,UScriptMethod_Hurl);
DECLARE_NATIVE_TYPE(dnAI,UScriptMethod_HoldFire);
DECLARE_NATIVE_TYPE(dnAI,UScriptMethod_HealthChange);
DECLARE_NATIVE_TYPE(dnAI,UScriptMethod_GuardPos);
DECLARE_NATIVE_TYPE(dnAI,UScriptMethod_GuardActor);
DECLARE_NATIVE_TYPE(dnAI,UScriptMethod_GotoAndPlaceTripMine);
DECLARE_NATIVE_TYPE(dnAI,UScriptMethod_GotoBase);
DECLARE_NATIVE_TYPE(dnAI,UScriptMethod_GotoAndUseItem);
DECLARE_NATIVE_TYPE(dnAI,UScriptMethod_GotoAndPickup);
DECLARE_NATIVE_TYPE(dnAI,UScriptMethod_GotoAndHurl);
DECLARE_NATIVE_TYPE(dnAI,UScriptMethod_GotoPos);
DECLARE_NATIVE_TYPE(dnAI,UScriptMethod_GotoActorsPos);
DECLARE_NATIVE_TYPE(dnAI,UScriptMethod_GotoActor);
DECLARE_NATIVE_TYPE(dnAI,UScriptMethod_GotoAndVault);
DECLARE_NATIVE_TYPE(dnAI,UScriptMethod_ForceFire);
DECLARE_NATIVE_TYPE(dnAI,UScriptMethod_ForceActionPointTag);
DECLARE_NATIVE_TYPE(dnAI,UScriptMethod_FreeMove);
DECLARE_NATIVE_TYPE(dnAI,UScriptMethod_Fall);
DECLARE_NATIVE_TYPE(dnAI,UScriptMethod_EndUseItem);
DECLARE_NATIVE_TYPE(dnAI,UScriptMethod_EditPathingSettings);
DECLARE_NATIVE_TYPE(dnAI,UScriptMethod_ExplicitAnim);
DECLARE_NATIVE_TYPE(dnAI,UScriptMethod_ExitDropship);
DECLARE_NATIVE_TYPE(dnAI,UScriptMethod_Destroy);
DECLARE_NATIVE_TYPE(dnAI,UScriptMethod_DebugGoalSelection);
DECLARE_NATIVE_TYPE(dnAI,UScriptMethod_Crouch);
DECLARE_NATIVE_TYPE(dnAI,UScriptMethod_ClearGuard);
DECLARE_NATIVE_TYPE(dnAI,UScriptMethod_Blink);
DECLARE_NATIVE_TYPE(dnAI,UScriptMethod_Bezerk);
DECLARE_NATIVE_TYPE(dnAI,UScriptMethod_BallModeStart);
DECLARE_NATIVE_TYPE(dnAI,UScriptMethod_BallModeEnd);
DECLARE_NATIVE_TYPE(dnAI,UScriptMethod_Anim);
DECLARE_NATIVE_TYPE(dnAI,UScriptMethod_AlignWithActor);
DECLARE_NATIVE_TYPE(dnAI,UScriptMethod_AbortScript);
DECLARE_NATIVE_TYPE(dnAI,AScriptTrigger);
DECLARE_NATIVE_TYPE(dnAI,UPopUpCfg_Vault);
DECLARE_NATIVE_TYPE(dnAI,UPopUpCfg);
DECLARE_NATIVE_TYPE(dnAI,UPopUpCfg_RightPipeBomb);
DECLARE_NATIVE_TYPE(dnAI,UPopUpCfg_LeftPipeBomb);
DECLARE_NATIVE_TYPE(dnAI,UPopUpCfg_CrouchUpPipeBomb);
DECLARE_NATIVE_TYPE(dnAI,UPopUpCfg_CrouchRightPipeBomb);
DECLARE_NATIVE_TYPE(dnAI,UPopUpCfg_CrouchLeftPipeBomb);
DECLARE_NATIVE_TYPE(dnAI,UPopUpCfg_CrouchBackUpPipeBomb);
DECLARE_NATIVE_TYPE(dnAI,UPopUpCfg_CrouchBackRightPipeBomb);
DECLARE_NATIVE_TYPE(dnAI,UPopUpCfg_CrouchBackLeftPipeBomb);
DECLARE_NATIVE_TYPE(dnAI,UPopUpCfg_BackRightPipeBomb);
DECLARE_NATIVE_TYPE(dnAI,UPopUpCfg_BackLeftPipeBomb);
DECLARE_NATIVE_TYPE(dnAI,UPointTracker);
DECLARE_NATIVE_TYPE(dnAI,UAITarget);
DECLARE_NATIVE_TYPE(dnAI,UAIAnimationControllerEx);
DECLARE_NATIVE_TYPE(dnAI,UAimer);
DECLARE_NATIVE_TYPE(dnAI,UAction_Teleport);
DECLARE_NATIVE_TYPE(dnAI,UAction_CircularCover);
DECLARE_NATIVE_TYPE(dnAI,UAction_PopUp);
DECLARE_NATIVE_TYPE(dnAI,UAITracker);
DECLARE_NATIVE_TYPE(dnAI,UAIRelationshipMgr);
DECLARE_NATIVE_TYPE(dnAI,AAIHUD);
DECLARE_NATIVE_TYPE(dnAI,ADukeClone_Base);
DECLARE_NATIVE_TYPE(dnAI,AMaleCombat);
DECLARE_NATIVE_TYPE(dnAI,AAIActor);
DECLARE_NATIVE_TYPE(dnAI,AAIInputDispatcher_Vehicle);
DECLARE_NATIVE_TYPE(dnAI,AAIInputDispatcher_Auto);
DECLARE_NATIVE_TYPE(dnAI,AAIInputDispatcher_Base);
DECLARE_NATIVE_TYPE(dnAI,AdnAlienDropship_Base);
DECLARE_NATIVE_TYPE(dnAI,APodGirl_Base);
DECLARE_NATIVE_TYPE(dnAI,APathRover);
DECLARE_NATIVE_TYPE(dnAI,AEggPod_Base);
DECLARE_NATIVE_TYPE(dnAI,UWeaponCfg);
DECLARE_NATIVE_TYPE(dnAI,AAIActorFactory);
DECLARE_NATIVE_TYPE(dnAI,AAIBrainEditor);

#define AUTO_INITIALIZE_REGISTRANTS_DNAI \
	UTargetEvaluator::StaticClassNoInline(); \
	UScriptPlayer::StaticClassNoInline(); \
	GNativeLookupFuncs[Lookup++] = &FinddnAIUScriptPlayerNative; \
	UScriptObj::StaticClassNoInline(); \
	UScriptMethod_DigsGirl_FinishFlirt_NativeBase::StaticClassNoInline(); \
	UScriptMethod::StaticClassNoInline(); \
	GNativeLookupFuncs[Lookup++] = &FinddnAIUScriptMethodNative; \
	UScriptMethod_X_TEST_Op::StaticClassNoInline(); \
	UScriptMethod_OverrideExecution::StaticClassNoInline(); \
	UScriptMethod_DropProp::StaticClassNoInline(); \
	UScriptMethod_AnimFadeChannelBlock::StaticClassNoInline(); \
	UScriptMethod_BoneAimer::StaticClassNoInline(); \
	UScriptMethod_UseItem::StaticClassNoInline(); \
	UScriptMethod_TurnToPos::StaticClassNoInline(); \
	UScriptMethod_TurnToActor::StaticClassNoInline(); \
	UScriptMethod_Trigger::StaticClassNoInline(); \
	UScriptMethod_TKThrow::StaticClassNoInline(); \
	UScriptMethod_TKCatch::StaticClassNoInline(); \
	UScriptMethod_ThrowPipeBomb::StaticClassNoInline(); \
	UScriptMethod_Throw::StaticClassNoInline(); \
	UScriptMethod_TeleportToPos::StaticClassNoInline(); \
	UScriptMethod_TeleportToActor::StaticClassNoInline(); \
	UScriptMethod_TakeOff::StaticClassNoInline(); \
	UScriptMethod_SuspendWeaponTargetEval::StaticClassNoInline(); \
	UScriptMethod_SuspendLookTargetEval::StaticClassNoInline(); \
	UScriptMethod_Stomp::StaticClassNoInline(); \
	UScriptMethod_StandPassive::StaticClassNoInline(); \
	UScriptMethod_StandScared::StaticClassNoInline(); \
	UScriptMethod_StandCombat::StaticClassNoInline(); \
	UScriptMethod_Speak::StaticClassNoInline(); \
	UScriptMethod_SpawnAttachment::StaticClassNoInline(); \
	UScriptMethod_ShootProjectile::StaticClassNoInline(); \
	UScriptMethod_SetUsedScriptTag::StaticClassNoInline(); \
	UScriptMethod_SetShouldCauseKillSound::StaticClassNoInline(); \
	UScriptMethod_SetScriptTag::StaticClassNoInline(); \
	UScriptMethod_SetRelations::StaticClassNoInline(); \
	UScriptMethod_SetTarget::StaticClassNoInline(); \
	UScriptMethod_SetSoundState::StaticClassNoInline(); \
	UScriptMethod_SetPerformLipsync::StaticClassNoInline(); \
	UScriptMethod_SetLookTarget::StaticClassNoInline(); \
	UScriptMethod_SetJetPackWobble::StaticClassNoInline(); \
	UScriptMethod_SetHeadTarget::StaticClassNoInline(); \
	UScriptMethod_SetFactoryActionPointTags::StaticClassNoInline(); \
	UScriptMethod_SetFactoryActionPointIndex::StaticClassNoInline(); \
	UScriptMethod_SetFaction::StaticClassNoInline(); \
	UScriptMethod_SetEyeTarget::StaticClassNoInline(); \
	UScriptMethod_SetEvent::StaticClassNoInline(); \
	UScriptMethod_SetEnemyMustBeSighted::StaticClassNoInline(); \
	UScriptMethod_SetDeathAnim::StaticClassNoInline(); \
	UScriptMethod_SetDamageReactions::StaticClassNoInline(); \
	UScriptMethod_SetCurrentOpMustFinish::StaticClassNoInline(); \
	UScriptMethod_SetCollision::StaticClassNoInline(); \
	UScriptMethod_SetBodyTarget::StaticClassNoInline(); \
	UScriptMethod_SetAttackConstraint::StaticClassNoInline(); \
	UScriptMethod_SetAnimController::StaticClassNoInline(); \
	UScriptMethod_SetAimAssist::StaticClassNoInline(); \
	UScriptMethod_SetActionPointIndex::StaticClassNoInline(); \
	UScriptMethod_SetActionPointTags::StaticClassNoInline(); \
	UScriptMethod_SetAbortable::StaticClassNoInline(); \
	UScriptMethod_SelectWeapon::StaticClassNoInline(); \
	UScriptMethod_ResumeFire::StaticClassNoInline(); \
	UScriptMethod_Reload::StaticClassNoInline(); \
	UScriptMethod_Rappel::StaticClassNoInline(); \
	UScriptMethod_Prone::StaticClassNoInline(); \
	UScriptMethod_Print::StaticClassNoInline(); \
	UScriptMethod_PopUpExplicit::StaticClassNoInline(); \
	UScriptMethod_PopUp::StaticClassNoInline(); \
	UScriptMethod_PlayTransientExplicitAnim::StaticClassNoInline(); \
	UScriptMethod_PlayTransientAnim::StaticClassNoInline(); \
	UScriptMethod_PlaySound::StaticClassNoInline(); \
	UScriptMethod_PlayScript::StaticClassNoInline(); \
	UScriptMethod_PlayExplicitAnim::StaticClassNoInline(); \
	UScriptMethod_PlayAnim::StaticClassNoInline(); \
	UScriptMethod_PlayAmbientSound::StaticClassNoInline(); \
	UScriptMethod_PlaceTripMine::StaticClassNoInline(); \
	UScriptMethod_Pickup::StaticClassNoInline(); \
	UScriptMethod_Pause::StaticClassNoInline(); \
	UScriptMethod_OverrideTarget_Clear::StaticClassNoInline(); \
	UScriptMethod_OverrideTarget::StaticClassNoInline(); \
	UScriptMethod_OverrideAnim_Clear::StaticClassNoInline(); \
	UScriptMethod_OverrideAnim::StaticClassNoInline(); \
	UScriptMethod_MultiAnimPreset::StaticClassNoInline(); \
	UScriptMethod_Melee::StaticClassNoInline(); \
	UScriptMethod_Land::StaticClassNoInline(); \
	UScriptMethod_JumpToActorsPos::StaticClassNoInline(); \
	UScriptMethod_JumpAttack::StaticClassNoInline(); \
	UScriptMethod_Jump::StaticClassNoInline(); \
	UScriptMethod_IK::StaticClassNoInline(); \
	UScriptMethod_Idle::StaticClassNoInline(); \
	UScriptMethod_Hurl::StaticClassNoInline(); \
	UScriptMethod_HoldFire::StaticClassNoInline(); \
	UScriptMethod_HealthChange::StaticClassNoInline(); \
	UScriptMethod_GuardPos::StaticClassNoInline(); \
	UScriptMethod_GuardActor::StaticClassNoInline(); \
	UScriptMethod_GotoAndPlaceTripMine::StaticClassNoInline(); \
	UScriptMethod_GotoBase::StaticClassNoInline(); \
	UScriptMethod_GotoAndUseItem::StaticClassNoInline(); \
	UScriptMethod_GotoAndPickup::StaticClassNoInline(); \
	UScriptMethod_GotoAndHurl::StaticClassNoInline(); \
	UScriptMethod_GotoPos::StaticClassNoInline(); \
	UScriptMethod_GotoActorsPos::StaticClassNoInline(); \
	UScriptMethod_GotoActor::StaticClassNoInline(); \
	UScriptMethod_GotoAndVault::StaticClassNoInline(); \
	UScriptMethod_ForceFire::StaticClassNoInline(); \
	UScriptMethod_ForceActionPointTag::StaticClassNoInline(); \
	UScriptMethod_FreeMove::StaticClassNoInline(); \
	UScriptMethod_Fall::StaticClassNoInline(); \
	UScriptMethod_EndUseItem::StaticClassNoInline(); \
	UScriptMethod_EditPathingSettings::StaticClassNoInline(); \
	UScriptMethod_ExplicitAnim::StaticClassNoInline(); \
	UScriptMethod_ExitDropship::StaticClassNoInline(); \
	UScriptMethod_Destroy::StaticClassNoInline(); \
	UScriptMethod_DebugGoalSelection::StaticClassNoInline(); \
	UScriptMethod_Crouch::StaticClassNoInline(); \
	UScriptMethod_ClearGuard::StaticClassNoInline(); \
	UScriptMethod_Blink::StaticClassNoInline(); \
	UScriptMethod_Bezerk::StaticClassNoInline(); \
	UScriptMethod_BallModeStart::StaticClassNoInline(); \
	UScriptMethod_BallModeEnd::StaticClassNoInline(); \
	UScriptMethod_Anim::StaticClassNoInline(); \
	UScriptMethod_AlignWithActor::StaticClassNoInline(); \
	UScriptMethod_AbortScript::StaticClassNoInline(); \
	AScriptTrigger::StaticClassNoInline(); \
	UPopUpCfg_Vault::StaticClassNoInline(); \
	UPopUpCfg::StaticClassNoInline(); \
	UPopUpCfg_RightPipeBomb::StaticClassNoInline(); \
	UPopUpCfg_LeftPipeBomb::StaticClassNoInline(); \
	UPopUpCfg_CrouchUpPipeBomb::StaticClassNoInline(); \
	UPopUpCfg_CrouchRightPipeBomb::StaticClassNoInline(); \
	UPopUpCfg_CrouchLeftPipeBomb::StaticClassNoInline(); \
	UPopUpCfg_CrouchBackUpPipeBomb::StaticClassNoInline(); \
	UPopUpCfg_CrouchBackRightPipeBomb::StaticClassNoInline(); \
	UPopUpCfg_CrouchBackLeftPipeBomb::StaticClassNoInline(); \
	UPopUpCfg_BackRightPipeBomb::StaticClassNoInline(); \
	UPopUpCfg_BackLeftPipeBomb::StaticClassNoInline(); \
	UPointTracker::StaticClassNoInline(); \
	GNativeLookupFuncs[Lookup++] = &FinddnAIUPointTrackerNative; \
	UAITarget::StaticClassNoInline(); \
	GNativeLookupFuncs[Lookup++] = &FinddnAIUAITargetNative; \
	UAIAnimationControllerEx::StaticClassNoInline(); \
	GNativeLookupFuncs[Lookup++] = &FinddnAIUAIAnimationControllerExNative; \
	UAimer::StaticClassNoInline(); \
	UAction_Teleport::StaticClassNoInline(); \
	UAction_CircularCover::StaticClassNoInline(); \
	UAction_PopUp::StaticClassNoInline(); \
	UAITracker::StaticClassNoInline(); \
	UAIRelationshipMgr::StaticClassNoInline(); \
	GNativeLookupFuncs[Lookup++] = &FinddnAIUAIRelationshipMgrNative; \
	AAIHUD::StaticClassNoInline(); \
	ADukeClone_Base::StaticClassNoInline(); \
	AMaleCombat::StaticClassNoInline(); \
	AAIActor::StaticClassNoInline(); \
	GNativeLookupFuncs[Lookup++] = &FinddnAIAAIActorNative; \
	AAIInputDispatcher_Vehicle::StaticClassNoInline(); \
	AAIInputDispatcher_Auto::StaticClassNoInline(); \
	AAIInputDispatcher_Base::StaticClassNoInline(); \
	AdnAlienDropship_Base::StaticClassNoInline(); \
	APodGirl_Base::StaticClassNoInline(); \
	APathRover::StaticClassNoInline(); \
	GNativeLookupFuncs[Lookup++] = &FinddnAIAPathRoverNative; \
	AEggPod_Base::StaticClassNoInline(); \
	UWeaponCfg::StaticClassNoInline(); \
	AAIActorFactory::StaticClassNoInline(); \
	AAIBrainEditor::StaticClassNoInline(); \
	GNativeLookupFuncs[Lookup++] = &FinddnAIAAIBrainEditorNative; \

#endif // NATIVE_DEFS_ONLY

#ifdef NATIVES_ONLY
#if _MSC_VER
#pragma message("*** Including native classes from dnAI.")
#endif
NATIVE_INFO(UScriptPlayer) GdnAIUScriptPlayerNatives[] = 
{ 
	MAP_NATIVE(UScriptPlayer,execGoBackOne)
	MAP_NATIVE(UScriptPlayer,execGetMethodString)
	MAP_NATIVE(UScriptPlayer,execGetMethodIndex)
	MAP_NATIVE(UScriptPlayer,execGetNumMethods)
	MAP_NATIVE(UScriptPlayer,execGetScriptName)
	MAP_NATIVE(UScriptPlayer,execGetNumScripts)
	MAP_NATIVE(UScriptPlayer,execIsPlaying)
	MAP_NATIVE(UScriptPlayer,execStopScript)
	MAP_NATIVE(UScriptPlayer,execPlayScript)
	MAP_NATIVE(UScriptPlayer,execInit)
	MAP_NATIVE(UScriptPlayer,execShouldTickNoRules)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(dnAI,UScriptPlayer);

NATIVE_INFO(UScriptMethod) GdnAIUScriptMethodNatives[] = 
{ 
	MAP_NATIVE(UScriptMethod,execRegisterPrecacheComponents)
	MAP_NATIVE(UScriptMethod,execExecuteNative)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(dnAI,UScriptMethod);

NATIVE_INFO(UPointTracker) GdnAIUPointTrackerNatives[] = 
{ 
	MAP_NATIVE(UPointTracker,execUpdate)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(dnAI,UPointTracker);

NATIVE_INFO(UAITarget) GdnAIUAITargetNatives[] = 
{ 
	MAP_NATIVE(UAITarget,execGetAimFromAngle)
	MAP_NATIVE(UAITarget,execGetDir2DTo)
	MAP_NATIVE(UAITarget,execGetDirTo)
	MAP_NATIVE(UAITarget,execGetRange2D)
	MAP_NATIVE(UAITarget,execGetDist2D)
	MAP_NATIVE(UAITarget,execGetDist)
	MAP_NATIVE(UAITarget,execGetDisp2D)
	MAP_NATIVE(UAITarget,execGetDisp)
	MAP_NATIVE(UAITarget,execGetTimeVisible)
	MAP_NATIVE(UAITarget,execGetTimeSinceContact)
	MAP_NATIVE(UAITarget,execGetTimeSinceHeard)
	MAP_NATIVE(UAITarget,execGetTimeSinceSeen)
	MAP_NATIVE(UAITarget,execGetVel)
	MAP_NATIVE(UAITarget,execGetAimPos)
	MAP_NATIVE(UAITarget,execGetEyePos)
	MAP_NATIVE(UAITarget,execGetRotn)
	MAP_NATIVE(UAITarget,execGetBodyPos)
	MAP_NATIVE(UAITarget,execGetPos)
	MAP_NATIVE(UAITarget,execGetActor)
	MAP_NATIVE(UAITarget,execIsAllowedToClear)
	MAP_NATIVE(UAITarget,execIsAnActor)
	MAP_NATIVE(UAITarget,execIsValidTarget)
	MAP_NATIVE(UAITarget,execForceContactUpdate)
	MAP_NATIVE(UAITarget,execClearTarget)
	MAP_NATIVE(UAITarget,execHeardSound)
	MAP_NATIVE(UAITarget,execSetVisibilityInterval)
	MAP_NATIVE(UAITarget,execSetClearTime)
	MAP_NATIVE(UAITarget,execSetTargetPos)
	MAP_NATIVE(UAITarget,execSetTargetActor)
	MAP_NATIVE(UAITarget,execTickNative)
	MAP_NATIVE(UAITarget,execInitialise)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(dnAI,UAITarget);

NATIVE_INFO(UAIAnimationControllerEx) GdnAIUAIAnimationControllerExNatives[] = 
{ 
	MAP_NATIVE(UAIAnimationControllerEx,execSetAnimState)
	MAP_NATIVE(UAIAnimationControllerEx,execSetAnimState_RateScaled)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(dnAI,UAIAnimationControllerEx);

NATIVE_INFO(UAIRelationshipMgr) GdnAIUAIRelationshipMgrNatives[] = 
{ 
	MAP_NATIVE(UAIRelationshipMgr,execGetAttitudeTowards)
	MAP_NATIVE(UAIRelationshipMgr,execAddClassRelation)
	MAP_NATIVE(UAIRelationshipMgr,execAttitudeForWeight)
	MAP_NATIVE(UAIRelationshipMgr,execWeightForAttitude)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(dnAI,UAIRelationshipMgr);

NATIVE_INFO(AAIActor) GdnAIAAIActorNatives[] = 
{ 
	MAP_NATIVE(AAIActor,execSetWeaponManagerMode)
	MAP_NATIVE(AAIActor,execInitialiseWeaponManager)
	MAP_NATIVE(AAIActor,execWeaponIsActive)
	MAP_NATIVE(AAIActor,execSetCurrentWeapon)
	MAP_NATIVE(AAIActor,execAddWeapon)
	MAP_NATIVE(AAIActor,execInitialiseWeapons)
	MAP_NATIVE(AAIActor,execIsDoingSyncedAnim)
	MAP_NATIVE(AAIActor,execEndOp)
	MAP_NATIVE(AAIActor,execNotifyOpExitState)
	MAP_NATIVE(AAIActor,execExecuteOp)
	MAP_NATIVE(AAIActor,execCanUseOp)
	MAP_NATIVE(AAIActor,execPhysicsEndOfFrame_Generic)
	MAP_NATIVE(AAIActor,execCalculatePhysics_OnGround)
	MAP_NATIVE(AAIActor,execHasTripMineAttached)
	MAP_NATIVE(AAIActor,execShouldProceduralAim)
	MAP_NATIVE(AAIActor,execPassDamageType)
	MAP_NATIVE(AAIActor,execIsInProcFireOp)
	MAP_NATIVE(AAIActor,execIsInProcFireState)
	MAP_NATIVE(AAIActor,execRegisterAIAnimationControllerEntry)
	MAP_NATIVE(AAIActor,execClearGlobalPathingCache)
	MAP_NATIVE(AAIActor,execAIShouldTick)
	MAP_NATIVE(AAIActor,execShowDebugInfoBubbles)
	MAP_NATIVE(AAIActor,execIsFalling)
	MAP_NATIVE(AAIActor,execIsFlying)
	MAP_NATIVE(AAIActor,execIsInAir)
	MAP_NATIVE(AAIActor,execSortHealthTriggers)
	MAP_NATIVE(AAIActor,execGetRealNAVID)
	MAP_NATIVE(AAIActor,execPointIsInWorld)
	MAP_NATIVE(AAIActor,execNotifyDied)
	MAP_NATIVE(AAIActor,execAddTrailMarker)
	MAP_NATIVE(AAIActor,execGetMaxHeightError)
	MAP_NATIVE(AAIActor,execGetMaxRangeError)
	MAP_NATIVE(AAIActor,execTargetInHorizRangeLimits)
	MAP_NATIVE(AAIActor,execFacingTarget)
	MAP_NATIVE(AAIActor,execTargetContact)
	MAP_NATIVE(AAIActor,execForcePosIntoPath)
	MAP_NATIVE(AAIActor,execPortalDoorIsClosed)
	MAP_NATIVE(AAIActor,execFindClosestLedge)
	MAP_NATIVE(AAIActor,execVectorInLimits)
	MAP_NATIVE(AAIActor,execFloatInLimits)
	MAP_NATIVE(AAIActor,execCanSeePosFrom)
	MAP_NATIVE(AAIActor,execClearShot)
	MAP_NATIVE(AAIActor,execCanSeeActor)
	MAP_NATIVE(AAIActor,execCanReloadWeapon)
	MAP_NATIVE(AAIActor,execCalcMapRange)
	MAP_NATIVE(AAIActor,execCalcProjectileVelocity)
	MAP_NATIVE(AAIActor,execCalcPipeBombVelocity)
	MAP_NATIVE(AAIActor,execCalcJumpAttackVelocity)
	MAP_NATIVE(AAIActor,execCalcJumpVelocity)
	MAP_NATIVE(AAIActor,execValidateTargetPos)
	MAP_NATIVE(AAIActor,execCalcHorizRangeToActor)
	MAP_NATIVE(AAIActor,execCalcRangeForDist)
	MAP_NATIVE(AAIActor,execCalcDistForRange)
	MAP_NATIVE(AAIActor,execCalcDirToTargetRelOffsetPos3D)
	MAP_NATIVE(AAIActor,execCalcDirToTargetRelOffsetPos2D)
	MAP_NATIVE(AAIActor,execCalcTargetRelOffsetPos3D)
	MAP_NATIVE(AAIActor,execCalcTargetRelOffsetPos2D)
	MAP_NATIVE(AAIActor,execCalcTargetOffsetPos3D)
	MAP_NATIVE(AAIActor,execCalcTargetOffsetPos2D)
	MAP_NATIVE(AAIActor,execCalcRelOffsetPos)
	MAP_NATIVE(AAIActor,execCalcRndPos)
	MAP_NATIVE(AAIActor,execCalcRelativeSector)
	MAP_NATIVE(AAIActor,execCalcSector)
	MAP_NATIVE(AAIActor,execCalcJumpRange)
	MAP_NATIVE(AAIActor,execCalcNumWeaponStrafeCycles)
	MAP_NATIVE(AAIActor,execCalcNumMeleeStrafeCylces)
	MAP_NATIVE(AAIActor,execCalcMeleeStrafeRange)
	MAP_NATIVE(AAIActor,execCalcMeleeRange)
	MAP_NATIVE(AAIActor,execCalcWeaponRange)
	MAP_NATIVE(AAIActor,execCalcPerpSpeed)
	MAP_NATIVE(AAIActor,execCanTurnToPos)
	MAP_NATIVE(AAIActor,execCanTurnToActor)
	MAP_NATIVE(AAIActor,execCanGotoPos)
	MAP_NATIVE(AAIActor,execCanGotoPos2D)
	MAP_NATIVE(AAIActor,execCanGotoActorOffset)
	MAP_NATIVE(AAIActor,execCanGotoActor2D)
	MAP_NATIVE(AAIActor,execPosInAcceptableProx)
	MAP_NATIVE(AAIActor,execPosInProx)
	MAP_NATIVE(AAIActor,execPosInAcceptableHorizProx)
	MAP_NATIVE(AAIActor,execPosInHorizProx)
	MAP_NATIVE(AAIActor,execAtActorOffset)
	MAP_NATIVE(AAIActor,execActorInRange)
	MAP_NATIVE(AAIActor,execActorInHorizRangeLimits)
	MAP_NATIVE(AAIActor,execActorInHorizRange)
	MAP_NATIVE(AAIActor,execPosInAngularThreshold)
	MAP_NATIVE(AAIActor,execFacingPos)
	MAP_NATIVE(AAIActor,execFacingActor)
	MAP_NATIVE(AAIActor,execCheckCondition)
	MAP_NATIVE(AAIActor,execGetTargetActor)
	MAP_NATIVE(AAIActor,execGetTarget)
	MAP_NATIVE(AAIActor,execGetUnusedTargetActorSlot)
	MAP_NATIVE(AAIActor,execSetTargetActorSlot)
	MAP_NATIVE(AAIActor,execTargetActor)
	MAP_NATIVE(AAIActor,execFreeTargetActorSlot)
	MAP_NATIVE(AAIActor,execClearTarget)
	MAP_NATIVE(AAIActor,execSetTarget)
	MAP_NATIVE(AAIActor,execGetLatentAction)
	MAP_NATIVE(AAIActor,execEnableMovement)
	MAP_NATIVE(AAIActor,execMoveToEx)
	MAP_NATIVE(AAIActor,execIsFacing)
	MAP_NATIVE(AAIActor,execIsFacingInYaw)
	MAP_NATIVE(AAIActor,execNative_PostSpawn)
	MAP_NATIVE(AAIActor,execNative_PostLoadMap)
	MAP_NATIVE(AAIActor,execNative_PostBeginPlay)
	MAP_NATIVE(AAIActor,execNative_PreBeginPlay)
	MAP_NATIVE(AAIActor,execNative_PreGameInit)
	MAP_NATIVE(AAIActor,execCalcAimToMeAngle)
	MAP_NATIVE(AAIActor,execCalcTargetsAimAngle)
	MAP_NATIVE(AAIActor,execSetGotoPresets)
	MAP_NATIVE(AAIActor,execSetGoal)
	MAP_NATIVE(AAIActor,execForceLookTargetEval)
	MAP_NATIVE(AAIActor,execSuspendLookTargetEvaluation)
	MAP_NATIVE(AAIActor,execPotentialLookTargetSound)
	MAP_NATIVE(AAIActor,execSuspendWeaponTargetEvaluation)
	MAP_NATIVE(AAIActor,execPotentialWeaponTargetSound)
	MAP_NATIVE(AAIActor,execHeardSound)
	MAP_NATIVE(AAIActor,execAbortScript_Shrunk)
	MAP_NATIVE(AAIActor,execAbortScript_Triggered)
	MAP_NATIVE(AAIActor,execAbortScript_Bumped)
	MAP_NATIVE(AAIActor,execAbortScript_Damaged)
	MAP_NATIVE(AAIActor,execAbortScript_HearSound)
	MAP_NATIVE(AAIActor,execAbortScript_SeeActor)
	MAP_NATIVE(AAIActor,execAbortScripts)
	MAP_NATIVE(AAIActor,execStopScript)
	MAP_NATIVE(AAIActor,execPlayScript)
	MAP_NATIVE(AAIActor,execPrintExecutive)
	MAP_NATIVE(AAIActor,execForceExecutive)
	MAP_NATIVE(AAIActor,execExecuteExecutive)
	MAP_NATIVE(AAIActor,execIsExecutiveSuspended)
	MAP_NATIVE(AAIActor,execSuspendExecutive)
	MAP_NATIVE(AAIActor,execInitialiseExecutive)
	MAP_NATIVE(AAIActor,execGetExecutive)
	MAP_NATIVE(AAIActor,execSetExecutive)
	MAP_NATIVE(AAIActor,execSetNewActionPoint)
	MAP_NATIVE(AAIActor,execHasUseableActionPoint)
	MAP_NATIVE(AAIActor,execReleaseActionPoint)
	MAP_NATIVE(AAIActor,execUseActionPoint)
	MAP_NATIVE(AAIActor,execActionPointCompromised)
	MAP_NATIVE(AAIActor,execGetActionPointAction)
	MAP_NATIVE(AAIActor,execCanUseActionPoint)
	MAP_NATIVE(AAIActor,execCanUseNewActionPoint)
	MAP_NATIVE(AAIActor,execAtActionPoint)
	MAP_NATIVE(AAIActor,execLockActionPoint)
	MAP_NATIVE(AAIActor,execSetActionPointIndex)
	MAP_NATIVE(AAIActor,execPopUpCompromised)
	MAP_NATIVE(AAIActor,execSetPopUp)
	MAP_NATIVE(AAIActor,execClearGuard)
	MAP_NATIVE(AAIActor,execSetAbortGuardThresh)
	MAP_NATIVE(AAIActor,execGuardPos)
	MAP_NATIVE(AAIActor,execGuardActor)
	MAP_NATIVE(AAIActor,execIsGuardingPos)
	MAP_NATIVE(AAIActor,execIsGuardingActor)
	MAP_NATIVE(AAIActor,execIsGuardingPlayer)
	MAP_NATIVE(AAIActor,execIsGuarding)
	MAP_NATIVE(AAIActor,execCanGuard)
	MAP_NATIVE(AAIActor,execHeadAimerGetTargetString)
	MAP_NATIVE(AAIActor,execHeadAimerGetNumTargets)
	MAP_NATIVE(AAIActor,execGetHeadAimerState)
	MAP_NATIVE(AAIActor,execIsHeadAimerOn)
	MAP_NATIVE(AAIActor,execHeadAimerRemoveSpecificTarget)
	MAP_NATIVE(AAIActor,execHeadAimerRemoveTarget)
	MAP_NATIVE(AAIActor,execHeadAimerAddTargetAITarget)
	MAP_NATIVE(AAIActor,execHeadAimerAddTargetPos)
	MAP_NATIVE(AAIActor,execHeadAimerAddTargetActor)
	MAP_NATIVE(AAIActor,execWeaponAimerGetTargetString)
	MAP_NATIVE(AAIActor,execWeaponAimerGetNumTargets)
	MAP_NATIVE(AAIActor,execGetWeaponAimerState)
	MAP_NATIVE(AAIActor,execIsWeaponAimerOn)
	MAP_NATIVE(AAIActor,execWeaponAimerRemoveSpecificTarget)
	MAP_NATIVE(AAIActor,execWeaponAimerRemoveTarget)
	MAP_NATIVE(AAIActor,execWeaponAimerAddTargetAITarget)
	MAP_NATIVE(AAIActor,execWeaponAimerAddTargetPos)
	MAP_NATIVE(AAIActor,execWeaponAimerAddTargetActor)
	MAP_NATIVE(AAIActor,execEndMyLog)
	MAP_NATIVE(AAIActor,execBeginMyLog)
	MAP_NATIVE(AAIActor,execLogMyLog)
	MAP_NATIVE(AAIActor,execClearDangerPos)
	MAP_NATIVE(AAIActor,execSetDangerPos)
	MAP_NATIVE(AAIActor,execIsCloaked)
	MAP_NATIVE(AAIActor,execGetCloaking)
	MAP_NATIVE(AAIActor,execActivateCloaking)
	MAP_NATIVE(AAIActor,execSetJumpPresets)
	MAP_NATIVE(AAIActor,execSetTurnToPresets)
	MAP_NATIVE(AAIActor,execSetAnimPresets)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(dnAI,AAIActor);

NATIVE_INFO(APathRover) GdnAIAPathRoverNatives[] = 
{ 
	MAP_NATIVE(APathRover,execCanPathToPos)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(dnAI,APathRover);

NATIVE_INFO(AAIBrainEditor) GdnAIAAIBrainEditorNatives[] = 
{ 
	MAP_NATIVE(AAIBrainEditor,execExecuteOp)
	MAP_NATIVE(AAIBrainEditor,execExportFSMToText)
	MAP_NATIVE(AAIBrainEditor,execNative_BeginFSMTest)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(dnAI,AAIBrainEditor);

#endif // NATIVES_ONLY
#if _MSC_VER
#pragma warning(default:4121)
#endif

#ifdef VERIFY_CLASS_SIZES
#pragma message("*** Verifying class sizes for dnAI.")
VERIFY_CLASS_SIZE_NODIE(UTargetEvaluator)
VERIFY_CLASS_OFFSET_NODIE(UScriptPlayer,ScriptPlayer,MyOwner)
VERIFY_CLASS_OFFSET_NODIE(UScriptPlayer,ScriptPlayer,ScriptStack)
VERIFY_CLASS_OFFSET_NODIE(UScriptPlayer,ScriptPlayer,ExecutingCount)
VERIFY_CLASS_SIZE_NODIE(UScriptPlayer)
VERIFY_CLASS_OFFSET_NODIE(UScriptObj,ScriptObj,ScriptName)
VERIFY_CLASS_OFFSET_NODIE(UScriptObj,ScriptObj,Methods)
VERIFY_CLASS_OFFSET_NODIE(UScriptObj,ScriptObj,User)
VERIFY_CLASS_SIZE_NODIE(UScriptObj)
VERIFY_CLASS_SIZE_NODIE(UScriptMethod_DigsGirl_FinishFlirt_NativeBase)
VERIFY_CLASS_SIZE_NODIE(UScriptMethod)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_X_TEST_Op,ScriptMethod_X_TEST_Op,Op)
VERIFY_CLASS_SIZE_NODIE(UScriptMethod_X_TEST_Op)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_OverrideExecution,ScriptMethod_OverrideExecution,m_fDeathAnimChance)
VERIFY_CLASS_SIZE_NODIE(UScriptMethod_OverrideExecution)
VERIFY_CLASS_SIZE_NODIE(UScriptMethod_DropProp)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_AnimFadeChannelBlock,ScriptMethod_AnimFadeChannelBlock,ChannelBlockName)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_AnimFadeChannelBlock,ScriptMethod_AnimFadeChannelBlock,TargetAlpha)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_AnimFadeChannelBlock,ScriptMethod_AnimFadeChannelBlock,FadeTime)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_AnimFadeChannelBlock,ScriptMethod_AnimFadeChannelBlock,Anim)
VERIFY_CLASS_SIZE_NODIE(UScriptMethod_AnimFadeChannelBlock)
VERIFY_CLASS_SIZE_NODIE(UScriptMethod_BoneAimer)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_UseItem,ScriptMethod_UseItem,TargetItemTag)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_UseItem,ScriptMethod_UseItem,InputDispatcherTag)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_UseItem,ScriptMethod_UseItem,AttachedEvent)
VERIFY_CLASS_SIZE_NODIE(UScriptMethod_UseItem)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_TurnToPos,ScriptMethod_TurnToPos,TargetPos)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_TurnToPos,ScriptMethod_TurnToPos,ShouldTurnThreshold)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_TurnToPos,ScriptMethod_TurnToPos,FaceThreshold)
VERIFY_CLASS_SIZE_NODIE(UScriptMethod_TurnToPos)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_TurnToActor,ScriptMethod_TurnToActor,TargetActorTag)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_TurnToActor,ScriptMethod_TurnToActor,ShouldTurnThreshold)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_TurnToActor,ScriptMethod_TurnToActor,FaceThreshold)
VERIFY_CLASS_SIZE_NODIE(UScriptMethod_TurnToActor)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_Trigger,ScriptMethod_Trigger,TargetTag)
VERIFY_CLASS_SIZE_NODIE(UScriptMethod_Trigger)
VERIFY_CLASS_SIZE_NODIE(UScriptMethod_TKThrow)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_TKCatch,ScriptMethod_TKCatch,TargetActorTag)
VERIFY_CLASS_SIZE_NODIE(UScriptMethod_TKCatch)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_ThrowPipeBomb,ScriptMethod_ThrowPipeBomb,TargetActorTag)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_ThrowPipeBomb,ScriptMethod_ThrowPipeBomb,TargetPosition)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_ThrowPipeBomb,ScriptMethod_ThrowPipeBomb,MaxHeight)
VERIFY_CLASS_SIZE_NODIE(UScriptMethod_ThrowPipeBomb)
VERIFY_CLASS_SIZE_NODIE(UScriptMethod_Throw)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_TeleportToPos,ScriptMethod_TeleportToPos,TargetPos)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_TeleportToPos,ScriptMethod_TeleportToPos,Rotn)
VERIFY_CLASS_SIZE_NODIE(UScriptMethod_TeleportToPos)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_TeleportToActor,ScriptMethod_TeleportToActor,TargetActorTag)
VERIFY_CLASS_SIZE_NODIE(UScriptMethod_TeleportToActor)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_TakeOff,ScriptMethod_TakeOff,TakeOffVelocity)
VERIFY_CLASS_SIZE_NODIE(UScriptMethod_TakeOff)
VERIFY_CLASS_SIZE_NODIE(UScriptMethod_SuspendWeaponTargetEval)
VERIFY_CLASS_SIZE_NODIE(UScriptMethod_SuspendLookTargetEval)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_Stomp,ScriptMethod_Stomp,ForcedStompIndex)
VERIFY_CLASS_SIZE_NODIE(UScriptMethod_Stomp)
VERIFY_CLASS_SIZE_NODIE(UScriptMethod_StandPassive)
VERIFY_CLASS_SIZE_NODIE(UScriptMethod_StandScared)
VERIFY_CLASS_SIZE_NODIE(UScriptMethod_StandCombat)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_Speak,ScriptMethod_Speak,CharPackSoundName)
VERIFY_CLASS_SIZE_NODIE(UScriptMethod_Speak)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_SpawnAttachment,ScriptMethod_SpawnAttachment,AttachmentClassName)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_SpawnAttachment,ScriptMethod_SpawnAttachment,AttachmentPrefab)
VERIFY_CLASS_SIZE_NODIE(UScriptMethod_SpawnAttachment)
VERIFY_CLASS_SIZE_NODIE(UScriptMethod_ShootProjectile)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_SetUsedScriptTag,ScriptMethod_SetUsedScriptTag,NewUsedScriptTag)
VERIFY_CLASS_SIZE_NODIE(UScriptMethod_SetUsedScriptTag)
VERIFY_CLASS_SIZE_NODIE(UScriptMethod_SetShouldCauseKillSound)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_SetScriptTag,ScriptMethod_SetScriptTag,NewScriptTag)
VERIFY_CLASS_SIZE_NODIE(UScriptMethod_SetScriptTag)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_SetRelations,ScriptMethod_SetRelations,NewRelations)
VERIFY_CLASS_SIZE_NODIE(UScriptMethod_SetRelations)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_SetTarget,ScriptMethod_SetTarget,TargetActorTag)
VERIFY_CLASS_SIZE_NODIE(UScriptMethod_SetTarget)
VERIFY_CLASS_SIZE_NODIE(UScriptMethod_SetSoundState)
VERIFY_CLASS_SIZE_NODIE(UScriptMethod_SetPerformLipsync)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_SetLookTarget,ScriptMethod_SetLookTarget,TargetActorTag)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_SetLookTarget,ScriptMethod_SetLookTarget,TargetBoneName)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_SetLookTarget,ScriptMethod_SetLookTarget,TargetStackOp)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_SetLookTarget,ScriptMethod_SetLookTarget,TargetLifeTime)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_SetLookTarget,ScriptMethod_SetLookTarget,BlendTime)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_SetLookTarget,ScriptMethod_SetLookTarget,AngularThresh)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_SetLookTarget,ScriptMethod_SetLookTarget,EyeTrackRate)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_SetLookTarget,ScriptMethod_SetLookTarget,HeadTrackRate)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_SetLookTarget,ScriptMethod_SetLookTarget,TargetIDString)
VERIFY_CLASS_SIZE_NODIE(UScriptMethod_SetLookTarget)
VERIFY_CLASS_SIZE_NODIE(UScriptMethod_SetJetPackWobble)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_SetHeadTarget,ScriptMethod_SetHeadTarget,TargetActorTag)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_SetHeadTarget,ScriptMethod_SetHeadTarget,TargetBoneName)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_SetHeadTarget,ScriptMethod_SetHeadTarget,TargetStackOp)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_SetHeadTarget,ScriptMethod_SetHeadTarget,TargetLifeTime)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_SetHeadTarget,ScriptMethod_SetHeadTarget,BlendTime)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_SetHeadTarget,ScriptMethod_SetHeadTarget,AngularThresh)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_SetHeadTarget,ScriptMethod_SetHeadTarget,TrackRate)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_SetHeadTarget,ScriptMethod_SetHeadTarget,TargetIDString)
VERIFY_CLASS_SIZE_NODIE(UScriptMethod_SetHeadTarget)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_SetFactoryActionPointTags,ScriptMethod_SetFactoryActionPointTags,NewIndex)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_SetFactoryActionPointTags,ScriptMethod_SetFactoryActionPointTags,NewDesiredIndex)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_SetFactoryActionPointTags,ScriptMethod_SetFactoryActionPointTags,NewActionPointTags)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_SetFactoryActionPointTags,ScriptMethod_SetFactoryActionPointTags,FactoryTag)
VERIFY_CLASS_SIZE_NODIE(UScriptMethod_SetFactoryActionPointTags)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_SetFactoryActionPointIndex,ScriptMethod_SetFactoryActionPointIndex,NewIndex)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_SetFactoryActionPointIndex,ScriptMethod_SetFactoryActionPointIndex,NewDesiredIndex)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_SetFactoryActionPointIndex,ScriptMethod_SetFactoryActionPointIndex,FactoryTag)
VERIFY_CLASS_SIZE_NODIE(UScriptMethod_SetFactoryActionPointIndex)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_SetFaction,ScriptMethod_SetFaction,NewFaction)
VERIFY_CLASS_SIZE_NODIE(UScriptMethod_SetFaction)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_SetEyeTarget,ScriptMethod_SetEyeTarget,TargetActorTag)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_SetEyeTarget,ScriptMethod_SetEyeTarget,TargetBoneName)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_SetEyeTarget,ScriptMethod_SetEyeTarget,TargetStackOp)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_SetEyeTarget,ScriptMethod_SetEyeTarget,TargetLifeTime)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_SetEyeTarget,ScriptMethod_SetEyeTarget,BlendTime)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_SetEyeTarget,ScriptMethod_SetEyeTarget,AngularThresh)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_SetEyeTarget,ScriptMethod_SetEyeTarget,TrackRate)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_SetEyeTarget,ScriptMethod_SetEyeTarget,TargetIDString)
VERIFY_CLASS_SIZE_NODIE(UScriptMethod_SetEyeTarget)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_SetEvent,ScriptMethod_SetEvent,NewEvent)
VERIFY_CLASS_SIZE_NODIE(UScriptMethod_SetEvent)
VERIFY_CLASS_SIZE_NODIE(UScriptMethod_SetEnemyMustBeSighted)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_SetDeathAnim,ScriptMethod_SetDeathAnim,SequenceName)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_SetDeathAnim,ScriptMethod_SetDeathAnim,Chance)
VERIFY_CLASS_SIZE_NODIE(UScriptMethod_SetDeathAnim)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_SetDamageReactions,ScriptMethod_SetDamageReactions,Invulnerable)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_SetDamageReactions,ScriptMethod_SetDamageReactions,ShowPain)
VERIFY_CLASS_SIZE_NODIE(UScriptMethod_SetDamageReactions)
VERIFY_CLASS_SIZE_NODIE(UScriptMethod_SetCurrentOpMustFinish)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_SetCollision,ScriptMethod_SetCollision,CollideWorld)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_SetCollision,ScriptMethod_SetCollision,CollideActors)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_SetCollision,ScriptMethod_SetCollision,BlockActors)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_SetCollision,ScriptMethod_SetCollision,BlockPlayers)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_SetCollision,ScriptMethod_SetCollision,BlockKarma)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_SetCollision,ScriptMethod_SetCollision,AssumeValid)
VERIFY_CLASS_SIZE_NODIE(UScriptMethod_SetCollision)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_SetBodyTarget,ScriptMethod_SetBodyTarget,TargetActorTag)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_SetBodyTarget,ScriptMethod_SetBodyTarget,TargetStackOp)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_SetBodyTarget,ScriptMethod_SetBodyTarget,TargetLifeTime)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_SetBodyTarget,ScriptMethod_SetBodyTarget,BlendTime)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_SetBodyTarget,ScriptMethod_SetBodyTarget,AngularThresh)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_SetBodyTarget,ScriptMethod_SetBodyTarget,TrackRate)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_SetBodyTarget,ScriptMethod_SetBodyTarget,TargetIDString)
VERIFY_CLASS_SIZE_NODIE(UScriptMethod_SetBodyTarget)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_SetAttackConstraint,ScriptMethod_SetAttackConstraint,AttackConstraint)
VERIFY_CLASS_SIZE_NODIE(UScriptMethod_SetAttackConstraint)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_SetAnimController,ScriptMethod_SetAnimController,NewController)
VERIFY_CLASS_SIZE_NODIE(UScriptMethod_SetAnimController)
VERIFY_CLASS_SIZE_NODIE(UScriptMethod_SetAimAssist)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_SetActionPointIndex,ScriptMethod_SetActionPointIndex,NewIndex)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_SetActionPointIndex,ScriptMethod_SetActionPointIndex,NewDesiredIndex)
VERIFY_CLASS_SIZE_NODIE(UScriptMethod_SetActionPointIndex)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_SetActionPointTags,ScriptMethod_SetActionPointTags,NewIndex)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_SetActionPointTags,ScriptMethod_SetActionPointTags,NewDesiredIndex)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_SetActionPointTags,ScriptMethod_SetActionPointTags,NewActionPointTags)
VERIFY_CLASS_SIZE_NODIE(UScriptMethod_SetActionPointTags)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_SetAbortable,ScriptMethod_SetAbortable,MotiveSeeActor)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_SetAbortable,ScriptMethod_SetAbortable,MotiveHearSound)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_SetAbortable,ScriptMethod_SetAbortable,MotiveDamaged)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_SetAbortable,ScriptMethod_SetAbortable,MotiveBumped)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_SetAbortable,ScriptMethod_SetAbortable,MotiveTriggered)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_SetAbortable,ScriptMethod_SetAbortable,MotiveShrunk)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_SetAbortable,ScriptMethod_SetAbortable,EgoChange)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_SetAbortable,ScriptMethod_SetAbortable,AbortActorTag)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_SetAbortable,ScriptMethod_SetAbortable,AbortEvent)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_SetAbortable,ScriptMethod_SetAbortable,ChangedScriptTag)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_SetAbortable,ScriptMethod_SetAbortable,AbortEventStuck)
VERIFY_CLASS_SIZE_NODIE(UScriptMethod_SetAbortable)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_SelectWeapon,ScriptMethod_SelectWeapon,NewWeapon)
VERIFY_CLASS_SIZE_NODIE(UScriptMethod_SelectWeapon)
VERIFY_CLASS_SIZE_NODIE(UScriptMethod_ResumeFire)
VERIFY_CLASS_SIZE_NODIE(UScriptMethod_Reload)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_Rappel,ScriptMethod_Rappel,AttachActorTag)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_Rappel,ScriptMethod_Rappel,AttachActorBone)
VERIFY_CLASS_SIZE_NODIE(UScriptMethod_Rappel)
VERIFY_CLASS_SIZE_NODIE(UScriptMethod_Prone)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_Print,ScriptMethod_Print,TextOut)
VERIFY_CLASS_SIZE_NODIE(UScriptMethod_Print)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_PopUpExplicit,ScriptMethod_PopUpExplicit,Popups)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_PopUpExplicit,ScriptMethod_PopUpExplicit,PopUpCfgBase)
VERIFY_CLASS_SIZE_NODIE(UScriptMethod_PopUpExplicit)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_PopUp,ScriptMethod_PopUp,PopupType)
VERIFY_CLASS_SIZE_NODIE(UScriptMethod_PopUp)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_PlayTransientExplicitAnim,ScriptMethod_PlayTransientExplicitAnim,SequenceName)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_PlayTransientExplicitAnim,ScriptMethod_PlayTransientExplicitAnim,ChannelName)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_PlayTransientExplicitAnim,ScriptMethod_PlayTransientExplicitAnim,Rate)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_PlayTransientExplicitAnim,ScriptMethod_PlayTransientExplicitAnim,Tween)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_PlayTransientExplicitAnim,ScriptMethod_PlayTransientExplicitAnim,StartFrame)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_PlayTransientExplicitAnim,ScriptMethod_PlayTransientExplicitAnim,AnimEarlyEndTime)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_PlayTransientExplicitAnim,ScriptMethod_PlayTransientExplicitAnim,BlendInTime)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_PlayTransientExplicitAnim,ScriptMethod_PlayTransientExplicitAnim,BlendOutTime)
VERIFY_CLASS_SIZE_NODIE(UScriptMethod_PlayTransientExplicitAnim)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_PlayTransientAnim,ScriptMethod_PlayTransientAnim,AnimName)
VERIFY_CLASS_SIZE_NODIE(UScriptMethod_PlayTransientAnim)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_PlaySound,ScriptMethod_PlaySound,MySound)
VERIFY_CLASS_SIZE_NODIE(UScriptMethod_PlaySound)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_PlayScript,ScriptMethod_PlayScript,TargetActorTag)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_PlayScript,ScriptMethod_PlayScript,Script)
VERIFY_CLASS_SIZE_NODIE(UScriptMethod_PlayScript)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_PlayExplicitAnim,ScriptMethod_PlayExplicitAnim,AnimType)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_PlayExplicitAnim,ScriptMethod_PlayExplicitAnim,SequenceName)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_PlayExplicitAnim,ScriptMethod_PlayExplicitAnim,ChannelName)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_PlayExplicitAnim,ScriptMethod_PlayExplicitAnim,Rate)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_PlayExplicitAnim,ScriptMethod_PlayExplicitAnim,Tween)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_PlayExplicitAnim,ScriptMethod_PlayExplicitAnim,StartFrame)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_PlayExplicitAnim,ScriptMethod_PlayExplicitAnim,AnimEarlyEndTime)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_PlayExplicitAnim,ScriptMethod_PlayExplicitAnim,BlendInTime)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_PlayExplicitAnim,ScriptMethod_PlayExplicitAnim,BlendOutTime)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_PlayExplicitAnim,ScriptMethod_PlayExplicitAnim,ExitTime)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_PlayExplicitAnim,ScriptMethod_PlayExplicitAnim,FaceActorTag)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_PlayExplicitAnim,ScriptMethod_PlayExplicitAnim,FacePos)
VERIFY_CLASS_SIZE_NODIE(UScriptMethod_PlayExplicitAnim)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_PlayAnim,ScriptMethod_PlayAnim,AnimType)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_PlayAnim,ScriptMethod_PlayAnim,AnimName)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_PlayAnim,ScriptMethod_PlayAnim,ExitTime)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_PlayAnim,ScriptMethod_PlayAnim,FaceActorTag)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_PlayAnim,ScriptMethod_PlayAnim,FacePos)
VERIFY_CLASS_SIZE_NODIE(UScriptMethod_PlayAnim)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_PlayAmbientSound,ScriptMethod_PlayAmbientSound,MySoundInfo)
VERIFY_CLASS_SIZE_NODIE(UScriptMethod_PlayAmbientSound)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_PlaceTripMine,ScriptMethod_PlaceTripMine,TargetActorTag)
VERIFY_CLASS_SIZE_NODIE(UScriptMethod_PlaceTripMine)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_Pickup,ScriptMethod_Pickup,TargetActorTag)
VERIFY_CLASS_SIZE_NODIE(UScriptMethod_Pickup)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_Pause,ScriptMethod_Pause,MinPauseTime)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_Pause,ScriptMethod_Pause,RndPauseTime)
VERIFY_CLASS_SIZE_NODIE(UScriptMethod_Pause)
VERIFY_CLASS_SIZE_NODIE(UScriptMethod_OverrideTarget_Clear)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_OverrideTarget,ScriptMethod_OverrideTarget,TargetActorTag)
VERIFY_CLASS_SIZE_NODIE(UScriptMethod_OverrideTarget)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_OverrideAnim_Clear,ScriptMethod_OverrideAnim_Clear,AnimName)
VERIFY_CLASS_SIZE_NODIE(UScriptMethod_OverrideAnim_Clear)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_OverrideAnim,ScriptMethod_OverrideAnim,AnimName)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_OverrideAnim,ScriptMethod_OverrideAnim,SequenceName)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_OverrideAnim,ScriptMethod_OverrideAnim,ChannelName)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_OverrideAnim,ScriptMethod_OverrideAnim,Rate)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_OverrideAnim,ScriptMethod_OverrideAnim,Tween)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_OverrideAnim,ScriptMethod_OverrideAnim,StartFrame)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_OverrideAnim,ScriptMethod_OverrideAnim,AnimEarlyEndTime)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_OverrideAnim,ScriptMethod_OverrideAnim,BlendInTime)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_OverrideAnim,ScriptMethod_OverrideAnim,BlendOutTime)
VERIFY_CLASS_SIZE_NODIE(UScriptMethod_OverrideAnim)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_MultiAnimPreset,ScriptMethod_MultiAnimPreset,ForcedMultiAnimIndex)
VERIFY_CLASS_SIZE_NODIE(UScriptMethod_MultiAnimPreset)
VERIFY_CLASS_SIZE_NODIE(UScriptMethod_Melee)
VERIFY_CLASS_SIZE_NODIE(UScriptMethod_Land)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_JumpToActorsPos,ScriptMethod_JumpToActorsPos,TargetActorTag)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_JumpToActorsPos,ScriptMethod_JumpToActorsPos,MaxHeight)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_JumpToActorsPos,ScriptMethod_JumpToActorsPos,HeavyLandingThresh)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_JumpToActorsPos,ScriptMethod_JumpToActorsPos,NonDefaultGravityScale)
VERIFY_CLASS_SIZE_NODIE(UScriptMethod_JumpToActorsPos)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_JumpAttack,ScriptMethod_JumpAttack,JumpVelocityPreset)
VERIFY_CLASS_SIZE_NODIE(UScriptMethod_JumpAttack)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_Jump,ScriptMethod_Jump,JumpVel)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_Jump,ScriptMethod_Jump,HeavyLandingThresh)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_Jump,ScriptMethod_Jump,NonDefaultGravityScale)
VERIFY_CLASS_SIZE_NODIE(UScriptMethod_Jump)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_IK,ScriptMethod_IK,IKSystem)
VERIFY_CLASS_SIZE_NODIE(UScriptMethod_IK)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_Idle,ScriptMethod_Idle,MinIdleTime)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_Idle,ScriptMethod_Idle,RndIdleTime)
VERIFY_CLASS_SIZE_NODIE(UScriptMethod_Idle)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_Hurl,ScriptMethod_Hurl,TargetActorTag)
VERIFY_CLASS_SIZE_NODIE(UScriptMethod_Hurl)
VERIFY_CLASS_SIZE_NODIE(UScriptMethod_HoldFire)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_HealthChange,ScriptMethod_HealthChange,HealthChange)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_HealthChange,ScriptMethod_HealthChange,DamageType)
VERIFY_CLASS_SIZE_NODIE(UScriptMethod_HealthChange)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_GuardPos,ScriptMethod_GuardPos,InnerRange)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_GuardPos,ScriptMethod_GuardPos,OuterRange)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_GuardPos,ScriptMethod_GuardPos,AbortRange)
VERIFY_CLASS_SIZE_NODIE(UScriptMethod_GuardPos)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_GuardActor,ScriptMethod_GuardActor,GuardedActorTag)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_GuardActor,ScriptMethod_GuardActor,InnerRange)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_GuardActor,ScriptMethod_GuardActor,OuterRange)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_GuardActor,ScriptMethod_GuardActor,AlignmentOffset)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_GuardActor,ScriptMethod_GuardActor,AbortRange)
VERIFY_CLASS_SIZE_NODIE(UScriptMethod_GuardActor)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_GotoAndPlaceTripMine,ScriptMethod_GotoAndPlaceTripMine,PlaceTargetActorTag)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_GotoAndPlaceTripMine,ScriptMethod_GotoAndPlaceTripMine,RangeFromPlaceTarget)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_GotoAndPlaceTripMine,ScriptMethod_GotoAndPlaceTripMine,TripMineClass)
VERIFY_CLASS_SIZE_NODIE(UScriptMethod_GotoAndPlaceTripMine)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_GotoBase,ScriptMethod_GotoBase,ScriptPathingOverride)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_GotoBase,ScriptMethod_GotoBase,ScriptPathingTieBreakerOverride)
VERIFY_CLASS_SIZE_NODIE(UScriptMethod_GotoBase)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_GotoAndUseItem,ScriptMethod_GotoAndUseItem,TargetItemTag)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_GotoAndUseItem,ScriptMethod_GotoAndUseItem,InputDispatcherTag)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_GotoAndUseItem,ScriptMethod_GotoAndUseItem,AttachedEvent)
VERIFY_CLASS_SIZE_NODIE(UScriptMethod_GotoAndUseItem)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_GotoAndPickup,ScriptMethod_GotoAndPickup,TargetTag)
VERIFY_CLASS_SIZE_NODIE(UScriptMethod_GotoAndPickup)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_GotoAndHurl,ScriptMethod_GotoAndHurl,TargetTag)
VERIFY_CLASS_SIZE_NODIE(UScriptMethod_GotoAndHurl)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_GotoPos,ScriptMethod_GotoPos,TargetPos)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_GotoPos,ScriptMethod_GotoPos,TargetPosVar)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_GotoPos,ScriptMethod_GotoPos,Range)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_GotoPos,ScriptMethod_GotoPos,RangeVar)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_GotoPos,ScriptMethod_GotoPos,Focus)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_GotoPos,ScriptMethod_GotoPos,FocusActorTag)
VERIFY_CLASS_SIZE_NODIE(UScriptMethod_GotoPos)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_GotoActorsPos,ScriptMethod_GotoActorsPos,TargetActorTag)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_GotoActorsPos,ScriptMethod_GotoActorsPos,TargetPosVar)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_GotoActorsPos,ScriptMethod_GotoActorsPos,Range)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_GotoActorsPos,ScriptMethod_GotoActorsPos,RangeVar)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_GotoActorsPos,ScriptMethod_GotoActorsPos,Focus)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_GotoActorsPos,ScriptMethod_GotoActorsPos,FocusActorTag)
VERIFY_CLASS_SIZE_NODIE(UScriptMethod_GotoActorsPos)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_GotoActor,ScriptMethod_GotoActor,TargetActorTag)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_GotoActor,ScriptMethod_GotoActor,OffsetType)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_GotoActor,ScriptMethod_GotoActor,Range)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_GotoActor,ScriptMethod_GotoActor,RangeVar)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_GotoActor,ScriptMethod_GotoActor,Bearing)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_GotoActor,ScriptMethod_GotoActor,BearingVar)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_GotoActor,ScriptMethod_GotoActor,Height)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_GotoActor,ScriptMethod_GotoActor,Focus)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_GotoActor,ScriptMethod_GotoActor,FocusActorTag)
VERIFY_CLASS_SIZE_NODIE(UScriptMethod_GotoActor)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_GotoAndVault,ScriptMethod_GotoAndVault,VaultActorTag)
VERIFY_CLASS_SIZE_NODIE(UScriptMethod_GotoAndVault)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_ForceFire,ScriptMethod_ForceFire,ForceFire)
VERIFY_CLASS_SIZE_NODIE(UScriptMethod_ForceFire)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_ForceActionPointTag,ScriptMethod_ForceActionPointTag,NewActionPointTag)
VERIFY_CLASS_SIZE_NODIE(UScriptMethod_ForceActionPointTag)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_FreeMove,ScriptMethod_FreeMove,Direction)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_FreeMove,ScriptMethod_FreeMove,Time)
VERIFY_CLASS_SIZE_NODIE(UScriptMethod_FreeMove)
VERIFY_CLASS_SIZE_NODIE(UScriptMethod_Fall)
VERIFY_CLASS_SIZE_NODIE(UScriptMethod_EndUseItem)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_EditPathingSettings,ScriptMethod_EditPathingSettings,PathingOverride)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_EditPathingSettings,ScriptMethod_EditPathingSettings,PathingTieBreakerOverride)
VERIFY_CLASS_SIZE_NODIE(UScriptMethod_EditPathingSettings)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_ExplicitAnim,ScriptMethod_ExplicitAnim,AnimType)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_ExplicitAnim,ScriptMethod_ExplicitAnim,SequenceName)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_ExplicitAnim,ScriptMethod_ExplicitAnim,ChannelName)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_ExplicitAnim,ScriptMethod_ExplicitAnim,Rate)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_ExplicitAnim,ScriptMethod_ExplicitAnim,Tween)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_ExplicitAnim,ScriptMethod_ExplicitAnim,AnimEarlyEndTime)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_ExplicitAnim,ScriptMethod_ExplicitAnim,BlendInTime)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_ExplicitAnim,ScriptMethod_ExplicitAnim,BlendOutTime)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_ExplicitAnim,ScriptMethod_ExplicitAnim,ExitTime)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_ExplicitAnim,ScriptMethod_ExplicitAnim,FaceActorTag)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_ExplicitAnim,ScriptMethod_ExplicitAnim,FacePos)
VERIFY_CLASS_SIZE_NODIE(UScriptMethod_ExplicitAnim)
VERIFY_CLASS_SIZE_NODIE(UScriptMethod_ExitDropship)
VERIFY_CLASS_SIZE_NODIE(UScriptMethod_Destroy)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_DebugGoalSelection,ScriptMethod_DebugGoalSelection,GoalType)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_DebugGoalSelection,ScriptMethod_DebugGoalSelection,GotoOp)
VERIFY_CLASS_SIZE_NODIE(UScriptMethod_DebugGoalSelection)
VERIFY_CLASS_SIZE_NODIE(UScriptMethod_Crouch)
VERIFY_CLASS_SIZE_NODIE(UScriptMethod_ClearGuard)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_Blink,ScriptMethod_Blink,Action)
VERIFY_CLASS_SIZE_NODIE(UScriptMethod_Blink)
VERIFY_CLASS_SIZE_NODIE(UScriptMethod_Bezerk)
VERIFY_CLASS_SIZE_NODIE(UScriptMethod_BallModeStart)
VERIFY_CLASS_SIZE_NODIE(UScriptMethod_BallModeEnd)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_Anim,ScriptMethod_Anim,AnimType)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_Anim,ScriptMethod_Anim,AnimName)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_Anim,ScriptMethod_Anim,ExitTime)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_Anim,ScriptMethod_Anim,FaceActorTag)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_Anim,ScriptMethod_Anim,FacePos)
VERIFY_CLASS_SIZE_NODIE(UScriptMethod_Anim)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_AlignWithActor,ScriptMethod_AlignWithActor,TargetActorTag)
VERIFY_CLASS_OFFSET_NODIE(UScriptMethod_AlignWithActor,ScriptMethod_AlignWithActor,Offset)
VERIFY_CLASS_SIZE_NODIE(UScriptMethod_AlignWithActor)
VERIFY_CLASS_SIZE_NODIE(UScriptMethod_AbortScript)
VERIFY_CLASS_OFFSET_NODIE(AScriptTrigger,ScriptTrigger,Script)
VERIFY_CLASS_SIZE_NODIE(AScriptTrigger)
VERIFY_CLASS_SIZE_NODIE(UPopUpCfg_Vault)
VERIFY_CLASS_OFFSET_NODIE(UPopUpCfg,PopUpCfg,AnimCtrler)
VERIFY_CLASS_OFFSET_NODIE(UPopUpCfg,PopUpCfg,AnimExtension)
VERIFY_CLASS_OFFSET_NODIE(UPopUpCfg,PopUpCfg,UserOffset)
VERIFY_CLASS_OFFSET_NODIE(UPopUpCfg,PopUpCfg,YawOffset)
VERIFY_CLASS_OFFSET_NODIE(UPopUpCfg,PopUpCfg,MinAngleToTarget)
VERIFY_CLASS_OFFSET_NODIE(UPopUpCfg,PopUpCfg,MaxAngleToTarget)
VERIFY_CLASS_OFFSET_NODIE(UPopUpCfg,PopUpCfg,IntervalMin)
VERIFY_CLASS_OFFSET_NODIE(UPopUpCfg,PopUpCfg,IntervalRnd)
VERIFY_CLASS_OFFSET_NODIE(UPopUpCfg,PopUpCfg,IntervalMinDamaged)
VERIFY_CLASS_OFFSET_NODIE(UPopUpCfg,PopUpCfg,IntervalDamageWin)
VERIFY_CLASS_OFFSET_NODIE(UPopUpCfg,PopUpCfg,IntervalDamageThresh)
VERIFY_CLASS_OFFSET_NODIE(UPopUpCfg,PopUpCfg,ExposureMin)
VERIFY_CLASS_OFFSET_NODIE(UPopUpCfg,PopUpCfg,ExposureRnd)
VERIFY_CLASS_OFFSET_NODIE(UPopUpCfg,PopUpCfg,Priority)
VERIFY_CLASS_OFFSET_NODIE(UPopUpCfg,PopUpCfg,UserLocation)
VERIFY_CLASS_OFFSET_NODIE(UPopUpCfg,PopUpCfg,MaxWaitDamage)
VERIFY_CLASS_OFFSET_NODIE(UPopUpCfg,PopUpCfg,MaxHoldDamage)
VERIFY_CLASS_OFFSET_NODIE(UPopUpCfg,PopUpCfg,MinHoldShots)
VERIFY_CLASS_OFFSET_NODIE(UPopUpCfg,PopUpCfg,LOSOffset)
VERIFY_CLASS_SIZE_NODIE(UPopUpCfg)
VERIFY_CLASS_SIZE_NODIE(UPopUpCfg_RightPipeBomb)
VERIFY_CLASS_SIZE_NODIE(UPopUpCfg_LeftPipeBomb)
VERIFY_CLASS_SIZE_NODIE(UPopUpCfg_CrouchUpPipeBomb)
VERIFY_CLASS_SIZE_NODIE(UPopUpCfg_CrouchRightPipeBomb)
VERIFY_CLASS_SIZE_NODIE(UPopUpCfg_CrouchLeftPipeBomb)
VERIFY_CLASS_SIZE_NODIE(UPopUpCfg_CrouchBackUpPipeBomb)
VERIFY_CLASS_SIZE_NODIE(UPopUpCfg_CrouchBackRightPipeBomb)
VERIFY_CLASS_SIZE_NODIE(UPopUpCfg_CrouchBackLeftPipeBomb)
VERIFY_CLASS_SIZE_NODIE(UPopUpCfg_BackRightPipeBomb)
VERIFY_CLASS_SIZE_NODIE(UPopUpCfg_BackLeftPipeBomb)
VERIFY_CLASS_OFFSET_NODIE(UPointTracker,PointTracker,m_fMaxRate)
VERIFY_CLASS_OFFSET_NODIE(UPointTracker,PointTracker,m_fNextRate)
VERIFY_CLASS_OFFSET_NODIE(UPointTracker,PointTracker,m_qCurRot)
VERIFY_CLASS_OFFSET_NODIE(UPointTracker,PointTracker,m_vConstraints)
VERIFY_CLASS_SIZE_NODIE(UPointTracker)
VERIFY_CLASS_OFFSET_NODIE(UAITarget,AITarget,AIOwner)
VERIFY_CLASS_OFFSET_NODIE(UAITarget,AITarget,TargetActorIndex)
VERIFY_CLASS_OFFSET_NODIE(UAITarget,AITarget,ClearTargetTime)
VERIFY_CLASS_OFFSET_NODIE(UAITarget,AITarget,VisibilityTestInterval)
VERIFY_CLASS_OFFSET_NODIE(UAITarget,AITarget,VisibilityTestGate)
VERIFY_CLASS_OFFSET_NODIE(UAITarget,AITarget,Posn)
VERIFY_CLASS_OFFSET_NODIE(UAITarget,AITarget,BodyPosn)
VERIFY_CLASS_OFFSET_NODIE(UAITarget,AITarget,EyePosn)
VERIFY_CLASS_OFFSET_NODIE(UAITarget,AITarget,Rotn)
VERIFY_CLASS_OFFSET_NODIE(UAITarget,AITarget,Vel)
VERIFY_CLASS_OFFSET_NODIE(UAITarget,AITarget,LastSeenTime)
VERIFY_CLASS_OFFSET_NODIE(UAITarget,AITarget,LastHeardTime)
VERIFY_CLASS_OFFSET_NODIE(UAITarget,AITarget,LastContactTime)
VERIFY_CLASS_OFFSET_NODIE(UAITarget,AITarget,VisibleSinceTime)
VERIFY_CLASS_OFFSET_NODIE(UAITarget,AITarget,StoredPos)
VERIFY_CLASS_OFFSET_NODIE(UAITarget,AITarget,StoredBodyPosn)
VERIFY_CLASS_OFFSET_NODIE(UAITarget,AITarget,StoredEyePosn)
VERIFY_CLASS_OFFSET_NODIE(UAITarget,AITarget,StoredRotn)
VERIFY_CLASS_OFFSET_NODIE(UAITarget,AITarget,StoredVel)
VERIFY_CLASS_OFFSET_NODIE(UAITarget,AITarget,StoredSpeed)
VERIFY_CLASS_OFFSET_NODIE(UAITarget,AITarget,StoredLastSeenTime)
VERIFY_CLASS_OFFSET_NODIE(UAITarget,AITarget,StoredLastHeardTime)
VERIFY_CLASS_OFFSET_NODIE(UAITarget,AITarget,StoredLastContactTime)
VERIFY_CLASS_OFFSET_NODIE(UAITarget,AITarget,Disp)
VERIFY_CLASS_OFFSET_NODIE(UAITarget,AITarget,DispFrame)
VERIFY_CLASS_OFFSET_NODIE(UAITarget,AITarget,Disp2D)
VERIFY_CLASS_OFFSET_NODIE(UAITarget,AITarget,Disp2DFrame)
VERIFY_CLASS_OFFSET_NODIE(UAITarget,AITarget,Dist3D)
VERIFY_CLASS_OFFSET_NODIE(UAITarget,AITarget,Dist3DFrame)
VERIFY_CLASS_OFFSET_NODIE(UAITarget,AITarget,Dist2D)
VERIFY_CLASS_OFFSET_NODIE(UAITarget,AITarget,Dist2DFrame)
VERIFY_CLASS_OFFSET_NODIE(UAITarget,AITarget,Range2D)
VERIFY_CLASS_OFFSET_NODIE(UAITarget,AITarget,Range2DFrame)
VERIFY_CLASS_OFFSET_NODIE(UAITarget,AITarget,DirTo)
VERIFY_CLASS_OFFSET_NODIE(UAITarget,AITarget,DirToFrame)
VERIFY_CLASS_OFFSET_NODIE(UAITarget,AITarget,Dir2DTo)
VERIFY_CLASS_OFFSET_NODIE(UAITarget,AITarget,Dir2DToFrame)
VERIFY_CLASS_OFFSET_NODIE(UAITarget,AITarget,AimFromAngle)
VERIFY_CLASS_OFFSET_NODIE(UAITarget,AITarget,AimFromAngleFrame)
VERIFY_CLASS_SIZE_NODIE(UAITarget)
VERIFY_CLASS_OFFSET_NODIE(UAIAnimationControllerEx,AIAnimationControllerEx,LastPrimaryRefId)
VERIFY_CLASS_OFFSET_NODIE(UAIAnimationControllerEx,AIAnimationControllerEx,FallbackController)
VERIFY_CLASS_OFFSET_NODIE(UAIAnimationControllerEx,AIAnimationControllerEx,DeathAnims)
VERIFY_CLASS_OFFSET_NODIE(UAIAnimationControllerEx,AIAnimationControllerEx,PainAnims)
VERIFY_CLASS_OFFSET_NODIE(UAIAnimationControllerEx,AIAnimationControllerEx,MeleePainAnims)
VERIFY_CLASS_OFFSET_NODIE(UAIAnimationControllerEx,AIAnimationControllerEx,MuzzleAimerContraints)
VERIFY_CLASS_OFFSET_NODIE(UAIAnimationControllerEx,AIAnimationControllerEx,WeaponAimerContraints)
VERIFY_CLASS_OFFSET_NODIE(UAIAnimationControllerEx,AIAnimationControllerEx,HeadAimerContraints)
VERIFY_CLASS_OFFSET_NODIE(UAIAnimationControllerEx,AIAnimationControllerEx,BodyAimerContraints)
VERIFY_CLASS_SIZE_NODIE(UAIAnimationControllerEx)
VERIFY_CLASS_OFFSET_NODIE(UAimer,Aimer,LastTargetLocation)
VERIFY_CLASS_SIZE_NODIE(UAimer)
VERIFY_CLASS_SIZE_NODIE(UAction_Teleport)
VERIFY_CLASS_OFFSET_NODIE(UAction_CircularCover,Action_CircularCover,MinAngleToCover)
VERIFY_CLASS_OFFSET_NODIE(UAction_CircularCover,Action_CircularCover,MaxAngleToCover)
VERIFY_CLASS_OFFSET_NODIE(UAction_CircularCover,Action_CircularCover,Radius)
VERIFY_CLASS_SIZE_NODIE(UAction_CircularCover)
VERIFY_CLASS_OFFSET_NODIE(UAction_PopUp,Action_PopUp,Popups)
VERIFY_CLASS_OFFSET_NODIE(UAction_PopUp,Action_PopUp,SelectionMethod)
VERIFY_CLASS_OFFSET_NODIE(UAction_PopUp,Action_PopUp,RestrictedPopups)
VERIFY_CLASS_OFFSET_NODIE(UAction_PopUp,Action_PopUp,PopUpTypeIndex)
VERIFY_CLASS_OFFSET_NODIE(UAction_PopUp,Action_PopUp,PopUpIndex)
VERIFY_CLASS_SIZE_NODIE(UAction_PopUp)
VERIFY_CLASS_SIZE_NODIE(UAITracker)
VERIFY_CLASS_SIZE_NODIE(UAIRelationshipMgr)
VERIFY_CLASS_OFFSET_NODIE(AAIHUD,AIHUD,m_aTarget)
VERIFY_CLASS_OFFSET_NODIE(AAIHUD,AIHUD,m_iLineHeight)
VERIFY_CLASS_OFFSET_NODIE(AAIHUD,AIHUD,m_iCurLine)
VERIFY_CLASS_OFFSET_NODIE(AAIHUD,AIHUD,m_iStartX)
VERIFY_CLASS_OFFSET_NODIE(AAIHUD,AIHUD,m_iStartY)
VERIFY_CLASS_OFFSET_NODIE(AAIHUD,AIHUD,m_maxLineSize)
VERIFY_CLASS_OFFSET_NODIE(AAIHUD,AIHUD,CachedAnimName)
VERIFY_CLASS_SIZE_NODIE(AAIHUD)
VERIFY_CLASS_OFFSET_NODIE(ADukeClone_Base,DukeClone_Base,PlayerPawnOwner)
VERIFY_CLASS_SIZE_NODIE(ADukeClone_Base)
VERIFY_CLASS_SIZE_NODIE(AMaleCombat)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,DisplacementLastFrame)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,LocationLastFrame)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,OverrideMeshList)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,OverrideMesh)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,RandomActorColor)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,RandomActorColorGroupID)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,MountedLightExClass)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,MountedLightExMountPrefab)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,MountedLightEx)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,PathCache)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,DamageInfo)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,DamageScaleInfo)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,Executive)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,DecisionTreeGate)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,DecisionTreeInterval)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,Nodes)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,FSMStates)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,TransitionHistory)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,StateEndMessages)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,SquadChannel)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,CurrentOp)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,CurrentOpRef)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,CurrentOpStatus)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,CurrentOpMode)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,WoundedBodyPart)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,WoundedBodySector)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,PostOpAnimCtrl)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,ClearTargetTime)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,TargetVisTestInt)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,SightCounter)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,WeaponTargetEvalInfo)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,WeaponTargetEvaluator)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,WeaponConeAngle)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,PlayerHate)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,MinPlayerHate)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,MaxPlayerHate)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,PlayerHateRecoverRate)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,LookTargetEvalInfo)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,LookTargetEvaluator)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,LookConeAngle)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,BaseLookTargetString)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,GlanceLookTargetString)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,MinGlanceTime)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,RndGlanceTime)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,SameGlanceTargetInterval)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,ChanceTryGlanceAgain)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,MinGlanceRest)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,RndGlanceRest)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,TargetActors)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,PrimaryTarget)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,PrimaryTargetActor)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,FollowTarget)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,FollowTargetActor)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,CachedLOSDistance)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,CachedWeaponLOSDistance)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,CachedProjectileLOSDistance)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,WeaponAimerInfo)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,MuzzleAimerInfo)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,HeadAimerInfo)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,WeaponAimer)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,HeadAimer)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,WeaponTrackRate)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,HeadTrackRate)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,ShootAngleThresh)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,WeaponManager)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,WeaponConfig)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,Weapons)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,RandomWeapons)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,InitialWeapon)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,PistolClass)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,WpnSteadyHorizError)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,WpnSteadyVertError)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,WpnMovingHorizError)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,WpnMovingVertError)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,LeadTimeK)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,AimAtTargetTimeThresh)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,MinWeaponScanTrackRate)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,RndWeaponScanTrackRate)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,LookTrackRateK)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,MinScanInterval)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,RndScanInterval)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,MinScanDuration)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,RndScanDuration)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,MinScanRefreshTime)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,RndScanRefreshTime)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,MinScanPitch)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,MaxScanPitch)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,MinScanYaw)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,MaxScanYaw)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,NumPipeBombs)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,MinPipeBombInterval)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,PipeBombClass)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,MyPipeBomb)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,PipeBombVel)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,RightHandPipebombMount)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,LeftHandPipebombMount)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,NumPipeBombBeeps)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,MinPipeBombTime)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,MaxPipeBombTime)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,MinHorizDistPipeBomb)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,MaxHorizDistPipeBomb)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,MinVertDistPipeBomb)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,MaxVertDistPipeBomb)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,MinPipeBombArcHeight)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,MaxPipeBombArcHeight)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,PipeBombChance)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,PipeBombGate)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,TripMines)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,MinTargetVisibleTime)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,GuardInf)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,Popups)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,PopUp)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,PopUpState)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,BlindFireGate)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,ActionPointTags)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,ChanceStayAtActionPoint)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,ActionPointIndex)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,ActionPointDesiredIndex)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,ActionPoints)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,ReloadActionPoints)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,ReloadActionPoint)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,NextActionPoint)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,ActionPointMeleeK)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,ActionPoint)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,ActionPointUserLoc)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,LastActionPoint)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,LastActionPointGroup)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,MinBlinkTime)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,MaxBlinkTime)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,NumEyeSets)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,EyesClosedAnim)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,EyeAimInfos)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,RollForwardInfo)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,RollLeftInfo)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,RollRightInfo)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,RollTime)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,Cloaking)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,CloakValue)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,CloakRate)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,CloakMaterial)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,TKShieldCollisionRadius)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,TKShieldCollisionHeight)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,TKShield)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,TKObj)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,TKObjVel)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,TKCatchAnim)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,NumSecondaryTKCatchAnims)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,TKIgnoreClasses)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,MaxTKDistance)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,MinTKDot)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,DesiredProp)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,Prop)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,ThrowPropTag)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,PickupItemRange)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,RelationshipMgr)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,Relations)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,Relationships)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,m_RelationOverrides)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,DecelerationDist)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,DesiredSpeed)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,AIBaseMoveSpeed)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,AutoRollRate)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,AutoUnrollRate)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,AutoPitchRate)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,AutoUnPitchRate)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,LocalUp)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,DesiredDir)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,AnimCutSceneVelocity)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,BodyTargetTracker)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,BodyAlignRate)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,BodyAlignRateFlying)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,BodyAlignThresh)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,BodyAlignScale)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,AirSpeedScale)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,GroundSpeedScale)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,AnimDispSpeedScale)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,NextBackupPathingTime)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,BackupPathingCooldown)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,AIAdditiveVelocity)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,InstaGibRandomImpulse)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,AnimPreset)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,GotoPreset)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,JumpPreset)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,TripMinePreset)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,TurnToPreset)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,WeaponPreset)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,UsePreset)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,IdleInfo)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,AmbientSoundInfo)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,ScriptPlayer)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,AbortScriptInfo)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,SpawnScript)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,ScriptTag)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,UsedScriptTag)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,LastScriptLoopTime)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,TargetAquiredEvent)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,TargetClearedEvent)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,NextMessageTime)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,MessageQueue)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,InitialAnimController)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,AnimControllers)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,AnimCtrl)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,AnimXParms)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,ControlXParms)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,FallParms)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,GotoXParms)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,FreeMoveParms)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,HaywireParms)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,JumpParms)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,TakeOffParms)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,JumpAttackParms)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,ChargeParms)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,DroolParms)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,HoverParms)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,RangeParms)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,PhysicsParms)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,ShrunkParms)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,MultiAnimParms)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,MultiAnimIndex)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,MultiAnimMode)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,MoveUndergroundParms)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,PauseParms)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,PlaceTripMineParms)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,SelectWeaponParms)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,SetAimParms)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,SetFireModeParms)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,TurnToXParms)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,UseXParms)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,TeleportParms)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,RappelParms)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,UseableItems)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,Factory)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,FactoryManager)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,SpawnAnimSeq)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,SpawnAnim)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,InitAnim)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,LastScriptTrigger)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,LedgeDistOverride)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,SizeLedgeImpulse)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,PainOpGate)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,DeathAnimChance)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,ThrownObjectDeathAnimChance)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,FinishMeControlType)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,FinishMeAnimName)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,FinishMeReviveAnimName)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,FinishMeTimeout)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,DeathImpulseOverride)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,ExpandPopSound)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,ExpandInstigator)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,HealthTriggers)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,MinPainOpInterval)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,RndPainOpInterval)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,MaxConsecutivePainOp)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,MaxConsecutivePainInterval)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,ConsecutivePainOp)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,PainImpulseMagnitude)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,PainImpulseMinDamage)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,PainAnimRefID)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,BoneAim)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,MuzzleBoneAim)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,ProcFireStates)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,ProcFireOps)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,PopUpFireGate)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,ProcFireMaxTimeSinceSeen)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,BoneHeadAim)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,HackAimFromRotationActor)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,WeaponIdle)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,MovingFireGate)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,MinMovingFireInterval)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,RndMovingFireInterval)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,MuzzleBoneAimConstraints)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,WeaponBoneAimConstraints)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,HeadBoneAimConstraints)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,BodyBoneAimConstraints)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,WeaponBoneAimConstraintsOverride)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,GoalPos)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,AttackConstraint)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,TryGotoAttackTime)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,MaxTravelDist)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,MinIdleTime)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,RndIdleTime)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,MinAggressiveIdleTime)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,RndAggressiveIdleTime)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,MinPauseTime)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,RndPauseTime)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,MinStunTime)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,RndStunTime)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,MaxTryTurnTime)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,ShouldTurnThreshold)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,FaceThreshold)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,WalkSpeedScale)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,RunSpeedScale)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,SideArcTurnSpeedThresh)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,StepBackwardsSpeedThresh)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,StartAngleSideSector)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,StartAngleBackSector)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,MoveBackwardsDistThresh)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,SideStepDistThresh)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,WalkDistThresh)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,GotoPosRange)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,GotoPosHeight)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,GotoPosFlyingRange)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,GotoPosFlyingHeight)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,MinDistToGoal)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,MinMoveAroundDist)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,RndMoveAroundDist)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,MinBackOffDist)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,RndBackOffDist)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,MinMoveSideDist)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,RndMoveSideDist)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,MinSpreadOutTime)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,RndSpreadOutTime)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,MinMeleeRange)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,RndMeleeRange)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,MinMeleeHeight)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,RndMeleeHeight)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,MaxGotoMeleeSteps)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,MeleeZone)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,MeleeZoneHeight)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,MinMeleeStrafeRange)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,RndMeleeStrafeRange)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,MinMeleeStrafeCycles)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,RndMeleeStrafeCycles)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,MeleeAttackRange)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,MeleeAttackArc)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,BiteDamageAmount)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,BiteDamageVel)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,ClawDamageAmount)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,ClawDamageVel)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,KickDamageAmount)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,KickDamageVel)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,StompInfo)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,StompIndex)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,ForcedStompIndex)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,ToeStubInfo)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,DodgeInfo)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,DodgeIndex)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,DodgeGate)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,DodgeInterval)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,PlayerShrunkFootstepViewShake)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,MinChargeRange)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,MaxChargeRange)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,MinChargeHeightDelta)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,MaxChargeHeightDelta)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,MinChargeAttackRange)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,MaxChargeAttackRange)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,MaxChargeSteps)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,MinWeaponStrafeCycles)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,RndWeaponStrafeCycles)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,ProjectileClass)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,ProjectileMuzzleName)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,MinProjectileFireInterval)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,RndProjectileFireInterval)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,ProjecilteFireGate)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,MinAirAttackHeight)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,MaxAirAttackHeight)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,MinJumpAttackRange)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,MaxJumpAttackRange)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,MaxJumpAttackHeight)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,JumpAttackBearingVariance)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,JumpAttackHeightDelta)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,JumpVel)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,StartFallHeight)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,FallDistThresh)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,LandingThresh)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,HeavyLandingThresh)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,ChanceLand)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,ForceStartJetpack)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,TimeTargetNotVisible)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,DangerPos)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,IgnoredDangerActors)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,MaxThreatAimAngle)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,MoveAroundTime)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,RndMoveAroundTime)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,HaywireChance)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,HaywireMinDuration)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,HaywireMaxDuration)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,HaywireLinearAccel)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,HaywireLinearAccelVar)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,HaywireAngularAccel)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,HaywireAngularAccelVar)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,PathID)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,OptionalPathClass)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,ActionPointJumpType)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,ChanceSayPain)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,ChanceSayFireInTheHole)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,ChanceSayTakeCover)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,ChanceSayLowHealth)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,ChanceSayConfirmKill)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,ChanceSayReloading)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,ChanceSayManDown)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,ChanceSayFriendlyFire)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,ChanceSayEnemySpotted)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,PainSoundMinInterval)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,PainSoundRndInterval)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,PainSoundGate)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,MyLog)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,ShouldFireStr)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,NumTransitions)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,FramesWithoutGroundContact)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,TreeDescentLog)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,TrailMarkerLoc)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,GotoXHistory)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,PathingHistory)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,AIDebugMessageQueue)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,ScriptFailHistory)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,LastMoveSpeed)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,LastMoveDir)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,LastFrameVelocity)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,MyAnimHUD)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,PathingErrors)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,OpenDoorGate)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,PreviousLocation)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,DesiredMovement)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,PhysicsContactActors)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,AIRotation)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,DynamicPathingPriority)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,DynamicPathingPriorityTieBreaker)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,GroundConstraintScalerOverride)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,ScriptPathingOverride)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,ScriptPathingTieBreakerOverride)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,PathSizeOverrideHeight)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,PathSizeOverrideRadius)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,EvalGateOverride)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,GameplayCurrentScaleConstraintStrength)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,GameplayDesiredScaleConstraintStrength)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,PerfInfo)
VERIFY_CLASS_OFFSET_NODIE(AAIActor,AIActor,AINoTick)
VERIFY_CLASS_SIZE_NODIE(AAIActor)
VERIFY_CLASS_OFFSET_NODIE(AAIInputDispatcher_Vehicle,AIInputDispatcher_Vehicle,DestTolerance)
VERIFY_CLASS_OFFSET_NODIE(AAIInputDispatcher_Vehicle,AIInputDispatcher_Vehicle,PowerSlideStopDelay)
VERIFY_CLASS_OFFSET_NODIE(AAIInputDispatcher_Vehicle,AIInputDispatcher_Vehicle,PowerSlideMinVelocity)
VERIFY_CLASS_OFFSET_NODIE(AAIInputDispatcher_Vehicle,AIInputDispatcher_Vehicle,StraightMinDot)
VERIFY_CLASS_OFFSET_NODIE(AAIInputDispatcher_Vehicle,AIInputDispatcher_Vehicle,DriverSeat)
VERIFY_CLASS_OFFSET_NODIE(AAIInputDispatcher_Vehicle,AIInputDispatcher_Vehicle,Vehicle)
VERIFY_CLASS_OFFSET_NODIE(AAIInputDispatcher_Vehicle,AIInputDispatcher_Vehicle,PowerSlideStopTime)
VERIFY_CLASS_OFFSET_NODIE(AAIInputDispatcher_Vehicle,AIInputDispatcher_Vehicle,DestToleranceSquared)
VERIFY_CLASS_OFFSET_NODIE(AAIInputDispatcher_Vehicle,AIInputDispatcher_Vehicle,TargetPos)
VERIFY_CLASS_OFFSET_NODIE(AAIInputDispatcher_Vehicle,AIInputDispatcher_Vehicle,LastTargetPos)
VERIFY_CLASS_OFFSET_NODIE(AAIInputDispatcher_Vehicle,AIInputDispatcher_Vehicle,LastGoalPos)
VERIFY_CLASS_SIZE_NODIE(AAIInputDispatcher_Vehicle)
VERIFY_CLASS_SIZE_NODIE(AAIInputDispatcher_Auto)
VERIFY_CLASS_OFFSET_NODIE(AAIInputDispatcher_Base,AIInputDispatcher_Base,MyActor)
VERIFY_CLASS_SIZE_NODIE(AAIInputDispatcher_Base)
VERIFY_CLASS_OFFSET_NODIE(AdnAlienDropship_Base,dnAlienDropship_Base,SpawnInfo)
VERIFY_CLASS_SIZE_NODIE(AdnAlienDropship_Base)
VERIFY_CLASS_OFFSET_NODIE(APodGirl_Base,PodGirl_Base,ClassToSpawn)
VERIFY_CLASS_OFFSET_NODIE(APodGirl_Base,PodGirl_Base,SensorRadius)
VERIFY_CLASS_SIZE_NODIE(APodGirl_Base)
VERIFY_CLASS_OFFSET_NODIE(APathRover,PathRover,MyTarget)
VERIFY_CLASS_OFFSET_NODIE(APathRover,PathRover,NextPosition)
VERIFY_CLASS_OFFSET_NODIE(APathRover,PathRover,FinalDest)
VERIFY_CLASS_SIZE_NODIE(APathRover)
VERIFY_CLASS_OFFSET_NODIE(AEggPod_Base,EggPod_Base,StartPreOpenDist)
VERIFY_CLASS_OFFSET_NODIE(AEggPod_Base,EggPod_Base,OpenFastDist)
VERIFY_CLASS_SIZE_NODIE(AEggPod_Base)
VERIFY_CLASS_OFFSET_NODIE(UWeaponCfg,WeaponCfg,Cfg)
VERIFY_CLASS_OFFSET_NODIE(UWeaponCfg,WeaponCfg,PreferredWeapons)
VERIFY_CLASS_SIZE_NODIE(UWeaponCfg)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,m_nMaxSpawnOverLifeTime)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,m_nMaxConcurrentSpawns)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,AutoAssignActor)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,SpawnDelay)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,SpawnDelayVariance)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,MinSpawnInterval)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,TriggerWhenAllDead)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,SpawnRetryDelay)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,m_Class)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,m_RandomClasses)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,m_OrderedClasses)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,OrderedClassesIndex)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,m_strTag)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,m_strOwnerTag)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,m_strEvent)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,SimplePawnPhysicsCollisionModifier)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,m_fSpawnTimeWarp)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,InitialAnimController)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,PathIDOverride)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,PhysicsEntityGroupOverride)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,bCastStencilShadowsModifier)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,ForceStartJetpack)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,ChanceFlyModifier)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,ChanceFly)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,ChanceLandModifier)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,ChanceLand)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,AttackConstraint)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,AllowBezerkModifier)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,AllowProneModifier)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,AllowStasisModifier)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,AllowHaywireModifier)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,AllowQuickTeleports)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,MeleeZone)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,ActionPointTags)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,ActionPointIndex)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,ActionPointDesiredIndex)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,MinPlayerHateModifier)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,MinPlayerHate)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,MaxPlayerHateModifier)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,MaxPlayerHate)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,PlayerHateRecoverRateModifier)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,PlayerHateRecoverRate)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,AvoidDangersModifier)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,UseActionFollowModifier)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,UseableItems)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,AvoidGuardedPlayerModifier)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,SpecialStepHeightCollisionModifier)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,ChanceSayPainModifier)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,ChanceSayPain)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,ChanceSayTakeCoverModifier)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,ChanceSayTakeCover)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,ChanceSayFireInTheHoleModifier)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,ChanceSayFireInTheHole)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,ChanceSayLowHealthModifier)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,ChanceSayLowHealth)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,ChanceSayConfirmKillModifier)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,ChanceSayConfirmKill)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,ChanceSayReloadingModifier)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,ChanceSayReloading)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,ChanceSayManDownModifier)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,ChanceSayManDown)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,ChanceSayFriendlyFireModifier)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,ChanceSayFriendlyFire)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,ChanceSayEnemySpottedModifier)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,ChanceSayEnemySpotted)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,VoicePackOverride)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,m_nHealth)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,HealthTriggers)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,m_fDeathAnimChance)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,LedgeDistOverride)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,SizeLedgeImpulse)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,m_Relations)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,Faction)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,OverrideMeshList)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,OverrideSkinList)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,OverrideMeshListIndex)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,Weapons)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,RandomWeapons)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,NumPipeBombs)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,PipeBombChance)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,MountOnSpawn)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,ThrowPropTag)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,m_fnInitialTargetTag)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,ScriptTag)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,UsedScriptTag)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,SpawnScript)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,TargetAquiredEvent)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,TargetClearedEvent)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,FactoryFinishedEvent)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,TickOnlyNearbyModifier)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,TickOnlyRecentModifier)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,TickOnlyZoneRecentModifier)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,TickNearbyRadiusModifier)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,TickNearbyRadiusChange)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,TickSelfRecentTimeModifier)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,TickSelfRecentTimeChange)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,TickZoneRecentTimeModifier)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,TickZoneRecentTimeChange)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,SpawnEventListeners)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,DeathEventListeners)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,DebugTickingModifier)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,DebugWeaponAimerModifier)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,DebugHeadAimerModifier)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,DebugEyeAimerModifier)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,DebugExecutiveModifier)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,DebugOpChangesModifier)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,DebugDecisionTreeModifier)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,DebugScriptExecModifier)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,DebugTargetModifier)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,DebugWeaponTargetEvalModifier)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,DebugLookTargetEvalModifier)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,DebugHeardSoundModifier)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,DebugGoalSelectionModifier)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,DebugGotoXModifier)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,DebugCloakingModifier)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,DebugPipeBombsModifier)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,DebugDangerEvaluationModifier)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,DebugTKModifier)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,DebugRollsModifier)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,DebugPropsModifier)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,DebugLOSChecksModifier)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,DebugContractsModifier)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,DebugGuardingModifier)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,DebugRangeModifier)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,DebugDistModifier)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,DebugTrailModifier)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,DebugDrawExecModifier)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,DebugActionPointsModifier)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,DebugRelationsModifier)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,DebugHateModifier)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,DebugLedgesModifier)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,DebugHealthModifier)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,DebugDrawActionPointsModifier)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,DebugDrawCollisionModifier)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,DebugDrawFOVModifier)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,DebugDrawLOSModifier)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,DebugWeaponManager)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,DebugStateAnimX)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,DebugDoors)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,DebugTurn)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,LastSpawnedActor)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,CurrentSpawns)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,Manager)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,TotalSpawned)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,SpawnedFrameStamp)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,LastPendingSpawnTime)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,PendingSpawns)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,TotalDead)
VERIFY_CLASS_OFFSET_NODIE(AAIActorFactory,AIActorFactory,LocalPlayerPawn)
VERIFY_CLASS_SIZE_NODIE(AAIActorFactory)
VERIFY_CLASS_OFFSET_NODIE(AAIBrainEditor,AIBrainEditor,Factory)
VERIFY_CLASS_OFFSET_NODIE(AAIBrainEditor,AIBrainEditor,PositionOffset)
VERIFY_CLASS_OFFSET_NODIE(AAIBrainEditor,AIBrainEditor,ClassToEdit)
VERIFY_CLASS_OFFSET_NODIE(AAIBrainEditor,AIBrainEditor,FSMToEdit)
VERIFY_CLASS_OFFSET_NODIE(AAIBrainEditor,AIBrainEditor,FSMNode)
VERIFY_CLASS_OFFSET_NODIE(AAIBrainEditor,AIBrainEditor,FSMStates)
VERIFY_CLASS_OFFSET_NODIE(AAIBrainEditor,AIBrainEditor,StateToEdit)
VERIFY_CLASS_OFFSET_NODIE(AAIBrainEditor,AIBrainEditor,NewTransition)
VERIFY_CLASS_OFFSET_NODIE(AAIBrainEditor,AIBrainEditor,WatchList_Ident)
VERIFY_CLASS_OFFSET_NODIE(AAIBrainEditor,AIBrainEditor,WatchList_Func)
VERIFY_CLASS_OFFSET_NODIE(AAIBrainEditor,AIBrainEditor,WatchList_Cond)
VERIFY_CLASS_OFFSET_NODIE(AAIBrainEditor,AIBrainEditor,MaxHistory)
VERIFY_CLASS_OFFSET_NODIE(AAIBrainEditor,AIBrainEditor,OPNodes)
VERIFY_CLASS_OFFSET_NODIE(AAIBrainEditor,AIBrainEditor,TransitionHistoryBG)
VERIFY_CLASS_OFFSET_NODIE(AAIBrainEditor,AIBrainEditor,StateHistoryBG)
VERIFY_CLASS_OFFSET_NODIE(AAIBrainEditor,AIBrainEditor,SelectedOP)
VERIFY_CLASS_OFFSET_NODIE(AAIBrainEditor,AIBrainEditor,TransitionHistMax)
VERIFY_CLASS_SIZE_NODIE(AAIBrainEditor)
#endif // VERIFY_CLASS_SIZES
