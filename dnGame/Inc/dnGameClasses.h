/*===========================================================================
    C++ class definitions exported from UnrealScript.
    This is automatically generated by the tools.
    DO NOT modify this manually! Edit the corresponding .uc files instead!
    If you even *think* about it, the engine will *know* and will come looking
    to devour your soul. You don't want to make it angry. Trust me.
===========================================================================*/
#if _MSC_VER
#pragma warning(disable:4121)
#elif defined PS3
#pragma ms_struct on
#endif
#pragma pack (push,4)

#ifndef DNGAME_API
#define DNGAME_API DLL_IMPORT
#endif

#ifndef NAMES_ONLY
#define AUTOGENERATE_NAME(name) extern DNGAME_API FName DNGAME_##name;
#define AUTOGENERATE_FUNCTION(cls,idx,name)
#endif

AUTOGENERATE_NAME(HasDiscoveredEgoAward)
AUTOGENERATE_NAME(RotateTo)
AUTOGENERATE_NAME(NoteDiscoveredEgoAward)
AUTOGENERATE_NAME(ClearEgoAwards)
AUTOGENERATE_NAME(CanPickupWeapon)
AUTOGENERATE_NAME(DrawDeathEffects)
AUTOGENERATE_NAME(AwardAchievement)
AUTOGENERATE_NAME(ClearAchievement)
AUTOGENERATE_NAME(HintAddInventory)
AUTOGENERATE_NAME(SetCameraToCorpse)
AUTOGENERATE_NAME(wttUpdate)
AUTOGENERATE_NAME(GetJetpackFuel)
AUTOGENERATE_NAME(Handle_InAirStat)
AUTOGENERATE_NAME(StartTurning)
AUTOGENERATE_NAME(StopTurning)
AUTOGENERATE_NAME(PostMountUpdateHelper)
AUTOGENERATE_NAME(DecoPlayAnimEx)
AUTOGENERATE_NAME(DecoLoopAnim)
AUTOGENERATE_NAME(DecoSetAnimGrid)
AUTOGENERATE_NAME(CriticalDamage)
AUTOGENERATE_NAME(ClientDecoActivity_Execute)
AUTOGENERATE_NAME(GetViewRotationOffset)
AUTOGENERATE_NAME(AttachPawn)
AUTOGENERATE_NAME(FindBestEntranceIndex)
AUTOGENERATE_NAME(GetUsableExitOffsets)
AUTOGENERATE_NAME(GetVehicle)
AUTOGENERATE_NAME(ShouldDrawBoostMeter)
AUTOGENERATE_NAME(GetBoostPercent)
AUTOGENERATE_NAME(HasOverheated)
AUTOGENERATE_NAME(UsableSomethingPreRender)
AUTOGENERATE_NAME(GetThrottleInput)
AUTOGENERATE_NAME(SpaceEntered)
AUTOGENERATE_NAME(SpaceLeft)
AUTOGENERATE_NAME(DriverEntered)
AUTOGENERATE_NAME(DriverLeft)
AUTOGENERATE_NAME(HasGroundContact)
AUTOGENERATE_NAME(GetVehicleAttackRange)
AUTOGENERATE_NAME(GetVehicleFloorHeight)
AUTOGENERATE_NAME(GetVehicleNavOrigin)
AUTOGENERATE_NAME(VehicleSpecialPartUpdate)
AUTOGENERATE_NAME(GetScoreTexture)
AUTOGENERATE_NAME(StartPlay)
AUTOGENERATE_NAME(GoalScored)
AUTOGENERATE_NAME(GameWon)
AUTOGENERATE_NAME(EORComplete)
AUTOGENERATE_NAME(EORBeep)
AUTOGENERATE_NAME(EORKillMsgBoxes)
AUTOGENERATE_NAME(UpdatePlayerStarts)
AUTOGENERATE_NAME(CustomInitDefaults)
AUTOGENERATE_NAME(PostProgressionLoad)
AUTOGENERATE_NAME(HasChallengeCheck)
AUTOGENERATE_NAME(AwardChallenge)
AUTOGENERATE_NAME(GetXP)
AUTOGENERATE_NAME(GetTotalXP)
AUTOGENERATE_NAME(GetMatchXP)
AUTOGENERATE_NAME(SetCurrentLevel)
AUTOGENERATE_NAME(GetXPForLevel)
AUTOGENERATE_NAME(GetXPPercent)
AUTOGENERATE_NAME(AwardLevelUp)
AUTOGENERATE_NAME(AwardExpGain)
AUTOGENERATE_NAME(IncStat)
AUTOGENERATE_NAME(Stat_StoppedSprinting)
AUTOGENERATE_NAME(InRangeCallback)
AUTOGENERATE_NAME(FirstDraw)
AUTOGENERATE_NAME(PostPostRender)
AUTOGENERATE_NAME(DrawDebugHUDs)
AUTOGENERATE_NAME(DrawWeaponSelect)
AUTOGENERATE_NAME(DrawUseContextInfo)
AUTOGENERATE_NAME(DrawTypingPrompt)
AUTOGENERATE_NAME(DrawMessageArea)
AUTOGENERATE_NAME(DeactivateHUD)
AUTOGENERATE_NAME(GetPipeBombs)
AUTOGENERATE_NAME(GetTripMines)
AUTOGENERATE_NAME(GetStickyBombs)
AUTOGENERATE_NAME(DrawNukeSymbol)
AUTOGENERATE_NAME(UpdateBossName)
AUTOGENERATE_NAME(GetKeyName)
AUTOGENERATE_NAME(DisplayStatistic)
AUTOGENERATE_NAME(DisplayRotationOnSpot)
AUTOGENERATE_NAME(AddTeamScrollingScoringText)
AUTOGENERATE_NAME(AddScrollingScoringText)
AUTOGENERATE_NAME(DrawGameTypeInfoHelper)
AUTOGENERATE_NAME(ExecuteActivity)
AUTOGENERATE_NAME(CheckRules)

#ifndef NAMES_ONLY


//***************************************************************************//
/*	\class ADukePlayer
*/
//***************************************************************************//


struct ADukePlayer_eventHintAddInventory_Parms
{
    class AInventory* Item;
};

struct ADukePlayer_eventClearAchievement_Parms
{
    BYTE Achievement;
};

struct ADukePlayer_eventAwardAchievement_Parms
{
    BYTE Achievement;
};

struct ADukePlayer_eventDrawDeathEffects_Parms
{
    class UCanvas* C;
};

struct ADukePlayer_eventCanPickupWeapon_Parms
{
    BITFIELD ReturnValue;
};

struct ADukePlayer_eventClearEgoAwards_Parms
{
    BITFIELD ReturnValue;
};

struct ADukePlayer_eventHasDiscoveredEgoAward_Parms
{
    INT AwardID;
    BITFIELD bForAchievement;
    BITFIELD ReturnValue;
};

struct ADukePlayer_eventNoteDiscoveredEgoAward_Parms
{
    INT AwardID;
    BITFIELD ReturnValue;
};
class DNGAME_API ADukePlayer : public APlayerPawn
{
public:
    INT FrameKills;
    FLOAT FrameKillsTimeSeconds;
    class UClass* StandingAnimationController;
    class UClass* CrouchingAnimationController;
    class UClass* InAirAnimationController;
    class UClass* SwimmingAnimationController;
    class UClass* JetpackingAnimationController;
    class UClass* InteractiveDecorationAnimationController;
    class USound* ChatBeepSound;
    FSSoundInfo SteroidsLoop;
    class APlayerStart* StartSpot;
    FStringNoInit CopyPasteActor;
    FLOAT DeathTime;
    FLOAT CrackedScreenAlpha;
    FLOAT CrackedScreenX;
    FLOAT CrackedScreenY;
    FLOAT CrackedScreenStretch;
    class UMaterialEx* CrackedScreenMaterial;
    FStringNoInit RestartLevelText;
    FStringNoInit LoadLastCheckpointText;
    BITFIELD DemoDeath:1 GCC_PACK(4);
    FLOAT DemoDeathMessageTimeLeft GCC_PACK(4);
    class UMaterialEx* DemoDeathMessageBG;
    class ASoftParticleSystem* CurrentFlotsamEffect;
    BITFIELD bIgnoreZoneChange:1 GCC_PACK(4);
    BITFIELD bCurrentFlotsamWaterVolume:1;
    dnArray<class ASoftParticleSystem*> FlotsamEffects GCC_PACK(4);
    FLOAT JetpackMax;
    FLOAT JetPackStateTime;
    INT OldHitCounter;
    INT HitCounter;
    dnArray<FSSoundInfo> HitNotifySounds;
    dnArray<FString> HitNotifyNames;
    INT HitNotifyIndex;
    BITFIELD bStomping:1 GCC_PACK(4);
    BITFIELD bKickForDoor:1;
    class APawn* SmashPawn GCC_PACK(4);
    FStringNoInit MyClassName;
    FLOAT StompLookAtTime;
    FLOAT StompMinDot;
    FLOAT StompKnockbackRadius;
    FLOAT StompKnockbackImpulse;
    FLOAT StompKnockbackLift;
    BITFIELD bOnlyTakeTransferredDamage:1 GCC_PACK(4);
    FStringNoInit LastKilledByPlayerName GCC_PACK(4);
    FStringNoInit LastKilledByDamageName;
    class UTexture* LastKilledByPlayerIcon;
    class AMightyFoot* DukeFoot;
    class UDebugCanvas* DebugCanvas;
    class AUpgrade_ZoomMode* ZoomMode;
    class ADoorMoverEx* CurrentDoor;
    FLOAT ZoomWalkScalar;
    FLOAT NoWeaponWalkScalar;
    FLOAT SteroidWalkScalar;
    class AdnScreenSplatter_Blood* BloodScreenSplatterEffect;
    BITFIELD bWearsShades:1 GCC_PACK(4);
    class ADukeShades* Shades GCC_PACK(4);
    class AdnQA* QA;
    INT QARate;
    INT dnQAState;
    FStringNoInit QALastCheckpoint;
    FSSoundInfo MovementRustleSoundInfo;
    FSSoundInfo LandingRustleSoundInfo;
    FLOAT KnockdownMinDamage;
    BITFIELD EgoCapAwardsEnabled:1 GCC_PACK(4);
    dnArray<FLOAT> EgoCapAwards GCC_PACK(4);
    BITFIELD bDisplayedUseWeaponHint:1 GCC_PACK(4);
    BITFIELD bDisplayedSwapWeaponsHint:1;
    BITFIELD bDisplayedEgoCapIncreaseHint:1;
    BITFIELD bDisplayedGotSteroidsHintMessage:1;
    BITFIELD bDisplayedSteroidsHintMessage:1;
    BITFIELD bDisplayedGotBeerHintMessage:1;
    BITFIELD bDisplayedBeerHintMessage:1;
    BITFIELD bDisplayedGotHolodukeHintMessage:1;
    BITFIELD bDisplayedHolodukeHintMessage:1;
    BITFIELD bDisplayedInfiniteAmmoHint:1;
    BITFIELD bDisplayedGotJetpackHintMessage:1;
    BITFIELD bPlayedESRBMessyKillLine:1;
    class UClass* PendingInventoryHintClass GCC_PACK(4);
    BITFIELD bDisplayedUseWeaponHintSave:1 GCC_PACK(4);
    BITFIELD bDisplayedSwapWeaponsHintSave:1;
    BITFIELD bDisplayedGotSteroidsHintMessageSave:1;
    BITFIELD bDisplayedGotBeerHintMessageSave:1;
    BITFIELD bDisplayedGotHolodukeHintMessageSave:1;
    BITFIELD bDisplayedGotJetpackHintMessageSave:1;
    FStringNoInit SteroidsHintMessage GCC_PACK(4);
    FStringNoInit BeerHintMessage;
    FStringNoInit HolodukeHintMessage;
    FStringNoInit InfiniteAmmoHintMessage;
    class UClass* HoloDukeClass;
    class AdnControl_Execution* ExecutionControl;
    class ADukePlayer* ExecutionTarget;
    class UClass* MightyFootClass;
    FLOAT MaxEgoCap;
    FLOAT PreorderBonusEgo;
    dnArray<FColor> crosshairColors;
    INT crosshairColorIdx;
    BITFIELD bMovementLocked:1 GCC_PACK(4);
    DECLARE_FUNCTION(execTickKick);
    DECLARE_FUNCTION(execIsDLCCampaignStart);
    DECLARE_FUNCTION(execFlushLevelEndConfig);
    DECLARE_FUNCTION(execUpdateLevelEndAchievements);
    DECLARE_FUNCTION(execGiveFullGameCompletion);
    DECLARE_FUNCTION(execHasFullGameCompletion);
    DECLARE_FUNCTION(execAddCompletionForLevel);
    DECLARE_FUNCTION(execHasCompletionForDLCLevel);
    DECLARE_FUNCTION(execHasCompletionForLevel);
    DECLARE_FUNCTION(execGetLevelIndexForMapName);
    DECLARE_FUNCTION(execClearAllAchievements);
    DECLARE_FUNCTION(execAwardAllAchievements);
    DECLARE_FUNCTION(execClearAchievement);
    DECLARE_FUNCTION(execAwardAchievement);
    DECLARE_FUNCTION(execSetMotionBlur);
    DECLARE_FUNCTION(execGetProgressFilePath);
    DECLARE_FUNCTION(execHasWeapon);
    DECLARE_FUNCTION(execCanPickupWeapon);
    DECLARE_FUNCTION(execBreakInDebugger);
    DECLARE_FUNCTION(execUnlockAllMaps);
    DECLARE_FUNCTION(execGivePermanentEgoCapAward);
    DECLARE_FUNCTION(execCanSprint);
    DECLARE_FUNCTION(execGetWalkSpeed);
    inline void __fastcall eventHintAddInventory(class AInventory* Item)
    {
        ADukePlayer_eventHintAddInventory_Parms Parms;
        Parms.Item=Item;
        ProcessEvent(FindFunctionChecked(DNGAME_HintAddInventory), &Parms);
    }
    inline void __fastcall eventClearAchievement(BYTE Achievement)
    {
        ADukePlayer_eventClearAchievement_Parms Parms;
        Parms.Achievement=Achievement;
        ProcessEvent(FindFunctionChecked(DNGAME_ClearAchievement), &Parms);
    }
    inline void __fastcall eventAwardAchievement(BYTE Achievement)
    {
        ADukePlayer_eventAwardAchievement_Parms Parms;
        Parms.Achievement=Achievement;
        ProcessEvent(FindFunctionChecked(DNGAME_AwardAchievement), &Parms);
    }
    inline void __fastcall eventDrawDeathEffects(class UCanvas* C)
    {
        ADukePlayer_eventDrawDeathEffects_Parms Parms;
        Parms.C=C;
        ProcessEvent(FindFunctionChecked(DNGAME_DrawDeathEffects), &Parms);
    }
    inline BITFIELD __fastcall eventCanPickupWeapon()
    {
        ADukePlayer_eventCanPickupWeapon_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNGAME_CanPickupWeapon), &Parms);
        return Parms.ReturnValue;
    }
    inline BITFIELD __fastcall eventClearEgoAwards()
    {
        ADukePlayer_eventClearEgoAwards_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNGAME_ClearEgoAwards), &Parms);
        return Parms.ReturnValue;
    }
    inline BITFIELD __fastcall eventHasDiscoveredEgoAward(INT AwardID, BITFIELD bForAchievement)
    {
        ADukePlayer_eventHasDiscoveredEgoAward_Parms Parms;
        Parms.ReturnValue=0;
        Parms.AwardID=AwardID;
        Parms.bForAchievement=bForAchievement;
        ProcessEvent(FindFunctionChecked(DNGAME_HasDiscoveredEgoAward), &Parms);
        return Parms.ReturnValue;
    }
    inline BITFIELD __fastcall eventNoteDiscoveredEgoAward(INT AwardID)
    {
        ADukePlayer_eventNoteDiscoveredEgoAward_Parms Parms;
        Parms.ReturnValue=0;
        Parms.AwardID=AwardID;
        ProcessEvent(FindFunctionChecked(DNGAME_NoteDiscoveredEgoAward), &Parms);
        return Parms.ReturnValue;
    }
    DECLARE_CLASS(ADukePlayer,APlayerPawn,0|CLASS_Config,dnGame)

    // properties that must be constructed special for ADukePlayer:
    //       * SteroidsLoop
    //       * FlotsamEffects
    //       * HitNotifySounds
    //       * HitNotifyNames
    //       * MovementRustleSoundInfo
    //       * LandingRustleSoundInfo
    //       * EgoCapAwards
    //       * crosshairColors

};
// Class DukePlayer exported:
//   Properties size: 952 bytes (9640 total)


//***************************************************************************//
/*	\class ADukeMultiPlayer
*/
//***************************************************************************//


struct ADukeMultiPlayer_eventStartTurning_Parms
{
    BITFIELD bLeftDirection;
};

struct ADukeMultiPlayer_eventwttUpdate_Parms
{
    FLOAT Delta;
};

struct ADukeMultiPlayer_eventSetCameraToCorpse_Parms
{
    FVector CameraLocation;
    FRotator CameraRotation;
};
class DNGAME_API ADukeMultiPlayer : public ADukePlayer
{
public:
    class UClass* MP_VoicePack;
    class UClass* SP_VoicePack;
    class UClass* DLC_VoicePack;
    class APlayerProgression* PlayerProgress;
    BITFIELD bActive:1 GCC_PACK(4);
    BITFIELD bRespawn:1;
    BITFIELD bOvertime:1;
    BITFIELD bQuitGame:1;
    FLOAT SavingTime GCC_PACK(4);
    FLOAT LastScorePointTime;
    class ADukeMultiPlayer* LastPointScorer;
    INT DisplayStatsStartIndex;
    class UClass* StandingAnimCtrl1stClass;
    class UClass* StandingAnimCtrl3rdClass;
    class UClass* CrouchingAnimCtrl1stClass;
    class UClass* CrouchingAnimCtrl3rdClass;
    class UClass* InAirAnimCtrl1stClass;
    class UClass* InAirAnimCtrl3rdClass;
    class UClass* JetpackAnimCtrl1stClass;
    class UClass* JetpackAnimCtrl3rdClass;
    class UClass* MountedAnimCtrlClass;
    class UAnimationControllerEx* BackUp_StandAnimCtrl1st;
    class UAnimationControllerEx* BackUp_StandAnimCtrl3rd;
    class UAnimationControllerEx* BackUp_CrouchAnimCtrl1st;
    class UAnimationControllerEx* BackUp_CrouchAnimCtrl3rd;
    class UAnimationControllerEx* BackUp_InAirAnimCtrl1st;
    class UAnimationControllerEx* BackUp_InAirAnimCtrl3rd;
    class UAnimationControllerEx* BackUp_JetpackAnimCtrl1st;
    class UAnimationControllerEx* BackUp_JetpackAnimCtrl3rd;
    class UAnimationControllerEx* BackUp_MountedAnimCtrlClass;
    class ADamageVolume* CurrentDamageVolume;
    class ADamageVolume* AutoTurnoffVolume;
    class AJetpackVolume* CurrentJetPackVolume;
    BITFIELD bDukeVisionOn:1 GCC_PACK(4);
    INT nStandingController GCC_PACK(4);
    BITFIELD bAlone:1 GCC_PACK(4);
    BITFIELD bInitialSpawn:1;
    FVector DeathLocation GCC_PACK(4);
    FLOAT OverrideGravityMagnitude;
    BITFIELD bOverrideGravity:1 GCC_PACK(4);
    FLOAT RocketJumpForce GCC_PACK(4);
    FLOAT MaxRocketJumpForce;
    FVector deathcamcorpseLoc;
    FVector deathcamlocTop;
    FVector deathcamtargetLoc;
    FVector deathcamwantedLoc;
    FSCustomizationInfo CustomizationInfo;
    BITFIELD bAppliedSkin:1 GCC_PACK(4);
    INT BlueTeamShirtColorIdx GCC_PACK(4);
    INT RedTeamShirtColorIdx;
    FLOAT SubdualDamage;
    FLOAT SubdualDamageFactor;
    FLOAT PostSpawnInvincibilityTime;
    BITFIELD bPostSpawnInvincible:1 GCC_PACK(4);
    BITFIELD bPowerup_Invincibility:1;
    FLOAT Powerup_InvincibilityDuration GCC_PACK(4);
    FLOAT Powerup_InvincibilityRemaining;
    BITFIELD bPowerup_DamageBooster:1 GCC_PACK(4);
    FLOAT Powerup_DamageBoosterDuration GCC_PACK(4);
    FLOAT Powerup_DamageBoosterRemaining;
    FLOAT DamageBoosterDamageFactor;
    FLOAT InvincibilityDamageFactor;
    FLOAT PowerUpStepTime;
    FLOAT DeathWeaponDropLifespan;
    FLOAT WeaponSwitchWeaponDropLifespan;
    INT NumActivePipeBombs;
    INT MaxActivePipeBombs;
    INT MaxActiveTripMines;
    FLOAT RPGHomingDamage;
    INT NumActiveTripmines;
    BITFIELD bBlowExplosivesOnDeath:1 GCC_PACK(4);
    dnArray<class AMP_LaserMine*> ActiveTripMines GCC_PACK(4);
    BITFIELD bIsPrevRotValid:1 GCC_PACK(4);
    BITFIELD bRotatingOnSpot:1;
    BITFIELD bRotatingOnSpot_TemporarilyStopped:1;
    BITFIELD bRotatingOnSpot_PlayingTurningAnim:1;
    FRotator PreviousRotation GCC_PACK(4);
    BITFIELD bRotateLeft:1 GCC_PACK(4);
    INT nRotatingOnSpotApproach GCC_PACK(4);
    FRotator refRotation;
    FLOAT fROSStepSize;
    FLOAT fROSCurrentStep;
    BITFIELD bROSAdjusting:1 GCC_PACK(4);
    FLOAT fROSAdjustmentAngle GCC_PACK(4);
    FLOAT fROSNumSteps;
    FLOAT fROSOriginalDistance;
    BITFIELD bROSLeftCCW:1 GCC_PACK(4);
    BITFIELD bCachedWhileAdjustingROSLeftCCW:1;
    FRotator ROSDiffRotation GCC_PACK(4);
    FRotator CopyPreviousRotation;
    FLOAT fROSYawDiff;
    INT nROSLeftCCW;
    BITFIELD bROSJustSwitchedOrientation:1 GCC_PACK(4);
    FLOAT MovementBlendFactor GCC_PACK(4);
    FLOAT JumpMoveBlend;
    FLOAT JumpLandBlend;
    FSSoundInfo DoubleDamageStartAndLoop;
    FSSoundInfo DoubleDamageEnd;
    FSSoundInfo ChallengeCompleteSoundInfo;
    BITFIELD bPlayerInTheAir:1 GCC_PACK(4);
    BITFIELD bPlayerAscending:1;
    FLOAT DamageBoosterWarningTime GCC_PACK(4);
    FLOAT AccelZ;
    FLOAT LastMoveAlphaZ;
    BITFIELD bDrinkingBeer:1 GCC_PACK(4);
    FLOAT DrinkingBeerOffset GCC_PACK(4);
    class UMaterialEx* InvincibilityEffectMaterial;
    class UMaterialEx* DamageBoosterEffectMaterial;
    class UMaterialEx* DukeSkin;
    class UMaterialEx* DupeSkin;
    class UMaterialEx* ShirtSkin;
    class UMaterialEx* LogoSkin;
    class UMaterialEx* DefaultShirtLogo;
    dnArray<class UMaterialEx*> Logos;
    dnArray<class UMaterialEx*> Shirts;
    dnArray<FColor> ShirtColors;
    INT LoginTime;
    BITFIELD bShowOverdriveMessage:1 GCC_PACK(4);
    class ADukeMultiPlayer* LastKiller GCC_PACK(4);
    FRotator DeathCamTargetRotation;
    FLOAT DeathCamTrackingRotationPerc;
    FLOAT DeathCamHeight;
    FLOAT DeathCamRiseSpeed;
    FLOAT DeathCamTrackingStartHeight;
    FLOAT DeathCamTrackingSpeed;
    FLOAT DeathCamEndHeight;
    FLOAT ForceRespawnTime;
    BITFIELD bISprintDown:1 GCC_PACK(4);
    BITFIELD bLeveledUp:1;
    BITFIELD bHoloDukeReplacement:1;
    BITFIELD bAllowFreeze:1;
    FLOAT ReFreezeTime GCC_PACK(4);
    FLOAT JetpackJumpDownTimer;
    FLOAT JetpackTapOffTime;
    FLOAT RocketJumpDamageResistanceFactor;
    BITFIELD bOfficiallyInGame:1 GCC_PACK(4);
    BYTE DeathCamStatus GCC_PACK(4);
    FLOAT BallsOfSteelDelay;
    FLOAT MaxBallsOfSteelDelay;
    class ABaseAI* ActiveHoloActor;
    FSViewShakeInfo MiniFrozenPunchShakeInfo;
    FLOAT GridYCached1;
    BITFIELD bWeaponTuningTool:1 GCC_PACK(4);
    dnArray<class AProjectile*> FiredProjectiles GCC_PACK(4);
    dnArray<FVector> FiredProjectilesLastLoc;
    BITFIELD bCanTaunt:1 GCC_PACK(4);
    FLOAT tauntDelayTime GCC_PACK(4);
    FLOAT VODelayTime;
    BITFIELD bCanPlayTriggeredVO:1 GCC_PACK(4);
    FLOAT StandardVOChance GCC_PACK(4);
    FLOAT HostStartTime;
    INT EnforcerID;
    BITFIELD bBeingStomped:1 GCC_PACK(4);
    BITFIELD bHeadshots:1;
    BITFIELD bLoadedMetadata:1;
    FLOAT ShrunkDamageMultiplier GCC_PACK(4);
    FLOAT LastPhysicsVolumeChangeDamageTimestamp;
    FSSoundInfo BeepSoundInfo;
    class ARenderActor* levelup;
    FSSoundInfo CountdownSoundInfo[11];
    BITFIELD bGameEnded:1 GCC_PACK(4);
    BITFIELD bGameRequestEnd:1;
    class ASoftParticleSystem* TeleportEffect GCC_PACK(4);
    class ASoftParticleSystem* DrunkEffect;
    class UClass* DrunkEffectClass;
    FVector DrunkParticlesOffset;
    class ASoftParticleSystem* SteroidHandsEffect[2];
    class UClass* SteroidHandsEffectClass;
    FLOAT FatalFallingTime;
    BITFIELD bIsMyDigsPlayer:1 GCC_PACK(4);
    BITFIELD bIsCaptureTheBabePlayer:1;
    FLOAT JumpPadStartLocationHeight GCC_PACK(4);
    FSSoundInfo InvincibilityPickupSnd;
    BITFIELD usingInventoryItem:1 GCC_PACK(4);
    class AGasPodManager* GPM GCC_PACK(4);
    INT OMPLID;
    FLOAT BecomeUnfrozenTime;
    INT LookHitActorUpdateFrame;
    FLOAT CurrentlyAllowedPowerupEffectAlpha;
    BITFIELD bKickedForIdle:1 GCC_PACK(4);
    BITFIELD bCanMove:1;
    BITFIELD bReadyToShrink:1;
    FStringNoInit TempTitleStr GCC_PACK(4);
    FLOAT ShrinkDamage;
    BITFIELD bHasSubmittedScoresThisRound:1 GCC_PACK(4);
    FLOAT NoWeaponTime GCC_PACK(4);
    BITFIELD bIdleKicked:1 GCC_PACK(4);
    BITFIELD bGoldHack:1;
    class UClass* PlayerProgressionClass GCC_PACK(4);
    DECLARE_FUNCTION(execTraceFireHit);
    DECLARE_FUNCTION(execNativeUpdateLookHitActor);
    DECLARE_FUNCTION(execHandlePlayerMovePrePhysics);
    DECLARE_FUNCTION(execCanPickupWeapon);
    DECLARE_FUNCTION(execTickTurn);
    DECLARE_FUNCTION(execTickNative);
    DECLARE_FUNCTION(execPlayerCalcView_MPDead);
    DECLARE_FUNCTION(execSetMotionBlur);
    DECLARE_FUNCTION(execCanSprint);
    inline void __fastcall eventStopTurning()
    {
        ProcessEvent(FindFunctionChecked(DNGAME_StopTurning), NULL);
    }
    inline void __fastcall eventStartTurning(BITFIELD bLeftDirection)
    {
        ADukeMultiPlayer_eventStartTurning_Parms Parms;
        Parms.bLeftDirection=bLeftDirection;
        ProcessEvent(FindFunctionChecked(DNGAME_StartTurning), &Parms);
    }
    inline void __fastcall eventHandle_InAirStat()
    {
        ProcessEvent(FindFunctionChecked(DNGAME_Handle_InAirStat), NULL);
    }
    inline void __fastcall eventwttUpdate(FLOAT Delta)
    {
        ADukeMultiPlayer_eventwttUpdate_Parms Parms;
        Parms.Delta=Delta;
        ProcessEvent(FindFunctionChecked(DNGAME_wttUpdate), &Parms);
    }
    inline void __fastcall eventSetCameraToCorpse(FVector& CameraLocation, FRotator& CameraRotation)
    {
        ADukeMultiPlayer_eventSetCameraToCorpse_Parms Parms;
        Parms.CameraLocation=CameraLocation;
        Parms.CameraRotation=CameraRotation;
        ProcessEvent(FindFunctionChecked(DNGAME_SetCameraToCorpse), &Parms);
        CameraLocation=Parms.CameraLocation;
        CameraRotation=Parms.CameraRotation;
    }
    DECLARE_CLASS(ADukeMultiPlayer,ADukePlayer,0|CLASS_Config,dnGame)

    // properties that must be constructed special for ADukeMultiPlayer:
    //       * ActiveTripMines
    //       * DoubleDamageStartAndLoop
    //       * DoubleDamageEnd
    //       * ChallengeCompleteSoundInfo
    //       * Logos
    //       * Shirts
    //       * ShirtColors
    //       * FiredProjectiles
    //       * FiredProjectilesLastLoc
    //       * BeepSoundInfo
    //       * InvincibilityPickupSnd

};
// Class DukeMultiPlayer exported:
//   Properties size: 3608 bytes (13248 total)


//***************************************************************************//
/*	\class AdnQuestItem
*/
//***************************************************************************//

class DNGAME_API AdnQuestItem : public AWeapon
{
public:
    FStringNoInit QuestItemTip;
    class UMaterialEx* HUDIcon;
    class UMaterialEx* HUDGlowIcon;
    DECLARE_CLASS(AdnQuestItem,AWeapon,0,dnGame)
    NO_DEFAULT_CONSTRUCTOR(AdnQuestItem)
};
// Class dnQuestItem exported:
//   Properties size: 20 bytes (2824 total)


//***************************************************************************//
/*	\class AIntegratedWeapon
*/
//***************************************************************************//

class DNGAME_API AIntegratedWeapon : public AWeapon
{
public:
    DECLARE_CLASS(AIntegratedWeapon,AWeapon,0,dnGame)
    NO_DEFAULT_CONSTRUCTOR(AIntegratedWeapon)
};
// Class IntegratedWeapon exported:
//   Properties size: 0 bytes (2804 total)


//***************************************************************************//
/*	\class AUpgrade_SOS
*/
//***************************************************************************//

class DNGAME_API AUpgrade_SOS : public AActivatableInventory
{
public:
    FLOAT Fuel;
    DECLARE_CLASS(AUpgrade_SOS,AActivatableInventory,0,dnGame)
    NO_DEFAULT_CONSTRUCTOR(AUpgrade_SOS)
};
// Class Upgrade_SOS exported:
//   Properties size: 4 bytes (2512 total)


//***************************************************************************//
/*	\class AUpgrade_ViewMode
*/
//***************************************************************************//

class DNGAME_API AUpgrade_ViewMode : public AUpgrade_SOS
{
public:
    BITFIELD bAffectCameraStyle:1 GCC_PACK(4);
    BYTE SpecialCameraStyle GCC_PACK(4);
    class UMaterialEx* SubtleStaticMaterial;
    DECLARE_CLASS(AUpgrade_ViewMode,AUpgrade_SOS,0,dnGame)
    NO_DEFAULT_CONSTRUCTOR(AUpgrade_ViewMode)
};
// Class Upgrade_ViewMode exported:
//   Properties size: 12 bytes (2524 total)


//***************************************************************************//
/*	\class AUpgrade_ZoomMode
*/
//***************************************************************************//

class DNGAME_API AUpgrade_ZoomMode : public AUpgrade_ViewMode
{
public:
    FLOAT ZoomTime;
    FLOAT ZoomScale;
    DECLARE_CLASS(AUpgrade_ZoomMode,AUpgrade_ViewMode,0,dnGame)
    NO_DEFAULT_CONSTRUCTOR(AUpgrade_ZoomMode)
};
// Class Upgrade_ZoomMode exported:
//   Properties size: 8 bytes (2532 total)


//***************************************************************************//
/*	\class AdnDecoration
*/
//***************************************************************************//


struct AdnDecoration_eventClientDecoActivity_Execute_Parms
{
    INT DecoIndex;
    INT CurrentIndex;
    class APawn* EventInstigator;
};

struct AdnDecoration_eventCriticalDamage_Parms
{
    BITFIELD bForceRemoval;
};

struct AdnDecoration_eventDecoSetAnimGrid_Parms
{
    FName GridSequence;
    FLOAT X;
    FLOAT Y;
    INT Channel;
};

struct AdnDecoration_eventDecoLoopAnim_Parms
{
    FName Sequence;
    FLOAT Rate;
    FLOAT TweenTime;
    INT Channel;
    FSAnimFlags SequenceFlags;
    BITFIELD bAnimPhysics;
};

struct AdnDecoration_eventDecoPlayAnimEx_Parms
{
    FSAnimInfo AnimInfo;
    BITFIELD bAnimPhysics;
};
class DNGAME_API AdnDecoration : public ADecoration
{
public:
    dnArray<FSAnimTriggers> AnimTriggers;
    dnArray<FSIdleActivity> IdleActivities;
    dnArray<FSAnimationControllerActivity> AnimControllerActivities;
    dnArray<FSDecoActivities> DecoActivities_Default;
    dnArray<FSDecoActivities> DecoActivities_Override;
    dnArray<FSDecoActTriggers> DecoActivityTriggers;
    BITFIELD bStartupOff:1 GCC_PACK(4);
    BITFIELD bStartupDestroyed:1;
    dnArray<FSConstraintInfo> AutoConstraints GCC_PACK(4);
    dnArray<class UDecoActivities*> StartupActivities;
    BITFIELD bAutoNavDoor_AutoToggle:1 GCC_PACK(4);
    BITFIELD bSurviveDeath:1;
    dnArray<class UClass*> SpawnedSnacks GCC_PACK(4);
    dnArray<class UClass*> SpawnedInventory;
    FSFlickerLight FlickerLight;
    dnArray<class UDecoActivities*> DestroyedActivities;
    FLOAT DestroyActionPointRadius;
    dnArray<class AActionPoint*> DestroyableActionPoints;
    BYTE HealthPrefab;
    FLOAT DamageThrottle;
    FLOAT DamageThreshold;
    dnArray<class UClass*> DamageTypesIgnored;
    dnArray<class UClass*> DamageTypesAcceptedOnly;
    dnArray<class UClass*> DamageTypesInstaKill;
    dnArray<FSDecoDamageIgnoreRules> DamageIgnoreRules;
    FSStompedInfo AIStompedInfo;
    FName PowerOffTag;
    FName PowerOnTag;
    FLOAT WaterSplashRadius;
    FLOAT WaterSplashStrength;
    BYTE DecoState;
    BITFIELD bUseDecoAnim:1 GCC_PACK(4);
    BITFIELD bWaterLogged:1;
    INT PreviousHealth GCC_PACK(4);
    INT BumpCount;
    class ABreakableGlass* LastGlass;
    class UClass* WaterSplashClass;
    FLOAT WaterSplashMinVel;
    dnArray<FSPendingActivity> PendingActivities;
    class UDecoActivityDeclarations* ActivityDeclarations;
    BITFIELD bAnimPhysicsActive:1 GCC_PACK(4);
    BYTE PreAnimPhysicsPhysics GCC_PACK(4);
    dnArray<INT> AnimPhysicsChannels;
    BITFIELD bPoweredBeforeEMP:1 GCC_PACK(4);
    BITFIELD bDisableUseOnEMP:1;
    class UMotionPrefab* SpawnedPickupMotionPrefab GCC_PACK(4);
    BITFIELD bWasMeqon:1 GCC_PACK(4);
    BITFIELD bCriticalDamage:1;
    FRotator AdjustRotation GCC_PACK(4);
    DECLARE_FUNCTION(execClientDecoActivity_ExecuteByIndex);
    DECLARE_FUNCTION(execDecoActivity_ExecuteElements);
    DECLARE_FUNCTION(execDecoAnimPhysics_Stop);
    DECLARE_FUNCTION(execDecoAnimPhysics_Start);
    DECLARE_FUNCTION(execDecoActivity);
    inline void __fastcall eventClientDecoActivity_Execute(INT DecoIndex, INT CurrentIndex, class APawn* EventInstigator)
    {
        AdnDecoration_eventClientDecoActivity_Execute_Parms Parms;
        Parms.DecoIndex=DecoIndex;
        Parms.CurrentIndex=CurrentIndex;
        Parms.EventInstigator=EventInstigator;
        ProcessEvent(FindFunctionChecked(DNGAME_ClientDecoActivity_Execute), &Parms);
    }
    inline void __fastcall eventCriticalDamage(BITFIELD bForceRemoval)
    {
        AdnDecoration_eventCriticalDamage_Parms Parms;
        Parms.bForceRemoval=bForceRemoval;
        ProcessEvent(FindFunctionChecked(DNGAME_CriticalDamage), &Parms);
    }
    inline void __fastcall eventDecoSetAnimGrid(FName GridSequence, FLOAT X, FLOAT Y, INT Channel)
    {
        AdnDecoration_eventDecoSetAnimGrid_Parms Parms;
        Parms.GridSequence=GridSequence;
        Parms.X=X;
        Parms.Y=Y;
        Parms.Channel=Channel;
        ProcessEvent(FindFunctionChecked(DNGAME_DecoSetAnimGrid), &Parms);
    }
    inline void __fastcall eventDecoLoopAnim(FName Sequence, FLOAT Rate, FLOAT TweenTime, INT Channel, FSAnimFlags SequenceFlags, BITFIELD bAnimPhysics)
    {
        AdnDecoration_eventDecoLoopAnim_Parms Parms;
        Parms.Sequence=Sequence;
        Parms.Rate=Rate;
        Parms.TweenTime=TweenTime;
        Parms.Channel=Channel;
        Parms.SequenceFlags=SequenceFlags;
        Parms.bAnimPhysics=bAnimPhysics;
        ProcessEvent(FindFunctionChecked(DNGAME_DecoLoopAnim), &Parms);
    }
    inline void __fastcall eventDecoPlayAnimEx(FSAnimInfo AnimInfo, BITFIELD bAnimPhysics)
    {
        AdnDecoration_eventDecoPlayAnimEx_Parms Parms;
        Parms.AnimInfo=AnimInfo;
        Parms.bAnimPhysics=bAnimPhysics;
        ProcessEvent(FindFunctionChecked(DNGAME_DecoPlayAnimEx), &Parms);
    }
    inline void __fastcall eventPostMountUpdateHelper()
    {
        ProcessEvent(FindFunctionChecked(DNGAME_PostMountUpdateHelper), NULL);
    }
    DECLARE_CLASS(AdnDecoration,ADecoration,0,dnGame)
    NO_DEFAULT_CONSTRUCTOR_START(AdnDecoration)
    NO_DEFAULT_CONSTRUCTOR_INIT(AnimTriggers)
    NO_DEFAULT_CONSTRUCTOR_INIT(IdleActivities)
    NO_DEFAULT_CONSTRUCTOR_INIT(AnimControllerActivities)
    NO_DEFAULT_CONSTRUCTOR_INIT(DecoActivities_Default)
    NO_DEFAULT_CONSTRUCTOR_INIT(DecoActivities_Override)
    NO_DEFAULT_CONSTRUCTOR_INIT(DecoActivityTriggers)
    NO_DEFAULT_CONSTRUCTOR_INIT(AutoConstraints)
    NO_DEFAULT_CONSTRUCTOR_INIT(StartupActivities)
    NO_DEFAULT_CONSTRUCTOR_INIT(SpawnedSnacks)
    NO_DEFAULT_CONSTRUCTOR_INIT(SpawnedInventory)
    NO_DEFAULT_CONSTRUCTOR_INIT(DestroyedActivities)
    NO_DEFAULT_CONSTRUCTOR_INIT(DestroyableActionPoints)
    NO_DEFAULT_CONSTRUCTOR_INIT(DamageTypesIgnored)
    NO_DEFAULT_CONSTRUCTOR_INIT(DamageTypesAcceptedOnly)
    NO_DEFAULT_CONSTRUCTOR_INIT(DamageTypesInstaKill)
    NO_DEFAULT_CONSTRUCTOR_INIT(DamageIgnoreRules)
    NO_DEFAULT_CONSTRUCTOR_INIT(PendingActivities)
    NO_DEFAULT_CONSTRUCTOR_INITLAST(AnimPhysicsChannels)
};
// Class dnDecoration exported:
//   Properties size: 532 bytes (2956 total)


//***************************************************************************//
/*	\class AdnUsableSomething
*/
//***************************************************************************//


struct AdnUsableSomething_eventHasOverheated_Parms
{
    BITFIELD ReturnValue;
};

struct AdnUsableSomething_eventGetBoostPercent_Parms
{
    FLOAT ReturnValue;
};

struct AdnUsableSomething_eventShouldDrawBoostMeter_Parms
{
    BITFIELD ReturnValue;
};

struct AdnUsableSomething_eventGetVehicle_Parms
{
    class AVehicleBase* ReturnValue;
};

struct AdnUsableSomething_eventGetUsableExitOffsets_Parms
{
    class APawn* TestPawn;
    INT UsableExitIndex;
    BITFIELD bEnter;
    FVector CalcedLocation;
    FRotator CalcedRotation;
};

struct AdnUsableSomething_eventFindBestEntranceIndex_Parms
{
    class APawn* TestPawn;
    INT ReturnValue;
};

struct AdnUsableSomething_eventAttachPawn_Parms
{
    class APawn* Attachee;
};
class DNGAME_API AdnUsableSomething : public AdnDecoration
{
public:
    class UClass* ControlRemapperClass;
    class AControlRemapperEx* InternalControlRemapper;
    BITFIELD bUseHomePose:1 GCC_PACK(4);
    FLOAT InterpolationInTime GCC_PACK(4);
    FLOAT InterpolationOutTime;
    dnArray<FSHUDKeyHelp> HUDHelpEntries;
    dnArray<FSUsableSpaceExit> UsableExits;
    FLOAT DisplayInputHelpTime;
    FLOAT DisplayInputStopTime;
    FSMountPrefab UserMountPrefab;
    BITFIELD bDisableCrosshairHUD:1 GCC_PACK(4);
    BITFIELD bDisableCrosshair:1;
    FLOAT FOVScalar GCC_PACK(4);
    FLOAT FOVTransitionTime;
    class UClass* UsableClass;
    FLOAT ViewingAngleThreshold;
    FRotator ForwardRotationOffset;
    FLOAT ReuseTime;
    FLOAT TimeGate;
    BITFIELD bStandardUseRestriction:1 GCC_PACK(4);
    BITFIELD bDetachOnDamage:1;
    BITFIELD bDebugPositioning:1;
    BITFIELD bExitAssumeValid:1;
    FName SE_ForcePlayerAttach GCC_PACK(4);
    FName SE_ForcePlayerAttachComplete;
    FName SE_ForcePlayerDetach;
    FName SE_ForcePlayerDetachComplete;
    FName SE_DisablePlayerLock;
    FName SE_EnablePlayerLock;
    FName SE_TogglePlayerLock;
    FLOAT MouseInputScaleX;
    FLOAT MouseInputScaleY;
    FLOAT AnalogInputScaleX;
    FLOAT AnalogInputScaleY;
    FLOAT MouseInputX;
    FLOAT MouseInputY;
    FLOAT ServerMouseInputX;
    FLOAT ServerMouseInputY;
    FLOAT MaxMouseDelta;
    BITFIELD CamRelativeMouseInput:1 GCC_PACK(4);
    FRotator HeadAimMinOffset GCC_PACK(4);
    FRotator HeadAimMaxOffset;
    BITFIELD bManipulateViewOnAttach:1 GCC_PACK(4);
    BITFIELD bManipulateViewOnIdle:1;
    BITFIELD bManipulateViewOnDetach:1;
    BITFIELD bUsePreRender:1;
    BITFIELD bCorrectInverse:1;
    BITFIELD bInternalUseDetach:1;
    BITFIELD bPreserveInternalUseDetach:1;
    INT ActiveUsableExit GCC_PACK(4);
    class AActor* PretendSelf;
    class APawn* User;
    class APlayerPawn* PlayerUser;
    class APawn* AIReserved;
    FName AttachUserSoundName;
    FName DetachUserSoundName;
    FVector LocalCollisionCenter;
    FVector LocalCollisionDimensions;
    FLOAT InterpRelevantDrawscaleDifference;
    FVector InterpRelevantLocation;
    FRotator InterpRelevantRotation;
    FLOAT ShakeViewScale;
    inline void __fastcall eventUsableSomethingPreRender()
    {
        ProcessEvent(FindFunctionChecked(DNGAME_UsableSomethingPreRender), NULL);
    }
    inline BITFIELD __fastcall eventHasOverheated()
    {
        AdnUsableSomething_eventHasOverheated_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNGAME_HasOverheated), &Parms);
        return Parms.ReturnValue;
    }
    inline FLOAT __fastcall eventGetBoostPercent()
    {
        AdnUsableSomething_eventGetBoostPercent_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNGAME_GetBoostPercent), &Parms);
        return Parms.ReturnValue;
    }
    inline BITFIELD __fastcall eventShouldDrawBoostMeter()
    {
        AdnUsableSomething_eventShouldDrawBoostMeter_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNGAME_ShouldDrawBoostMeter), &Parms);
        return Parms.ReturnValue;
    }
    inline class AVehicleBase* __fastcall eventGetVehicle()
    {
        AdnUsableSomething_eventGetVehicle_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNGAME_GetVehicle), &Parms);
        return Parms.ReturnValue;
    }
    inline void __fastcall eventGetUsableExitOffsets(class APawn* TestPawn, INT UsableExitIndex, BITFIELD bEnter, FVector& CalcedLocation, FRotator& CalcedRotation)
    {
        AdnUsableSomething_eventGetUsableExitOffsets_Parms Parms;
        Parms.TestPawn=TestPawn;
        Parms.UsableExitIndex=UsableExitIndex;
        Parms.bEnter=bEnter;
        Parms.CalcedLocation=CalcedLocation;
        Parms.CalcedRotation=CalcedRotation;
        ProcessEvent(FindFunctionChecked(DNGAME_GetUsableExitOffsets), &Parms);
        CalcedLocation=Parms.CalcedLocation;
        CalcedRotation=Parms.CalcedRotation;
    }
    inline INT __fastcall eventFindBestEntranceIndex(class APawn* TestPawn)
    {
        AdnUsableSomething_eventFindBestEntranceIndex_Parms Parms;
        Parms.ReturnValue=0;
        Parms.TestPawn=TestPawn;
        ProcessEvent(FindFunctionChecked(DNGAME_FindBestEntranceIndex), &Parms);
        return Parms.ReturnValue;
    }
    inline void __fastcall eventAttachPawn(class APawn* Attachee)
    {
        AdnUsableSomething_eventAttachPawn_Parms Parms;
        Parms.Attachee=Attachee;
        ProcessEvent(FindFunctionChecked(DNGAME_AttachPawn), &Parms);
    }
    DECLARE_CLASS(AdnUsableSomething,AdnDecoration,0,dnGame)

    // properties that must be constructed special for AdnUsableSomething:
    //       * HUDHelpEntries
    //       * UsableExits

};
// Class dnUsableSomething exported:
//   Properties size: 356 bytes (3312 total)


//***************************************************************************//
/*	\class AdnControl
*/
//***************************************************************************//

class DNGAME_API AdnControl : public AdnUsableSomething
{
public:
    BITFIELD bDebugPrint:1 GCC_PACK(4);
    INT CrosshairIndex GCC_PACK(4);
    INT CrosshairIndexUndo;
    BITFIELD bChangeCrossHair:1 GCC_PACK(4);
    dnArray<FSUserStateEvents> StateEvents GCC_PACK(4);
    dnArray<FSState> States;
    INT InitStateIndex;
    INT CurrentStateIndex;
    INT PreviousStateIndex;
    BITFIELD NotifyUserOnStateChange:1 GCC_PACK(4);
    BITFIELD bDelayedDetach:1;
    class ATriggerDamageControlUser* DamageTrigger GCC_PACK(4);
    FLOAT DamageTriggerRadius;
    FLOAT DamageTriggerHeight;
    FLOAT PassedDamageScale;
    FLOAT PassedDamageScaleAI;
    FLOAT PassedPhysicsDamageScale;
    FLOAT PassedPhysicsDamageScaleAI;
    BITFIELD bPowerOff:1 GCC_PACK(4);
    BITFIELD bOverheated:1;
    FName ForceAttachStateName GCC_PACK(4);
    FName ForceDetachStateName;
    FName PawnLostStateName;
    dnArray<BYTE> DisabledKeyTypes;
    BITFIELD AIHoldFire:1 GCC_PACK(4);
    BITFIELD bAlternateMovementBoneStyle:1;
    DECLARE_CLASS(AdnControl,AdnUsableSomething,0,dnGame)
    NO_DEFAULT_CONSTRUCTOR_START(AdnControl)
    NO_DEFAULT_CONSTRUCTOR_INIT(StateEvents)
    NO_DEFAULT_CONSTRUCTOR_INIT(States)
    NO_DEFAULT_CONSTRUCTOR_INITLAST(DisabledKeyTypes)
};
// Class dnControl exported:
//   Properties size: 116 bytes (3428 total)


//***************************************************************************//
/*	\class AVehicleSpaceBase
*/
//***************************************************************************//


struct AVehicleSpaceBase_eventGetThrottleInput_Parms
{
    FLOAT ReturnValue;
};
class DNGAME_API AVehicleSpaceBase : public AdnControl
{
public:
    BITFIELD bVehicleRelative:1 GCC_PACK(4);
    BITFIELD bDriverSeat:1;
    BITFIELD bEjectWhenFlipped:1;
    BITFIELD bAllowUserItemPickup:1;
    FLOAT Throttle GCC_PACK(4);
    FLOAT LeftRightHeading;
    BITFIELD bGoForward:1 GCC_PACK(4);
    BITFIELD bGoBackward:1;
    BITFIELD bSteerLeft:1;
    BITFIELD bSteerRight:1;
    BITFIELD bFire:1;
    BITFIELD bEjecting:1;
    BITFIELD bExiting:1;
    BITFIELD bBoost:1;
    BITFIELD bZoom:1;
    BITFIELD bHandbrake:1;
    class AVehicleBase* Vehicle GCC_PACK(4);
    class APawn* PreviousRider;
    BITFIELD bRequireVehicleForUse:1 GCC_PACK(4);
    BITFIELD bUseFirstPersonFOV:1;
    FLOAT FirstPersonFOV GCC_PACK(4);
    FStringNoInit FlipMessage;
    FLOAT FlipReuseTime;
    inline FLOAT __fastcall eventGetThrottleInput()
    {
        AVehicleSpaceBase_eventGetThrottleInput_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNGAME_GetThrottleInput), &Parms);
        return Parms.ReturnValue;
    }
    DECLARE_CLASS(AVehicleSpaceBase,AdnControl,0,dnGame)
    NO_DEFAULT_CONSTRUCTOR(AVehicleSpaceBase)
};
// Class VehicleSpaceBase exported:
//   Properties size: 48 bytes (3476 total)


//***************************************************************************//
/*	\class AVehicleSpecialPartBase
*/
//***************************************************************************//

class DNGAME_API AVehicleSpecialPartBase : public AdnDecoration
{
public:
    BITFIELD bForwardUseCalls:1 GCC_PACK(4);
    BITFIELD bVehiclePartRequiresUpdate:1;
    class AVehicleBase* ParentVehicle GCC_PACK(4);
    BITFIELD PassDamageToOwner:1 GCC_PACK(4);
    BITFIELD bDontCastShadowFromVehicleLights:1;
    inline void __fastcall eventVehicleSpecialPartUpdate()
    {
        ProcessEvent(FindFunctionChecked(DNGAME_VehicleSpecialPartUpdate), NULL);
    }
    DECLARE_CLASS(AVehicleSpecialPartBase,AdnDecoration,0,dnGame)
};
// Class VehicleSpecialPartBase exported:
//   Properties size: 12 bytes (2968 total)


//***************************************************************************//
/*	\class AVehicleBase
*/
//***************************************************************************//


struct AVehicleBase_eventGetVehicleNavOrigin_Parms
{
    FVector NavOrigin;
};

struct AVehicleBase_eventGetVehicleFloorHeight_Parms
{
    FLOAT ReturnValue;
};

struct AVehicleBase_eventGetVehicleAttackRange_Parms
{
    FLOAT Desired;
    FLOAT Min;
    FLOAT Max;
};

struct AVehicleBase_eventHasGroundContact_Parms
{
    BITFIELD ReturnValue;
};

struct AVehicleBase_eventGetThrottleInput_Parms
{
    FLOAT ReturnValue;
};

struct AVehicleBase_eventRotateTo_Parms
{
    FVector vectIn;
    FVector ReturnValue;
};

struct AVehicleBase_eventDriverLeft_Parms
{
    class AVehicleSpaceBase* Space;
};

struct AVehicleBase_eventDriverEntered_Parms
{
    class AVehicleSpaceBase* Space;
};

struct AVehicleBase_eventSpaceLeft_Parms
{
    class AVehicleSpaceBase* Space;
};

struct AVehicleBase_eventSpaceEntered_Parms
{
    class AVehicleSpaceBase* Space;
};
class DNGAME_API AVehicleBase : public AdnDecoration
{
public:
    BITFIELD bAllowDismountWhileMoving:1 GCC_PACK(4);
    BITFIELD bAllowPlayerReflip:1;
    BITFIELD bIgnition:1;
    BITFIELD bEngineForcedOff:1;
    BITFIELD bDisableAllWhenEngineOff:1;
    BITFIELD bHandbrakeAlwaysOn:1;
    BITFIELD bGeneratePaths:1;
    BITFIELD bAIHandleFlipped:1;
    BYTE ControlType GCC_PACK(4);
    FLOAT ControlStiffness;
    BYTE ZMotionType;
    FLOAT ZMotionPower;
    FLOAT StoppedSpeed;
    FLOAT ForwardVelocityThreshold;
    FLOAT TickCutoffSpeed;
    FLOAT ExplosionMomentumScalar;
    FLOAT DrivenAvoidRangeMin;
    FLOAT DrivenAvoidRange;
    FLOAT PassedDamageScale;
    FLOAT PassedDamageScaleAI;
    FLOAT PassedPhysicsDamageScale;
    FLOAT PassedPhysicsDamageScaleAI;
    FLOAT UpwardCorpseBoost;
    FLOAT UpwardCorpseBoostRnd;
    FLOAT ForwardCorpseBoost;
    FLOAT ForwardCorpseBoostRnd;
    FName VehicleKillEvent;
    FLOAT VehicleKillLineChance;
    FName VehicleKillLine;
    class UClass* BloodMessClass;
    FLOAT BloodSplatterTime;
    FLOAT FlipThreshold;
    FLOAT FlipTotalTime;
    FLOAT FlipTorque;
    FLOAT FlipLift;
    FLOAT FlipKickMinimumSpeed;
    FName FlippedEvent;
    FName UnFlippedEvent;
    FName ForcePlayerAttach;
    FName ForcePlayerAttachComplete;
    FName ForcePlayerDetachComplete;
    FName ForcePlayerDetach;
    FName DisablePlayerLock;
    FName EnablePlayerLock;
    FName TogglePlayerLock;
    FName PathID;
    dnArray<FSVehicleAdditionalControlRemapper> AdditionalInputHookControlRemappers;
    dnArray<FName> AdditionalVehicleSpaces;
    dnArray<FSVehiclePart> VehicleParts;
    class AdnRadio* RadioActor;
    dnArray<FSVehicleEvent> VehicleEvents;
    FLOAT ViewDist;
    INT ViewElevationAngle;
    FVector ViewFocusOffset;
    FLOAT ViewFocusVerticalOffset;
    class AActor* ViewActor;
    FLOAT ViewChasePitchRate;
    FLOAT ViewChaseYawRate;
    FLOAT ViewChaseRollRate;
    FLOAT ViewOffsetFadeStartTime;
    FLOAT ViewOffsetFadeRate;
    class AVehicleHeadlightBase* Headlight;
    FLOAT AnimForwardVelocityThreshold;
    FLOAT AnimBackwardVelocityThreshold;
    FName DriverLegsIdleAnim;
    FLOAT VehicleSensorRadius;
    FLOAT VehicleSensorHeight;
    BITFIELD bTeleporting:1 GCC_PACK(4);
    BITFIELD bWantsToExit:1;
    BITFIELD bCanResumeDriving:1;
    INT BlockedByPawnTickStamp GCC_PACK(4);
    FSViewShakeInfo KilledPawnViewShake;
    FSRumbleInfo KilledPawnRumble;
    class AVehicleSensor* MyVehicleSensor;
    dnArray<class AVehicleSpaceBase*> VehicleSpaces;
    INT NumFilledSpaces;
    class AVehicleSpaceBase* CurrentDrivingVehicleSpace;
    BITFIELD obIsFlipped:1 GCC_PACK(4);
    BITFIELD obWasFlipped:1;
    FLOAT oForwardVelocity GCC_PACK(4);
    FLOAT oPreviousForwardVelocity;
    BYTE oVehicleDirection;
    BYTE oPreviousVehicleDirection;
    FLOAT oVehicleNeutralTimer;
    FLOAT oUpness;
    FLOAT oPreviousUpness;
    FRange GravityRange;
    FRange GravityTimestepRange;
    DECLARE_FUNCTION(execRighted);
    DECLARE_FUNCTION(execVehicleDriverCanPickupItem);
    DECLARE_FUNCTION(execVehicleGetDriver);
    DECLARE_FUNCTION(execIsCurrentlyFlipping);
    DECLARE_FUNCTION(execEndBoost);
    DECLARE_FUNCTION(execIsBoosting);
    DECLARE_FUNCTION(execCanBoost);
    DECLARE_FUNCTION(execHasBoost);
    DECLARE_FUNCTION(execTick_InternalNative);
    inline void __fastcall eventGetVehicleNavOrigin(FVector& NavOrigin)
    {
        AVehicleBase_eventGetVehicleNavOrigin_Parms Parms;
        Parms.NavOrigin=NavOrigin;
        ProcessEvent(FindFunctionChecked(DNGAME_GetVehicleNavOrigin), &Parms);
        NavOrigin=Parms.NavOrigin;
    }
    inline FLOAT __fastcall eventGetVehicleFloorHeight()
    {
        AVehicleBase_eventGetVehicleFloorHeight_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNGAME_GetVehicleFloorHeight), &Parms);
        return Parms.ReturnValue;
    }
    inline void __fastcall eventGetVehicleAttackRange(FLOAT& Desired, FLOAT& Min, FLOAT& Max)
    {
        AVehicleBase_eventGetVehicleAttackRange_Parms Parms;
        Parms.Desired=Desired;
        Parms.Min=Min;
        Parms.Max=Max;
        ProcessEvent(FindFunctionChecked(DNGAME_GetVehicleAttackRange), &Parms);
        Desired=Parms.Desired;
        Min=Parms.Min;
        Max=Parms.Max;
    }
    inline BITFIELD __fastcall eventHasGroundContact()
    {
        AVehicleBase_eventHasGroundContact_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNGAME_HasGroundContact), &Parms);
        return Parms.ReturnValue;
    }
    inline FLOAT __fastcall eventGetThrottleInput()
    {
        AVehicleBase_eventGetThrottleInput_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNGAME_GetThrottleInput), &Parms);
        return Parms.ReturnValue;
    }
    inline FVector __fastcall eventRotateTo(FVector vectIn)
    {
        AVehicleBase_eventRotateTo_Parms Parms;
        Parms.ReturnValue.Init();
        Parms.vectIn=vectIn;
        ProcessEvent(FindFunctionChecked(DNGAME_RotateTo), &Parms);
        return Parms.ReturnValue;
    }
    inline void __fastcall eventDriverLeft(class AVehicleSpaceBase* Space)
    {
        AVehicleBase_eventDriverLeft_Parms Parms;
        Parms.Space=Space;
        ProcessEvent(FindFunctionChecked(DNGAME_DriverLeft), &Parms);
    }
    inline void __fastcall eventDriverEntered(class AVehicleSpaceBase* Space)
    {
        AVehicleBase_eventDriverEntered_Parms Parms;
        Parms.Space=Space;
        ProcessEvent(FindFunctionChecked(DNGAME_DriverEntered), &Parms);
    }
    inline void __fastcall eventSpaceLeft(class AVehicleSpaceBase* Space)
    {
        AVehicleBase_eventSpaceLeft_Parms Parms;
        Parms.Space=Space;
        ProcessEvent(FindFunctionChecked(DNGAME_SpaceLeft), &Parms);
    }
    inline void __fastcall eventSpaceEntered(class AVehicleSpaceBase* Space)
    {
        AVehicleBase_eventSpaceEntered_Parms Parms;
        Parms.Space=Space;
        ProcessEvent(FindFunctionChecked(DNGAME_SpaceEntered), &Parms);
    }
    DECLARE_CLASS(AVehicleBase,AdnDecoration,0,dnGame)
    NO_DEFAULT_CONSTRUCTOR_START(AVehicleBase)
    NO_DEFAULT_CONSTRUCTOR_INIT(AdditionalInputHookControlRemappers)
    NO_DEFAULT_CONSTRUCTOR_INIT(AdditionalVehicleSpaces)
    NO_DEFAULT_CONSTRUCTOR_INIT(VehicleParts)
    NO_DEFAULT_CONSTRUCTOR_INIT(VehicleEvents)
    NO_DEFAULT_CONSTRUCTOR_INITLAST(VehicleSpaces)
};
// Class VehicleBase exported:
//   Properties size: 420 bytes (3376 total)


//***************************************************************************//
/*	\class AdnCameras
*/
//***************************************************************************//

class DNGAME_API AdnCameras : public AdnDecoration
{
public:
    DECLARE_CLASS(AdnCameras,AdnDecoration,0,dnGame)
    NO_DEFAULT_CONSTRUCTOR(AdnCameras)
};
// Class dnCameras exported:
//   Properties size: 0 bytes (2956 total)


//***************************************************************************//
/*	\class AdnCamera_NativeBase
*/
//***************************************************************************//


struct AdnCamera_NativeBase_eventGetViewRotationOffset_Parms
{
    FRotator ReturnValue;
};
class DNGAME_API AdnCamera_NativeBase : public AdnCameras
{
public:
    FLOAT CameraFOVs[3];
    BITFIELD bActivated:1 GCC_PACK(4);
    FRotator rViewAngles GCC_PACK(4);
    FName ViewBoneName;
    inline FRotator __fastcall eventGetViewRotationOffset()
    {
        AdnCamera_NativeBase_eventGetViewRotationOffset_Parms Parms;
        Parms.ReturnValue.Init();
        ProcessEvent(FindFunctionChecked(DNGAME_GetViewRotationOffset), &Parms);
        return Parms.ReturnValue;
    }
    DECLARE_CLASS(AdnCamera_NativeBase,AdnCameras,0,dnGame)
};
// Class dnCamera_NativeBase exported:
//   Properties size: 32 bytes (2988 total)


//***************************************************************************//
/*	\class AAirHockeyTable_NativeBase
*/
//***************************************************************************//


struct AAirHockeyTable_NativeBase_eventGameWon_Parms
{
    INT PlayerIndex;
};

struct AAirHockeyTable_NativeBase_eventGoalScored_Parms
{
    INT PlayerIndex;
};

struct AAirHockeyTable_NativeBase_eventGetScoreTexture_Parms
{
    INT Index;
    class UBumpShader* ReturnValue;
};
class DNGAME_API AAirHockeyTable_NativeBase : public ADecoration
{
public:
    BITFIELD DebugTable:1 GCC_PACK(4);
    BITFIELD DebugPuck:1;
    BITFIELD DebugPaddles:1;
    BITFIELD DebugCollision:1;
    INT WinningScore GCC_PACK(4);
    FLOAT ChanceScoreAnim;
    FSTable Table;
    FVector WorldSpaceOrigin;
    FSTableCollision TableCollision;
    FSSimpleRB Paddle1RB;
    FSSimpleRB Paddle2RB;
    FSSimpleRB PuckRB;
    FSColInfo Collision;
    FSPlayer PlayerInfo[2];
    INT Scorer;
    class ADecoration* Puck;
    BITFIELD PuckInPlay:1 GCC_PACK(4);
    FLOAT PaddlePuckRadius GCC_PACK(4);
    FLOAT PaddlePuckRadiusSq;
    FLOAT MaxPuckSpeedSq;
    FName PuckPaddleSoundName;
    FName PuckTableSoundName;
    FName ScoreSoundName;
    DECLARE_FUNCTION(execCalcShot);
    DECLARE_FUNCTION(execRemovePuckFromPlay);
    DECLARE_FUNCTION(execSetPuckInPlay);
    DECLARE_FUNCTION(execGrabPuck);
    DECLARE_FUNCTION(execPlayerLeft);
    DECLARE_FUNCTION(execPlayerJoined);
    DECLARE_FUNCTION(execTickTable);
    DECLARE_FUNCTION(execInitTable);
    inline void __fastcall eventGameWon(INT PlayerIndex)
    {
        AAirHockeyTable_NativeBase_eventGameWon_Parms Parms;
        Parms.PlayerIndex=PlayerIndex;
        ProcessEvent(FindFunctionChecked(DNGAME_GameWon), &Parms);
    }
    inline void __fastcall eventGoalScored(INT PlayerIndex)
    {
        AAirHockeyTable_NativeBase_eventGoalScored_Parms Parms;
        Parms.PlayerIndex=PlayerIndex;
        ProcessEvent(FindFunctionChecked(DNGAME_GoalScored), &Parms);
    }
    inline void __fastcall eventStartPlay()
    {
        ProcessEvent(FindFunctionChecked(DNGAME_StartPlay), NULL);
    }
    inline class UBumpShader* __fastcall eventGetScoreTexture(INT Index)
    {
        AAirHockeyTable_NativeBase_eventGetScoreTexture_Parms Parms;
        Parms.ReturnValue=0;
        Parms.Index=Index;
        ProcessEvent(FindFunctionChecked(DNGAME_GetScoreTexture), &Parms);
        return Parms.ReturnValue;
    }
    DECLARE_CLASS(AAirHockeyTable_NativeBase,ADecoration,0,dnGame)
};
// Class AirHockeyTable_NativeBase exported:
//   Properties size: 520 bytes (2944 total)


//***************************************************************************//
/*	\class ADoorMoverEx_Sliding_NativeBase
*/
//***************************************************************************//

class DNGAME_API ADoorMoverEx_Sliding_NativeBase : public ADoorMoverEx
{
public:
    BYTE SlideDir;
    FVector SlideCustomDir;
    FLOAT SlideDistance;
    DECLARE_CLASS(ADoorMoverEx_Sliding_NativeBase,ADoorMoverEx,0,dnGame)
};
// Class DoorMoverEx_Sliding_NativeBase exported:
//   Properties size: 20 bytes (2668 total)


//***************************************************************************//
/*	\class ADoorMoverEx_Rotating_NativeBase
*/
//***************************************************************************//

class DNGAME_API ADoorMoverEx_Rotating_NativeBase : public ADoorMoverEx
{
public:
    BYTE DoorOpenAnimStyle;
    INT RotateDistance;
    BYTE RotateDirection;
    INT RotateRate;
    INT KickedRotateRate;
    BYTE PivotLocation;
    FLOAT PivotOffset;
    FLOAT PivotInset;
    FName HandActionOutward;
    FName HandActionInward;
    FName HandActionPound;
    class ANavVolume* NavDoorOut;
    class ANavVolume* NavDoorIn;
    INT LastRotateDir;
    BITFIELD bNoMeleeOpen:1 GCC_PACK(4);
    DECLARE_FUNCTION(execCalculateExtraOffset);
    DECLARE_FUNCTION(execCalculateDoorPivotOffset);
    DECLARE_CLASS(ADoorMoverEx_Rotating_NativeBase,ADoorMoverEx,0,dnGame)
};
// Class DoorMoverEx_Rotating_NativeBase exported:
//   Properties size: 60 bytes (2708 total)


//***************************************************************************//
/*	\class AdnDestructibleBuilding
*/
//***************************************************************************//

class DNGAME_API AdnDestructibleBuilding : public ARenderActor
{
public:
    BITFIELD bGibCastShadows:1 GCC_PACK(4);
    class UClass* Definition GCC_PACK(4);
    INT RandomSeed;
    FVector Noise;
    FLOAT SkewXFromY;
    FLOAT SkewXFromZ;
    FLOAT SkewYFromX;
    FLOAT SkewYFromZ;
    FLOAT SkewZFromX;
    FLOAT SkewZFromY;
    FLOAT PartSurvivalChance;
    FLOAT PartCollisionChance;
    BITFIELD bEnableExplosiveDestruction:1 GCC_PACK(4);
    FLOAT ExplosiveDamageRequired GCC_PACK(4);
    BITFIELD bEnableVehicularDestruction:1 GCC_PACK(4);
    FLOAT VehicleVelocityRequired GCC_PACK(4);
    FLOAT DamageRadius;
    dnArray<class AdnDestructibleBuildingPart*> Parts;
    INT EditorRenderDatas;
    class AdnDestructibleBuildingPart* ShellPart;
    DECLARE_FUNCTION(execComputeSpawnInfoForPart);
    DECLARE_CLASS(AdnDestructibleBuilding,ARenderActor,0,dnGame)
    NO_DEFAULT_CONSTRUCTOR_START(AdnDestructibleBuilding)
    NO_DEFAULT_CONSTRUCTOR_INITLAST(Parts)
};
// Class dnDestructibleBuilding exported:
//   Properties size: 96 bytes (1764 total)


//***************************************************************************//
/*	\class AdnMPTuner
*/
//***************************************************************************//

class DNGAME_API AdnMPTuner : public AMultiplayerInfo
{
public:
    FLOAT EgoRecoveryRate;
    DECLARE_FUNCTION(execLoadDevIni);
    DECLARE_CLASS(AdnMPTuner,AMultiplayerInfo,0,dnGame)
};
// Class dnMPTuner exported:
//   Properties size: 4 bytes (1260 total)


//***************************************************************************//
/*	\class AMPGameReplicationInfo
*/
//***************************************************************************//

class DNGAME_API AMPGameReplicationInfo : public AGameReplicationInfo
{
public:
    INT EORCountDownTime;
    INT EORTimeoutTime;
    class AdnTeamInfo* Teams[4];
    INT EORTimeoutMaxTime;
    INT EORCountTime;
    FScriptDelegate __EORComplete__Delegate;
    FScriptDelegate __EORBeep__Delegate;
    FScriptDelegate __EORKillMsgBoxes__Delegate;
    inline void delegateEORKillMsgBoxes()
    {
        ProcessDelegate(DNGAME_EORKillMsgBoxes, &__EORKillMsgBoxes__Delegate, NULL);
    }
    inline void delegateEORBeep()
    {
        ProcessDelegate(DNGAME_EORBeep, &__EORBeep__Delegate, NULL);
    }
    inline void delegateEORComplete()
    {
        ProcessDelegate(DNGAME_EORComplete, &__EORComplete__Delegate, NULL);
    }
    DECLARE_CLASS(AMPGameReplicationInfo,AGameReplicationInfo,0|CLASS_Config,dnGame)
    NO_DEFAULT_CONSTRUCTOR(AMPGameReplicationInfo)
};
// Class MPGameReplicationInfo exported:
//   Properties size: 56 bytes (1896 total)


//***************************************************************************//
/*	\class AdnDeathmatchGameReplicationInfo
*/
//***************************************************************************//

class DNGAME_API AdnDeathmatchGameReplicationInfo : public AMPGameReplicationInfo
{
public:
    INT TimeLimit;
    INT FragLimit;
    INT RoundTimeLimit;
    INT GoalTeamScore;
    INT MinPlayers;
    BITFIELD bOffenseDefenseGame:1 GCC_PACK(4);
    INT OffensiveTeam GCC_PACK(4);
    class AInteractiveActor* Cylinder;
    FLOAT HillCountdown;
    BYTE Team0BabeState;
    BYTE Team1BabeState;
    FLOAT StandingTimeStamp;
    DECLARE_CLASS(AdnDeathmatchGameReplicationInfo,AMPGameReplicationInfo,0|CLASS_Config,dnGame)
    NO_DEFAULT_CONSTRUCTOR(AdnDeathmatchGameReplicationInfo)
};
// Class dnDeathmatchGameReplicationInfo exported:
//   Properties size: 44 bytes (1940 total)


//***************************************************************************//
/*	\class AdnMultiplayer
*/
//***************************************************************************//

class DNGAME_API AdnMultiplayer : public AGameInfo
{
public:
    BITFIELD bOvertime:1 GCC_PACK(4);
    BITFIELD bGameOver:1;
    FLOAT MatchStartTime GCC_PACK(4);
    BYTE eAlone;
    FLOAT RespawnDistance;
    FLOAT MinFromOtherRespawnDistance;
    FLOAT MaxCountDown;
    FLOAT MaxShowWinnerSeconds;
    FStringNoInit savedEndGameReason;
    BITFIELD bEndOfGameRequest:1 GCC_PACK(4);
    class ADukeMultiPlayer* FirstPlayer GCC_PACK(4);
    BYTE GameType;
    BYTE gametypeDLC;
    dnArray<class APlayerStart*> PlayerStarts;
    dnArray<class APlayerPawn*> PlayerPawns;
    BITFIELD bAllowRestart:1 GCC_PACK(4);
    FLOAT MaxFirstLoadWaitTime GCC_PACK(4);
    DECLARE_FUNCTION(execFindPlayerStart);
    inline void __fastcall eventUpdatePlayerStarts()
    {
        ProcessEvent(FindFunctionChecked(DNGAME_UpdatePlayerStarts), NULL);
    }
    DECLARE_CLASS(AdnMultiplayer,AGameInfo,0|CLASS_Config,dnGame)

    // properties that must be constructed special for AdnMultiplayer:
    //       * PlayerStarts
    //       * PlayerPawns

};
// Class dnMultiplayer exported:
//   Properties size: 84 bytes (2456 total)


//***************************************************************************//
/*	\class APlayerProgression
*/
//***************************************************************************//


struct APlayerProgression_eventIncStat_Parms
{
    BYTE Stat;
    INT Delta;
    BITFIELD ReturnValue;
};

struct APlayerProgression_eventAwardExpGain_Parms
{
    INT XPAmount;
    FString reasonTag;
    BITFIELD bIsOverdrive;
};

struct APlayerProgression_eventGetXPPercent_Parms
{
    FLOAT ReturnValue;
};

struct APlayerProgression_eventGetXPForLevel_Parms
{
    INT leveloffset;
    FLOAT ReturnValue;
};

struct APlayerProgression_eventSetCurrentLevel_Parms
{
    INT Level;
};

struct APlayerProgression_eventGetMatchXP_Parms
{
    FLOAT ReturnValue;
};

struct APlayerProgression_eventGetTotalXP_Parms
{
    FLOAT ReturnValue;
};

struct APlayerProgression_eventGetXP_Parms
{
    FLOAT ReturnValue;
};

struct APlayerProgression_eventAwardChallenge_Parms
{
    INT ChallengeIdx;
};

struct APlayerProgression_eventHasChallengeCheck_Parms
{
    INT id;
};
class DNGAME_API APlayerProgression : public AInfo
{
public:
    BITFIELD bDebug:1 GCC_PACK(4);
    FPlayerProgressionMap* StatMap GCC_PACK(4);
    FPlayerChallangeStorage* ChallengeStorage;
    FPlayerChallangeStorage* BackupChallengeStorage;
    dnArray<INT> AwardedChallengesInMatch;
    INT TotalXP;
    INT MatchXP;
    INT ScreenMatchXP;
    INT CurrentLevel;
    INT OverDriveLevel;
    FLOAT OverDriveModifier;
    BITFIELD bSeenOverdriveMsg:1 GCC_PACK(4);
    INT MaxOverDriveLevel GCC_PACK(4);
    BITFIELD bHasLeveled:1 GCC_PACK(4);
    BYTE CurrentGameType GCC_PACK(4);
    INT MultiKillCount;
    FLOAT LastKillTime;
    INT LongestCurrentStreak;
    FLOAT FallingDistance;
    FLOAT InAirStatUpdateTime;
    FLOAT TimeInAir;
    FLOAT LastTimeInAirCheck;
    BITFIELD bFrozenCandidate:1 GCC_PACK(4);
    BITFIELD bShrunkCandidate:1;
    FLOAT SprintStartTime GCC_PACK(4);
    FVector SprintStartLocation;
    FLOAT DuckTime;
    FLOAT JetpackTime;
    BITFIELD bJetpackOn:1 GCC_PACK(4);
    BITFIELD bShrank:1;
    BITFIELD bFroze:1;
    BITFIELD bDrinkingBeer:1;
    class ADukeMultiPlayer* AssistDue GCC_PACK(4);
    class ADukeMultiPlayer* AssistCandidate;
    FLOAT LastFreezeShot;
    FLOAT MinFreezeShotStatTime;
    dnArray<class ADukeMultiPlayer*> HeadshotInstigator;
    FLOAT JumpedOverRPGTime;
    BITFIELD bJumpedOverRPG:1 GCC_PACK(4);
    INT RunningMen GCC_PACK(4);
    BITFIELD bOverkillCandidate:1 GCC_PACK(4);
    BITFIELD bBeerToughness:1;
    FStringNoInit CurrentMapName GCC_PACK(4);
    class AMP_LaserMine* LimboMine;
    BITFIELD bLimbo:1 GCC_PACK(4);
    BITFIELD bDoubleMicrowave:1;
    INT TotalStats[250] GCC_PACK(4);
    INT MatchStats[250];
    FLOAT GroundDistanceUpdateTimeCount;
    FLOAT GroundDistanceUpdateTime;
    FVector GroundDistanceLastLocation;
    FLOAT GroundDistanceSq;
    FLOAT SprintGroundDistanceSq;
    FLOAT LongRangeThreshold;
    INT HTTKSpecialPoints;
    FLOAT GameTypeUpdateTimeCount;
    FLOAT GameTypeUpdateTime;
    dnArray<class ADukeMultiPlayer*> aTeamKill;
    dnArray<class ADukeMultiPlayer*> aKillList;
    BITFIELD bKillEveryoneAwarded:1 GCC_PACK(4);
    BITFIELD bOutOfFuelFall:1;
    FLOAT LandTime GCC_PACK(4);
    BITFIELD bDrunkenJetpackFlying:1 GCC_PACK(4);
    dnArray<FSEnforcerChallenge> EnforcerRocketInfoList GCC_PACK(4);
    FLOAT LastEnforcerTakeDamageTimestamp;
    BYTE Safari[4];
    BYTE Condiments[5];
    INT Dance[4];
    dnArray<class AdnKotHPlayer*> Dancers;
    BITFIELD bDanceComplete:1 GCC_PACK(4);
    INT RPG4 GCC_PACK(4);
    BITFIELD bPipeBombTeamKill:1 GCC_PACK(4);
    class ADukeMultiPlayer* freezer GCC_PACK(4);
    class ADukeMultiPlayer* Shrinker;
    dnArray<FLOAT> RPGAccuracy;
    dnArray<class AProjectile*> RPGFired;
    FLOAT RPGKillTime;
    class ADukeMultiPlayer* LastKiller;
    INT HTTKControlMultikill;
    dnArray<class ADukeMultiPlayer*> AttachedMineOwners;
    BITFIELD bSecretAreaFound:1 GCC_PACK(4);
    BITFIELD bVulnerableToThawKill:1;
    DECLARE_FUNCTION(execDealWithNewChallenges);
    DECLARE_FUNCTION(execIncStat);
    DECLARE_FUNCTION(execCanModifyStats);
    DECLARE_FUNCTION(execCalculateLevel);
    DECLARE_FUNCTION(execCalculateXP);
    DECLARE_FUNCTION(execSaveOverdriveInfo);
    DECLARE_FUNCTION(execLoadPlayerProgression);
    DECLARE_FUNCTION(execSavePlayerProgression);
    DECLARE_FUNCTION(execDebugUnlockChallenge);
    DECLARE_FUNCTION(execDumpChallengeStorage);
    DECLARE_FUNCTION(execGetAllChallengeID);
    DECLARE_FUNCTION(execGetChallengeIDFromStorage);
    DECLARE_FUNCTION(execHandleBackupStorage);
    DECLARE_FUNCTION(execCreateBackupStorage);
    DECLARE_FUNCTION(execSetChallengeStatus);
    DECLARE_FUNCTION(execGetChallengeXP);
    DECLARE_FUNCTION(execGetChallengeStatusByIdx);
    DECLARE_FUNCTION(execGetChallengeStatus);
    DECLARE_FUNCTION(execIsChallengeUnlocked);
    DECLARE_FUNCTION(execCheckChallengeByEnumByte);
    DECLARE_FUNCTION(execCheckChallengeByEnum);
    DECLARE_FUNCTION(execCheckChallenge);
    DECLARE_FUNCTION(execCreateStatMap);
    DECLARE_FUNCTION(execSetChallengeComplete);
    DECLARE_FUNCTION(execServerAwardChallenge);
    inline void __fastcall eventStat_StoppedSprinting()
    {
        ProcessEvent(FindFunctionChecked(DNGAME_Stat_StoppedSprinting), NULL);
    }
    inline BITFIELD __fastcall eventIncStat(BYTE Stat, INT Delta)
    {
        APlayerProgression_eventIncStat_Parms Parms;
        Parms.ReturnValue=0;
        Parms.Stat=Stat;
        Parms.Delta=Delta;
        ProcessEvent(FindFunctionChecked(DNGAME_IncStat), &Parms);
        return Parms.ReturnValue;
    }
    inline void __fastcall eventAwardExpGain(INT XPAmount, const FString& reasonTag, BITFIELD bIsOverdrive)
    {
        APlayerProgression_eventAwardExpGain_Parms Parms;
        Parms.XPAmount=XPAmount;
        Parms.reasonTag=reasonTag;
        Parms.bIsOverdrive=bIsOverdrive;
        ProcessEvent(FindFunctionChecked(DNGAME_AwardExpGain), &Parms);
    }
    inline void __fastcall eventAwardLevelUp()
    {
        ProcessEvent(FindFunctionChecked(DNGAME_AwardLevelUp), NULL);
    }
    inline FLOAT __fastcall eventGetXPPercent()
    {
        APlayerProgression_eventGetXPPercent_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNGAME_GetXPPercent), &Parms);
        return Parms.ReturnValue;
    }
    inline FLOAT __fastcall eventGetXPForLevel(INT leveloffset)
    {
        APlayerProgression_eventGetXPForLevel_Parms Parms;
        Parms.ReturnValue=0;
        Parms.leveloffset=leveloffset;
        ProcessEvent(FindFunctionChecked(DNGAME_GetXPForLevel), &Parms);
        return Parms.ReturnValue;
    }
    inline void __fastcall eventSetCurrentLevel(INT Level)
    {
        APlayerProgression_eventSetCurrentLevel_Parms Parms;
        Parms.Level=Level;
        ProcessEvent(FindFunctionChecked(DNGAME_SetCurrentLevel), &Parms);
    }
    inline FLOAT __fastcall eventGetMatchXP()
    {
        APlayerProgression_eventGetMatchXP_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNGAME_GetMatchXP), &Parms);
        return Parms.ReturnValue;
    }
    inline FLOAT __fastcall eventGetTotalXP()
    {
        APlayerProgression_eventGetTotalXP_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNGAME_GetTotalXP), &Parms);
        return Parms.ReturnValue;
    }
    inline FLOAT __fastcall eventGetXP()
    {
        APlayerProgression_eventGetXP_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNGAME_GetXP), &Parms);
        return Parms.ReturnValue;
    }
    inline void __fastcall eventAwardChallenge(INT ChallengeIdx)
    {
        APlayerProgression_eventAwardChallenge_Parms Parms;
        Parms.ChallengeIdx=ChallengeIdx;
        ProcessEvent(FindFunctionChecked(DNGAME_AwardChallenge), &Parms);
    }
    inline void __fastcall eventHasChallengeCheck(INT id)
    {
        APlayerProgression_eventHasChallengeCheck_Parms Parms;
        Parms.id=id;
        ProcessEvent(FindFunctionChecked(DNGAME_HasChallengeCheck), &Parms);
    }
    inline void __fastcall eventPostProgressionLoad()
    {
        ProcessEvent(FindFunctionChecked(DNGAME_PostProgressionLoad), NULL);
    }
    DECLARE_CLASS_NO_DESTRUCTOR(APlayerProgression,AInfo,0|CLASS_Config|CLASS_NativeReplication|CLASS_NativeDestructor,dnGame)
    NO_DEFAULT_CONSTRUCTOR_START(APlayerProgression)
    NO_DEFAULT_CONSTRUCTOR_INIT(AwardedChallengesInMatch)
    NO_DEFAULT_CONSTRUCTOR_INIT(HeadshotInstigator)
    NO_DEFAULT_CONSTRUCTOR_INIT(aTeamKill)
    NO_DEFAULT_CONSTRUCTOR_INIT(aKillList)
    NO_DEFAULT_CONSTRUCTOR_INIT(EnforcerRocketInfoList)
    NO_DEFAULT_CONSTRUCTOR_INIT(Dancers)
    NO_DEFAULT_CONSTRUCTOR_INIT(RPGAccuracy)
    NO_DEFAULT_CONSTRUCTOR_INIT(RPGFired)
    NO_DEFAULT_CONSTRUCTOR_INITLAST(AttachedMineOwners)
};
// Class PlayerProgression exported:
//   Properties size: 2400 bytes (3588 total)


//***************************************************************************//
/*	\class AdnTeamInfo
*/
//***************************************************************************//

class DNGAME_API AdnTeamInfo : public AInfo
{
public:
    FStringNoInit TeamName;
    INT Size;
    INT Score;
    INT TeamIndex;
    class UClass* GameInfoClass;
    DECLARE_CLASS(AdnTeamInfo,AInfo,0,dnGame)
    NO_DEFAULT_CONSTRUCTOR(AdnTeamInfo)
};
// Class dnTeamInfo exported:
//   Properties size: 28 bytes (1216 total)


//***************************************************************************//
/*	\class ADecalBomb
*/
//***************************************************************************//


struct ADecalBomb_eventCustomInitDefaults_Parms
{
    class AActor* inOwner;
};
class DNGAME_API ADecalBomb : public AInfo
{
public:
    INT RandomSeed;
    BITFIELD bDestroyAfterDeploy:1 GCC_PACK(4);
    BITFIELD bRandomRotation:1;
    BITFIELD bRandomFlipX:1;
    BITFIELD bRandomFlipY:1;
    BITFIELD bInstantSpawn:1;
    BITFIELD bTriggeredSpawn:1;
    BITFIELD bAutoAlignToSurface:1;
    BITFIELD bCopyOwnerToDecal:1;
    BITFIELD bDecalIgnoreOwner:1;
    BITFIELD bScaleByOwner:1;
    BYTE DecalTextureType GCC_PACK(4);
    INT TraceNum;
    INT TraceNumVariance;
    FRotator TraceRotationVariance;
    FLOAT MinSpawnDistance;
    FLOAT MaxTraceDistance;
    FLOAT MaxViewDistance;
    FLOAT FadeOutStart;
    FLOAT DecalSize;
    FLOAT DecalSizeVariance;
    FLOAT DecalLength;
    dnArray<class UMaterialEx*> Decals;
    FLOAT DecalLifespan;
    FLOAT BehaviorArgument;
    BYTE Behavior;
    FSTraceFlags TraceFlags;
    BITFIELD bDecalIgnorePawn:1 GCC_PACK(4);
    class UClass* DecalClass GCC_PACK(4);
    DECLARE_FUNCTION(execStaticDeploy);
    inline void __fastcall eventCustomInitDefaults(class AActor* inOwner)
    {
        ADecalBomb_eventCustomInitDefaults_Parms Parms;
        Parms.inOwner=inOwner;
        ProcessEvent(FindFunctionChecked(DNGAME_CustomInitDefaults), &Parms);
    }
    DECLARE_CLASS(ADecalBomb,AInfo,0,dnGame)
    NO_DEFAULT_CONSTRUCTOR_START(ADecalBomb)
    NO_DEFAULT_CONSTRUCTOR_INITLAST(Decals)
};
// Class DecalBomb exported:
//   Properties size: 96 bytes (1284 total)


//***************************************************************************//
/*	\class ATriggerHint_UseJetpack
*/
//***************************************************************************//

class DNGAME_API ATriggerHint_UseJetpack : public ATriggerHint
{
public:
    FStringNoInit ControllerMessage;
    FStringNoInit KeyboardMessage;
    DECLARE_CLASS(ATriggerHint_UseJetpack,ATriggerHint,0,dnGame)
};
// Class TriggerHint_UseJetpack exported:
//   Properties size: 24 bytes (1272 total)


//***************************************************************************//
/*	\class AdnControlRemapperEx
*/
//***************************************************************************//

class DNGAME_API AdnControlRemapperEx : public AControlRemapperEx
{
public:
    DECLARE_CLASS(AdnControlRemapperEx,AControlRemapperEx,0,dnGame)
    NO_DEFAULT_CONSTRUCTOR(AdnControlRemapperEx)
};
// Class dnControlRemapperEx exported:
//   Properties size: 0 bytes (1732 total)


//***************************************************************************//
/*	\class AdnHUDEffects
*/
//***************************************************************************//


struct AdnHUDEffects_eventInRangeCallback_Parms
{
    class APlayerPawn* Player;
};
class DNGAME_API AdnHUDEffects : public AHUDEffects
{
public:
    BITFIELD bEnabled:1 GCC_PACK(4);
    BITFIELD bDestroyWhenEmpty:1;
    BITFIELD bNoApplyUnderwater:1;
    BITFIELD bIgnoreLimit:1;
    BITFIELD bAttachLocalPlayerPawn:1;
    FLOAT EffectRadius GCC_PACK(4);
    FLOAT EffectViewAngleFull;
    FLOAT EffectViewAngleNone;
    FLOAT ExecuteThrottle;
    BYTE FalloffStyle;
    FName EffectName;
    FName RestartTag;
    FName StopTag;
    FName RemoveTag;
    FLOAT RemoveTime;
    FLOAT RemoveTimeVariance;
    FName ToggleTag;
    FName RefreshTag;
    INT SpawnCount;
    INT SpawnCountVariance;
    FLOAT SpawnDuration;
    FLOAT SpawnDurationVariance;
    FLOAT SpawnPeriod;
    FLOAT SpawnPeriodVariance;
    FLOAT Lifetime;
    FLOAT LifetimeVariance;
    FLOAT UnderwaterTimescale;
    BITFIELD bFullScreen:1 GCC_PACK(4);
    BITFIELD bCenter:1;
    BITFIELD bInverse:1;
    BITFIELD bMaintainAspectRatio:1;
    BITFIELD bTiled:1;
    BITFIELD bFlipInMirrorMode:1;
    dnArray<class UMaterialEx*> Textures GCC_PACK(4);
    BITFIELD bUseAlphaRamp:1 GCC_PACK(4);
    BITFIELD bSharedAlphaVariance:1;
    FLOAT AlphaStart GCC_PACK(4);
    FLOAT AlphaStartVariance;
    FLOAT AlphaMid;
    FLOAT AlphaMidVariance;
    FLOAT AlphaEnd;
    FLOAT AlphaEndVariance;
    FLOAT AlphaRampMid;
    FLOAT AlphaRampMidVariance;
    FLOAT bUseViewportDims;
    FLOAT EffectDrawScale;
    FLOAT EffectDrawScaleVariance;
    BITFIELD bUseScaleXRamp:1 GCC_PACK(4);
    BITFIELD bSharedScaleXVariance:1;
    FLOAT ScaleXStart GCC_PACK(4);
    FLOAT ScaleXStartVariance;
    FLOAT ScaleXMid;
    FLOAT ScaleXMidVariance;
    FLOAT ScaleXEnd;
    FLOAT ScaleXEndVariance;
    FLOAT ScaleXRampMid;
    FLOAT ScaleXRampMidVariance;
    BITFIELD bUseScaleYRamp:1 GCC_PACK(4);
    BITFIELD bSharedScaleYVariance:1;
    FLOAT ScaleYStart GCC_PACK(4);
    FLOAT ScaleYStartVariance;
    FLOAT ScaleYMid;
    FLOAT ScaleYMidVariance;
    FLOAT ScaleYEnd;
    FLOAT ScaleYEndVariance;
    FLOAT ScaleYRampMid;
    FLOAT ScaleYRampMidVariance;
    FLOAT RotationInitial;
    FLOAT RotationInitialVariance;
    FLOAT RotationVelocity;
    FLOAT RotationVelocityVariance;
    FLOAT RotationAcceleration;
    FLOAT RotationAccelerationVariance;
    FLOAT LocationDepth;
    FLOAT LocationDepthScaleFar;
    FLOAT LocationDepthScaleNear;
    FVector LocationInitial;
    FVector LocationInitialVariance;
    FVector VelocityInitial;
    FVector VelocityInitialVariance;
    FVector AccelerationInitial;
    FVector AccelerationInitialVariance;
    BITFIELD bCanExecute:1 GCC_PACK(4);
    FSHUDEffect Effect GCC_PACK(4);
    FSHUDEffect CleanEffect;
    DECLARE_FUNCTION(execGetAngleScale);
    DECLARE_FUNCTION(execGetDistScale);
    DECLARE_FUNCTION(execAttachEffectTo);
    inline void __fastcall eventInRangeCallback(class APlayerPawn* Player)
    {
        AdnHUDEffects_eventInRangeCallback_Parms Parms;
        Parms.Player=Player;
        ProcessEvent(FindFunctionChecked(DNGAME_InRangeCallback), &Parms);
    }
    DECLARE_CLASS(AdnHUDEffects,AHUDEffects,0,dnGame)

    // properties that must be constructed special for AdnHUDEffects:
    //       * Textures
    //       * Effect
    //       * CleanEffect

};
// Class dnHUDEffects exported:
//   Properties size: 876 bytes (2064 total)


//***************************************************************************//
/*	\class AdnHUDEffects_Splatters
*/
//***************************************************************************//

class DNGAME_API AdnHUDEffects_Splatters : public AdnHUDEffects
{
public:
    class UClass* SecondSplatClass;
    class AdnHUDEffects_Splatters* SecondSplat;
    BITFIELD bSecondSplatActive:1 GCC_PACK(4);
    DECLARE_CLASS(AdnHUDEffects_Splatters,AdnHUDEffects,0,dnGame)
    NO_DEFAULT_CONSTRUCTOR(AdnHUDEffects_Splatters)
};
// Class dnHUDEffects_Splatters exported:
//   Properties size: 12 bytes (2076 total)


//***************************************************************************//
/*	\class AdnScreenSplatters
*/
//***************************************************************************//

class DNGAME_API AdnScreenSplatters : public AdnHUDEffects_Splatters
{
public:
    DECLARE_CLASS(AdnScreenSplatters,AdnHUDEffects_Splatters,0,dnGame)
    NO_DEFAULT_CONSTRUCTOR(AdnScreenSplatters)
};
// Class dnScreenSplatters exported:
//   Properties size: 0 bytes (2076 total)


//***************************************************************************//
/*	\class ADukeHUD
*/
//***************************************************************************//


struct ADukeHUD_eventDrawNukeSymbol_Parms
{
    class UCanvas* C;
};

struct ADukeHUD_eventGetStickyBombs_Parms
{
    INT Ammo;
    INT MaxClip;
    BITFIELD ReturnValue;
};

struct ADukeHUD_eventGetTripMines_Parms
{
    INT Ammo;
    INT MaxClip;
    BITFIELD ReturnValue;
};

struct ADukeHUD_eventGetPipeBombs_Parms
{
    INT Ammo;
    INT MaxClip;
    INT bIsActive;
    BITFIELD ReturnValue;
};

struct ADukeHUD_eventDrawMessageArea_Parms
{
    class UCanvas* C;
};

struct ADukeHUD_eventDrawTypingPrompt_Parms
{
    class UCanvas* C;
    BITFIELD bTeam;
};

struct ADukeHUD_eventDrawUseContextInfo_Parms
{
    class UCanvas* C;
    FString Commands;
    FLOAT Alpha;
    INT ReturnValue;
};

struct ADukeHUD_eventDrawWeaponSelect_Parms
{
    class UCanvas* C;
};

struct ADukeHUD_eventDrawDebugHUDs_Parms
{
    class UCanvas* C;
};

struct ADukeHUD_eventPostPostRender_Parms
{
    class UCanvas* C;
};

struct ADukeHUD_eventFirstDraw_Parms
{
    class UCanvas* C;
};
class DNGAME_API ADukeHUD : public AHUD
{
public:
    class APawn* PawnOwner;
    FLOAT OldClipX;
    FLOAT OldClipY;
    BITFIELD bHideHUD:1 GCC_PACK(4);
    BITFIELD bNoDraw:1;
    FColor TextColor GCC_PACK(4);
    FColor HUDColor;
    FColor TextAltColor;
    dnArray<FHUDLocalizedMessage> MessageQueue;
    FLOAT HUDTimeSeconds;
    BITFIELD bTitleDisplayed:1 GCC_PACK(4);
    class UMaterialEx* TitleBackgroundMaterial GCC_PACK(4);
    FLOAT TitleBackgroundPadding;
    FLOAT DesiredIndexTop;
    FLOAT RootIndexTop;
    FLOAT IndexTop;
    FLOAT IndexBottom;
    FLOAT IndexAdjust;
    INT ItemSpace;
    class AInteractiveActor* OldLookActor;
    class AInteractiveActor* LookActor;
    FLOAT LookPopoutTimer;
    INT UseInfoPosition;
    FLOAT StaticTime;
    FLOAT StaticLength;
    FLOAT CursorTime;
    BITFIELD TypingCursor:1 GCC_PACK(4);
    dnArray<class UMaterialEx*> CrosshairTextures GCC_PACK(4);
    FLOAT CrosshairAlpha;
    BITFIELD bCrossHairColorSet:1 GCC_PACK(4);
    BITFIELD bNotFirstDraw:1;
    FLOAT TitleBarYPos GCC_PACK(4);
    FLOAT TitleBarHeight;
    FLOAT TitleBarTextYPos;
    FStringNoInit CheckpointMessage;
    FStringNoInit WritingCheckpointMessage;
    FStringNoInit ThrowMessage;
    FStringNoInit DropMessage;
    class AInventory* OldSelectedItem;
    class UTexture* InventorySplash;
    class UTexture* InventoryDpadSplash;
    class UTexture* InventoryTex[5];
    class UTexture* InventoryActiveTex[5];
    BYTE LastDpadDown;
    FLOAT LastDpadTime;
    class UTexture* InfinityIcon;
    FName DukeVisionInventoryName;
    FName HoloDukeInventoryName;
    FName SteroidsInventoryName;
    FName BeerInventoryName;
    FName JetpackInventoryName;
    FLOAT HoloDukeSpawnFailedTimer;
    class UTexture* HoloDukeSpawnFailedTex;
    FLOAT WeaponChangeTime;
    class AWeapon* WeaponChangedTo;
    dnArray<class UClass*> QuickWeaponList;
    dnArray<class AdnGrenade*> ActivePipeBombs;
    class UMaterialEx* WeaponAmmoBackdrop;
    class UMaterialEx* WeaponAmmoDirtyOverlay;
    class UMaterialEx* WeaponAmmoPipeBomb;
    class UMaterialEx* WeaponAmmoTripMine;
    class UMaterialEx* WeaponAmmoStickyBomb;
    class UClass* StickyBombClass;
    class AWeapon* LastWeaponDrawn;
    FLOAT FadeStartTime;
    FLOAT HUDAlpha;
    FLOAT FadeTotalTime;
    FLOAT HUDPersistTime;
    BITFIELD bFading:1 GCC_PACK(4);
    BITFIELD bActive:1;
    FLOAT EgoBarBaseWidth GCC_PACK(4);
    FLOAT EgoGhostPCT;
    FLOAT EgoGhostFadeDelay;
    FLOAT EgoGhostFadeRate;
    FLOAT LastFrameEgoPCT;
    FLOAT LastFrameEgoCap;
    FLOAT EgoCapIncreaseFlashVal;
    FLOAT EgoCapIncreaseAmount;
    FStringNoInit MaxEgoCapHintMessage;
    FStringNoInit MaxEgoCapMessage;
    FStringNoInit MaxEgoCapAcheivedMessage;
    FColor EgoBarColor;
    FColor EgoBarMaxColor;
    FColor EgoBarRedColor;
    class UMaterialEx* EgoBackdrop;
    class UMaterialEx* EgoBar;
    class UMaterialEx* EgoBarFill;
    FVector2D EgoHudUpperLeft;
    FVector2D EgoBackdropOffset;
    FVector2D EgoTextOffset;
    FVector2D EgoBarHaloOffset;
    FVector2D EgoBarBorderOffset;
    FVector2D EgoBarFillOffset;
    FSquareRegion EgoBarHaloRegion[3];
    FSquareRegion EgoBarBorderRegion[3];
    FVector2D BossTextOffset;
    FVector2D BossBarHaloOffset;
    FVector2D BossBarBorderOffset;
    FVector2D BossBarFillOffset;
    FStringNoInit EgoMeterText;
    FStringNoInit BossMeterText;
    FStringNoInit TemperatureText;
    class UMaterialEx* BoostMeter;
    FLOAT BoostWarnPCT;
    FLOAT BoostWarnPCT2nd;
    FColor BoostWarnYellow;
    FColor BoostWarnOrange;
    FColor BoostWarnRed;
    FLOAT BreathAlpha;
    class UMaterialEx* BlackTexture;
    class UMaterialEx* WhiteTexture;
    dnArray<FSClassPackageEntry> QuickWeaponListClassNames;
    dnArray<class AActor*> OverlayList;
    INT NumHUDEffects;
    INT MaxHUDEffects;
    dnArray<FSHUDEffect> HUDEffects;
    class UMaterialEx* FilmGrainVignetteMaterial;
    class UTexScaler* FilmGrainVignetteTexScaler;
    FName DukeVisionBlackHackHUDEffectName;
    BITFIELD bDrawBounds:1 GCC_PACK(4);
    BITFIELD bDrawCyl:1;
    BITFIELD bDrawDebugHUD:1;
    BITFIELD bDrawCoordsHUD:1;
    BITFIELD bDrawDebugAIHUD:1;
    BITFIELD bDrawDebugAnimHUD:1;
    BITFIELD bDrawDamageDebugHUD:1;
    BITFIELD bDrawWeapDebugHUD:1;
    BITFIELD bDrawNetWeapDebugHUD:1;
    BITFIELD bDrawNetPlayerDebugHUD:1;
    BITFIELD bDrawScaleModDebugHUD:1;
    BITFIELD bDrawActorDebugHUD:1;
    BITFIELD bDrawKarmaDebugHUD:1;
    BITFIELD bDrawVehicleDebugHUD:1;
    BITFIELD bDrawDebugBlend:1;
    class UClass* ActorClass GCC_PACK(4);
    FLOAT ActorRadius;
    FName ActorTag;
    FName AnimWatchClassName;
    FName ScaleModDebugHUDGroup;
    BITFIELD bIsSpectator:1 GCC_PACK(4);
    FStringNoInit SpectatorMessage GCC_PACK(4);
    FStringNoInit SpectatorModeMessage;
    FStringNoInit SpectatorViewingMessage;
    BITFIELD bDrawPlayerIcons:1 GCC_PACK(4);
    FLOAT IconSize GCC_PACK(4);
    FLOAT SmallIconSize;
    class USmackerTexture* PanelMap;
    FStringNoInit PanelMapStr;
    class USmackerTexture* PanelStaticSmack;
    FStringNoInit PanelStaticStr;
    BITFIELD bOldUseHelpPanel:1 GCC_PACK(4);
    class UMaterialEx* FrozenOverlay GCC_PACK(4);
    FLOAT GrenadeIndicatorDangerRadius;
    class UMaterialEx* GrenadeIndicatorMaterial;
    FColor GrenadeIndicatorColor;
    dnArray<FSQuestItemHUDInfo> QuestItems;
    FLOAT QuestItemFadeRate;
    FLOAT QuestItemGlowHoldTime;
    FLOAT QuestItemGlowFadeRate;
    dnArray<FSPickupEvent> PickupEvents;
    FLOAT PickupEventLifetime;
    FLOAT PickupEventFadeTime;
    FLOAT PickupEventSpacing;
    FLOAT PickupEventXOffset;
    FLOAT PickupEventYOffset;
    class UMaterialEx* BarBodyMaterial;
    class UMaterialEx* BarCapMaterial;
    class UFont* AmmoCountFont;
    FLOAT AmmoCountOffsetX;
    FLOAT AmmoCountOffsetY;
    FLOAT QuestItemIconFadeTime;
    FSInteractKeyInfo InteractKeyInfo[9];
    FLOAT InteractKeyFadeRate;
    class UMaterialEx* InteractKeyBox;
    FLOAT InteractKeyInfoScaleX;
    FLOAT InteractKeyInfoScaleY;
    FLOAT GamepadInteractKeyInfoScale;
    FLOAT InteractKeyInfoTapDisplacement;
    FLOAT InteractKeyInfoTapRate;
    FLOAT InteractKeyInfoAlphaScale;
    FLOAT InteractKeyInfoTextAlphaScale;
    FLOAT InteractKeyInfoTextHighlight;
    class UTexture* ZoomReticle;
    FLOAT ZoomReticleSize;
    BITFIELD bDrawBossMeter:1 GCC_PACK(4);
    class ARenderActor* BossMeterActor GCC_PACK(4);
    FLOAT PrevBossHealthPct;
    FLOAT BossMeterAlpha;
    class UMaterialEx* BossMeterAtlas;
    FLOAT CrouchEndTime;
    FLOAT CrouchingYOffset;
    class UMaterialEx* CrouchingIcon;
    class UMaterialEx* StandingIcon;
    BITFIELD bIsMetagame:1 GCC_PACK(4);
    FStringNoInit LMBText GCC_PACK(4);
    FStringNoInit RMBText;
    FStringNoInit SPCText;
    FStringNoInit ENTText;
    FStringNoInit MMBText;
    FStringNoInit ShiftText;
    FStringNoInit MWUText;
    FStringNoInit MWDText;
    FStringNoInit UpText;
    FStringNoInit DownText;
    FStringNoInit LeftText;
    FStringNoInit RightText;
    class ATriggerPlayer* BossMeterReference;
    class UTexture* WeaponSelectBackground;
    class UTexture* WeaponSelectBackgroundHighlighted;
    DECLARE_FUNCTION(execDrawStatusTimerHUD);
    DECLARE_FUNCTION(execGetLookActor);
    DECLARE_FUNCTION(execPostRender);
    DECLARE_FUNCTION(execDrawBoostMeter);
    DECLARE_FUNCTION(execAddHudEffect);
    DECLARE_FUNCTION(execInitializeHUDEffect);
    DECLARE_FUNCTION(execTickHUDEffects);
    inline void __fastcall eventUpdateBossName()
    {
        ProcessEvent(FindFunctionChecked(DNGAME_UpdateBossName), NULL);
    }
    inline void __fastcall eventDrawNukeSymbol(class UCanvas* C)
    {
        ADukeHUD_eventDrawNukeSymbol_Parms Parms;
        Parms.C=C;
        ProcessEvent(FindFunctionChecked(DNGAME_DrawNukeSymbol), &Parms);
    }
    inline BITFIELD __fastcall eventGetStickyBombs(INT& Ammo, INT& MaxClip)
    {
        ADukeHUD_eventGetStickyBombs_Parms Parms;
        Parms.ReturnValue=0;
        Parms.Ammo=Ammo;
        Parms.MaxClip=MaxClip;
        ProcessEvent(FindFunctionChecked(DNGAME_GetStickyBombs), &Parms);
        Ammo=Parms.Ammo;
        MaxClip=Parms.MaxClip;
        return Parms.ReturnValue;
    }
    inline BITFIELD __fastcall eventGetTripMines(INT& Ammo, INT& MaxClip)
    {
        ADukeHUD_eventGetTripMines_Parms Parms;
        Parms.ReturnValue=0;
        Parms.Ammo=Ammo;
        Parms.MaxClip=MaxClip;
        ProcessEvent(FindFunctionChecked(DNGAME_GetTripMines), &Parms);
        Ammo=Parms.Ammo;
        MaxClip=Parms.MaxClip;
        return Parms.ReturnValue;
    }
    inline BITFIELD __fastcall eventGetPipeBombs(INT& Ammo, INT& MaxClip, INT& bIsActive)
    {
        ADukeHUD_eventGetPipeBombs_Parms Parms;
        Parms.ReturnValue=0;
        Parms.Ammo=Ammo;
        Parms.MaxClip=MaxClip;
        Parms.bIsActive=bIsActive;
        ProcessEvent(FindFunctionChecked(DNGAME_GetPipeBombs), &Parms);
        Ammo=Parms.Ammo;
        MaxClip=Parms.MaxClip;
        bIsActive=Parms.bIsActive;
        return Parms.ReturnValue;
    }
    inline void __fastcall eventDeactivateHUD()
    {
        ProcessEvent(FindFunctionChecked(DNGAME_DeactivateHUD), NULL);
    }
    inline void __fastcall eventDrawMessageArea(class UCanvas* C)
    {
        ADukeHUD_eventDrawMessageArea_Parms Parms;
        Parms.C=C;
        ProcessEvent(FindFunctionChecked(DNGAME_DrawMessageArea), &Parms);
    }
    inline void __fastcall eventDrawTypingPrompt(class UCanvas* C, BITFIELD bTeam)
    {
        ADukeHUD_eventDrawTypingPrompt_Parms Parms;
        Parms.C=C;
        Parms.bTeam=bTeam;
        ProcessEvent(FindFunctionChecked(DNGAME_DrawTypingPrompt), &Parms);
    }
    inline INT __fastcall eventDrawUseContextInfo(class UCanvas* C, const FString& Commands, FLOAT Alpha)
    {
        ADukeHUD_eventDrawUseContextInfo_Parms Parms;
        Parms.ReturnValue=0;
        Parms.C=C;
        Parms.Commands=Commands;
        Parms.Alpha=Alpha;
        ProcessEvent(FindFunctionChecked(DNGAME_DrawUseContextInfo), &Parms);
        return Parms.ReturnValue;
    }
    inline void __fastcall eventDrawWeaponSelect(class UCanvas* C)
    {
        ADukeHUD_eventDrawWeaponSelect_Parms Parms;
        Parms.C=C;
        ProcessEvent(FindFunctionChecked(DNGAME_DrawWeaponSelect), &Parms);
    }
    inline void __fastcall eventDrawDebugHUDs(class UCanvas* C)
    {
        ADukeHUD_eventDrawDebugHUDs_Parms Parms;
        Parms.C=C;
        ProcessEvent(FindFunctionChecked(DNGAME_DrawDebugHUDs), &Parms);
    }
    inline void __fastcall eventPostPostRender(class UCanvas* C)
    {
        ADukeHUD_eventPostPostRender_Parms Parms;
        Parms.C=C;
        ProcessEvent(FindFunctionChecked(DNGAME_PostPostRender), &Parms);
    }
    inline void __fastcall eventFirstDraw(class UCanvas* C)
    {
        ADukeHUD_eventFirstDraw_Parms Parms;
        Parms.C=C;
        ProcessEvent(FindFunctionChecked(DNGAME_FirstDraw), &Parms);
    }
    DECLARE_CLASS(ADukeHUD,AHUD,0,dnGame)
    NO_DEFAULT_CONSTRUCTOR_START(ADukeHUD)
    NO_DEFAULT_CONSTRUCTOR_INIT(MessageQueue)
    NO_DEFAULT_CONSTRUCTOR_INIT(CrosshairTextures)
    NO_DEFAULT_CONSTRUCTOR_INIT(QuickWeaponList)
    NO_DEFAULT_CONSTRUCTOR_INIT(ActivePipeBombs)
    NO_DEFAULT_CONSTRUCTOR_INIT(QuickWeaponListClassNames)
    NO_DEFAULT_CONSTRUCTOR_INIT(OverlayList)
    NO_DEFAULT_CONSTRUCTOR_INIT(HUDEffects)
    NO_DEFAULT_CONSTRUCTOR_INIT(QuestItems)
    NO_DEFAULT_CONSTRUCTOR_INITLAST(PickupEvents)
};
// Class DukeHUD exported:
//   Properties size: 1824 bytes (10656 total)


//***************************************************************************//
/*	\class AMetagameHUD
*/
//***************************************************************************//


struct AMetagameHUD_eventDrawGameTypeInfoHelper_Parms
{
    class UCanvas* C;
    INT superResult;
    INT ReturnValue;
};

struct AMetagameHUD_eventAddScrollingScoringText_Parms
{
    FString Text;
    FColor C;
};

struct AMetagameHUD_eventAddTeamScrollingScoringText_Parms
{
    FString Text;
    INT Team;
};

struct AMetagameHUD_eventDisplayRotationOnSpot_Parms
{
    class UCanvas* C;
};

struct AMetagameHUD_eventDisplayStatistic_Parms
{
    class UCanvas* C;
};

struct AMetagameHUD_eventGetJetpackFuel_Parms
{
    FLOAT ReturnValue;
};

struct AMetagameHUD_eventGetKeyName_Parms
{
    FString ReturnValue;
};
class DNGAME_API AMetagameHUD : public ADukeHUD
{
public:
    FSquareRegion ClippingRegion;
    BITFIELD bDebugStats:1 GCC_PACK(4);
    dnArray<FString> LatestAchievedStats GCC_PACK(4);
    dnArray<FLOAT> LatestAchievedStatsTime;
    dnArray<FLOAT> LatestAchievedStatsAlpha;
    FLOAT MessageStayTime;
    FStringNoInit OverTimeStr;
    FStringNoInit FireRespawnStr;
    FStringNoInit JumpRespawnStr;
    FStringNoInit RespawnTimeStr;
    FStringNoInit AutoRespawnStr;
    FStringNoInit WaitingForPlayers;
    FStringNoInit BalanceTeams;
    FLOAT WaitingForPlayersYPct;
    FLOAT WaitingForPlayersScale;
    FStringNoInit ExpGainStr;
    FStringNoInit ExpLossStr;
    FStringNoInit ExpTotalStr;
    FStringNoInit LevelGainedStr;
    FStringNoInit ChallengeTitleStr;
    FStringNoInit ItemTitleStr;
    FStringNoInit TeamScoreStr;
    FStringNoInit IndividualScoreStr;
    FStringNoInit CountdownMessage;
    FStringNoInit EndgameWinMessage;
    FStringNoInit EndgameTieMessage;
    FStringNoInit EndgameYouWonMessage;
    FStringNoInit TimeIsUpMessage;
    FStringNoInit TimeWarningMessage;
    FStringNoInit OverdriveStr;
    FStringNoInit LevelLabel;
    FLOAT SizeX;
    FLOAT SizeY;
    FLOAT ExpTotalWidth;
    FLOAT BeginMatchCountdownYPosition;
    FLOAT GUIScale;
    FLOAT UnscaledScoreLeftX;
    FLOAT UnscaledScoreRightX;
    FLOAT UnscaledScoreY;
    FLOAT MinTeamScoreScale;
    FLOAT MaxTeamScoreScale;
    dnArray<FHUDExpScrollingMessage> ScrollingExpText;
    dnArray<FHUDScrollingMessage> ScrollingCombatText;
    dnArray<FHUDScrollingMessage> ChallengeText;
    FHUDScrollingMessage LevelText;
    FHUDScrollingMessage OverdriveText;
    FLOAT LevelYPct;
    FLOAT EXPTotalAlpha;
    BITFIELD bDebugPlayerAnims:1 GCC_PACK(4);
    INT nPlayerAnimsToDebug GCC_PACK(4);
    BITFIELD bDebugBabes:1 GCC_PACK(4);
    BITFIELD bDebugFakeHand:1;
    BITFIELD bDebugRotationOnSpot:1;
    BITFIELD bDebugAIAnims:1;
    FLOAT TimeIsUpDelay GCC_PACK(4);
    FLOAT TimeIsUpMessageDuration;
    FLOAT InvalidTimeUpValue;
    FStringNoInit MsgPrompt;
    FStringNoInit TeamMsgPrompt;
    FLOAT JetPackIconXPct;
    FLOAT JetPackIconYPct;
    FLOAT JetPackIconSizeXPct;
    FLOAT JetPackIconSizeYPct;
    FLOAT FuelXPct;
    FLOAT FuelYPct;
    FLOAT FuelWidthPct;
    FLOAT FuelHeightPct;
    FStringNoInit JetpackFuelLabel;
    class UTexture* JetpackStanding;
    FLOAT FuelRedPct;
    FLOAT FuelYellowPct;
    FLOAT FuelBottomLayerYOffset;
    FLOAT FuelBottomLayerXOffset;
    FLOAT FuelBottomLayerXOffsetEnd;
    dnArray<FString> aDebugLastActiveBlends;
    dnArray<FString> aDebugLastBlockBlends;
    FVector2D PLHudUpperLeft;
    FVector2D PLBackdropOffset;
    FVector2D PLBarHaloOffset;
    FVector2D PLBarBorderOffset;
    FVector2D PLBarFillOffset;
    FLOAT PLBarHeight;
    FColor PLBarColor;
    FColor PLGaugeBkgColor;
    class UTexture* PlayerXPBarAtlas;
    BITFIELD bDebugXPNeeded:1 GCC_PACK(4);
    INT LastRemainingRoundTime GCC_PACK(4);
    FLOAT TimerPulseSpeed;
    class UTexture* TimerBox;
    FLOAT HudTimerScaleX;
    INT LastKnownTeamScore[2];
    FLOAT LastTeamGoal[2];
    FColor TeamColor[4];
    FLOAT TeamGoalSizeChangeTime;
    FLOAT TeamGoalSizeChangeRampTime;
    FLOAT ScoreSize;
    FLOAT JustScoredScoreSize;
    FLOAT ScoreOffset;
    FLOAT BabeOffCenterOffset;
    FLOAT BabeScale;
    FLOAT BabeOffsetY;
    FVector2D PowerupBarPosition;
    FVector2D PowerupBarOffset;
    FVector2D PowerupTextOffset;
    dnArray<FDeathEvent> DeathEvents;
    FLOAT DeathEventIconScale;
    FLOAT DeathEventNameScale;
    FLOAT DeathEventXPosFactor;
    FLOAT DeathEventYPosFactor;
    FLOAT DeathEventSpacing;
    FLOAT DeathEventIconPreAdjust;
    FLOAT DeathEventIconPostAdjust;
    FLOAT DeathEventWaitTime;
    FLOAT DeathEventNoIconGap;
    FVector NamePlateOffset;
    FLOAT IdentifyFadeTime;
    class APawn* IdentifyTarget;
    FColor EnemyColor;
    FColor FriendColor;
    FStringNoInit WarmupPrefixString;
    FLOAT ProgressFadeTime;
    FLOAT EdgeBuffer;
    FColor BorderColor;
    class UTexture* FillTexture;
    FSquareRegion FillRegion;
    FStringNoInit targetScoreString;
    class UFinalBlend* LevelUpHUDEffect;
    class AActor* TraceIdentifyActor;
    DECLARE_FUNCTION(execClipTextN);
    DECLARE_FUNCTION(execTextSize);
    DECLARE_FUNCTION(execTickDisplayMessages);
    DECLARE_FUNCTION(execPreloadLevelUpEffect);
    DECLARE_FUNCTION(execPostRender);
    inline INT __fastcall eventDrawGameTypeInfoHelper(class UCanvas* C, INT superResult)
    {
        AMetagameHUD_eventDrawGameTypeInfoHelper_Parms Parms;
        Parms.ReturnValue=0;
        Parms.C=C;
        Parms.superResult=superResult;
        ProcessEvent(FindFunctionChecked(DNGAME_DrawGameTypeInfoHelper), &Parms);
        return Parms.ReturnValue;
    }
    inline void __fastcall eventAddScrollingScoringText(const FString& Text, FColor C)
    {
        AMetagameHUD_eventAddScrollingScoringText_Parms Parms;
        Parms.Text=Text;
        Parms.C=C;
        ProcessEvent(FindFunctionChecked(DNGAME_AddScrollingScoringText), &Parms);
    }
    inline void __fastcall eventAddTeamScrollingScoringText(const FString& Text, INT Team)
    {
        AMetagameHUD_eventAddTeamScrollingScoringText_Parms Parms;
        Parms.Text=Text;
        Parms.Team=Team;
        ProcessEvent(FindFunctionChecked(DNGAME_AddTeamScrollingScoringText), &Parms);
    }
    inline void __fastcall eventDisplayRotationOnSpot(class UCanvas* C)
    {
        AMetagameHUD_eventDisplayRotationOnSpot_Parms Parms;
        Parms.C=C;
        ProcessEvent(FindFunctionChecked(DNGAME_DisplayRotationOnSpot), &Parms);
    }
    inline void __fastcall eventDisplayStatistic(class UCanvas* C)
    {
        AMetagameHUD_eventDisplayStatistic_Parms Parms;
        Parms.C=C;
        ProcessEvent(FindFunctionChecked(DNGAME_DisplayStatistic), &Parms);
    }
    inline FLOAT __fastcall eventGetJetpackFuel()
    {
        AMetagameHUD_eventGetJetpackFuel_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(DNGAME_GetJetpackFuel), &Parms);
        return Parms.ReturnValue;
    }
    inline FString __fastcall eventGetKeyName()
    {
        AMetagameHUD_eventGetKeyName_Parms Parms;
        ProcessEvent(FindFunctionChecked(DNGAME_GetKeyName), &Parms);
        return Parms.ReturnValue;
    }
    DECLARE_CLASS(AMetagameHUD,ADukeHUD,0|CLASS_Config,dnGame)

    // properties that must be constructed special for AMetagameHUD:
    //       * LatestAchievedStats
    //       * LatestAchievedStatsTime
    //       * LatestAchievedStatsAlpha
    //       * ScrollingExpText
    //       * ScrollingCombatText
    //       * ChallengeText
    //       * aDebugLastActiveBlends
    //       * aDebugLastBlockBlends
    //       * DeathEvents

};
// Class MetagameHUD exported:
//   Properties size: 968 bytes (11624 total)


//***************************************************************************//
/*	\class AdnRadioTower
*/
//***************************************************************************//

class DNGAME_API AdnRadioTower : public AActor
{
public:
    dnArray<FSRadioStationDef> Stations;
    dnArray<FSCustomRadioStation> CustomStations;
    FStringNoInit RadioStatic;
    FLOAT DefaultPauseTime;
    BITFIELD bInitialized:1 GCC_PACK(4);
    dnArray<FSRadioEntryDef> Songs GCC_PACK(4);
    dnArray<FSRadioEntryDef> Commercials;
    dnArray<FSMP3Data> MP3List;
    DECLARE_FUNCTION(execGetStationName);
    DECLARE_FUNCTION(execUntuneStation);
    DECLARE_FUNCTION(execTuneStationByFrequency);
    DECLARE_FUNCTION(execSeekPrevStation);
    DECLARE_FUNCTION(execSeekNextStation);
    DECLARE_FUNCTION(execInitializeTower);
    DECLARE_CLASS(AdnRadioTower,AActor,0,dnGame)

    // properties that must be constructed special for AdnRadioTower:
    //       * Stations
    //       * CustomStations
    //       * Songs
    //       * Commercials
    //       * MP3List

};
// Class dnRadioTower exported:
//   Properties size: 80 bytes (1268 total)


//***************************************************************************//
/*	\class UMeleeDamage
*/
//***************************************************************************//

class DNGAME_API UMeleeDamage : public UTraceDamageType
{
public:
    DECLARE_CLASS(UMeleeDamage,UTraceDamageType,0,dnGame)
    NO_DEFAULT_CONSTRUCTOR(UMeleeDamage)
};
// Class MeleeDamage exported:
//   Properties size: 0 bytes (800 total)


//***************************************************************************//
/*	\class UBulletDamage
*/
//***************************************************************************//

class DNGAME_API UBulletDamage : public UTraceDamageType
{
public:
    DECLARE_CLASS(UBulletDamage,UTraceDamageType,0,dnGame)
    NO_DEFAULT_CONSTRUCTOR(UBulletDamage)
};
// Class BulletDamage exported:
//   Properties size: 0 bytes (800 total)


//***************************************************************************//
/*	\class UDecoActivityRules
*/
//***************************************************************************//


struct UDecoActivityRules_eventCheckRules_Parms
{
    class AdnDecoration* dnDeco;
    BITFIELD ReturnValue;
};
class DNGAME_API UDecoActivityRules : public UObject
{
public:
    BITFIELD bDebugRules:1 GCC_PACK(4);
    DECLARE_FUNCTION(execCheckRulesNative);
    inline BITFIELD __fastcall eventCheckRules(class AdnDecoration* dnDeco)
    {
        UDecoActivityRules_eventCheckRules_Parms Parms;
        Parms.ReturnValue=0;
        Parms.dnDeco=dnDeco;
        ProcessEvent(FindFunctionChecked(DNGAME_CheckRules), &Parms);
        return Parms.ReturnValue;
    }
    DECLARE_CLASS(UDecoActivityRules,UObject,0,dnGame)
};
// Class DecoActivityRules exported:
//   Properties size: 4 bytes (44 total)


//***************************************************************************//
/*	\class UDecoActivityRules_State
*/
//***************************************************************************//

class DNGAME_API UDecoActivityRules_State : public UDecoActivityRules
{
public:
    dnArray<FName> SuccessStates;
    dnArray<FName> FailureStates;
    DECLARE_CLASS(UDecoActivityRules_State,UDecoActivityRules,0,dnGame)

    // properties that must be constructed special for UDecoActivityRules_State:
    //       * SuccessStates
    //       * FailureStates

};
// Class DecoActivityRules_State exported:
//   Properties size: 24 bytes (68 total)


//***************************************************************************//
/*	\class UDecoActivityRules_Physics
*/
//***************************************************************************//

class DNGAME_API UDecoActivityRules_Physics : public UDecoActivityRules
{
public:
    BYTE VelocitySizeComparison;
    FLOAT VelocitySizeValue;
    DECLARE_CLASS(UDecoActivityRules_Physics,UDecoActivityRules,0,dnGame)
};
// Class DecoActivityRules_Physics exported:
//   Properties size: 8 bytes (52 total)


//***************************************************************************//
/*	\class UDecoActivityRules_HealthCheck
*/
//***************************************************************************//

class DNGAME_API UDecoActivityRules_HealthCheck : public UDecoActivityRules
{
public:
    BYTE HealthCheckStyle;
    INT HealthMin;
    INT HealthMax;
    BITFIELD bHealthIsPercent:1 GCC_PACK(4);
    DECLARE_CLASS(UDecoActivityRules_HealthCheck,UDecoActivityRules,0,dnGame)
};
// Class DecoActivityRules_HealthCheck exported:
//   Properties size: 16 bytes (60 total)


//***************************************************************************//
/*	\class UDecoActivityRules_Animation
*/
//***************************************************************************//

class DNGAME_API UDecoActivityRules_Animation : public UDecoActivityRules
{
public:
    BITFIELD bAnyAnimFails:1 GCC_PACK(4);
    dnArray<INT> Channels GCC_PACK(4);
    dnArray<FName> AnimExists_Fail;
    dnArray<FName> AnimExists_Succeed;
    DECLARE_CLASS(UDecoActivityRules_Animation,UDecoActivityRules,0,dnGame)

    // properties that must be constructed special for UDecoActivityRules_Animation:
    //       * Channels
    //       * AnimExists_Fail
    //       * AnimExists_Succeed

};
// Class DecoActivityRules_Animation exported:
//   Properties size: 40 bytes (84 total)


//***************************************************************************//
/*	\class UDecoActivities
*/
//***************************************************************************//


struct UDecoActivities_eventExecuteActivity_Parms
{
    class AdnDecoration* dnDeco;
    class APawn* EventInstigator;
};
class DNGAME_API UDecoActivities : public UObject
{
public:
    BITFIELD bDebugActivity:1 GCC_PACK(4);
    BITFIELD bExecuteOnClient:1;
    DECLARE_FUNCTION(execExecuteNative);
    inline void __fastcall eventExecuteActivity(class AdnDecoration* dnDeco, class APawn* EventInstigator)
    {
        UDecoActivities_eventExecuteActivity_Parms Parms;
        Parms.dnDeco=dnDeco;
        Parms.EventInstigator=EventInstigator;
        ProcessEvent(FindFunctionChecked(DNGAME_ExecuteActivity), &Parms);
    }
    DECLARE_CLASS(UDecoActivities,UObject,0,dnGame)
};
// Class DecoActivities exported:
//   Properties size: 4 bytes (44 total)


//***************************************************************************//
/*	\class UDecoActivities_Ticking
*/
//***************************************************************************//

class DNGAME_API UDecoActivities_Ticking : public UDecoActivities
{
public:
    BYTE bTickOnlyNearbyModifier;
    BYTE bTickOnlyRecentModifier;
    BYTE bTickOnlyZoneRecentModifier;
    BYTE bNoNativeTickModifier;
    BYTE bDumbMeshModifier;
    BITFIELD bModifyTickStyle:1 GCC_PACK(4);
    BYTE NewTickStyle GCC_PACK(4);
    BYTE TimeWarpModifier;
    FLOAT TimeWarpChange;
    DECLARE_CLASS(UDecoActivities_Ticking,UDecoActivities,0,dnGame)
};
// Class DecoActivities_Ticking exported:
//   Properties size: 20 bytes (64 total)


//***************************************************************************//
/*	\class UDecoActivities_Spawn
*/
//***************************************************************************//

class DNGAME_API UDecoActivities_Spawn : public UDecoActivities
{
public:
    dnArray<FSMountedActorPrefab> MountedSpawns;
    dnArray<FSSpawnActorPrefab> MotionSpawns;
    dnArray<class UClass*> SimpleSpawns;
    DECLARE_CLASS(UDecoActivities_Spawn,UDecoActivities,0,dnGame)

    // properties that must be constructed special for UDecoActivities_Spawn:
    //       * MountedSpawns
    //       * MotionSpawns
    //       * SimpleSpawns

};
// Class DecoActivities_Spawn exported:
//   Properties size: 36 bytes (80 total)


//***************************************************************************//
/*	\class UDecoActivities_Sound
*/
//***************************************************************************//

class DNGAME_API UDecoActivities_Sound : public UDecoActivities
{
public:
    dnArray<BYTE> SoundStopSlots;
    dnArray<BYTE> SoundStopRules;
    dnArray<FName> SoundNames;
    FSSoundInfo SoundNormal;
    FSAmbientSoundInfo SoundAmbient;
    BITFIELD bClearAmbientSound:1 GCC_PACK(4);
    DECLARE_CLASS(UDecoActivities_Sound,UDecoActivities,0,dnGame)

    // properties that must be constructed special for UDecoActivities_Sound:
    //       * SoundStopSlots
    //       * SoundStopRules
    //       * SoundNames
    //       * SoundNormal
    //       * SoundAmbient

};
// Class DecoActivities_Sound exported:
//   Properties size: 256 bytes (300 total)


//***************************************************************************//
/*	\class UDecoActivities_RadiusDamage
*/
//***************************************************************************//

class DNGAME_API UDecoActivities_RadiusDamage : public UDecoActivities
{
public:
    BYTE RadiusType;
    INT Damage;
    FLOAT Radius;
    FLOAT DamageFalloffStart;
    class UClass* DamageType;
    FLOAT DirectionAngleLimit;
    FVector DirectionOffset;
    FLOAT PlayerDamageScale;
    BITFIELD bDontScale:1 GCC_PACK(4);
    DECLARE_CLASS(UDecoActivities_RadiusDamage,UDecoActivities,0,dnGame)
};
// Class DecoActivities_RadiusDamage exported:
//   Properties size: 44 bytes (88 total)


//***************************************************************************//
/*	\class UDecoActivities_Physics
*/
//***************************************************************************//

class DNGAME_API UDecoActivities_Physics : public UDecoActivities
{
public:
    BITFIELD PhysicsSet:1 GCC_PACK(4);
    BYTE Physics GCC_PACK(4);
    BITFIELD ThrowPhysicsSet:1 GCC_PACK(4);
    BYTE ThrowPhysics GCC_PACK(4);
    FLOAT Mass;
    FLOAT DensitySet;
    DECLARE_CLASS(UDecoActivities_Physics,UDecoActivities,0,dnGame)
};
// Class DecoActivities_Physics exported:
//   Properties size: 24 bytes (68 total)


//***************************************************************************//
/*	\class UDecoActivities_Keyframes
*/
//***************************************************************************//

class DNGAME_API UDecoActivities_Keyframes : public UDecoActivities
{
public:
    INT TargetLocationIndex;
    BITFIELD bRelativeLocation:1 GCC_PACK(4);
    FSDesiredLocation TargetLocation GCC_PACK(4);
    BITFIELD bCreateTargetRotation:1 GCC_PACK(4);
    BITFIELD bRelativeRotation:1;
    FSDesiredRotationAll TargetRotation GCC_PACK(4);
    INT TargetRotationPitchIndex;
    BITFIELD bRelativeRotationPitch:1 GCC_PACK(4);
    FSDesiredRotationAxis TargetRotationPitch GCC_PACK(4);
    INT TargetRotationYawIndex;
    BITFIELD bRelativeRotationYaw:1 GCC_PACK(4);
    FSDesiredRotationAxis TargetRotationYaw GCC_PACK(4);
    INT TargetRotationRollIndex;
    BITFIELD bRelativeRotationRoll:1 GCC_PACK(4);
    FSDesiredRotationAxis TargetRotationRoll GCC_PACK(4);
    BITFIELD bSetRotationRate:1 GCC_PACK(4);
    FRotator NewRotationRate GCC_PACK(4);
    FLOAT NewRotationRateTimer;
    DECLARE_CLASS(UDecoActivities_Keyframes,UDecoActivities,0,dnGame)
};
// Class DecoActivities_Keyframes exported:
//   Properties size: 528 bytes (572 total)


//***************************************************************************//
/*	\class UDecoActivities_KarmaImpulse
*/
//***************************************************************************//

class DNGAME_API UDecoActivities_KarmaImpulse : public UDecoActivities
{
public:
    BITFIELD UserDirectional:1 GCC_PACK(4);
    FVector UserDirectionalScaler GCC_PACK(4);
    BYTE ImpulseStyle;
    FLOAT ImpulseForce;
    FLOAT ImpulseForceVariance;
    FName ImpulseBone;
    BITFIELD ImpulseOffsetAbsolute:1 GCC_PACK(4);
    FVector ImpulseOffset GCC_PACK(4);
    FVector ImpulseOffsetVariance;
    BITFIELD ImpulseDirectionAbsolute:1 GCC_PACK(4);
    FRotator ImpulseDirection GCC_PACK(4);
    FRotator ImpulseDirectionVariance;
    FLOAT MaxAngularVelocity;
    FLOAT MaxLinearVelocity;
    DECLARE_CLASS(UDecoActivities_KarmaImpulse,UDecoActivities,0,dnGame)
};
// Class DecoActivities_KarmaImpulse exported:
//   Properties size: 96 bytes (140 total)


//***************************************************************************//
/*	\class UDecoActivities_Interaction
*/
//***************************************************************************//

class DNGAME_API UDecoActivities_Interaction : public UDecoActivities
{
public:
    BYTE bUsableModifier;
    BYTE bUseTriggeredModifier;
    BYTE bGrabUsableModifier;
    BYTE bGrabbableModifier;
    BYTE AvoidRangeModifier;
    FLOAT NewAvoidRange;
    BITFIELD bNewStaticInteractionClassification:1 GCC_PACK(4);
    BYTE NewStaticInteractionClassification GCC_PACK(4);
    BITFIELD bNewDynamicInteractionClassification:1 GCC_PACK(4);
    BYTE NewDynamicInteractionClassification GCC_PACK(4);
    DECLARE_CLASS(UDecoActivities_Interaction,UDecoActivities,0,dnGame)
};
// Class DecoActivities_Interaction exported:
//   Properties size: 28 bytes (72 total)


//***************************************************************************//
/*	\class UDecoActivities_HUDInfo
*/
//***************************************************************************//

class DNGAME_API UDecoActivities_HUDInfo : public UDecoActivities
{
public:
    BYTE bEnemyModifier;
    BYTE bForceUsePhraseModifier;
    BYTE bDrawUsePhraseModifier;
    BYTE bNoUseKeyInfoModifier;
    FStringNoInit UsePhrase;
    BYTE UsePhraseModifier;
    FStringNoInit GrabUsePhrase;
    BYTE GrabUsePhraseModifier;
    DECLARE_CLASS(UDecoActivities_HUDInfo,UDecoActivities,0,dnGame)
};
// Class DecoActivities_HUDInfo exported:
//   Properties size: 36 bytes (80 total)


//***************************************************************************//
/*	\class UDecoActivities_CarriedByHealth
*/
//***************************************************************************//

class DNGAME_API UDecoActivities_CarriedByHealth : public UDecoActivities
{
public:
    FLOAT HealAmount;
    FLOAT HealVariance;
    FLOAT HealMaxAmount;
    FLOAT DamageAmount;
    FLOAT DamageVariance;
    class UClass* DamageTypeClass;
    DECLARE_CLASS(UDecoActivities_CarriedByHealth,UDecoActivities,0,dnGame)
};
// Class DecoActivities_CarriedByHealth exported:
//   Properties size: 24 bytes (68 total)


//***************************************************************************//
/*	\class UDecoActivities_HealthChange
*/
//***************************************************************************//

class DNGAME_API UDecoActivities_HealthChange : public UDecoActivities
{
public:
    BITFIELD bForceDestroy:1 GCC_PACK(4);
    FLOAT HealthChange GCC_PACK(4);
    class UClass* DamageType;
    DECLARE_CLASS(UDecoActivities_HealthChange,UDecoActivities,0,dnGame)
};
// Class DecoActivities_HealthChange exported:
//   Properties size: 12 bytes (56 total)


//***************************************************************************//
/*	\class UDecoActivities_Events
*/
//***************************************************************************//

class DNGAME_API UDecoActivities_Events : public UDecoActivities
{
public:
    FName Event;
    BITFIELD EventPrependTag:1 GCC_PACK(4);
    dnArray<FSSafeCallbacks> Callbacks GCC_PACK(4);
    dnArray<FSSafeCallbacks> Callbacks_Always;
    dnArray<FSEndCallbacks> CallbacksEnd;
    dnArray<FSEndCallbacks> CallbacksEnd_Always;
    DECLARE_CLASS(UDecoActivities_Events,UDecoActivities,0,dnGame)

    // properties that must be constructed special for UDecoActivities_Events:
    //       * Callbacks
    //       * Callbacks_Always
    //       * CallbacksEnd
    //       * CallbacksEnd_Always

};
// Class DecoActivities_Events exported:
//   Properties size: 56 bytes (100 total)


//***************************************************************************//
/*	\class UDecoActivities_Display
*/
//***************************************************************************//

class DNGAME_API UDecoActivities_Display : public UDecoActivities
{
public:
    class UObject* RenderObject;
    dnArray<FSUpdateMaterialEx> Skins;
    BYTE bHiddenModifier;
    BYTE MountedHiddenModifier;
    FLOAT DrawScale;
    FLOAT DrawScaleVariance;
    BYTE DrawScaleModifier;
    FVector DrawScale3D;
    FVector DrawScale3DVariance;
    BYTE DrawScale3DModifier;
    DECLARE_CLASS(UDecoActivities_Display,UDecoActivities,0,dnGame)

    // properties that must be constructed special for UDecoActivities_Display:
    //       * Skins

};
// Class DecoActivities_Display exported:
//   Properties size: 60 bytes (104 total)


//***************************************************************************//
/*	\class UDecoActivities_Collision
*/
//***************************************************************************//

class DNGAME_API UDecoActivities_Collision : public UDecoActivities
{
public:
    BYTE bCollideActorsModifier;
    BYTE bCollideWorldModifier;
    BYTE bBlockActorsModifier;
    BYTE bBlockPlayersModifier;
    BYTE bBlockKarmaModifier;
    BYTE bBlockAIModifier;
    BYTE bTraceUsableModifier;
    BYTE bTraceShootableModifier;
    BYTE bCollisionAssumeValidModifier;
    BYTE CollisionRadiusModifier;
    FLOAT CollisionRadiusChange;
    BYTE CollisionHeightModifier;
    FLOAT CollisionHeightChange;
    DECLARE_CLASS(UDecoActivities_Collision,UDecoActivities,0,dnGame)
};
// Class DecoActivities_Collision exported:
//   Properties size: 24 bytes (68 total)


//***************************************************************************//
/*	\class UDecoActivities_Camera
*/
//***************************************************************************//

class DNGAME_API UDecoActivities_Camera : public UDecoActivities
{
public:
    BITFIELD bRestartExisting:1 GCC_PACK(4);
    BITFIELD bUseDecoAsFalloff:1;
    FLOAT FalloffDistance GCC_PACK(4);
    dnArray<FSViewShakeInfo> Shakes;
    dnArray<FName> Removes;
    DECLARE_CLASS(UDecoActivities_Camera,UDecoActivities,0,dnGame)

    // properties that must be constructed special for UDecoActivities_Camera:
    //       * Shakes
    //       * Removes

};
// Class DecoActivities_Camera exported:
//   Properties size: 32 bytes (76 total)


//***************************************************************************//
/*	\class UDecoActivities_AnimationController
*/
//***************************************************************************//

class DNGAME_API UDecoActivities_AnimationController : public UDecoActivities
{
public:
    dnArray<FName> AnimControllerActivities;
    DECLARE_CLASS(UDecoActivities_AnimationController,UDecoActivities,0,dnGame)

    // properties that must be constructed special for UDecoActivities_AnimationController:
    //       * AnimControllerActivities

};
// Class DecoActivities_AnimationController exported:
//   Properties size: 12 bytes (56 total)


//***************************************************************************//
/*	\class UDecoActivities_Animation
*/
//***************************************************************************//

class DNGAME_API UDecoActivities_Animation : public UDecoActivities
{
public:
    BITFIELD bAnimPhysicsMode:1 GCC_PACK(4);
    dnArray<FSAnimInfo> AnimActivities GCC_PACK(4);
    dnArray<INT> StopAnimChannels;
    DECLARE_CLASS(UDecoActivities_Animation,UDecoActivities,0,dnGame)

    // properties that must be constructed special for UDecoActivities_Animation:
    //       * AnimActivities
    //       * StopAnimChannels

};
// Class DecoActivities_Animation exported:
//   Properties size: 28 bytes (72 total)


//***************************************************************************//
/*	\class UDecoActivities_ActorColor
*/
//***************************************************************************//

class DNGAME_API UDecoActivities_ActorColor : public UDecoActivities
{
public:
    dnArray<FSActorColor> ActorColorAssigns;
    dnArray<FName> ActorColorRemoves;
    DECLARE_CLASS(UDecoActivities_ActorColor,UDecoActivities,0,dnGame)

    // properties that must be constructed special for UDecoActivities_ActorColor:
    //       * ActorColorAssigns
    //       * ActorColorRemoves

};
// Class DecoActivities_ActorColor exported:
//   Properties size: 24 bytes (68 total)


//***************************************************************************//
/*	\class UdnDestructibleBuildingDefinition
*/
//***************************************************************************//

class DNGAME_API UdnDestructibleBuildingDefinition : public UObject
{
public:
    dnArray<FSDestructibleBuildingPart> Parts;
    dnArray<FSDestructibleBuildingParticleEffect> ParticleEffects;
    dnArray<FSDestructibleBuildingHUDEffect> HUDEffects;
    FName DestroyedSoundName;
    FSDestructibleBuildingPart ShellPart;
    DECLARE_CLASS(UdnDestructibleBuildingDefinition,UObject,0,dnGame)
    NO_DEFAULT_CONSTRUCTOR_START(UdnDestructibleBuildingDefinition)
    NO_DEFAULT_CONSTRUCTOR_INIT(Parts)
    NO_DEFAULT_CONSTRUCTOR_INIT(ParticleEffects)
    NO_DEFAULT_CONSTRUCTOR_INITLAST(HUDEffects)
};
// Class dnDestructibleBuildingDefinition exported:
//   Properties size: 112 bytes (152 total)

#endif

AUTOGENERATE_FUNCTION(UDecoActivityRules,-1,execCheckRulesNative);
AUTOGENERATE_FUNCTION(UDecoActivities,-1,execExecuteNative);
AUTOGENERATE_FUNCTION(APlayerProgression,-1,execDealWithNewChallenges);
AUTOGENERATE_FUNCTION(APlayerProgression,-1,execIncStat);
AUTOGENERATE_FUNCTION(APlayerProgression,-1,execCanModifyStats);
AUTOGENERATE_FUNCTION(APlayerProgression,-1,execCalculateLevel);
AUTOGENERATE_FUNCTION(APlayerProgression,-1,execCalculateXP);
AUTOGENERATE_FUNCTION(APlayerProgression,-1,execSaveOverdriveInfo);
AUTOGENERATE_FUNCTION(APlayerProgression,-1,execLoadPlayerProgression);
AUTOGENERATE_FUNCTION(APlayerProgression,-1,execSavePlayerProgression);
AUTOGENERATE_FUNCTION(APlayerProgression,-1,execDebugUnlockChallenge);
AUTOGENERATE_FUNCTION(APlayerProgression,-1,execDumpChallengeStorage);
AUTOGENERATE_FUNCTION(APlayerProgression,-1,execGetAllChallengeID);
AUTOGENERATE_FUNCTION(APlayerProgression,-1,execGetChallengeIDFromStorage);
AUTOGENERATE_FUNCTION(APlayerProgression,-1,execHandleBackupStorage);
AUTOGENERATE_FUNCTION(APlayerProgression,-1,execCreateBackupStorage);
AUTOGENERATE_FUNCTION(APlayerProgression,-1,execSetChallengeStatus);
AUTOGENERATE_FUNCTION(APlayerProgression,-1,execGetChallengeXP);
AUTOGENERATE_FUNCTION(APlayerProgression,-1,execGetChallengeStatusByIdx);
AUTOGENERATE_FUNCTION(APlayerProgression,-1,execGetChallengeStatus);
AUTOGENERATE_FUNCTION(APlayerProgression,-1,execIsChallengeUnlocked);
AUTOGENERATE_FUNCTION(APlayerProgression,-1,execCheckChallengeByEnumByte);
AUTOGENERATE_FUNCTION(APlayerProgression,-1,execCheckChallengeByEnum);
AUTOGENERATE_FUNCTION(APlayerProgression,-1,execCheckChallenge);
AUTOGENERATE_FUNCTION(APlayerProgression,-1,execCreateStatMap);
AUTOGENERATE_FUNCTION(APlayerProgression,-1,execSetChallengeComplete);
AUTOGENERATE_FUNCTION(APlayerProgression,-1,execServerAwardChallenge);
AUTOGENERATE_FUNCTION(ADukePlayer,-1,execTickKick);
AUTOGENERATE_FUNCTION(ADukePlayer,-1,execIsDLCCampaignStart);
AUTOGENERATE_FUNCTION(ADukePlayer,-1,execFlushLevelEndConfig);
AUTOGENERATE_FUNCTION(ADukePlayer,-1,execUpdateLevelEndAchievements);
AUTOGENERATE_FUNCTION(ADukePlayer,-1,execGiveFullGameCompletion);
AUTOGENERATE_FUNCTION(ADukePlayer,-1,execHasFullGameCompletion);
AUTOGENERATE_FUNCTION(ADukePlayer,-1,execAddCompletionForLevel);
AUTOGENERATE_FUNCTION(ADukePlayer,-1,execHasCompletionForDLCLevel);
AUTOGENERATE_FUNCTION(ADukePlayer,-1,execHasCompletionForLevel);
AUTOGENERATE_FUNCTION(ADukePlayer,-1,execGetLevelIndexForMapName);
AUTOGENERATE_FUNCTION(ADukePlayer,-1,execClearAllAchievements);
AUTOGENERATE_FUNCTION(ADukePlayer,-1,execAwardAllAchievements);
AUTOGENERATE_FUNCTION(ADukePlayer,-1,execClearAchievement);
AUTOGENERATE_FUNCTION(ADukePlayer,-1,execAwardAchievement);
AUTOGENERATE_FUNCTION(ADukePlayer,-1,execSetMotionBlur);
AUTOGENERATE_FUNCTION(ADukePlayer,-1,execGetProgressFilePath);
AUTOGENERATE_FUNCTION(ADukePlayer,-1,execHasWeapon);
AUTOGENERATE_FUNCTION(ADukePlayer,-1,execCanPickupWeapon);
AUTOGENERATE_FUNCTION(ADukePlayer,-1,execBreakInDebugger);
AUTOGENERATE_FUNCTION(ADukePlayer,-1,execUnlockAllMaps);
AUTOGENERATE_FUNCTION(ADukePlayer,-1,execGivePermanentEgoCapAward);
AUTOGENERATE_FUNCTION(ADukePlayer,-1,execCanSprint);
AUTOGENERATE_FUNCTION(ADukePlayer,-1,execGetWalkSpeed);
AUTOGENERATE_FUNCTION(ADukeMultiPlayer,-1,execTraceFireHit);
AUTOGENERATE_FUNCTION(ADukeMultiPlayer,-1,execNativeUpdateLookHitActor);
AUTOGENERATE_FUNCTION(ADukeMultiPlayer,-1,execHandlePlayerMovePrePhysics);
AUTOGENERATE_FUNCTION(ADukeMultiPlayer,-1,execCanPickupWeapon);
AUTOGENERATE_FUNCTION(ADukeMultiPlayer,-1,execTickTurn);
AUTOGENERATE_FUNCTION(ADukeMultiPlayer,1327,execTickNative);
AUTOGENERATE_FUNCTION(ADukeMultiPlayer,-1,execPlayerCalcView_MPDead);
AUTOGENERATE_FUNCTION(ADukeMultiPlayer,-1,execSetMotionBlur);
AUTOGENERATE_FUNCTION(ADukeMultiPlayer,-1,execCanSprint);
AUTOGENERATE_FUNCTION(AMetagameHUD,-1,execClipTextN);
AUTOGENERATE_FUNCTION(AMetagameHUD,-1,execTextSize);
AUTOGENERATE_FUNCTION(AMetagameHUD,-1,execTickDisplayMessages);
AUTOGENERATE_FUNCTION(AMetagameHUD,-1,execPreloadLevelUpEffect);
AUTOGENERATE_FUNCTION(AMetagameHUD,-1,execPostRender);
AUTOGENERATE_FUNCTION(ADukeHUD,-1,execDrawStatusTimerHUD);
AUTOGENERATE_FUNCTION(ADukeHUD,-1,execGetLookActor);
AUTOGENERATE_FUNCTION(ADukeHUD,-1,execPostRender);
AUTOGENERATE_FUNCTION(ADukeHUD,-1,execDrawBoostMeter);
AUTOGENERATE_FUNCTION(ADukeHUD,-1,execAddHudEffect);
AUTOGENERATE_FUNCTION(ADukeHUD,-1,execInitializeHUDEffect);
AUTOGENERATE_FUNCTION(ADukeHUD,-1,execTickHUDEffects);
AUTOGENERATE_FUNCTION(AdnHUDEffects,-1,execGetAngleScale);
AUTOGENERATE_FUNCTION(AdnHUDEffects,-1,execGetDistScale);
AUTOGENERATE_FUNCTION(AdnHUDEffects,-1,execAttachEffectTo);
AUTOGENERATE_FUNCTION(AdnDecoration,-1,execClientDecoActivity_ExecuteByIndex);
AUTOGENERATE_FUNCTION(AdnDecoration,-1,execDecoActivity_ExecuteElements);
AUTOGENERATE_FUNCTION(AdnDecoration,-1,execDecoAnimPhysics_Stop);
AUTOGENERATE_FUNCTION(AdnDecoration,-1,execDecoAnimPhysics_Start);
AUTOGENERATE_FUNCTION(AdnDecoration,-1,execDecoActivity);
AUTOGENERATE_FUNCTION(AVehicleBase,-1,execRighted);
AUTOGENERATE_FUNCTION(AVehicleBase,-1,execVehicleDriverCanPickupItem);
AUTOGENERATE_FUNCTION(AVehicleBase,-1,execVehicleGetDriver);
AUTOGENERATE_FUNCTION(AVehicleBase,-1,execIsCurrentlyFlipping);
AUTOGENERATE_FUNCTION(AVehicleBase,-1,execEndBoost);
AUTOGENERATE_FUNCTION(AVehicleBase,-1,execIsBoosting);
AUTOGENERATE_FUNCTION(AVehicleBase,-1,execCanBoost);
AUTOGENERATE_FUNCTION(AVehicleBase,-1,execHasBoost);
AUTOGENERATE_FUNCTION(AVehicleBase,-1,execTick_InternalNative);
AUTOGENERATE_FUNCTION(AdnRadioTower,-1,execGetStationName);
AUTOGENERATE_FUNCTION(AdnRadioTower,-1,execUntuneStation);
AUTOGENERATE_FUNCTION(AdnRadioTower,-1,execTuneStationByFrequency);
AUTOGENERATE_FUNCTION(AdnRadioTower,-1,execSeekPrevStation);
AUTOGENERATE_FUNCTION(AdnRadioTower,-1,execSeekNextStation);
AUTOGENERATE_FUNCTION(AdnRadioTower,-1,execInitializeTower);
AUTOGENERATE_FUNCTION(AdnMultiplayer,-1,execFindPlayerStart);
AUTOGENERATE_FUNCTION(ADoorMoverEx_Rotating_NativeBase,-1,execCalculateExtraOffset);
AUTOGENERATE_FUNCTION(ADoorMoverEx_Rotating_NativeBase,-1,execCalculateDoorPivotOffset);
AUTOGENERATE_FUNCTION(AdnDestructibleBuilding,-1,execComputeSpawnInfoForPart);
AUTOGENERATE_FUNCTION(ADecalBomb,-1,execStaticDeploy);
AUTOGENERATE_FUNCTION(AdnMPTuner,-1,execLoadDevIni);
AUTOGENERATE_FUNCTION(AAirHockeyTable_NativeBase,-1,execCalcShot);
AUTOGENERATE_FUNCTION(AAirHockeyTable_NativeBase,-1,execRemovePuckFromPlay);
AUTOGENERATE_FUNCTION(AAirHockeyTable_NativeBase,-1,execSetPuckInPlay);
AUTOGENERATE_FUNCTION(AAirHockeyTable_NativeBase,-1,execGrabPuck);
AUTOGENERATE_FUNCTION(AAirHockeyTable_NativeBase,-1,execPlayerLeft);
AUTOGENERATE_FUNCTION(AAirHockeyTable_NativeBase,-1,execPlayerJoined);
AUTOGENERATE_FUNCTION(AAirHockeyTable_NativeBase,-1,execTickTable);
AUTOGENERATE_FUNCTION(AAirHockeyTable_NativeBase,-1,execInitTable);

#ifndef NAMES_ONLY
#undef AUTOGENERATE_NAME
#undef AUTOGENERATE_FUNCTION
#endif // NAMES_ONLY

#if _MSC_VER
#pragma pack (pop)
#elif defined PS3
#pragma pack (pop)
#endif


#ifdef NATIVE_DEFS_ONLY
#if _MSC_VER
#pragma message("*** Including native definitions from dnGame.")
#endif
DECLARE_NATIVE_TYPE(dnGame,UDecoActivityRules_State);
DECLARE_NATIVE_TYPE(dnGame,UDecoActivityRules);
DECLARE_NATIVE_TYPE(dnGame,UDecoActivityRules_Physics);
DECLARE_NATIVE_TYPE(dnGame,UDecoActivityRules_HealthCheck);
DECLARE_NATIVE_TYPE(dnGame,UDecoActivityRules_Animation);
DECLARE_NATIVE_TYPE(dnGame,UDecoActivities_Ticking);
DECLARE_NATIVE_TYPE(dnGame,UDecoActivities);
DECLARE_NATIVE_TYPE(dnGame,UDecoActivities_Spawn);
DECLARE_NATIVE_TYPE(dnGame,UDecoActivities_Sound);
DECLARE_NATIVE_TYPE(dnGame,UDecoActivities_RadiusDamage);
DECLARE_NATIVE_TYPE(dnGame,UDecoActivities_Physics);
DECLARE_NATIVE_TYPE(dnGame,UDecoActivities_Keyframes);
DECLARE_NATIVE_TYPE(dnGame,UDecoActivities_KarmaImpulse);
DECLARE_NATIVE_TYPE(dnGame,UDecoActivities_Interaction);
DECLARE_NATIVE_TYPE(dnGame,UDecoActivities_HUDInfo);
DECLARE_NATIVE_TYPE(dnGame,UDecoActivities_CarriedByHealth);
DECLARE_NATIVE_TYPE(dnGame,UDecoActivities_HealthChange);
DECLARE_NATIVE_TYPE(dnGame,UDecoActivities_Events);
DECLARE_NATIVE_TYPE(dnGame,UDecoActivities_Display);
DECLARE_NATIVE_TYPE(dnGame,UDecoActivities_Collision);
DECLARE_NATIVE_TYPE(dnGame,UDecoActivities_Camera);
DECLARE_NATIVE_TYPE(dnGame,UDecoActivities_AnimationController);
DECLARE_NATIVE_TYPE(dnGame,UDecoActivities_Animation);
DECLARE_NATIVE_TYPE(dnGame,UDecoActivities_ActorColor);
DECLARE_NATIVE_TYPE(dnGame,APlayerProgression);
DECLARE_NATIVE_TYPE(dnGame,AUpgrade_ZoomMode);
DECLARE_NATIVE_TYPE(dnGame,AUpgrade_ViewMode);
DECLARE_NATIVE_TYPE(dnGame,AUpgrade_SOS);
DECLARE_NATIVE_TYPE(dnGame,ADukePlayer);
DECLARE_NATIVE_TYPE(dnGame,ADukeMultiPlayer);
DECLARE_NATIVE_TYPE(dnGame,AMetagameHUD);
DECLARE_NATIVE_TYPE(dnGame,ADukeHUD);
DECLARE_NATIVE_TYPE(dnGame,AdnTeamInfo);
DECLARE_NATIVE_TYPE(dnGame,AdnDeathmatchGameReplicationInfo);
DECLARE_NATIVE_TYPE(dnGame,AMPGameReplicationInfo);
DECLARE_NATIVE_TYPE(dnGame,AdnQuestItem);
DECLARE_NATIVE_TYPE(dnGame,AdnScreenSplatters);
DECLARE_NATIVE_TYPE(dnGame,AdnHUDEffects_Splatters);
DECLARE_NATIVE_TYPE(dnGame,AdnHUDEffects);
DECLARE_NATIVE_TYPE(dnGame,AdnControl);
DECLARE_NATIVE_TYPE(dnGame,AdnUsableSomething);
DECLARE_NATIVE_TYPE(dnGame,AdnDecoration);
DECLARE_NATIVE_TYPE(dnGame,AVehicleSpecialPartBase);
DECLARE_NATIVE_TYPE(dnGame,AVehicleSpaceBase);
DECLARE_NATIVE_TYPE(dnGame,AVehicleBase);
DECLARE_NATIVE_TYPE(dnGame,AdnRadioTower);
DECLARE_NATIVE_TYPE(dnGame,AdnMultiplayer);
DECLARE_NATIVE_TYPE(dnGame,ATriggerHint_UseJetpack);
DECLARE_NATIVE_TYPE(dnGame,AdnControlRemapperEx);
DECLARE_NATIVE_TYPE(dnGame,UMeleeDamage);
DECLARE_NATIVE_TYPE(dnGame,UBulletDamage);
DECLARE_NATIVE_TYPE(dnGame,AIntegratedWeapon);
DECLARE_NATIVE_TYPE(dnGame,ADoorMoverEx_Sliding_NativeBase);
DECLARE_NATIVE_TYPE(dnGame,ADoorMoverEx_Rotating_NativeBase);
DECLARE_NATIVE_TYPE(dnGame,UdnDestructibleBuildingDefinition);
DECLARE_NATIVE_TYPE(dnGame,AdnDestructibleBuilding);
DECLARE_NATIVE_TYPE(dnGame,ADecalBomb);
DECLARE_NATIVE_TYPE(dnGame,AdnMPTuner);
DECLARE_NATIVE_TYPE(dnGame,AdnCamera_NativeBase);
DECLARE_NATIVE_TYPE(dnGame,AdnCameras);
DECLARE_NATIVE_TYPE(dnGame,AAirHockeyTable_NativeBase);

#define AUTO_INITIALIZE_REGISTRANTS_DNGAME \
	UDecoActivityRules_State::StaticClassNoInline(); \
	UDecoActivityRules::StaticClassNoInline(); \
	GNativeLookupFuncs[Lookup++] = &FinddnGameUDecoActivityRulesNative; \
	UDecoActivityRules_Physics::StaticClassNoInline(); \
	UDecoActivityRules_HealthCheck::StaticClassNoInline(); \
	UDecoActivityRules_Animation::StaticClassNoInline(); \
	UDecoActivities_Ticking::StaticClassNoInline(); \
	UDecoActivities::StaticClassNoInline(); \
	GNativeLookupFuncs[Lookup++] = &FinddnGameUDecoActivitiesNative; \
	UDecoActivities_Spawn::StaticClassNoInline(); \
	UDecoActivities_Sound::StaticClassNoInline(); \
	UDecoActivities_RadiusDamage::StaticClassNoInline(); \
	UDecoActivities_Physics::StaticClassNoInline(); \
	UDecoActivities_Keyframes::StaticClassNoInline(); \
	UDecoActivities_KarmaImpulse::StaticClassNoInline(); \
	UDecoActivities_Interaction::StaticClassNoInline(); \
	UDecoActivities_HUDInfo::StaticClassNoInline(); \
	UDecoActivities_CarriedByHealth::StaticClassNoInline(); \
	UDecoActivities_HealthChange::StaticClassNoInline(); \
	UDecoActivities_Events::StaticClassNoInline(); \
	UDecoActivities_Display::StaticClassNoInline(); \
	UDecoActivities_Collision::StaticClassNoInline(); \
	UDecoActivities_Camera::StaticClassNoInline(); \
	UDecoActivities_AnimationController::StaticClassNoInline(); \
	UDecoActivities_Animation::StaticClassNoInline(); \
	UDecoActivities_ActorColor::StaticClassNoInline(); \
	APlayerProgression::StaticClassNoInline(); \
	GNativeLookupFuncs[Lookup++] = &FinddnGameAPlayerProgressionNative; \
	AUpgrade_ZoomMode::StaticClassNoInline(); \
	AUpgrade_ViewMode::StaticClassNoInline(); \
	AUpgrade_SOS::StaticClassNoInline(); \
	ADukePlayer::StaticClassNoInline(); \
	GNativeLookupFuncs[Lookup++] = &FinddnGameADukePlayerNative; \
	ADukeMultiPlayer::StaticClassNoInline(); \
	GNativeLookupFuncs[Lookup++] = &FinddnGameADukeMultiPlayerNative; \
	AMetagameHUD::StaticClassNoInline(); \
	GNativeLookupFuncs[Lookup++] = &FinddnGameAMetagameHUDNative; \
	ADukeHUD::StaticClassNoInline(); \
	GNativeLookupFuncs[Lookup++] = &FinddnGameADukeHUDNative; \
	AdnTeamInfo::StaticClassNoInline(); \
	AdnDeathmatchGameReplicationInfo::StaticClassNoInline(); \
	AMPGameReplicationInfo::StaticClassNoInline(); \
	AdnQuestItem::StaticClassNoInline(); \
	AdnScreenSplatters::StaticClassNoInline(); \
	AdnHUDEffects_Splatters::StaticClassNoInline(); \
	AdnHUDEffects::StaticClassNoInline(); \
	GNativeLookupFuncs[Lookup++] = &FinddnGameAdnHUDEffectsNative; \
	AdnControl::StaticClassNoInline(); \
	AdnUsableSomething::StaticClassNoInline(); \
	AdnDecoration::StaticClassNoInline(); \
	GNativeLookupFuncs[Lookup++] = &FinddnGameAdnDecorationNative; \
	AVehicleSpecialPartBase::StaticClassNoInline(); \
	AVehicleSpaceBase::StaticClassNoInline(); \
	AVehicleBase::StaticClassNoInline(); \
	GNativeLookupFuncs[Lookup++] = &FinddnGameAVehicleBaseNative; \
	AdnRadioTower::StaticClassNoInline(); \
	GNativeLookupFuncs[Lookup++] = &FinddnGameAdnRadioTowerNative; \
	AdnMultiplayer::StaticClassNoInline(); \
	GNativeLookupFuncs[Lookup++] = &FinddnGameAdnMultiplayerNative; \
	ATriggerHint_UseJetpack::StaticClassNoInline(); \
	AdnControlRemapperEx::StaticClassNoInline(); \
	UMeleeDamage::StaticClassNoInline(); \
	UBulletDamage::StaticClassNoInline(); \
	AIntegratedWeapon::StaticClassNoInline(); \
	ADoorMoverEx_Sliding_NativeBase::StaticClassNoInline(); \
	ADoorMoverEx_Rotating_NativeBase::StaticClassNoInline(); \
	GNativeLookupFuncs[Lookup++] = &FinddnGameADoorMoverEx_Rotating_NativeBaseNative; \
	UdnDestructibleBuildingDefinition::StaticClassNoInline(); \
	AdnDestructibleBuilding::StaticClassNoInline(); \
	GNativeLookupFuncs[Lookup++] = &FinddnGameAdnDestructibleBuildingNative; \
	ADecalBomb::StaticClassNoInline(); \
	GNativeLookupFuncs[Lookup++] = &FinddnGameADecalBombNative; \
	AdnMPTuner::StaticClassNoInline(); \
	GNativeLookupFuncs[Lookup++] = &FinddnGameAdnMPTunerNative; \
	AdnCamera_NativeBase::StaticClassNoInline(); \
	AdnCameras::StaticClassNoInline(); \
	AAirHockeyTable_NativeBase::StaticClassNoInline(); \
	GNativeLookupFuncs[Lookup++] = &FinddnGameAAirHockeyTable_NativeBaseNative; \

#endif // NATIVE_DEFS_ONLY

#ifdef NATIVES_ONLY
#if _MSC_VER
#pragma message("*** Including native classes from dnGame.")
#endif
NATIVE_INFO(UDecoActivityRules) GdnGameUDecoActivityRulesNatives[] = 
{ 
	MAP_NATIVE(UDecoActivityRules,execCheckRulesNative)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(dnGame,UDecoActivityRules);

NATIVE_INFO(UDecoActivities) GdnGameUDecoActivitiesNatives[] = 
{ 
	MAP_NATIVE(UDecoActivities,execExecuteNative)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(dnGame,UDecoActivities);

NATIVE_INFO(APlayerProgression) GdnGameAPlayerProgressionNatives[] = 
{ 
	MAP_NATIVE(APlayerProgression,execDealWithNewChallenges)
	MAP_NATIVE(APlayerProgression,execIncStat)
	MAP_NATIVE(APlayerProgression,execCanModifyStats)
	MAP_NATIVE(APlayerProgression,execCalculateLevel)
	MAP_NATIVE(APlayerProgression,execCalculateXP)
	MAP_NATIVE(APlayerProgression,execSaveOverdriveInfo)
	MAP_NATIVE(APlayerProgression,execLoadPlayerProgression)
	MAP_NATIVE(APlayerProgression,execSavePlayerProgression)
	MAP_NATIVE(APlayerProgression,execDebugUnlockChallenge)
	MAP_NATIVE(APlayerProgression,execDumpChallengeStorage)
	MAP_NATIVE(APlayerProgression,execGetAllChallengeID)
	MAP_NATIVE(APlayerProgression,execGetChallengeIDFromStorage)
	MAP_NATIVE(APlayerProgression,execHandleBackupStorage)
	MAP_NATIVE(APlayerProgression,execCreateBackupStorage)
	MAP_NATIVE(APlayerProgression,execSetChallengeStatus)
	MAP_NATIVE(APlayerProgression,execGetChallengeXP)
	MAP_NATIVE(APlayerProgression,execGetChallengeStatusByIdx)
	MAP_NATIVE(APlayerProgression,execGetChallengeStatus)
	MAP_NATIVE(APlayerProgression,execIsChallengeUnlocked)
	MAP_NATIVE(APlayerProgression,execCheckChallengeByEnumByte)
	MAP_NATIVE(APlayerProgression,execCheckChallengeByEnum)
	MAP_NATIVE(APlayerProgression,execCheckChallenge)
	MAP_NATIVE(APlayerProgression,execCreateStatMap)
	MAP_NATIVE(APlayerProgression,execSetChallengeComplete)
	MAP_NATIVE(APlayerProgression,execServerAwardChallenge)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(dnGame,APlayerProgression);

NATIVE_INFO(ADukePlayer) GdnGameADukePlayerNatives[] = 
{ 
	MAP_NATIVE(ADukePlayer,execTickKick)
	MAP_NATIVE(ADukePlayer,execIsDLCCampaignStart)
	MAP_NATIVE(ADukePlayer,execFlushLevelEndConfig)
	MAP_NATIVE(ADukePlayer,execUpdateLevelEndAchievements)
	MAP_NATIVE(ADukePlayer,execGiveFullGameCompletion)
	MAP_NATIVE(ADukePlayer,execHasFullGameCompletion)
	MAP_NATIVE(ADukePlayer,execAddCompletionForLevel)
	MAP_NATIVE(ADukePlayer,execHasCompletionForDLCLevel)
	MAP_NATIVE(ADukePlayer,execHasCompletionForLevel)
	MAP_NATIVE(ADukePlayer,execGetLevelIndexForMapName)
	MAP_NATIVE(ADukePlayer,execClearAllAchievements)
	MAP_NATIVE(ADukePlayer,execAwardAllAchievements)
	MAP_NATIVE(ADukePlayer,execClearAchievement)
	MAP_NATIVE(ADukePlayer,execAwardAchievement)
	MAP_NATIVE(ADukePlayer,execSetMotionBlur)
	MAP_NATIVE(ADukePlayer,execGetProgressFilePath)
	MAP_NATIVE(ADukePlayer,execHasWeapon)
	MAP_NATIVE(ADukePlayer,execCanPickupWeapon)
	MAP_NATIVE(ADukePlayer,execBreakInDebugger)
	MAP_NATIVE(ADukePlayer,execUnlockAllMaps)
	MAP_NATIVE(ADukePlayer,execGivePermanentEgoCapAward)
	MAP_NATIVE(ADukePlayer,execCanSprint)
	MAP_NATIVE(ADukePlayer,execGetWalkSpeed)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(dnGame,ADukePlayer);

NATIVE_INFO(ADukeMultiPlayer) GdnGameADukeMultiPlayerNatives[] = 
{ 
	MAP_NATIVE(ADukeMultiPlayer,execTraceFireHit)
	MAP_NATIVE(ADukeMultiPlayer,execNativeUpdateLookHitActor)
	MAP_NATIVE(ADukeMultiPlayer,execHandlePlayerMovePrePhysics)
	MAP_NATIVE(ADukeMultiPlayer,execCanPickupWeapon)
	MAP_NATIVE(ADukeMultiPlayer,execTickTurn)
	MAP_NATIVE(ADukeMultiPlayer,execTickNative)
	MAP_NATIVE(ADukeMultiPlayer,execPlayerCalcView_MPDead)
	MAP_NATIVE(ADukeMultiPlayer,execSetMotionBlur)
	MAP_NATIVE(ADukeMultiPlayer,execCanSprint)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(dnGame,ADukeMultiPlayer);

NATIVE_INFO(AMetagameHUD) GdnGameAMetagameHUDNatives[] = 
{ 
	MAP_NATIVE(AMetagameHUD,execClipTextN)
	MAP_NATIVE(AMetagameHUD,execTextSize)
	MAP_NATIVE(AMetagameHUD,execTickDisplayMessages)
	MAP_NATIVE(AMetagameHUD,execPreloadLevelUpEffect)
	MAP_NATIVE(AMetagameHUD,execPostRender)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(dnGame,AMetagameHUD);

NATIVE_INFO(ADukeHUD) GdnGameADukeHUDNatives[] = 
{ 
	MAP_NATIVE(ADukeHUD,execDrawStatusTimerHUD)
	MAP_NATIVE(ADukeHUD,execGetLookActor)
	MAP_NATIVE(ADukeHUD,execPostRender)
	MAP_NATIVE(ADukeHUD,execDrawBoostMeter)
	MAP_NATIVE(ADukeHUD,execAddHudEffect)
	MAP_NATIVE(ADukeHUD,execInitializeHUDEffect)
	MAP_NATIVE(ADukeHUD,execTickHUDEffects)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(dnGame,ADukeHUD);

NATIVE_INFO(AdnHUDEffects) GdnGameAdnHUDEffectsNatives[] = 
{ 
	MAP_NATIVE(AdnHUDEffects,execGetAngleScale)
	MAP_NATIVE(AdnHUDEffects,execGetDistScale)
	MAP_NATIVE(AdnHUDEffects,execAttachEffectTo)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(dnGame,AdnHUDEffects);

NATIVE_INFO(AdnDecoration) GdnGameAdnDecorationNatives[] = 
{ 
	MAP_NATIVE(AdnDecoration,execClientDecoActivity_ExecuteByIndex)
	MAP_NATIVE(AdnDecoration,execDecoActivity_ExecuteElements)
	MAP_NATIVE(AdnDecoration,execDecoAnimPhysics_Stop)
	MAP_NATIVE(AdnDecoration,execDecoAnimPhysics_Start)
	MAP_NATIVE(AdnDecoration,execDecoActivity)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(dnGame,AdnDecoration);

NATIVE_INFO(AVehicleBase) GdnGameAVehicleBaseNatives[] = 
{ 
	MAP_NATIVE(AVehicleBase,execRighted)
	MAP_NATIVE(AVehicleBase,execVehicleDriverCanPickupItem)
	MAP_NATIVE(AVehicleBase,execVehicleGetDriver)
	MAP_NATIVE(AVehicleBase,execIsCurrentlyFlipping)
	MAP_NATIVE(AVehicleBase,execEndBoost)
	MAP_NATIVE(AVehicleBase,execIsBoosting)
	MAP_NATIVE(AVehicleBase,execCanBoost)
	MAP_NATIVE(AVehicleBase,execHasBoost)
	MAP_NATIVE(AVehicleBase,execTick_InternalNative)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(dnGame,AVehicleBase);

NATIVE_INFO(AdnRadioTower) GdnGameAdnRadioTowerNatives[] = 
{ 
	MAP_NATIVE(AdnRadioTower,execGetStationName)
	MAP_NATIVE(AdnRadioTower,execUntuneStation)
	MAP_NATIVE(AdnRadioTower,execTuneStationByFrequency)
	MAP_NATIVE(AdnRadioTower,execSeekPrevStation)
	MAP_NATIVE(AdnRadioTower,execSeekNextStation)
	MAP_NATIVE(AdnRadioTower,execInitializeTower)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(dnGame,AdnRadioTower);

NATIVE_INFO(AdnMultiplayer) GdnGameAdnMultiplayerNatives[] = 
{ 
	MAP_NATIVE(AdnMultiplayer,execFindPlayerStart)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(dnGame,AdnMultiplayer);

NATIVE_INFO(ADoorMoverEx_Rotating_NativeBase) GdnGameADoorMoverEx_Rotating_NativeBaseNatives[] = 
{ 
	MAP_NATIVE(ADoorMoverEx_Rotating_NativeBase,execCalculateExtraOffset)
	MAP_NATIVE(ADoorMoverEx_Rotating_NativeBase,execCalculateDoorPivotOffset)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(dnGame,ADoorMoverEx_Rotating_NativeBase);

NATIVE_INFO(AdnDestructibleBuilding) GdnGameAdnDestructibleBuildingNatives[] = 
{ 
	MAP_NATIVE(AdnDestructibleBuilding,execComputeSpawnInfoForPart)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(dnGame,AdnDestructibleBuilding);

NATIVE_INFO(ADecalBomb) GdnGameADecalBombNatives[] = 
{ 
	MAP_NATIVE(ADecalBomb,execStaticDeploy)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(dnGame,ADecalBomb);

NATIVE_INFO(AdnMPTuner) GdnGameAdnMPTunerNatives[] = 
{ 
	MAP_NATIVE(AdnMPTuner,execLoadDevIni)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(dnGame,AdnMPTuner);

NATIVE_INFO(AAirHockeyTable_NativeBase) GdnGameAAirHockeyTable_NativeBaseNatives[] = 
{ 
	MAP_NATIVE(AAirHockeyTable_NativeBase,execCalcShot)
	MAP_NATIVE(AAirHockeyTable_NativeBase,execRemovePuckFromPlay)
	MAP_NATIVE(AAirHockeyTable_NativeBase,execSetPuckInPlay)
	MAP_NATIVE(AAirHockeyTable_NativeBase,execGrabPuck)
	MAP_NATIVE(AAirHockeyTable_NativeBase,execPlayerLeft)
	MAP_NATIVE(AAirHockeyTable_NativeBase,execPlayerJoined)
	MAP_NATIVE(AAirHockeyTable_NativeBase,execTickTable)
	MAP_NATIVE(AAirHockeyTable_NativeBase,execInitTable)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(dnGame,AAirHockeyTable_NativeBase);

#endif // NATIVES_ONLY
#if _MSC_VER
#pragma warning(default:4121)
#endif

#ifdef VERIFY_CLASS_SIZES
#pragma message("*** Verifying class sizes for dnGame.")
VERIFY_CLASS_OFFSET_NODIE(UDecoActivityRules_State,DecoActivityRules_State,SuccessStates)
VERIFY_CLASS_OFFSET_NODIE(UDecoActivityRules_State,DecoActivityRules_State,FailureStates)
VERIFY_CLASS_SIZE_NODIE(UDecoActivityRules_State)
VERIFY_CLASS_SIZE_NODIE(UDecoActivityRules)
VERIFY_CLASS_OFFSET_NODIE(UDecoActivityRules_Physics,DecoActivityRules_Physics,VelocitySizeComparison)
VERIFY_CLASS_OFFSET_NODIE(UDecoActivityRules_Physics,DecoActivityRules_Physics,VelocitySizeValue)
VERIFY_CLASS_SIZE_NODIE(UDecoActivityRules_Physics)
VERIFY_CLASS_OFFSET_NODIE(UDecoActivityRules_HealthCheck,DecoActivityRules_HealthCheck,HealthCheckStyle)
VERIFY_CLASS_OFFSET_NODIE(UDecoActivityRules_HealthCheck,DecoActivityRules_HealthCheck,HealthMin)
VERIFY_CLASS_OFFSET_NODIE(UDecoActivityRules_HealthCheck,DecoActivityRules_HealthCheck,HealthMax)
VERIFY_CLASS_SIZE_NODIE(UDecoActivityRules_HealthCheck)
VERIFY_CLASS_OFFSET_NODIE(UDecoActivityRules_Animation,DecoActivityRules_Animation,Channels)
VERIFY_CLASS_OFFSET_NODIE(UDecoActivityRules_Animation,DecoActivityRules_Animation,AnimExists_Fail)
VERIFY_CLASS_OFFSET_NODIE(UDecoActivityRules_Animation,DecoActivityRules_Animation,AnimExists_Succeed)
VERIFY_CLASS_SIZE_NODIE(UDecoActivityRules_Animation)
VERIFY_CLASS_OFFSET_NODIE(UDecoActivities_Ticking,DecoActivities_Ticking,bTickOnlyNearbyModifier)
VERIFY_CLASS_OFFSET_NODIE(UDecoActivities_Ticking,DecoActivities_Ticking,bTickOnlyRecentModifier)
VERIFY_CLASS_OFFSET_NODIE(UDecoActivities_Ticking,DecoActivities_Ticking,bTickOnlyZoneRecentModifier)
VERIFY_CLASS_OFFSET_NODIE(UDecoActivities_Ticking,DecoActivities_Ticking,bNoNativeTickModifier)
VERIFY_CLASS_OFFSET_NODIE(UDecoActivities_Ticking,DecoActivities_Ticking,bDumbMeshModifier)
VERIFY_CLASS_OFFSET_NODIE(UDecoActivities_Ticking,DecoActivities_Ticking,NewTickStyle)
VERIFY_CLASS_OFFSET_NODIE(UDecoActivities_Ticking,DecoActivities_Ticking,TimeWarpModifier)
VERIFY_CLASS_OFFSET_NODIE(UDecoActivities_Ticking,DecoActivities_Ticking,TimeWarpChange)
VERIFY_CLASS_SIZE_NODIE(UDecoActivities_Ticking)
VERIFY_CLASS_SIZE_NODIE(UDecoActivities)
VERIFY_CLASS_OFFSET_NODIE(UDecoActivities_Spawn,DecoActivities_Spawn,MountedSpawns)
VERIFY_CLASS_OFFSET_NODIE(UDecoActivities_Spawn,DecoActivities_Spawn,MotionSpawns)
VERIFY_CLASS_OFFSET_NODIE(UDecoActivities_Spawn,DecoActivities_Spawn,SimpleSpawns)
VERIFY_CLASS_SIZE_NODIE(UDecoActivities_Spawn)
VERIFY_CLASS_OFFSET_NODIE(UDecoActivities_Sound,DecoActivities_Sound,SoundStopSlots)
VERIFY_CLASS_OFFSET_NODIE(UDecoActivities_Sound,DecoActivities_Sound,SoundStopRules)
VERIFY_CLASS_OFFSET_NODIE(UDecoActivities_Sound,DecoActivities_Sound,SoundNames)
VERIFY_CLASS_OFFSET_NODIE(UDecoActivities_Sound,DecoActivities_Sound,SoundNormal)
VERIFY_CLASS_OFFSET_NODIE(UDecoActivities_Sound,DecoActivities_Sound,SoundAmbient)
VERIFY_CLASS_SIZE_NODIE(UDecoActivities_Sound)
VERIFY_CLASS_OFFSET_NODIE(UDecoActivities_RadiusDamage,DecoActivities_RadiusDamage,RadiusType)
VERIFY_CLASS_OFFSET_NODIE(UDecoActivities_RadiusDamage,DecoActivities_RadiusDamage,Damage)
VERIFY_CLASS_OFFSET_NODIE(UDecoActivities_RadiusDamage,DecoActivities_RadiusDamage,Radius)
VERIFY_CLASS_OFFSET_NODIE(UDecoActivities_RadiusDamage,DecoActivities_RadiusDamage,DamageFalloffStart)
VERIFY_CLASS_OFFSET_NODIE(UDecoActivities_RadiusDamage,DecoActivities_RadiusDamage,DamageType)
VERIFY_CLASS_OFFSET_NODIE(UDecoActivities_RadiusDamage,DecoActivities_RadiusDamage,DirectionAngleLimit)
VERIFY_CLASS_OFFSET_NODIE(UDecoActivities_RadiusDamage,DecoActivities_RadiusDamage,DirectionOffset)
VERIFY_CLASS_OFFSET_NODIE(UDecoActivities_RadiusDamage,DecoActivities_RadiusDamage,PlayerDamageScale)
VERIFY_CLASS_SIZE_NODIE(UDecoActivities_RadiusDamage)
VERIFY_CLASS_OFFSET_NODIE(UDecoActivities_Physics,DecoActivities_Physics,Physics)
VERIFY_CLASS_OFFSET_NODIE(UDecoActivities_Physics,DecoActivities_Physics,ThrowPhysics)
VERIFY_CLASS_OFFSET_NODIE(UDecoActivities_Physics,DecoActivities_Physics,Mass)
VERIFY_CLASS_OFFSET_NODIE(UDecoActivities_Physics,DecoActivities_Physics,DensitySet)
VERIFY_CLASS_SIZE_NODIE(UDecoActivities_Physics)
VERIFY_CLASS_OFFSET_NODIE(UDecoActivities_Keyframes,DecoActivities_Keyframes,TargetLocationIndex)
VERIFY_CLASS_OFFSET_NODIE(UDecoActivities_Keyframes,DecoActivities_Keyframes,TargetLocation)
VERIFY_CLASS_OFFSET_NODIE(UDecoActivities_Keyframes,DecoActivities_Keyframes,TargetRotation)
VERIFY_CLASS_OFFSET_NODIE(UDecoActivities_Keyframes,DecoActivities_Keyframes,TargetRotationPitchIndex)
VERIFY_CLASS_OFFSET_NODIE(UDecoActivities_Keyframes,DecoActivities_Keyframes,TargetRotationPitch)
VERIFY_CLASS_OFFSET_NODIE(UDecoActivities_Keyframes,DecoActivities_Keyframes,TargetRotationYawIndex)
VERIFY_CLASS_OFFSET_NODIE(UDecoActivities_Keyframes,DecoActivities_Keyframes,TargetRotationYaw)
VERIFY_CLASS_OFFSET_NODIE(UDecoActivities_Keyframes,DecoActivities_Keyframes,TargetRotationRollIndex)
VERIFY_CLASS_OFFSET_NODIE(UDecoActivities_Keyframes,DecoActivities_Keyframes,TargetRotationRoll)
VERIFY_CLASS_OFFSET_NODIE(UDecoActivities_Keyframes,DecoActivities_Keyframes,NewRotationRate)
VERIFY_CLASS_OFFSET_NODIE(UDecoActivities_Keyframes,DecoActivities_Keyframes,NewRotationRateTimer)
VERIFY_CLASS_SIZE_NODIE(UDecoActivities_Keyframes)
VERIFY_CLASS_OFFSET_NODIE(UDecoActivities_KarmaImpulse,DecoActivities_KarmaImpulse,UserDirectionalScaler)
VERIFY_CLASS_OFFSET_NODIE(UDecoActivities_KarmaImpulse,DecoActivities_KarmaImpulse,ImpulseStyle)
VERIFY_CLASS_OFFSET_NODIE(UDecoActivities_KarmaImpulse,DecoActivities_KarmaImpulse,ImpulseForce)
VERIFY_CLASS_OFFSET_NODIE(UDecoActivities_KarmaImpulse,DecoActivities_KarmaImpulse,ImpulseForceVariance)
VERIFY_CLASS_OFFSET_NODIE(UDecoActivities_KarmaImpulse,DecoActivities_KarmaImpulse,ImpulseBone)
VERIFY_CLASS_OFFSET_NODIE(UDecoActivities_KarmaImpulse,DecoActivities_KarmaImpulse,ImpulseOffset)
VERIFY_CLASS_OFFSET_NODIE(UDecoActivities_KarmaImpulse,DecoActivities_KarmaImpulse,ImpulseOffsetVariance)
VERIFY_CLASS_OFFSET_NODIE(UDecoActivities_KarmaImpulse,DecoActivities_KarmaImpulse,ImpulseDirection)
VERIFY_CLASS_OFFSET_NODIE(UDecoActivities_KarmaImpulse,DecoActivities_KarmaImpulse,ImpulseDirectionVariance)
VERIFY_CLASS_OFFSET_NODIE(UDecoActivities_KarmaImpulse,DecoActivities_KarmaImpulse,MaxAngularVelocity)
VERIFY_CLASS_OFFSET_NODIE(UDecoActivities_KarmaImpulse,DecoActivities_KarmaImpulse,MaxLinearVelocity)
VERIFY_CLASS_SIZE_NODIE(UDecoActivities_KarmaImpulse)
VERIFY_CLASS_OFFSET_NODIE(UDecoActivities_Interaction,DecoActivities_Interaction,bUsableModifier)
VERIFY_CLASS_OFFSET_NODIE(UDecoActivities_Interaction,DecoActivities_Interaction,bUseTriggeredModifier)
VERIFY_CLASS_OFFSET_NODIE(UDecoActivities_Interaction,DecoActivities_Interaction,bGrabUsableModifier)
VERIFY_CLASS_OFFSET_NODIE(UDecoActivities_Interaction,DecoActivities_Interaction,bGrabbableModifier)
VERIFY_CLASS_OFFSET_NODIE(UDecoActivities_Interaction,DecoActivities_Interaction,AvoidRangeModifier)
VERIFY_CLASS_OFFSET_NODIE(UDecoActivities_Interaction,DecoActivities_Interaction,NewAvoidRange)
VERIFY_CLASS_OFFSET_NODIE(UDecoActivities_Interaction,DecoActivities_Interaction,NewStaticInteractionClassification)
VERIFY_CLASS_OFFSET_NODIE(UDecoActivities_Interaction,DecoActivities_Interaction,NewDynamicInteractionClassification)
VERIFY_CLASS_SIZE_NODIE(UDecoActivities_Interaction)
VERIFY_CLASS_OFFSET_NODIE(UDecoActivities_HUDInfo,DecoActivities_HUDInfo,bEnemyModifier)
VERIFY_CLASS_OFFSET_NODIE(UDecoActivities_HUDInfo,DecoActivities_HUDInfo,bForceUsePhraseModifier)
VERIFY_CLASS_OFFSET_NODIE(UDecoActivities_HUDInfo,DecoActivities_HUDInfo,bDrawUsePhraseModifier)
VERIFY_CLASS_OFFSET_NODIE(UDecoActivities_HUDInfo,DecoActivities_HUDInfo,bNoUseKeyInfoModifier)
VERIFY_CLASS_OFFSET_NODIE(UDecoActivities_HUDInfo,DecoActivities_HUDInfo,UsePhrase)
VERIFY_CLASS_OFFSET_NODIE(UDecoActivities_HUDInfo,DecoActivities_HUDInfo,UsePhraseModifier)
VERIFY_CLASS_OFFSET_NODIE(UDecoActivities_HUDInfo,DecoActivities_HUDInfo,GrabUsePhrase)
VERIFY_CLASS_OFFSET_NODIE(UDecoActivities_HUDInfo,DecoActivities_HUDInfo,GrabUsePhraseModifier)
VERIFY_CLASS_SIZE_NODIE(UDecoActivities_HUDInfo)
VERIFY_CLASS_OFFSET_NODIE(UDecoActivities_CarriedByHealth,DecoActivities_CarriedByHealth,HealAmount)
VERIFY_CLASS_OFFSET_NODIE(UDecoActivities_CarriedByHealth,DecoActivities_CarriedByHealth,HealVariance)
VERIFY_CLASS_OFFSET_NODIE(UDecoActivities_CarriedByHealth,DecoActivities_CarriedByHealth,HealMaxAmount)
VERIFY_CLASS_OFFSET_NODIE(UDecoActivities_CarriedByHealth,DecoActivities_CarriedByHealth,DamageAmount)
VERIFY_CLASS_OFFSET_NODIE(UDecoActivities_CarriedByHealth,DecoActivities_CarriedByHealth,DamageVariance)
VERIFY_CLASS_OFFSET_NODIE(UDecoActivities_CarriedByHealth,DecoActivities_CarriedByHealth,DamageTypeClass)
VERIFY_CLASS_SIZE_NODIE(UDecoActivities_CarriedByHealth)
VERIFY_CLASS_OFFSET_NODIE(UDecoActivities_HealthChange,DecoActivities_HealthChange,HealthChange)
VERIFY_CLASS_OFFSET_NODIE(UDecoActivities_HealthChange,DecoActivities_HealthChange,DamageType)
VERIFY_CLASS_SIZE_NODIE(UDecoActivities_HealthChange)
VERIFY_CLASS_OFFSET_NODIE(UDecoActivities_Events,DecoActivities_Events,Event)
VERIFY_CLASS_OFFSET_NODIE(UDecoActivities_Events,DecoActivities_Events,Callbacks)
VERIFY_CLASS_OFFSET_NODIE(UDecoActivities_Events,DecoActivities_Events,Callbacks_Always)
VERIFY_CLASS_OFFSET_NODIE(UDecoActivities_Events,DecoActivities_Events,CallbacksEnd)
VERIFY_CLASS_OFFSET_NODIE(UDecoActivities_Events,DecoActivities_Events,CallbacksEnd_Always)
VERIFY_CLASS_SIZE_NODIE(UDecoActivities_Events)
VERIFY_CLASS_OFFSET_NODIE(UDecoActivities_Display,DecoActivities_Display,RenderObject)
VERIFY_CLASS_OFFSET_NODIE(UDecoActivities_Display,DecoActivities_Display,Skins)
VERIFY_CLASS_OFFSET_NODIE(UDecoActivities_Display,DecoActivities_Display,bHiddenModifier)
VERIFY_CLASS_OFFSET_NODIE(UDecoActivities_Display,DecoActivities_Display,MountedHiddenModifier)
VERIFY_CLASS_OFFSET_NODIE(UDecoActivities_Display,DecoActivities_Display,DrawScale)
VERIFY_CLASS_OFFSET_NODIE(UDecoActivities_Display,DecoActivities_Display,DrawScaleVariance)
VERIFY_CLASS_OFFSET_NODIE(UDecoActivities_Display,DecoActivities_Display,DrawScaleModifier)
VERIFY_CLASS_OFFSET_NODIE(UDecoActivities_Display,DecoActivities_Display,DrawScale3D)
VERIFY_CLASS_OFFSET_NODIE(UDecoActivities_Display,DecoActivities_Display,DrawScale3DVariance)
VERIFY_CLASS_OFFSET_NODIE(UDecoActivities_Display,DecoActivities_Display,DrawScale3DModifier)
VERIFY_CLASS_SIZE_NODIE(UDecoActivities_Display)
VERIFY_CLASS_OFFSET_NODIE(UDecoActivities_Collision,DecoActivities_Collision,bCollideActorsModifier)
VERIFY_CLASS_OFFSET_NODIE(UDecoActivities_Collision,DecoActivities_Collision,bCollideWorldModifier)
VERIFY_CLASS_OFFSET_NODIE(UDecoActivities_Collision,DecoActivities_Collision,bBlockActorsModifier)
VERIFY_CLASS_OFFSET_NODIE(UDecoActivities_Collision,DecoActivities_Collision,bBlockPlayersModifier)
VERIFY_CLASS_OFFSET_NODIE(UDecoActivities_Collision,DecoActivities_Collision,bBlockKarmaModifier)
VERIFY_CLASS_OFFSET_NODIE(UDecoActivities_Collision,DecoActivities_Collision,bBlockAIModifier)
VERIFY_CLASS_OFFSET_NODIE(UDecoActivities_Collision,DecoActivities_Collision,bTraceUsableModifier)
VERIFY_CLASS_OFFSET_NODIE(UDecoActivities_Collision,DecoActivities_Collision,bTraceShootableModifier)
VERIFY_CLASS_OFFSET_NODIE(UDecoActivities_Collision,DecoActivities_Collision,bCollisionAssumeValidModifier)
VERIFY_CLASS_OFFSET_NODIE(UDecoActivities_Collision,DecoActivities_Collision,CollisionRadiusModifier)
VERIFY_CLASS_OFFSET_NODIE(UDecoActivities_Collision,DecoActivities_Collision,CollisionRadiusChange)
VERIFY_CLASS_OFFSET_NODIE(UDecoActivities_Collision,DecoActivities_Collision,CollisionHeightModifier)
VERIFY_CLASS_OFFSET_NODIE(UDecoActivities_Collision,DecoActivities_Collision,CollisionHeightChange)
VERIFY_CLASS_SIZE_NODIE(UDecoActivities_Collision)
VERIFY_CLASS_OFFSET_NODIE(UDecoActivities_Camera,DecoActivities_Camera,FalloffDistance)
VERIFY_CLASS_OFFSET_NODIE(UDecoActivities_Camera,DecoActivities_Camera,Shakes)
VERIFY_CLASS_OFFSET_NODIE(UDecoActivities_Camera,DecoActivities_Camera,Removes)
VERIFY_CLASS_SIZE_NODIE(UDecoActivities_Camera)
VERIFY_CLASS_OFFSET_NODIE(UDecoActivities_AnimationController,DecoActivities_AnimationController,AnimControllerActivities)
VERIFY_CLASS_SIZE_NODIE(UDecoActivities_AnimationController)
VERIFY_CLASS_OFFSET_NODIE(UDecoActivities_Animation,DecoActivities_Animation,AnimActivities)
VERIFY_CLASS_OFFSET_NODIE(UDecoActivities_Animation,DecoActivities_Animation,StopAnimChannels)
VERIFY_CLASS_SIZE_NODIE(UDecoActivities_Animation)
VERIFY_CLASS_OFFSET_NODIE(UDecoActivities_ActorColor,DecoActivities_ActorColor,ActorColorAssigns)
VERIFY_CLASS_OFFSET_NODIE(UDecoActivities_ActorColor,DecoActivities_ActorColor,ActorColorRemoves)
VERIFY_CLASS_SIZE_NODIE(UDecoActivities_ActorColor)
VERIFY_CLASS_OFFSET_NODIE(APlayerProgression,PlayerProgression,StatMap)
VERIFY_CLASS_OFFSET_NODIE(APlayerProgression,PlayerProgression,ChallengeStorage)
VERIFY_CLASS_OFFSET_NODIE(APlayerProgression,PlayerProgression,BackupChallengeStorage)
VERIFY_CLASS_OFFSET_NODIE(APlayerProgression,PlayerProgression,AwardedChallengesInMatch)
VERIFY_CLASS_OFFSET_NODIE(APlayerProgression,PlayerProgression,TotalXP)
VERIFY_CLASS_OFFSET_NODIE(APlayerProgression,PlayerProgression,MatchXP)
VERIFY_CLASS_OFFSET_NODIE(APlayerProgression,PlayerProgression,ScreenMatchXP)
VERIFY_CLASS_OFFSET_NODIE(APlayerProgression,PlayerProgression,CurrentLevel)
VERIFY_CLASS_OFFSET_NODIE(APlayerProgression,PlayerProgression,OverDriveLevel)
VERIFY_CLASS_OFFSET_NODIE(APlayerProgression,PlayerProgression,OverDriveModifier)
VERIFY_CLASS_OFFSET_NODIE(APlayerProgression,PlayerProgression,MaxOverDriveLevel)
VERIFY_CLASS_OFFSET_NODIE(APlayerProgression,PlayerProgression,CurrentGameType)
VERIFY_CLASS_OFFSET_NODIE(APlayerProgression,PlayerProgression,MultiKillCount)
VERIFY_CLASS_OFFSET_NODIE(APlayerProgression,PlayerProgression,LastKillTime)
VERIFY_CLASS_OFFSET_NODIE(APlayerProgression,PlayerProgression,LongestCurrentStreak)
VERIFY_CLASS_OFFSET_NODIE(APlayerProgression,PlayerProgression,FallingDistance)
VERIFY_CLASS_OFFSET_NODIE(APlayerProgression,PlayerProgression,InAirStatUpdateTime)
VERIFY_CLASS_OFFSET_NODIE(APlayerProgression,PlayerProgression,TimeInAir)
VERIFY_CLASS_OFFSET_NODIE(APlayerProgression,PlayerProgression,LastTimeInAirCheck)
VERIFY_CLASS_OFFSET_NODIE(APlayerProgression,PlayerProgression,SprintStartTime)
VERIFY_CLASS_OFFSET_NODIE(APlayerProgression,PlayerProgression,SprintStartLocation)
VERIFY_CLASS_OFFSET_NODIE(APlayerProgression,PlayerProgression,DuckTime)
VERIFY_CLASS_OFFSET_NODIE(APlayerProgression,PlayerProgression,JetpackTime)
VERIFY_CLASS_OFFSET_NODIE(APlayerProgression,PlayerProgression,AssistDue)
VERIFY_CLASS_OFFSET_NODIE(APlayerProgression,PlayerProgression,AssistCandidate)
VERIFY_CLASS_OFFSET_NODIE(APlayerProgression,PlayerProgression,LastFreezeShot)
VERIFY_CLASS_OFFSET_NODIE(APlayerProgression,PlayerProgression,MinFreezeShotStatTime)
VERIFY_CLASS_OFFSET_NODIE(APlayerProgression,PlayerProgression,HeadshotInstigator)
VERIFY_CLASS_OFFSET_NODIE(APlayerProgression,PlayerProgression,JumpedOverRPGTime)
VERIFY_CLASS_OFFSET_NODIE(APlayerProgression,PlayerProgression,RunningMen)
VERIFY_CLASS_OFFSET_NODIE(APlayerProgression,PlayerProgression,CurrentMapName)
VERIFY_CLASS_OFFSET_NODIE(APlayerProgression,PlayerProgression,LimboMine)
VERIFY_CLASS_OFFSET_NODIE(APlayerProgression,PlayerProgression,TotalStats)
VERIFY_CLASS_OFFSET_NODIE(APlayerProgression,PlayerProgression,MatchStats)
VERIFY_CLASS_OFFSET_NODIE(APlayerProgression,PlayerProgression,GroundDistanceUpdateTimeCount)
VERIFY_CLASS_OFFSET_NODIE(APlayerProgression,PlayerProgression,GroundDistanceUpdateTime)
VERIFY_CLASS_OFFSET_NODIE(APlayerProgression,PlayerProgression,GroundDistanceLastLocation)
VERIFY_CLASS_OFFSET_NODIE(APlayerProgression,PlayerProgression,GroundDistanceSq)
VERIFY_CLASS_OFFSET_NODIE(APlayerProgression,PlayerProgression,SprintGroundDistanceSq)
VERIFY_CLASS_OFFSET_NODIE(APlayerProgression,PlayerProgression,LongRangeThreshold)
VERIFY_CLASS_OFFSET_NODIE(APlayerProgression,PlayerProgression,HTTKSpecialPoints)
VERIFY_CLASS_OFFSET_NODIE(APlayerProgression,PlayerProgression,GameTypeUpdateTimeCount)
VERIFY_CLASS_OFFSET_NODIE(APlayerProgression,PlayerProgression,GameTypeUpdateTime)
VERIFY_CLASS_OFFSET_NODIE(APlayerProgression,PlayerProgression,aTeamKill)
VERIFY_CLASS_OFFSET_NODIE(APlayerProgression,PlayerProgression,aKillList)
VERIFY_CLASS_OFFSET_NODIE(APlayerProgression,PlayerProgression,LandTime)
VERIFY_CLASS_OFFSET_NODIE(APlayerProgression,PlayerProgression,EnforcerRocketInfoList)
VERIFY_CLASS_OFFSET_NODIE(APlayerProgression,PlayerProgression,LastEnforcerTakeDamageTimestamp)
VERIFY_CLASS_OFFSET_NODIE(APlayerProgression,PlayerProgression,Safari)
VERIFY_CLASS_OFFSET_NODIE(APlayerProgression,PlayerProgression,Condiments)
VERIFY_CLASS_OFFSET_NODIE(APlayerProgression,PlayerProgression,Dance)
VERIFY_CLASS_OFFSET_NODIE(APlayerProgression,PlayerProgression,Dancers)
VERIFY_CLASS_OFFSET_NODIE(APlayerProgression,PlayerProgression,RPG4)
VERIFY_CLASS_OFFSET_NODIE(APlayerProgression,PlayerProgression,freezer)
VERIFY_CLASS_OFFSET_NODIE(APlayerProgression,PlayerProgression,Shrinker)
VERIFY_CLASS_OFFSET_NODIE(APlayerProgression,PlayerProgression,RPGAccuracy)
VERIFY_CLASS_OFFSET_NODIE(APlayerProgression,PlayerProgression,RPGFired)
VERIFY_CLASS_OFFSET_NODIE(APlayerProgression,PlayerProgression,RPGKillTime)
VERIFY_CLASS_OFFSET_NODIE(APlayerProgression,PlayerProgression,LastKiller)
VERIFY_CLASS_OFFSET_NODIE(APlayerProgression,PlayerProgression,HTTKControlMultikill)
VERIFY_CLASS_OFFSET_NODIE(APlayerProgression,PlayerProgression,AttachedMineOwners)
VERIFY_CLASS_SIZE_NODIE(APlayerProgression)
VERIFY_CLASS_OFFSET_NODIE(AUpgrade_ZoomMode,Upgrade_ZoomMode,ZoomTime)
VERIFY_CLASS_OFFSET_NODIE(AUpgrade_ZoomMode,Upgrade_ZoomMode,ZoomScale)
VERIFY_CLASS_SIZE_NODIE(AUpgrade_ZoomMode)
VERIFY_CLASS_OFFSET_NODIE(AUpgrade_ViewMode,Upgrade_ViewMode,SpecialCameraStyle)
VERIFY_CLASS_OFFSET_NODIE(AUpgrade_ViewMode,Upgrade_ViewMode,SubtleStaticMaterial)
VERIFY_CLASS_SIZE_NODIE(AUpgrade_ViewMode)
VERIFY_CLASS_OFFSET_NODIE(AUpgrade_SOS,Upgrade_SOS,Fuel)
VERIFY_CLASS_SIZE_NODIE(AUpgrade_SOS)
VERIFY_CLASS_OFFSET_NODIE(ADukePlayer,DukePlayer,FrameKills)
VERIFY_CLASS_OFFSET_NODIE(ADukePlayer,DukePlayer,FrameKillsTimeSeconds)
VERIFY_CLASS_OFFSET_NODIE(ADukePlayer,DukePlayer,StandingAnimationController)
VERIFY_CLASS_OFFSET_NODIE(ADukePlayer,DukePlayer,CrouchingAnimationController)
VERIFY_CLASS_OFFSET_NODIE(ADukePlayer,DukePlayer,InAirAnimationController)
VERIFY_CLASS_OFFSET_NODIE(ADukePlayer,DukePlayer,SwimmingAnimationController)
VERIFY_CLASS_OFFSET_NODIE(ADukePlayer,DukePlayer,JetpackingAnimationController)
VERIFY_CLASS_OFFSET_NODIE(ADukePlayer,DukePlayer,InteractiveDecorationAnimationController)
VERIFY_CLASS_OFFSET_NODIE(ADukePlayer,DukePlayer,ChatBeepSound)
VERIFY_CLASS_OFFSET_NODIE(ADukePlayer,DukePlayer,SteroidsLoop)
VERIFY_CLASS_OFFSET_NODIE(ADukePlayer,DukePlayer,StartSpot)
VERIFY_CLASS_OFFSET_NODIE(ADukePlayer,DukePlayer,CopyPasteActor)
VERIFY_CLASS_OFFSET_NODIE(ADukePlayer,DukePlayer,DeathTime)
VERIFY_CLASS_OFFSET_NODIE(ADukePlayer,DukePlayer,CrackedScreenAlpha)
VERIFY_CLASS_OFFSET_NODIE(ADukePlayer,DukePlayer,CrackedScreenX)
VERIFY_CLASS_OFFSET_NODIE(ADukePlayer,DukePlayer,CrackedScreenY)
VERIFY_CLASS_OFFSET_NODIE(ADukePlayer,DukePlayer,CrackedScreenStretch)
VERIFY_CLASS_OFFSET_NODIE(ADukePlayer,DukePlayer,CrackedScreenMaterial)
VERIFY_CLASS_OFFSET_NODIE(ADukePlayer,DukePlayer,RestartLevelText)
VERIFY_CLASS_OFFSET_NODIE(ADukePlayer,DukePlayer,LoadLastCheckpointText)
VERIFY_CLASS_OFFSET_NODIE(ADukePlayer,DukePlayer,DemoDeathMessageTimeLeft)
VERIFY_CLASS_OFFSET_NODIE(ADukePlayer,DukePlayer,DemoDeathMessageBG)
VERIFY_CLASS_OFFSET_NODIE(ADukePlayer,DukePlayer,CurrentFlotsamEffect)
VERIFY_CLASS_OFFSET_NODIE(ADukePlayer,DukePlayer,FlotsamEffects)
VERIFY_CLASS_OFFSET_NODIE(ADukePlayer,DukePlayer,JetpackMax)
VERIFY_CLASS_OFFSET_NODIE(ADukePlayer,DukePlayer,JetPackStateTime)
VERIFY_CLASS_OFFSET_NODIE(ADukePlayer,DukePlayer,OldHitCounter)
VERIFY_CLASS_OFFSET_NODIE(ADukePlayer,DukePlayer,HitCounter)
VERIFY_CLASS_OFFSET_NODIE(ADukePlayer,DukePlayer,HitNotifySounds)
VERIFY_CLASS_OFFSET_NODIE(ADukePlayer,DukePlayer,HitNotifyNames)
VERIFY_CLASS_OFFSET_NODIE(ADukePlayer,DukePlayer,HitNotifyIndex)
VERIFY_CLASS_OFFSET_NODIE(ADukePlayer,DukePlayer,SmashPawn)
VERIFY_CLASS_OFFSET_NODIE(ADukePlayer,DukePlayer,MyClassName)
VERIFY_CLASS_OFFSET_NODIE(ADukePlayer,DukePlayer,StompLookAtTime)
VERIFY_CLASS_OFFSET_NODIE(ADukePlayer,DukePlayer,StompMinDot)
VERIFY_CLASS_OFFSET_NODIE(ADukePlayer,DukePlayer,StompKnockbackRadius)
VERIFY_CLASS_OFFSET_NODIE(ADukePlayer,DukePlayer,StompKnockbackImpulse)
VERIFY_CLASS_OFFSET_NODIE(ADukePlayer,DukePlayer,StompKnockbackLift)
VERIFY_CLASS_OFFSET_NODIE(ADukePlayer,DukePlayer,LastKilledByPlayerName)
VERIFY_CLASS_OFFSET_NODIE(ADukePlayer,DukePlayer,LastKilledByDamageName)
VERIFY_CLASS_OFFSET_NODIE(ADukePlayer,DukePlayer,LastKilledByPlayerIcon)
VERIFY_CLASS_OFFSET_NODIE(ADukePlayer,DukePlayer,DukeFoot)
VERIFY_CLASS_OFFSET_NODIE(ADukePlayer,DukePlayer,DebugCanvas)
VERIFY_CLASS_OFFSET_NODIE(ADukePlayer,DukePlayer,ZoomMode)
VERIFY_CLASS_OFFSET_NODIE(ADukePlayer,DukePlayer,CurrentDoor)
VERIFY_CLASS_OFFSET_NODIE(ADukePlayer,DukePlayer,ZoomWalkScalar)
VERIFY_CLASS_OFFSET_NODIE(ADukePlayer,DukePlayer,NoWeaponWalkScalar)
VERIFY_CLASS_OFFSET_NODIE(ADukePlayer,DukePlayer,SteroidWalkScalar)
VERIFY_CLASS_OFFSET_NODIE(ADukePlayer,DukePlayer,BloodScreenSplatterEffect)
VERIFY_CLASS_OFFSET_NODIE(ADukePlayer,DukePlayer,Shades)
VERIFY_CLASS_OFFSET_NODIE(ADukePlayer,DukePlayer,QA)
VERIFY_CLASS_OFFSET_NODIE(ADukePlayer,DukePlayer,QARate)
VERIFY_CLASS_OFFSET_NODIE(ADukePlayer,DukePlayer,dnQAState)
VERIFY_CLASS_OFFSET_NODIE(ADukePlayer,DukePlayer,QALastCheckpoint)
VERIFY_CLASS_OFFSET_NODIE(ADukePlayer,DukePlayer,MovementRustleSoundInfo)
VERIFY_CLASS_OFFSET_NODIE(ADukePlayer,DukePlayer,LandingRustleSoundInfo)
VERIFY_CLASS_OFFSET_NODIE(ADukePlayer,DukePlayer,KnockdownMinDamage)
VERIFY_CLASS_OFFSET_NODIE(ADukePlayer,DukePlayer,EgoCapAwards)
VERIFY_CLASS_OFFSET_NODIE(ADukePlayer,DukePlayer,PendingInventoryHintClass)
VERIFY_CLASS_OFFSET_NODIE(ADukePlayer,DukePlayer,SteroidsHintMessage)
VERIFY_CLASS_OFFSET_NODIE(ADukePlayer,DukePlayer,BeerHintMessage)
VERIFY_CLASS_OFFSET_NODIE(ADukePlayer,DukePlayer,HolodukeHintMessage)
VERIFY_CLASS_OFFSET_NODIE(ADukePlayer,DukePlayer,InfiniteAmmoHintMessage)
VERIFY_CLASS_OFFSET_NODIE(ADukePlayer,DukePlayer,HoloDukeClass)
VERIFY_CLASS_OFFSET_NODIE(ADukePlayer,DukePlayer,ExecutionControl)
VERIFY_CLASS_OFFSET_NODIE(ADukePlayer,DukePlayer,ExecutionTarget)
VERIFY_CLASS_OFFSET_NODIE(ADukePlayer,DukePlayer,MightyFootClass)
VERIFY_CLASS_OFFSET_NODIE(ADukePlayer,DukePlayer,MaxEgoCap)
VERIFY_CLASS_OFFSET_NODIE(ADukePlayer,DukePlayer,PreorderBonusEgo)
VERIFY_CLASS_OFFSET_NODIE(ADukePlayer,DukePlayer,crosshairColors)
VERIFY_CLASS_OFFSET_NODIE(ADukePlayer,DukePlayer,crosshairColorIdx)
VERIFY_CLASS_SIZE_NODIE(ADukePlayer)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,MP_VoicePack)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,SP_VoicePack)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,DLC_VoicePack)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,PlayerProgress)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,SavingTime)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,LastScorePointTime)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,LastPointScorer)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,DisplayStatsStartIndex)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,StandingAnimCtrl1stClass)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,StandingAnimCtrl3rdClass)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,CrouchingAnimCtrl1stClass)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,CrouchingAnimCtrl3rdClass)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,InAirAnimCtrl1stClass)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,InAirAnimCtrl3rdClass)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,JetpackAnimCtrl1stClass)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,JetpackAnimCtrl3rdClass)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,MountedAnimCtrlClass)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,BackUp_StandAnimCtrl1st)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,BackUp_StandAnimCtrl3rd)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,BackUp_CrouchAnimCtrl1st)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,BackUp_CrouchAnimCtrl3rd)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,BackUp_InAirAnimCtrl1st)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,BackUp_InAirAnimCtrl3rd)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,BackUp_JetpackAnimCtrl1st)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,BackUp_JetpackAnimCtrl3rd)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,BackUp_MountedAnimCtrlClass)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,CurrentDamageVolume)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,AutoTurnoffVolume)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,CurrentJetPackVolume)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,nStandingController)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,DeathLocation)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,OverrideGravityMagnitude)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,RocketJumpForce)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,MaxRocketJumpForce)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,deathcamcorpseLoc)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,deathcamlocTop)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,deathcamtargetLoc)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,deathcamwantedLoc)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,CustomizationInfo)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,BlueTeamShirtColorIdx)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,RedTeamShirtColorIdx)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,SubdualDamage)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,SubdualDamageFactor)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,PostSpawnInvincibilityTime)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,Powerup_InvincibilityDuration)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,Powerup_InvincibilityRemaining)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,Powerup_DamageBoosterDuration)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,Powerup_DamageBoosterRemaining)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,DamageBoosterDamageFactor)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,InvincibilityDamageFactor)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,PowerUpStepTime)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,DeathWeaponDropLifespan)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,WeaponSwitchWeaponDropLifespan)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,NumActivePipeBombs)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,MaxActivePipeBombs)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,MaxActiveTripMines)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,RPGHomingDamage)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,NumActiveTripmines)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,ActiveTripMines)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,PreviousRotation)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,nRotatingOnSpotApproach)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,refRotation)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,fROSStepSize)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,fROSCurrentStep)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,fROSAdjustmentAngle)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,fROSNumSteps)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,fROSOriginalDistance)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,ROSDiffRotation)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,CopyPreviousRotation)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,fROSYawDiff)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,nROSLeftCCW)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,MovementBlendFactor)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,JumpMoveBlend)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,JumpLandBlend)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,DoubleDamageStartAndLoop)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,DoubleDamageEnd)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,ChallengeCompleteSoundInfo)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,DamageBoosterWarningTime)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,AccelZ)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,LastMoveAlphaZ)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,DrinkingBeerOffset)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,InvincibilityEffectMaterial)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,DamageBoosterEffectMaterial)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,DukeSkin)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,DupeSkin)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,ShirtSkin)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,LogoSkin)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,DefaultShirtLogo)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,Logos)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,Shirts)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,ShirtColors)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,LoginTime)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,LastKiller)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,DeathCamTargetRotation)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,DeathCamTrackingRotationPerc)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,DeathCamHeight)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,DeathCamRiseSpeed)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,DeathCamTrackingStartHeight)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,DeathCamTrackingSpeed)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,DeathCamEndHeight)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,ForceRespawnTime)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,ReFreezeTime)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,JetpackJumpDownTimer)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,JetpackTapOffTime)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,RocketJumpDamageResistanceFactor)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,DeathCamStatus)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,BallsOfSteelDelay)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,MaxBallsOfSteelDelay)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,ActiveHoloActor)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,MiniFrozenPunchShakeInfo)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,GridYCached1)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,FiredProjectiles)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,FiredProjectilesLastLoc)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,tauntDelayTime)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,VODelayTime)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,StandardVOChance)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,HostStartTime)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,EnforcerID)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,ShrunkDamageMultiplier)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,LastPhysicsVolumeChangeDamageTimestamp)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,BeepSoundInfo)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,levelup)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,CountdownSoundInfo)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,TeleportEffect)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,DrunkEffect)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,DrunkEffectClass)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,DrunkParticlesOffset)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,SteroidHandsEffect)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,SteroidHandsEffectClass)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,FatalFallingTime)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,JumpPadStartLocationHeight)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,InvincibilityPickupSnd)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,GPM)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,OMPLID)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,BecomeUnfrozenTime)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,LookHitActorUpdateFrame)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,CurrentlyAllowedPowerupEffectAlpha)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,TempTitleStr)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,ShrinkDamage)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,NoWeaponTime)
VERIFY_CLASS_OFFSET_NODIE(ADukeMultiPlayer,DukeMultiPlayer,PlayerProgressionClass)
VERIFY_CLASS_SIZE_NODIE(ADukeMultiPlayer)
VERIFY_CLASS_OFFSET_NODIE(AMetagameHUD,MetagameHUD,ClippingRegion)
VERIFY_CLASS_OFFSET_NODIE(AMetagameHUD,MetagameHUD,LatestAchievedStats)
VERIFY_CLASS_OFFSET_NODIE(AMetagameHUD,MetagameHUD,LatestAchievedStatsTime)
VERIFY_CLASS_OFFSET_NODIE(AMetagameHUD,MetagameHUD,LatestAchievedStatsAlpha)
VERIFY_CLASS_OFFSET_NODIE(AMetagameHUD,MetagameHUD,MessageStayTime)
VERIFY_CLASS_OFFSET_NODIE(AMetagameHUD,MetagameHUD,OverTimeStr)
VERIFY_CLASS_OFFSET_NODIE(AMetagameHUD,MetagameHUD,FireRespawnStr)
VERIFY_CLASS_OFFSET_NODIE(AMetagameHUD,MetagameHUD,JumpRespawnStr)
VERIFY_CLASS_OFFSET_NODIE(AMetagameHUD,MetagameHUD,RespawnTimeStr)
VERIFY_CLASS_OFFSET_NODIE(AMetagameHUD,MetagameHUD,AutoRespawnStr)
VERIFY_CLASS_OFFSET_NODIE(AMetagameHUD,MetagameHUD,WaitingForPlayers)
VERIFY_CLASS_OFFSET_NODIE(AMetagameHUD,MetagameHUD,BalanceTeams)
VERIFY_CLASS_OFFSET_NODIE(AMetagameHUD,MetagameHUD,WaitingForPlayersYPct)
VERIFY_CLASS_OFFSET_NODIE(AMetagameHUD,MetagameHUD,WaitingForPlayersScale)
VERIFY_CLASS_OFFSET_NODIE(AMetagameHUD,MetagameHUD,ExpGainStr)
VERIFY_CLASS_OFFSET_NODIE(AMetagameHUD,MetagameHUD,ExpLossStr)
VERIFY_CLASS_OFFSET_NODIE(AMetagameHUD,MetagameHUD,ExpTotalStr)
VERIFY_CLASS_OFFSET_NODIE(AMetagameHUD,MetagameHUD,LevelGainedStr)
VERIFY_CLASS_OFFSET_NODIE(AMetagameHUD,MetagameHUD,ChallengeTitleStr)
VERIFY_CLASS_OFFSET_NODIE(AMetagameHUD,MetagameHUD,ItemTitleStr)
VERIFY_CLASS_OFFSET_NODIE(AMetagameHUD,MetagameHUD,TeamScoreStr)
VERIFY_CLASS_OFFSET_NODIE(AMetagameHUD,MetagameHUD,IndividualScoreStr)
VERIFY_CLASS_OFFSET_NODIE(AMetagameHUD,MetagameHUD,CountdownMessage)
VERIFY_CLASS_OFFSET_NODIE(AMetagameHUD,MetagameHUD,EndgameWinMessage)
VERIFY_CLASS_OFFSET_NODIE(AMetagameHUD,MetagameHUD,EndgameTieMessage)
VERIFY_CLASS_OFFSET_NODIE(AMetagameHUD,MetagameHUD,EndgameYouWonMessage)
VERIFY_CLASS_OFFSET_NODIE(AMetagameHUD,MetagameHUD,TimeIsUpMessage)
VERIFY_CLASS_OFFSET_NODIE(AMetagameHUD,MetagameHUD,TimeWarningMessage)
VERIFY_CLASS_OFFSET_NODIE(AMetagameHUD,MetagameHUD,OverdriveStr)
VERIFY_CLASS_OFFSET_NODIE(AMetagameHUD,MetagameHUD,LevelLabel)
VERIFY_CLASS_OFFSET_NODIE(AMetagameHUD,MetagameHUD,SizeX)
VERIFY_CLASS_OFFSET_NODIE(AMetagameHUD,MetagameHUD,SizeY)
VERIFY_CLASS_OFFSET_NODIE(AMetagameHUD,MetagameHUD,ExpTotalWidth)
VERIFY_CLASS_OFFSET_NODIE(AMetagameHUD,MetagameHUD,BeginMatchCountdownYPosition)
VERIFY_CLASS_OFFSET_NODIE(AMetagameHUD,MetagameHUD,GUIScale)
VERIFY_CLASS_OFFSET_NODIE(AMetagameHUD,MetagameHUD,UnscaledScoreLeftX)
VERIFY_CLASS_OFFSET_NODIE(AMetagameHUD,MetagameHUD,UnscaledScoreRightX)
VERIFY_CLASS_OFFSET_NODIE(AMetagameHUD,MetagameHUD,UnscaledScoreY)
VERIFY_CLASS_OFFSET_NODIE(AMetagameHUD,MetagameHUD,MinTeamScoreScale)
VERIFY_CLASS_OFFSET_NODIE(AMetagameHUD,MetagameHUD,MaxTeamScoreScale)
VERIFY_CLASS_OFFSET_NODIE(AMetagameHUD,MetagameHUD,ScrollingExpText)
VERIFY_CLASS_OFFSET_NODIE(AMetagameHUD,MetagameHUD,ScrollingCombatText)
VERIFY_CLASS_OFFSET_NODIE(AMetagameHUD,MetagameHUD,ChallengeText)
VERIFY_CLASS_OFFSET_NODIE(AMetagameHUD,MetagameHUD,LevelText)
VERIFY_CLASS_OFFSET_NODIE(AMetagameHUD,MetagameHUD,OverdriveText)
VERIFY_CLASS_OFFSET_NODIE(AMetagameHUD,MetagameHUD,LevelYPct)
VERIFY_CLASS_OFFSET_NODIE(AMetagameHUD,MetagameHUD,EXPTotalAlpha)
VERIFY_CLASS_OFFSET_NODIE(AMetagameHUD,MetagameHUD,nPlayerAnimsToDebug)
VERIFY_CLASS_OFFSET_NODIE(AMetagameHUD,MetagameHUD,TimeIsUpDelay)
VERIFY_CLASS_OFFSET_NODIE(AMetagameHUD,MetagameHUD,TimeIsUpMessageDuration)
VERIFY_CLASS_OFFSET_NODIE(AMetagameHUD,MetagameHUD,InvalidTimeUpValue)
VERIFY_CLASS_OFFSET_NODIE(AMetagameHUD,MetagameHUD,MsgPrompt)
VERIFY_CLASS_OFFSET_NODIE(AMetagameHUD,MetagameHUD,TeamMsgPrompt)
VERIFY_CLASS_OFFSET_NODIE(AMetagameHUD,MetagameHUD,JetPackIconXPct)
VERIFY_CLASS_OFFSET_NODIE(AMetagameHUD,MetagameHUD,JetPackIconYPct)
VERIFY_CLASS_OFFSET_NODIE(AMetagameHUD,MetagameHUD,JetPackIconSizeXPct)
VERIFY_CLASS_OFFSET_NODIE(AMetagameHUD,MetagameHUD,JetPackIconSizeYPct)
VERIFY_CLASS_OFFSET_NODIE(AMetagameHUD,MetagameHUD,FuelXPct)
VERIFY_CLASS_OFFSET_NODIE(AMetagameHUD,MetagameHUD,FuelYPct)
VERIFY_CLASS_OFFSET_NODIE(AMetagameHUD,MetagameHUD,FuelWidthPct)
VERIFY_CLASS_OFFSET_NODIE(AMetagameHUD,MetagameHUD,FuelHeightPct)
VERIFY_CLASS_OFFSET_NODIE(AMetagameHUD,MetagameHUD,JetpackFuelLabel)
VERIFY_CLASS_OFFSET_NODIE(AMetagameHUD,MetagameHUD,JetpackStanding)
VERIFY_CLASS_OFFSET_NODIE(AMetagameHUD,MetagameHUD,FuelRedPct)
VERIFY_CLASS_OFFSET_NODIE(AMetagameHUD,MetagameHUD,FuelYellowPct)
VERIFY_CLASS_OFFSET_NODIE(AMetagameHUD,MetagameHUD,FuelBottomLayerYOffset)
VERIFY_CLASS_OFFSET_NODIE(AMetagameHUD,MetagameHUD,FuelBottomLayerXOffset)
VERIFY_CLASS_OFFSET_NODIE(AMetagameHUD,MetagameHUD,FuelBottomLayerXOffsetEnd)
VERIFY_CLASS_OFFSET_NODIE(AMetagameHUD,MetagameHUD,aDebugLastActiveBlends)
VERIFY_CLASS_OFFSET_NODIE(AMetagameHUD,MetagameHUD,aDebugLastBlockBlends)
VERIFY_CLASS_OFFSET_NODIE(AMetagameHUD,MetagameHUD,PLHudUpperLeft)
VERIFY_CLASS_OFFSET_NODIE(AMetagameHUD,MetagameHUD,PLBackdropOffset)
VERIFY_CLASS_OFFSET_NODIE(AMetagameHUD,MetagameHUD,PLBarHaloOffset)
VERIFY_CLASS_OFFSET_NODIE(AMetagameHUD,MetagameHUD,PLBarBorderOffset)
VERIFY_CLASS_OFFSET_NODIE(AMetagameHUD,MetagameHUD,PLBarFillOffset)
VERIFY_CLASS_OFFSET_NODIE(AMetagameHUD,MetagameHUD,PLBarHeight)
VERIFY_CLASS_OFFSET_NODIE(AMetagameHUD,MetagameHUD,PLBarColor)
VERIFY_CLASS_OFFSET_NODIE(AMetagameHUD,MetagameHUD,PLGaugeBkgColor)
VERIFY_CLASS_OFFSET_NODIE(AMetagameHUD,MetagameHUD,PlayerXPBarAtlas)
VERIFY_CLASS_OFFSET_NODIE(AMetagameHUD,MetagameHUD,LastRemainingRoundTime)
VERIFY_CLASS_OFFSET_NODIE(AMetagameHUD,MetagameHUD,TimerPulseSpeed)
VERIFY_CLASS_OFFSET_NODIE(AMetagameHUD,MetagameHUD,TimerBox)
VERIFY_CLASS_OFFSET_NODIE(AMetagameHUD,MetagameHUD,HudTimerScaleX)
VERIFY_CLASS_OFFSET_NODIE(AMetagameHUD,MetagameHUD,LastKnownTeamScore)
VERIFY_CLASS_OFFSET_NODIE(AMetagameHUD,MetagameHUD,LastTeamGoal)
VERIFY_CLASS_OFFSET_NODIE(AMetagameHUD,MetagameHUD,TeamColor)
VERIFY_CLASS_OFFSET_NODIE(AMetagameHUD,MetagameHUD,TeamGoalSizeChangeTime)
VERIFY_CLASS_OFFSET_NODIE(AMetagameHUD,MetagameHUD,TeamGoalSizeChangeRampTime)
VERIFY_CLASS_OFFSET_NODIE(AMetagameHUD,MetagameHUD,ScoreSize)
VERIFY_CLASS_OFFSET_NODIE(AMetagameHUD,MetagameHUD,JustScoredScoreSize)
VERIFY_CLASS_OFFSET_NODIE(AMetagameHUD,MetagameHUD,ScoreOffset)
VERIFY_CLASS_OFFSET_NODIE(AMetagameHUD,MetagameHUD,BabeOffCenterOffset)
VERIFY_CLASS_OFFSET_NODIE(AMetagameHUD,MetagameHUD,BabeScale)
VERIFY_CLASS_OFFSET_NODIE(AMetagameHUD,MetagameHUD,BabeOffsetY)
VERIFY_CLASS_OFFSET_NODIE(AMetagameHUD,MetagameHUD,PowerupBarPosition)
VERIFY_CLASS_OFFSET_NODIE(AMetagameHUD,MetagameHUD,PowerupBarOffset)
VERIFY_CLASS_OFFSET_NODIE(AMetagameHUD,MetagameHUD,PowerupTextOffset)
VERIFY_CLASS_OFFSET_NODIE(AMetagameHUD,MetagameHUD,DeathEvents)
VERIFY_CLASS_OFFSET_NODIE(AMetagameHUD,MetagameHUD,DeathEventIconScale)
VERIFY_CLASS_OFFSET_NODIE(AMetagameHUD,MetagameHUD,DeathEventNameScale)
VERIFY_CLASS_OFFSET_NODIE(AMetagameHUD,MetagameHUD,DeathEventXPosFactor)
VERIFY_CLASS_OFFSET_NODIE(AMetagameHUD,MetagameHUD,DeathEventYPosFactor)
VERIFY_CLASS_OFFSET_NODIE(AMetagameHUD,MetagameHUD,DeathEventSpacing)
VERIFY_CLASS_OFFSET_NODIE(AMetagameHUD,MetagameHUD,DeathEventIconPreAdjust)
VERIFY_CLASS_OFFSET_NODIE(AMetagameHUD,MetagameHUD,DeathEventIconPostAdjust)
VERIFY_CLASS_OFFSET_NODIE(AMetagameHUD,MetagameHUD,DeathEventWaitTime)
VERIFY_CLASS_OFFSET_NODIE(AMetagameHUD,MetagameHUD,DeathEventNoIconGap)
VERIFY_CLASS_OFFSET_NODIE(AMetagameHUD,MetagameHUD,NamePlateOffset)
VERIFY_CLASS_OFFSET_NODIE(AMetagameHUD,MetagameHUD,IdentifyFadeTime)
VERIFY_CLASS_OFFSET_NODIE(AMetagameHUD,MetagameHUD,IdentifyTarget)
VERIFY_CLASS_OFFSET_NODIE(AMetagameHUD,MetagameHUD,EnemyColor)
VERIFY_CLASS_OFFSET_NODIE(AMetagameHUD,MetagameHUD,FriendColor)
VERIFY_CLASS_OFFSET_NODIE(AMetagameHUD,MetagameHUD,WarmupPrefixString)
VERIFY_CLASS_OFFSET_NODIE(AMetagameHUD,MetagameHUD,ProgressFadeTime)
VERIFY_CLASS_OFFSET_NODIE(AMetagameHUD,MetagameHUD,EdgeBuffer)
VERIFY_CLASS_OFFSET_NODIE(AMetagameHUD,MetagameHUD,BorderColor)
VERIFY_CLASS_OFFSET_NODIE(AMetagameHUD,MetagameHUD,FillTexture)
VERIFY_CLASS_OFFSET_NODIE(AMetagameHUD,MetagameHUD,FillRegion)
VERIFY_CLASS_OFFSET_NODIE(AMetagameHUD,MetagameHUD,targetScoreString)
VERIFY_CLASS_OFFSET_NODIE(AMetagameHUD,MetagameHUD,LevelUpHUDEffect)
VERIFY_CLASS_OFFSET_NODIE(AMetagameHUD,MetagameHUD,TraceIdentifyActor)
VERIFY_CLASS_SIZE_NODIE(AMetagameHUD)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,PawnOwner)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,OldClipX)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,OldClipY)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,TextColor)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,HUDColor)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,TextAltColor)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,MessageQueue)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,HUDTimeSeconds)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,TitleBackgroundMaterial)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,TitleBackgroundPadding)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,DesiredIndexTop)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,RootIndexTop)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,IndexTop)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,IndexBottom)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,IndexAdjust)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,ItemSpace)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,OldLookActor)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,LookActor)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,LookPopoutTimer)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,UseInfoPosition)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,StaticTime)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,StaticLength)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,CursorTime)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,CrosshairTextures)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,CrosshairAlpha)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,TitleBarYPos)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,TitleBarHeight)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,TitleBarTextYPos)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,CheckpointMessage)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,WritingCheckpointMessage)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,ThrowMessage)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,DropMessage)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,OldSelectedItem)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,InventorySplash)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,InventoryDpadSplash)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,InventoryTex)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,InventoryActiveTex)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,LastDpadDown)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,LastDpadTime)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,InfinityIcon)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,DukeVisionInventoryName)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,HoloDukeInventoryName)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,SteroidsInventoryName)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,BeerInventoryName)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,JetpackInventoryName)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,HoloDukeSpawnFailedTimer)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,HoloDukeSpawnFailedTex)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,WeaponChangeTime)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,WeaponChangedTo)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,QuickWeaponList)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,ActivePipeBombs)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,WeaponAmmoBackdrop)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,WeaponAmmoDirtyOverlay)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,WeaponAmmoPipeBomb)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,WeaponAmmoTripMine)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,WeaponAmmoStickyBomb)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,StickyBombClass)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,LastWeaponDrawn)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,FadeStartTime)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,HUDAlpha)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,FadeTotalTime)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,HUDPersistTime)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,EgoBarBaseWidth)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,EgoGhostPCT)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,EgoGhostFadeDelay)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,EgoGhostFadeRate)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,LastFrameEgoPCT)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,LastFrameEgoCap)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,EgoCapIncreaseFlashVal)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,EgoCapIncreaseAmount)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,MaxEgoCapHintMessage)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,MaxEgoCapMessage)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,MaxEgoCapAcheivedMessage)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,EgoBarColor)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,EgoBarMaxColor)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,EgoBarRedColor)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,EgoBackdrop)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,EgoBar)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,EgoBarFill)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,EgoHudUpperLeft)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,EgoBackdropOffset)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,EgoTextOffset)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,EgoBarHaloOffset)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,EgoBarBorderOffset)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,EgoBarFillOffset)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,EgoBarHaloRegion)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,EgoBarBorderRegion)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,BossTextOffset)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,BossBarHaloOffset)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,BossBarBorderOffset)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,BossBarFillOffset)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,EgoMeterText)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,BossMeterText)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,TemperatureText)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,BoostMeter)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,BoostWarnPCT)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,BoostWarnPCT2nd)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,BoostWarnYellow)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,BoostWarnOrange)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,BoostWarnRed)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,BreathAlpha)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,BlackTexture)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,WhiteTexture)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,QuickWeaponListClassNames)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,OverlayList)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,NumHUDEffects)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,MaxHUDEffects)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,HUDEffects)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,FilmGrainVignetteMaterial)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,FilmGrainVignetteTexScaler)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,DukeVisionBlackHackHUDEffectName)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,ActorClass)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,ActorRadius)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,ActorTag)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,AnimWatchClassName)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,ScaleModDebugHUDGroup)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,SpectatorMessage)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,SpectatorModeMessage)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,SpectatorViewingMessage)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,IconSize)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,SmallIconSize)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,PanelMap)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,PanelMapStr)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,PanelStaticSmack)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,PanelStaticStr)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,FrozenOverlay)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,GrenadeIndicatorDangerRadius)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,GrenadeIndicatorMaterial)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,GrenadeIndicatorColor)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,QuestItems)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,QuestItemFadeRate)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,QuestItemGlowHoldTime)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,QuestItemGlowFadeRate)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,PickupEvents)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,PickupEventLifetime)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,PickupEventFadeTime)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,PickupEventSpacing)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,PickupEventXOffset)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,PickupEventYOffset)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,BarBodyMaterial)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,BarCapMaterial)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,AmmoCountFont)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,AmmoCountOffsetX)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,AmmoCountOffsetY)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,QuestItemIconFadeTime)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,InteractKeyInfo)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,InteractKeyFadeRate)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,InteractKeyBox)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,InteractKeyInfoScaleX)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,InteractKeyInfoScaleY)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,GamepadInteractKeyInfoScale)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,InteractKeyInfoTapDisplacement)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,InteractKeyInfoTapRate)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,InteractKeyInfoAlphaScale)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,InteractKeyInfoTextAlphaScale)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,InteractKeyInfoTextHighlight)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,ZoomReticle)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,ZoomReticleSize)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,BossMeterActor)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,PrevBossHealthPct)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,BossMeterAlpha)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,BossMeterAtlas)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,CrouchEndTime)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,CrouchingYOffset)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,CrouchingIcon)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,StandingIcon)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,LMBText)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,RMBText)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,SPCText)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,ENTText)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,MMBText)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,ShiftText)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,MWUText)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,MWDText)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,UpText)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,DownText)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,LeftText)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,RightText)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,BossMeterReference)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,WeaponSelectBackground)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,WeaponSelectBackgroundHighlighted)
VERIFY_CLASS_SIZE_NODIE(ADukeHUD)
VERIFY_CLASS_OFFSET_NODIE(AdnTeamInfo,dnTeamInfo,TeamName)
VERIFY_CLASS_OFFSET_NODIE(AdnTeamInfo,dnTeamInfo,Size)
VERIFY_CLASS_OFFSET_NODIE(AdnTeamInfo,dnTeamInfo,Score)
VERIFY_CLASS_OFFSET_NODIE(AdnTeamInfo,dnTeamInfo,TeamIndex)
VERIFY_CLASS_OFFSET_NODIE(AdnTeamInfo,dnTeamInfo,GameInfoClass)
VERIFY_CLASS_SIZE_NODIE(AdnTeamInfo)
VERIFY_CLASS_OFFSET_NODIE(AdnDeathmatchGameReplicationInfo,dnDeathmatchGameReplicationInfo,TimeLimit)
VERIFY_CLASS_OFFSET_NODIE(AdnDeathmatchGameReplicationInfo,dnDeathmatchGameReplicationInfo,FragLimit)
VERIFY_CLASS_OFFSET_NODIE(AdnDeathmatchGameReplicationInfo,dnDeathmatchGameReplicationInfo,RoundTimeLimit)
VERIFY_CLASS_OFFSET_NODIE(AdnDeathmatchGameReplicationInfo,dnDeathmatchGameReplicationInfo,GoalTeamScore)
VERIFY_CLASS_OFFSET_NODIE(AdnDeathmatchGameReplicationInfo,dnDeathmatchGameReplicationInfo,MinPlayers)
VERIFY_CLASS_OFFSET_NODIE(AdnDeathmatchGameReplicationInfo,dnDeathmatchGameReplicationInfo,OffensiveTeam)
VERIFY_CLASS_OFFSET_NODIE(AdnDeathmatchGameReplicationInfo,dnDeathmatchGameReplicationInfo,Cylinder)
VERIFY_CLASS_OFFSET_NODIE(AdnDeathmatchGameReplicationInfo,dnDeathmatchGameReplicationInfo,HillCountdown)
VERIFY_CLASS_OFFSET_NODIE(AdnDeathmatchGameReplicationInfo,dnDeathmatchGameReplicationInfo,Team0BabeState)
VERIFY_CLASS_OFFSET_NODIE(AdnDeathmatchGameReplicationInfo,dnDeathmatchGameReplicationInfo,Team1BabeState)
VERIFY_CLASS_OFFSET_NODIE(AdnDeathmatchGameReplicationInfo,dnDeathmatchGameReplicationInfo,StandingTimeStamp)
VERIFY_CLASS_SIZE_NODIE(AdnDeathmatchGameReplicationInfo)
VERIFY_CLASS_OFFSET_NODIE(AMPGameReplicationInfo,MPGameReplicationInfo,EORCountDownTime)
VERIFY_CLASS_OFFSET_NODIE(AMPGameReplicationInfo,MPGameReplicationInfo,EORTimeoutTime)
VERIFY_CLASS_OFFSET_NODIE(AMPGameReplicationInfo,MPGameReplicationInfo,Teams)
VERIFY_CLASS_OFFSET_NODIE(AMPGameReplicationInfo,MPGameReplicationInfo,EORTimeoutMaxTime)
VERIFY_CLASS_OFFSET_NODIE(AMPGameReplicationInfo,MPGameReplicationInfo,EORCountTime)
VERIFY_CLASS_OFFSET_NODIE(AMPGameReplicationInfo,MPGameReplicationInfo,__EORComplete__Delegate)
VERIFY_CLASS_OFFSET_NODIE(AMPGameReplicationInfo,MPGameReplicationInfo,__EORBeep__Delegate)
VERIFY_CLASS_OFFSET_NODIE(AMPGameReplicationInfo,MPGameReplicationInfo,__EORKillMsgBoxes__Delegate)
VERIFY_CLASS_SIZE_NODIE(AMPGameReplicationInfo)
VERIFY_CLASS_OFFSET_NODIE(AdnQuestItem,dnQuestItem,QuestItemTip)
VERIFY_CLASS_OFFSET_NODIE(AdnQuestItem,dnQuestItem,HUDIcon)
VERIFY_CLASS_OFFSET_NODIE(AdnQuestItem,dnQuestItem,HUDGlowIcon)
VERIFY_CLASS_SIZE_NODIE(AdnQuestItem)
VERIFY_CLASS_SIZE_NODIE(AdnScreenSplatters)
VERIFY_CLASS_OFFSET_NODIE(AdnHUDEffects_Splatters,dnHUDEffects_Splatters,SecondSplatClass)
VERIFY_CLASS_OFFSET_NODIE(AdnHUDEffects_Splatters,dnHUDEffects_Splatters,SecondSplat)
VERIFY_CLASS_SIZE_NODIE(AdnHUDEffects_Splatters)
VERIFY_CLASS_OFFSET_NODIE(AdnHUDEffects,dnHUDEffects,EffectRadius)
VERIFY_CLASS_OFFSET_NODIE(AdnHUDEffects,dnHUDEffects,EffectViewAngleFull)
VERIFY_CLASS_OFFSET_NODIE(AdnHUDEffects,dnHUDEffects,EffectViewAngleNone)
VERIFY_CLASS_OFFSET_NODIE(AdnHUDEffects,dnHUDEffects,ExecuteThrottle)
VERIFY_CLASS_OFFSET_NODIE(AdnHUDEffects,dnHUDEffects,FalloffStyle)
VERIFY_CLASS_OFFSET_NODIE(AdnHUDEffects,dnHUDEffects,EffectName)
VERIFY_CLASS_OFFSET_NODIE(AdnHUDEffects,dnHUDEffects,RestartTag)
VERIFY_CLASS_OFFSET_NODIE(AdnHUDEffects,dnHUDEffects,StopTag)
VERIFY_CLASS_OFFSET_NODIE(AdnHUDEffects,dnHUDEffects,RemoveTag)
VERIFY_CLASS_OFFSET_NODIE(AdnHUDEffects,dnHUDEffects,RemoveTime)
VERIFY_CLASS_OFFSET_NODIE(AdnHUDEffects,dnHUDEffects,RemoveTimeVariance)
VERIFY_CLASS_OFFSET_NODIE(AdnHUDEffects,dnHUDEffects,ToggleTag)
VERIFY_CLASS_OFFSET_NODIE(AdnHUDEffects,dnHUDEffects,RefreshTag)
VERIFY_CLASS_OFFSET_NODIE(AdnHUDEffects,dnHUDEffects,SpawnCount)
VERIFY_CLASS_OFFSET_NODIE(AdnHUDEffects,dnHUDEffects,SpawnCountVariance)
VERIFY_CLASS_OFFSET_NODIE(AdnHUDEffects,dnHUDEffects,SpawnDuration)
VERIFY_CLASS_OFFSET_NODIE(AdnHUDEffects,dnHUDEffects,SpawnDurationVariance)
VERIFY_CLASS_OFFSET_NODIE(AdnHUDEffects,dnHUDEffects,SpawnPeriod)
VERIFY_CLASS_OFFSET_NODIE(AdnHUDEffects,dnHUDEffects,SpawnPeriodVariance)
VERIFY_CLASS_OFFSET_NODIE(AdnHUDEffects,dnHUDEffects,Lifetime)
VERIFY_CLASS_OFFSET_NODIE(AdnHUDEffects,dnHUDEffects,LifetimeVariance)
VERIFY_CLASS_OFFSET_NODIE(AdnHUDEffects,dnHUDEffects,UnderwaterTimescale)
VERIFY_CLASS_OFFSET_NODIE(AdnHUDEffects,dnHUDEffects,Textures)
VERIFY_CLASS_OFFSET_NODIE(AdnHUDEffects,dnHUDEffects,AlphaStart)
VERIFY_CLASS_OFFSET_NODIE(AdnHUDEffects,dnHUDEffects,AlphaStartVariance)
VERIFY_CLASS_OFFSET_NODIE(AdnHUDEffects,dnHUDEffects,AlphaMid)
VERIFY_CLASS_OFFSET_NODIE(AdnHUDEffects,dnHUDEffects,AlphaMidVariance)
VERIFY_CLASS_OFFSET_NODIE(AdnHUDEffects,dnHUDEffects,AlphaEnd)
VERIFY_CLASS_OFFSET_NODIE(AdnHUDEffects,dnHUDEffects,AlphaEndVariance)
VERIFY_CLASS_OFFSET_NODIE(AdnHUDEffects,dnHUDEffects,AlphaRampMid)
VERIFY_CLASS_OFFSET_NODIE(AdnHUDEffects,dnHUDEffects,AlphaRampMidVariance)
VERIFY_CLASS_OFFSET_NODIE(AdnHUDEffects,dnHUDEffects,bUseViewportDims)
VERIFY_CLASS_OFFSET_NODIE(AdnHUDEffects,dnHUDEffects,EffectDrawScale)
VERIFY_CLASS_OFFSET_NODIE(AdnHUDEffects,dnHUDEffects,EffectDrawScaleVariance)
VERIFY_CLASS_OFFSET_NODIE(AdnHUDEffects,dnHUDEffects,ScaleXStart)
VERIFY_CLASS_OFFSET_NODIE(AdnHUDEffects,dnHUDEffects,ScaleXStartVariance)
VERIFY_CLASS_OFFSET_NODIE(AdnHUDEffects,dnHUDEffects,ScaleXMid)
VERIFY_CLASS_OFFSET_NODIE(AdnHUDEffects,dnHUDEffects,ScaleXMidVariance)
VERIFY_CLASS_OFFSET_NODIE(AdnHUDEffects,dnHUDEffects,ScaleXEnd)
VERIFY_CLASS_OFFSET_NODIE(AdnHUDEffects,dnHUDEffects,ScaleXEndVariance)
VERIFY_CLASS_OFFSET_NODIE(AdnHUDEffects,dnHUDEffects,ScaleXRampMid)
VERIFY_CLASS_OFFSET_NODIE(AdnHUDEffects,dnHUDEffects,ScaleXRampMidVariance)
VERIFY_CLASS_OFFSET_NODIE(AdnHUDEffects,dnHUDEffects,ScaleYStart)
VERIFY_CLASS_OFFSET_NODIE(AdnHUDEffects,dnHUDEffects,ScaleYStartVariance)
VERIFY_CLASS_OFFSET_NODIE(AdnHUDEffects,dnHUDEffects,ScaleYMid)
VERIFY_CLASS_OFFSET_NODIE(AdnHUDEffects,dnHUDEffects,ScaleYMidVariance)
VERIFY_CLASS_OFFSET_NODIE(AdnHUDEffects,dnHUDEffects,ScaleYEnd)
VERIFY_CLASS_OFFSET_NODIE(AdnHUDEffects,dnHUDEffects,ScaleYEndVariance)
VERIFY_CLASS_OFFSET_NODIE(AdnHUDEffects,dnHUDEffects,ScaleYRampMid)
VERIFY_CLASS_OFFSET_NODIE(AdnHUDEffects,dnHUDEffects,ScaleYRampMidVariance)
VERIFY_CLASS_OFFSET_NODIE(AdnHUDEffects,dnHUDEffects,RotationInitial)
VERIFY_CLASS_OFFSET_NODIE(AdnHUDEffects,dnHUDEffects,RotationInitialVariance)
VERIFY_CLASS_OFFSET_NODIE(AdnHUDEffects,dnHUDEffects,RotationVelocity)
VERIFY_CLASS_OFFSET_NODIE(AdnHUDEffects,dnHUDEffects,RotationVelocityVariance)
VERIFY_CLASS_OFFSET_NODIE(AdnHUDEffects,dnHUDEffects,RotationAcceleration)
VERIFY_CLASS_OFFSET_NODIE(AdnHUDEffects,dnHUDEffects,RotationAccelerationVariance)
VERIFY_CLASS_OFFSET_NODIE(AdnHUDEffects,dnHUDEffects,LocationDepth)
VERIFY_CLASS_OFFSET_NODIE(AdnHUDEffects,dnHUDEffects,LocationDepthScaleFar)
VERIFY_CLASS_OFFSET_NODIE(AdnHUDEffects,dnHUDEffects,LocationDepthScaleNear)
VERIFY_CLASS_OFFSET_NODIE(AdnHUDEffects,dnHUDEffects,LocationInitial)
VERIFY_CLASS_OFFSET_NODIE(AdnHUDEffects,dnHUDEffects,LocationInitialVariance)
VERIFY_CLASS_OFFSET_NODIE(AdnHUDEffects,dnHUDEffects,VelocityInitial)
VERIFY_CLASS_OFFSET_NODIE(AdnHUDEffects,dnHUDEffects,VelocityInitialVariance)
VERIFY_CLASS_OFFSET_NODIE(AdnHUDEffects,dnHUDEffects,AccelerationInitial)
VERIFY_CLASS_OFFSET_NODIE(AdnHUDEffects,dnHUDEffects,AccelerationInitialVariance)
VERIFY_CLASS_OFFSET_NODIE(AdnHUDEffects,dnHUDEffects,Effect)
VERIFY_CLASS_OFFSET_NODIE(AdnHUDEffects,dnHUDEffects,CleanEffect)
VERIFY_CLASS_SIZE_NODIE(AdnHUDEffects)
VERIFY_CLASS_OFFSET_NODIE(AdnControl,dnControl,CrosshairIndex)
VERIFY_CLASS_OFFSET_NODIE(AdnControl,dnControl,CrosshairIndexUndo)
VERIFY_CLASS_OFFSET_NODIE(AdnControl,dnControl,StateEvents)
VERIFY_CLASS_OFFSET_NODIE(AdnControl,dnControl,States)
VERIFY_CLASS_OFFSET_NODIE(AdnControl,dnControl,InitStateIndex)
VERIFY_CLASS_OFFSET_NODIE(AdnControl,dnControl,CurrentStateIndex)
VERIFY_CLASS_OFFSET_NODIE(AdnControl,dnControl,PreviousStateIndex)
VERIFY_CLASS_OFFSET_NODIE(AdnControl,dnControl,DamageTrigger)
VERIFY_CLASS_OFFSET_NODIE(AdnControl,dnControl,DamageTriggerRadius)
VERIFY_CLASS_OFFSET_NODIE(AdnControl,dnControl,DamageTriggerHeight)
VERIFY_CLASS_OFFSET_NODIE(AdnControl,dnControl,PassedDamageScale)
VERIFY_CLASS_OFFSET_NODIE(AdnControl,dnControl,PassedDamageScaleAI)
VERIFY_CLASS_OFFSET_NODIE(AdnControl,dnControl,PassedPhysicsDamageScale)
VERIFY_CLASS_OFFSET_NODIE(AdnControl,dnControl,PassedPhysicsDamageScaleAI)
VERIFY_CLASS_OFFSET_NODIE(AdnControl,dnControl,ForceAttachStateName)
VERIFY_CLASS_OFFSET_NODIE(AdnControl,dnControl,ForceDetachStateName)
VERIFY_CLASS_OFFSET_NODIE(AdnControl,dnControl,PawnLostStateName)
VERIFY_CLASS_OFFSET_NODIE(AdnControl,dnControl,DisabledKeyTypes)
VERIFY_CLASS_SIZE_NODIE(AdnControl)
VERIFY_CLASS_OFFSET_NODIE(AdnUsableSomething,dnUsableSomething,ControlRemapperClass)
VERIFY_CLASS_OFFSET_NODIE(AdnUsableSomething,dnUsableSomething,InternalControlRemapper)
VERIFY_CLASS_OFFSET_NODIE(AdnUsableSomething,dnUsableSomething,InterpolationInTime)
VERIFY_CLASS_OFFSET_NODIE(AdnUsableSomething,dnUsableSomething,InterpolationOutTime)
VERIFY_CLASS_OFFSET_NODIE(AdnUsableSomething,dnUsableSomething,HUDHelpEntries)
VERIFY_CLASS_OFFSET_NODIE(AdnUsableSomething,dnUsableSomething,UsableExits)
VERIFY_CLASS_OFFSET_NODIE(AdnUsableSomething,dnUsableSomething,DisplayInputHelpTime)
VERIFY_CLASS_OFFSET_NODIE(AdnUsableSomething,dnUsableSomething,DisplayInputStopTime)
VERIFY_CLASS_OFFSET_NODIE(AdnUsableSomething,dnUsableSomething,UserMountPrefab)
VERIFY_CLASS_OFFSET_NODIE(AdnUsableSomething,dnUsableSomething,FOVScalar)
VERIFY_CLASS_OFFSET_NODIE(AdnUsableSomething,dnUsableSomething,FOVTransitionTime)
VERIFY_CLASS_OFFSET_NODIE(AdnUsableSomething,dnUsableSomething,UsableClass)
VERIFY_CLASS_OFFSET_NODIE(AdnUsableSomething,dnUsableSomething,ViewingAngleThreshold)
VERIFY_CLASS_OFFSET_NODIE(AdnUsableSomething,dnUsableSomething,ForwardRotationOffset)
VERIFY_CLASS_OFFSET_NODIE(AdnUsableSomething,dnUsableSomething,ReuseTime)
VERIFY_CLASS_OFFSET_NODIE(AdnUsableSomething,dnUsableSomething,TimeGate)
VERIFY_CLASS_OFFSET_NODIE(AdnUsableSomething,dnUsableSomething,SE_ForcePlayerAttach)
VERIFY_CLASS_OFFSET_NODIE(AdnUsableSomething,dnUsableSomething,SE_ForcePlayerAttachComplete)
VERIFY_CLASS_OFFSET_NODIE(AdnUsableSomething,dnUsableSomething,SE_ForcePlayerDetach)
VERIFY_CLASS_OFFSET_NODIE(AdnUsableSomething,dnUsableSomething,SE_ForcePlayerDetachComplete)
VERIFY_CLASS_OFFSET_NODIE(AdnUsableSomething,dnUsableSomething,SE_DisablePlayerLock)
VERIFY_CLASS_OFFSET_NODIE(AdnUsableSomething,dnUsableSomething,SE_EnablePlayerLock)
VERIFY_CLASS_OFFSET_NODIE(AdnUsableSomething,dnUsableSomething,SE_TogglePlayerLock)
VERIFY_CLASS_OFFSET_NODIE(AdnUsableSomething,dnUsableSomething,MouseInputScaleX)
VERIFY_CLASS_OFFSET_NODIE(AdnUsableSomething,dnUsableSomething,MouseInputScaleY)
VERIFY_CLASS_OFFSET_NODIE(AdnUsableSomething,dnUsableSomething,AnalogInputScaleX)
VERIFY_CLASS_OFFSET_NODIE(AdnUsableSomething,dnUsableSomething,AnalogInputScaleY)
VERIFY_CLASS_OFFSET_NODIE(AdnUsableSomething,dnUsableSomething,MouseInputX)
VERIFY_CLASS_OFFSET_NODIE(AdnUsableSomething,dnUsableSomething,MouseInputY)
VERIFY_CLASS_OFFSET_NODIE(AdnUsableSomething,dnUsableSomething,ServerMouseInputX)
VERIFY_CLASS_OFFSET_NODIE(AdnUsableSomething,dnUsableSomething,ServerMouseInputY)
VERIFY_CLASS_OFFSET_NODIE(AdnUsableSomething,dnUsableSomething,MaxMouseDelta)
VERIFY_CLASS_OFFSET_NODIE(AdnUsableSomething,dnUsableSomething,HeadAimMinOffset)
VERIFY_CLASS_OFFSET_NODIE(AdnUsableSomething,dnUsableSomething,HeadAimMaxOffset)
VERIFY_CLASS_OFFSET_NODIE(AdnUsableSomething,dnUsableSomething,ActiveUsableExit)
VERIFY_CLASS_OFFSET_NODIE(AdnUsableSomething,dnUsableSomething,PretendSelf)
VERIFY_CLASS_OFFSET_NODIE(AdnUsableSomething,dnUsableSomething,User)
VERIFY_CLASS_OFFSET_NODIE(AdnUsableSomething,dnUsableSomething,PlayerUser)
VERIFY_CLASS_OFFSET_NODIE(AdnUsableSomething,dnUsableSomething,AIReserved)
VERIFY_CLASS_OFFSET_NODIE(AdnUsableSomething,dnUsableSomething,AttachUserSoundName)
VERIFY_CLASS_OFFSET_NODIE(AdnUsableSomething,dnUsableSomething,DetachUserSoundName)
VERIFY_CLASS_OFFSET_NODIE(AdnUsableSomething,dnUsableSomething,LocalCollisionCenter)
VERIFY_CLASS_OFFSET_NODIE(AdnUsableSomething,dnUsableSomething,LocalCollisionDimensions)
VERIFY_CLASS_OFFSET_NODIE(AdnUsableSomething,dnUsableSomething,InterpRelevantDrawscaleDifference)
VERIFY_CLASS_OFFSET_NODIE(AdnUsableSomething,dnUsableSomething,InterpRelevantLocation)
VERIFY_CLASS_OFFSET_NODIE(AdnUsableSomething,dnUsableSomething,InterpRelevantRotation)
VERIFY_CLASS_OFFSET_NODIE(AdnUsableSomething,dnUsableSomething,ShakeViewScale)
VERIFY_CLASS_SIZE_NODIE(AdnUsableSomething)
VERIFY_CLASS_OFFSET_NODIE(AdnDecoration,dnDecoration,AnimTriggers)
VERIFY_CLASS_OFFSET_NODIE(AdnDecoration,dnDecoration,IdleActivities)
VERIFY_CLASS_OFFSET_NODIE(AdnDecoration,dnDecoration,AnimControllerActivities)
VERIFY_CLASS_OFFSET_NODIE(AdnDecoration,dnDecoration,DecoActivities_Default)
VERIFY_CLASS_OFFSET_NODIE(AdnDecoration,dnDecoration,DecoActivities_Override)
VERIFY_CLASS_OFFSET_NODIE(AdnDecoration,dnDecoration,DecoActivityTriggers)
VERIFY_CLASS_OFFSET_NODIE(AdnDecoration,dnDecoration,AutoConstraints)
VERIFY_CLASS_OFFSET_NODIE(AdnDecoration,dnDecoration,StartupActivities)
VERIFY_CLASS_OFFSET_NODIE(AdnDecoration,dnDecoration,SpawnedSnacks)
VERIFY_CLASS_OFFSET_NODIE(AdnDecoration,dnDecoration,SpawnedInventory)
VERIFY_CLASS_OFFSET_NODIE(AdnDecoration,dnDecoration,FlickerLight)
VERIFY_CLASS_OFFSET_NODIE(AdnDecoration,dnDecoration,DestroyedActivities)
VERIFY_CLASS_OFFSET_NODIE(AdnDecoration,dnDecoration,DestroyActionPointRadius)
VERIFY_CLASS_OFFSET_NODIE(AdnDecoration,dnDecoration,DestroyableActionPoints)
VERIFY_CLASS_OFFSET_NODIE(AdnDecoration,dnDecoration,HealthPrefab)
VERIFY_CLASS_OFFSET_NODIE(AdnDecoration,dnDecoration,DamageThrottle)
VERIFY_CLASS_OFFSET_NODIE(AdnDecoration,dnDecoration,DamageThreshold)
VERIFY_CLASS_OFFSET_NODIE(AdnDecoration,dnDecoration,DamageTypesIgnored)
VERIFY_CLASS_OFFSET_NODIE(AdnDecoration,dnDecoration,DamageTypesAcceptedOnly)
VERIFY_CLASS_OFFSET_NODIE(AdnDecoration,dnDecoration,DamageTypesInstaKill)
VERIFY_CLASS_OFFSET_NODIE(AdnDecoration,dnDecoration,DamageIgnoreRules)
VERIFY_CLASS_OFFSET_NODIE(AdnDecoration,dnDecoration,AIStompedInfo)
VERIFY_CLASS_OFFSET_NODIE(AdnDecoration,dnDecoration,PowerOffTag)
VERIFY_CLASS_OFFSET_NODIE(AdnDecoration,dnDecoration,PowerOnTag)
VERIFY_CLASS_OFFSET_NODIE(AdnDecoration,dnDecoration,WaterSplashRadius)
VERIFY_CLASS_OFFSET_NODIE(AdnDecoration,dnDecoration,WaterSplashStrength)
VERIFY_CLASS_OFFSET_NODIE(AdnDecoration,dnDecoration,DecoState)
VERIFY_CLASS_OFFSET_NODIE(AdnDecoration,dnDecoration,PreviousHealth)
VERIFY_CLASS_OFFSET_NODIE(AdnDecoration,dnDecoration,BumpCount)
VERIFY_CLASS_OFFSET_NODIE(AdnDecoration,dnDecoration,LastGlass)
VERIFY_CLASS_OFFSET_NODIE(AdnDecoration,dnDecoration,WaterSplashClass)
VERIFY_CLASS_OFFSET_NODIE(AdnDecoration,dnDecoration,WaterSplashMinVel)
VERIFY_CLASS_OFFSET_NODIE(AdnDecoration,dnDecoration,PendingActivities)
VERIFY_CLASS_OFFSET_NODIE(AdnDecoration,dnDecoration,ActivityDeclarations)
VERIFY_CLASS_OFFSET_NODIE(AdnDecoration,dnDecoration,PreAnimPhysicsPhysics)
VERIFY_CLASS_OFFSET_NODIE(AdnDecoration,dnDecoration,AnimPhysicsChannels)
VERIFY_CLASS_OFFSET_NODIE(AdnDecoration,dnDecoration,SpawnedPickupMotionPrefab)
VERIFY_CLASS_OFFSET_NODIE(AdnDecoration,dnDecoration,AdjustRotation)
VERIFY_CLASS_SIZE_NODIE(AdnDecoration)
VERIFY_CLASS_OFFSET_NODIE(AVehicleSpecialPartBase,VehicleSpecialPartBase,ParentVehicle)
VERIFY_CLASS_SIZE_NODIE(AVehicleSpecialPartBase)
VERIFY_CLASS_OFFSET_NODIE(AVehicleSpaceBase,VehicleSpaceBase,Throttle)
VERIFY_CLASS_OFFSET_NODIE(AVehicleSpaceBase,VehicleSpaceBase,LeftRightHeading)
VERIFY_CLASS_OFFSET_NODIE(AVehicleSpaceBase,VehicleSpaceBase,Vehicle)
VERIFY_CLASS_OFFSET_NODIE(AVehicleSpaceBase,VehicleSpaceBase,PreviousRider)
VERIFY_CLASS_OFFSET_NODIE(AVehicleSpaceBase,VehicleSpaceBase,FirstPersonFOV)
VERIFY_CLASS_OFFSET_NODIE(AVehicleSpaceBase,VehicleSpaceBase,FlipMessage)
VERIFY_CLASS_OFFSET_NODIE(AVehicleSpaceBase,VehicleSpaceBase,FlipReuseTime)
VERIFY_CLASS_SIZE_NODIE(AVehicleSpaceBase)
VERIFY_CLASS_OFFSET_NODIE(AVehicleBase,VehicleBase,ControlType)
VERIFY_CLASS_OFFSET_NODIE(AVehicleBase,VehicleBase,ControlStiffness)
VERIFY_CLASS_OFFSET_NODIE(AVehicleBase,VehicleBase,ZMotionType)
VERIFY_CLASS_OFFSET_NODIE(AVehicleBase,VehicleBase,ZMotionPower)
VERIFY_CLASS_OFFSET_NODIE(AVehicleBase,VehicleBase,StoppedSpeed)
VERIFY_CLASS_OFFSET_NODIE(AVehicleBase,VehicleBase,ForwardVelocityThreshold)
VERIFY_CLASS_OFFSET_NODIE(AVehicleBase,VehicleBase,TickCutoffSpeed)
VERIFY_CLASS_OFFSET_NODIE(AVehicleBase,VehicleBase,ExplosionMomentumScalar)
VERIFY_CLASS_OFFSET_NODIE(AVehicleBase,VehicleBase,DrivenAvoidRangeMin)
VERIFY_CLASS_OFFSET_NODIE(AVehicleBase,VehicleBase,DrivenAvoidRange)
VERIFY_CLASS_OFFSET_NODIE(AVehicleBase,VehicleBase,PassedDamageScale)
VERIFY_CLASS_OFFSET_NODIE(AVehicleBase,VehicleBase,PassedDamageScaleAI)
VERIFY_CLASS_OFFSET_NODIE(AVehicleBase,VehicleBase,PassedPhysicsDamageScale)
VERIFY_CLASS_OFFSET_NODIE(AVehicleBase,VehicleBase,PassedPhysicsDamageScaleAI)
VERIFY_CLASS_OFFSET_NODIE(AVehicleBase,VehicleBase,UpwardCorpseBoost)
VERIFY_CLASS_OFFSET_NODIE(AVehicleBase,VehicleBase,UpwardCorpseBoostRnd)
VERIFY_CLASS_OFFSET_NODIE(AVehicleBase,VehicleBase,ForwardCorpseBoost)
VERIFY_CLASS_OFFSET_NODIE(AVehicleBase,VehicleBase,ForwardCorpseBoostRnd)
VERIFY_CLASS_OFFSET_NODIE(AVehicleBase,VehicleBase,VehicleKillEvent)
VERIFY_CLASS_OFFSET_NODIE(AVehicleBase,VehicleBase,VehicleKillLineChance)
VERIFY_CLASS_OFFSET_NODIE(AVehicleBase,VehicleBase,VehicleKillLine)
VERIFY_CLASS_OFFSET_NODIE(AVehicleBase,VehicleBase,BloodMessClass)
VERIFY_CLASS_OFFSET_NODIE(AVehicleBase,VehicleBase,BloodSplatterTime)
VERIFY_CLASS_OFFSET_NODIE(AVehicleBase,VehicleBase,FlipThreshold)
VERIFY_CLASS_OFFSET_NODIE(AVehicleBase,VehicleBase,FlipTotalTime)
VERIFY_CLASS_OFFSET_NODIE(AVehicleBase,VehicleBase,FlipTorque)
VERIFY_CLASS_OFFSET_NODIE(AVehicleBase,VehicleBase,FlipLift)
VERIFY_CLASS_OFFSET_NODIE(AVehicleBase,VehicleBase,FlipKickMinimumSpeed)
VERIFY_CLASS_OFFSET_NODIE(AVehicleBase,VehicleBase,FlippedEvent)
VERIFY_CLASS_OFFSET_NODIE(AVehicleBase,VehicleBase,UnFlippedEvent)
VERIFY_CLASS_OFFSET_NODIE(AVehicleBase,VehicleBase,ForcePlayerAttach)
VERIFY_CLASS_OFFSET_NODIE(AVehicleBase,VehicleBase,ForcePlayerAttachComplete)
VERIFY_CLASS_OFFSET_NODIE(AVehicleBase,VehicleBase,ForcePlayerDetachComplete)
VERIFY_CLASS_OFFSET_NODIE(AVehicleBase,VehicleBase,ForcePlayerDetach)
VERIFY_CLASS_OFFSET_NODIE(AVehicleBase,VehicleBase,DisablePlayerLock)
VERIFY_CLASS_OFFSET_NODIE(AVehicleBase,VehicleBase,EnablePlayerLock)
VERIFY_CLASS_OFFSET_NODIE(AVehicleBase,VehicleBase,TogglePlayerLock)
VERIFY_CLASS_OFFSET_NODIE(AVehicleBase,VehicleBase,PathID)
VERIFY_CLASS_OFFSET_NODIE(AVehicleBase,VehicleBase,AdditionalInputHookControlRemappers)
VERIFY_CLASS_OFFSET_NODIE(AVehicleBase,VehicleBase,AdditionalVehicleSpaces)
VERIFY_CLASS_OFFSET_NODIE(AVehicleBase,VehicleBase,VehicleParts)
VERIFY_CLASS_OFFSET_NODIE(AVehicleBase,VehicleBase,RadioActor)
VERIFY_CLASS_OFFSET_NODIE(AVehicleBase,VehicleBase,VehicleEvents)
VERIFY_CLASS_OFFSET_NODIE(AVehicleBase,VehicleBase,ViewDist)
VERIFY_CLASS_OFFSET_NODIE(AVehicleBase,VehicleBase,ViewElevationAngle)
VERIFY_CLASS_OFFSET_NODIE(AVehicleBase,VehicleBase,ViewFocusOffset)
VERIFY_CLASS_OFFSET_NODIE(AVehicleBase,VehicleBase,ViewFocusVerticalOffset)
VERIFY_CLASS_OFFSET_NODIE(AVehicleBase,VehicleBase,ViewActor)
VERIFY_CLASS_OFFSET_NODIE(AVehicleBase,VehicleBase,ViewChasePitchRate)
VERIFY_CLASS_OFFSET_NODIE(AVehicleBase,VehicleBase,ViewChaseYawRate)
VERIFY_CLASS_OFFSET_NODIE(AVehicleBase,VehicleBase,ViewChaseRollRate)
VERIFY_CLASS_OFFSET_NODIE(AVehicleBase,VehicleBase,ViewOffsetFadeStartTime)
VERIFY_CLASS_OFFSET_NODIE(AVehicleBase,VehicleBase,ViewOffsetFadeRate)
VERIFY_CLASS_OFFSET_NODIE(AVehicleBase,VehicleBase,Headlight)
VERIFY_CLASS_OFFSET_NODIE(AVehicleBase,VehicleBase,AnimForwardVelocityThreshold)
VERIFY_CLASS_OFFSET_NODIE(AVehicleBase,VehicleBase,AnimBackwardVelocityThreshold)
VERIFY_CLASS_OFFSET_NODIE(AVehicleBase,VehicleBase,DriverLegsIdleAnim)
VERIFY_CLASS_OFFSET_NODIE(AVehicleBase,VehicleBase,VehicleSensorRadius)
VERIFY_CLASS_OFFSET_NODIE(AVehicleBase,VehicleBase,VehicleSensorHeight)
VERIFY_CLASS_OFFSET_NODIE(AVehicleBase,VehicleBase,BlockedByPawnTickStamp)
VERIFY_CLASS_OFFSET_NODIE(AVehicleBase,VehicleBase,KilledPawnViewShake)
VERIFY_CLASS_OFFSET_NODIE(AVehicleBase,VehicleBase,KilledPawnRumble)
VERIFY_CLASS_OFFSET_NODIE(AVehicleBase,VehicleBase,MyVehicleSensor)
VERIFY_CLASS_OFFSET_NODIE(AVehicleBase,VehicleBase,VehicleSpaces)
VERIFY_CLASS_OFFSET_NODIE(AVehicleBase,VehicleBase,NumFilledSpaces)
VERIFY_CLASS_OFFSET_NODIE(AVehicleBase,VehicleBase,CurrentDrivingVehicleSpace)
VERIFY_CLASS_OFFSET_NODIE(AVehicleBase,VehicleBase,oForwardVelocity)
VERIFY_CLASS_OFFSET_NODIE(AVehicleBase,VehicleBase,oPreviousForwardVelocity)
VERIFY_CLASS_OFFSET_NODIE(AVehicleBase,VehicleBase,oVehicleDirection)
VERIFY_CLASS_OFFSET_NODIE(AVehicleBase,VehicleBase,oPreviousVehicleDirection)
VERIFY_CLASS_OFFSET_NODIE(AVehicleBase,VehicleBase,oVehicleNeutralTimer)
VERIFY_CLASS_OFFSET_NODIE(AVehicleBase,VehicleBase,oUpness)
VERIFY_CLASS_OFFSET_NODIE(AVehicleBase,VehicleBase,oPreviousUpness)
VERIFY_CLASS_OFFSET_NODIE(AVehicleBase,VehicleBase,GravityRange)
VERIFY_CLASS_OFFSET_NODIE(AVehicleBase,VehicleBase,GravityTimestepRange)
VERIFY_CLASS_SIZE_NODIE(AVehicleBase)
VERIFY_CLASS_OFFSET_NODIE(AdnRadioTower,dnRadioTower,Stations)
VERIFY_CLASS_OFFSET_NODIE(AdnRadioTower,dnRadioTower,CustomStations)
VERIFY_CLASS_OFFSET_NODIE(AdnRadioTower,dnRadioTower,RadioStatic)
VERIFY_CLASS_OFFSET_NODIE(AdnRadioTower,dnRadioTower,DefaultPauseTime)
VERIFY_CLASS_OFFSET_NODIE(AdnRadioTower,dnRadioTower,Songs)
VERIFY_CLASS_OFFSET_NODIE(AdnRadioTower,dnRadioTower,Commercials)
VERIFY_CLASS_OFFSET_NODIE(AdnRadioTower,dnRadioTower,MP3List)
VERIFY_CLASS_SIZE_NODIE(AdnRadioTower)
VERIFY_CLASS_OFFSET_NODIE(AdnMultiplayer,dnMultiplayer,MatchStartTime)
VERIFY_CLASS_OFFSET_NODIE(AdnMultiplayer,dnMultiplayer,eAlone)
VERIFY_CLASS_OFFSET_NODIE(AdnMultiplayer,dnMultiplayer,RespawnDistance)
VERIFY_CLASS_OFFSET_NODIE(AdnMultiplayer,dnMultiplayer,MinFromOtherRespawnDistance)
VERIFY_CLASS_OFFSET_NODIE(AdnMultiplayer,dnMultiplayer,MaxCountDown)
VERIFY_CLASS_OFFSET_NODIE(AdnMultiplayer,dnMultiplayer,MaxShowWinnerSeconds)
VERIFY_CLASS_OFFSET_NODIE(AdnMultiplayer,dnMultiplayer,savedEndGameReason)
VERIFY_CLASS_OFFSET_NODIE(AdnMultiplayer,dnMultiplayer,FirstPlayer)
VERIFY_CLASS_OFFSET_NODIE(AdnMultiplayer,dnMultiplayer,GameType)
VERIFY_CLASS_OFFSET_NODIE(AdnMultiplayer,dnMultiplayer,gametypeDLC)
VERIFY_CLASS_OFFSET_NODIE(AdnMultiplayer,dnMultiplayer,PlayerStarts)
VERIFY_CLASS_OFFSET_NODIE(AdnMultiplayer,dnMultiplayer,PlayerPawns)
VERIFY_CLASS_OFFSET_NODIE(AdnMultiplayer,dnMultiplayer,MaxFirstLoadWaitTime)
VERIFY_CLASS_SIZE_NODIE(AdnMultiplayer)
VERIFY_CLASS_OFFSET_NODIE(ATriggerHint_UseJetpack,TriggerHint_UseJetpack,ControllerMessage)
VERIFY_CLASS_OFFSET_NODIE(ATriggerHint_UseJetpack,TriggerHint_UseJetpack,KeyboardMessage)
VERIFY_CLASS_SIZE_NODIE(ATriggerHint_UseJetpack)
VERIFY_CLASS_SIZE_NODIE(AdnControlRemapperEx)
VERIFY_CLASS_SIZE_NODIE(UMeleeDamage)
VERIFY_CLASS_SIZE_NODIE(UBulletDamage)
VERIFY_CLASS_SIZE_NODIE(AIntegratedWeapon)
VERIFY_CLASS_OFFSET_NODIE(ADoorMoverEx_Sliding_NativeBase,DoorMoverEx_Sliding_NativeBase,SlideDir)
VERIFY_CLASS_OFFSET_NODIE(ADoorMoverEx_Sliding_NativeBase,DoorMoverEx_Sliding_NativeBase,SlideCustomDir)
VERIFY_CLASS_OFFSET_NODIE(ADoorMoverEx_Sliding_NativeBase,DoorMoverEx_Sliding_NativeBase,SlideDistance)
VERIFY_CLASS_SIZE_NODIE(ADoorMoverEx_Sliding_NativeBase)
VERIFY_CLASS_OFFSET_NODIE(ADoorMoverEx_Rotating_NativeBase,DoorMoverEx_Rotating_NativeBase,DoorOpenAnimStyle)
VERIFY_CLASS_OFFSET_NODIE(ADoorMoverEx_Rotating_NativeBase,DoorMoverEx_Rotating_NativeBase,RotateDistance)
VERIFY_CLASS_OFFSET_NODIE(ADoorMoverEx_Rotating_NativeBase,DoorMoverEx_Rotating_NativeBase,RotateDirection)
VERIFY_CLASS_OFFSET_NODIE(ADoorMoverEx_Rotating_NativeBase,DoorMoverEx_Rotating_NativeBase,RotateRate)
VERIFY_CLASS_OFFSET_NODIE(ADoorMoverEx_Rotating_NativeBase,DoorMoverEx_Rotating_NativeBase,KickedRotateRate)
VERIFY_CLASS_OFFSET_NODIE(ADoorMoverEx_Rotating_NativeBase,DoorMoverEx_Rotating_NativeBase,PivotLocation)
VERIFY_CLASS_OFFSET_NODIE(ADoorMoverEx_Rotating_NativeBase,DoorMoverEx_Rotating_NativeBase,PivotOffset)
VERIFY_CLASS_OFFSET_NODIE(ADoorMoverEx_Rotating_NativeBase,DoorMoverEx_Rotating_NativeBase,PivotInset)
VERIFY_CLASS_OFFSET_NODIE(ADoorMoverEx_Rotating_NativeBase,DoorMoverEx_Rotating_NativeBase,HandActionOutward)
VERIFY_CLASS_OFFSET_NODIE(ADoorMoverEx_Rotating_NativeBase,DoorMoverEx_Rotating_NativeBase,HandActionInward)
VERIFY_CLASS_OFFSET_NODIE(ADoorMoverEx_Rotating_NativeBase,DoorMoverEx_Rotating_NativeBase,HandActionPound)
VERIFY_CLASS_OFFSET_NODIE(ADoorMoverEx_Rotating_NativeBase,DoorMoverEx_Rotating_NativeBase,NavDoorOut)
VERIFY_CLASS_OFFSET_NODIE(ADoorMoverEx_Rotating_NativeBase,DoorMoverEx_Rotating_NativeBase,NavDoorIn)
VERIFY_CLASS_OFFSET_NODIE(ADoorMoverEx_Rotating_NativeBase,DoorMoverEx_Rotating_NativeBase,LastRotateDir)
VERIFY_CLASS_SIZE_NODIE(ADoorMoverEx_Rotating_NativeBase)
VERIFY_CLASS_OFFSET_NODIE(UdnDestructibleBuildingDefinition,dnDestructibleBuildingDefinition,Parts)
VERIFY_CLASS_OFFSET_NODIE(UdnDestructibleBuildingDefinition,dnDestructibleBuildingDefinition,ParticleEffects)
VERIFY_CLASS_OFFSET_NODIE(UdnDestructibleBuildingDefinition,dnDestructibleBuildingDefinition,HUDEffects)
VERIFY_CLASS_OFFSET_NODIE(UdnDestructibleBuildingDefinition,dnDestructibleBuildingDefinition,DestroyedSoundName)
VERIFY_CLASS_OFFSET_NODIE(UdnDestructibleBuildingDefinition,dnDestructibleBuildingDefinition,ShellPart)
VERIFY_CLASS_SIZE_NODIE(UdnDestructibleBuildingDefinition)
VERIFY_CLASS_OFFSET_NODIE(AdnDestructibleBuilding,dnDestructibleBuilding,Definition)
VERIFY_CLASS_OFFSET_NODIE(AdnDestructibleBuilding,dnDestructibleBuilding,RandomSeed)
VERIFY_CLASS_OFFSET_NODIE(AdnDestructibleBuilding,dnDestructibleBuilding,Noise)
VERIFY_CLASS_OFFSET_NODIE(AdnDestructibleBuilding,dnDestructibleBuilding,SkewXFromY)
VERIFY_CLASS_OFFSET_NODIE(AdnDestructibleBuilding,dnDestructibleBuilding,SkewXFromZ)
VERIFY_CLASS_OFFSET_NODIE(AdnDestructibleBuilding,dnDestructibleBuilding,SkewYFromX)
VERIFY_CLASS_OFFSET_NODIE(AdnDestructibleBuilding,dnDestructibleBuilding,SkewYFromZ)
VERIFY_CLASS_OFFSET_NODIE(AdnDestructibleBuilding,dnDestructibleBuilding,SkewZFromX)
VERIFY_CLASS_OFFSET_NODIE(AdnDestructibleBuilding,dnDestructibleBuilding,SkewZFromY)
VERIFY_CLASS_OFFSET_NODIE(AdnDestructibleBuilding,dnDestructibleBuilding,PartSurvivalChance)
VERIFY_CLASS_OFFSET_NODIE(AdnDestructibleBuilding,dnDestructibleBuilding,PartCollisionChance)
VERIFY_CLASS_OFFSET_NODIE(AdnDestructibleBuilding,dnDestructibleBuilding,ExplosiveDamageRequired)
VERIFY_CLASS_OFFSET_NODIE(AdnDestructibleBuilding,dnDestructibleBuilding,VehicleVelocityRequired)
VERIFY_CLASS_OFFSET_NODIE(AdnDestructibleBuilding,dnDestructibleBuilding,DamageRadius)
VERIFY_CLASS_OFFSET_NODIE(AdnDestructibleBuilding,dnDestructibleBuilding,Parts)
VERIFY_CLASS_OFFSET_NODIE(AdnDestructibleBuilding,dnDestructibleBuilding,EditorRenderDatas)
VERIFY_CLASS_OFFSET_NODIE(AdnDestructibleBuilding,dnDestructibleBuilding,ShellPart)
VERIFY_CLASS_SIZE_NODIE(AdnDestructibleBuilding)
VERIFY_CLASS_OFFSET_NODIE(ADecalBomb,DecalBomb,RandomSeed)
VERIFY_CLASS_OFFSET_NODIE(ADecalBomb,DecalBomb,DecalTextureType)
VERIFY_CLASS_OFFSET_NODIE(ADecalBomb,DecalBomb,TraceNum)
VERIFY_CLASS_OFFSET_NODIE(ADecalBomb,DecalBomb,TraceNumVariance)
VERIFY_CLASS_OFFSET_NODIE(ADecalBomb,DecalBomb,TraceRotationVariance)
VERIFY_CLASS_OFFSET_NODIE(ADecalBomb,DecalBomb,MinSpawnDistance)
VERIFY_CLASS_OFFSET_NODIE(ADecalBomb,DecalBomb,MaxTraceDistance)
VERIFY_CLASS_OFFSET_NODIE(ADecalBomb,DecalBomb,MaxViewDistance)
VERIFY_CLASS_OFFSET_NODIE(ADecalBomb,DecalBomb,FadeOutStart)
VERIFY_CLASS_OFFSET_NODIE(ADecalBomb,DecalBomb,DecalSize)
VERIFY_CLASS_OFFSET_NODIE(ADecalBomb,DecalBomb,DecalSizeVariance)
VERIFY_CLASS_OFFSET_NODIE(ADecalBomb,DecalBomb,DecalLength)
VERIFY_CLASS_OFFSET_NODIE(ADecalBomb,DecalBomb,Decals)
VERIFY_CLASS_OFFSET_NODIE(ADecalBomb,DecalBomb,DecalLifespan)
VERIFY_CLASS_OFFSET_NODIE(ADecalBomb,DecalBomb,BehaviorArgument)
VERIFY_CLASS_OFFSET_NODIE(ADecalBomb,DecalBomb,Behavior)
VERIFY_CLASS_OFFSET_NODIE(ADecalBomb,DecalBomb,TraceFlags)
VERIFY_CLASS_OFFSET_NODIE(ADecalBomb,DecalBomb,DecalClass)
VERIFY_CLASS_SIZE_NODIE(ADecalBomb)
VERIFY_CLASS_OFFSET_NODIE(AdnMPTuner,dnMPTuner,EgoRecoveryRate)
VERIFY_CLASS_SIZE_NODIE(AdnMPTuner)
VERIFY_CLASS_OFFSET_NODIE(AdnCamera_NativeBase,dnCamera_NativeBase,CameraFOVs)
VERIFY_CLASS_OFFSET_NODIE(AdnCamera_NativeBase,dnCamera_NativeBase,rViewAngles)
VERIFY_CLASS_OFFSET_NODIE(AdnCamera_NativeBase,dnCamera_NativeBase,ViewBoneName)
VERIFY_CLASS_SIZE_NODIE(AdnCamera_NativeBase)
VERIFY_CLASS_SIZE_NODIE(AdnCameras)
VERIFY_CLASS_OFFSET_NODIE(AAirHockeyTable_NativeBase,AirHockeyTable_NativeBase,WinningScore)
VERIFY_CLASS_OFFSET_NODIE(AAirHockeyTable_NativeBase,AirHockeyTable_NativeBase,ChanceScoreAnim)
VERIFY_CLASS_OFFSET_NODIE(AAirHockeyTable_NativeBase,AirHockeyTable_NativeBase,Table)
VERIFY_CLASS_OFFSET_NODIE(AAirHockeyTable_NativeBase,AirHockeyTable_NativeBase,WorldSpaceOrigin)
VERIFY_CLASS_OFFSET_NODIE(AAirHockeyTable_NativeBase,AirHockeyTable_NativeBase,TableCollision)
VERIFY_CLASS_OFFSET_NODIE(AAirHockeyTable_NativeBase,AirHockeyTable_NativeBase,Paddle1RB)
VERIFY_CLASS_OFFSET_NODIE(AAirHockeyTable_NativeBase,AirHockeyTable_NativeBase,Paddle2RB)
VERIFY_CLASS_OFFSET_NODIE(AAirHockeyTable_NativeBase,AirHockeyTable_NativeBase,PuckRB)
VERIFY_CLASS_OFFSET_NODIE(AAirHockeyTable_NativeBase,AirHockeyTable_NativeBase,Collision)
VERIFY_CLASS_OFFSET_NODIE(AAirHockeyTable_NativeBase,AirHockeyTable_NativeBase,PlayerInfo)
VERIFY_CLASS_OFFSET_NODIE(AAirHockeyTable_NativeBase,AirHockeyTable_NativeBase,Scorer)
VERIFY_CLASS_OFFSET_NODIE(AAirHockeyTable_NativeBase,AirHockeyTable_NativeBase,Puck)
VERIFY_CLASS_OFFSET_NODIE(AAirHockeyTable_NativeBase,AirHockeyTable_NativeBase,PaddlePuckRadius)
VERIFY_CLASS_OFFSET_NODIE(AAirHockeyTable_NativeBase,AirHockeyTable_NativeBase,PaddlePuckRadiusSq)
VERIFY_CLASS_OFFSET_NODIE(AAirHockeyTable_NativeBase,AirHockeyTable_NativeBase,MaxPuckSpeedSq)
VERIFY_CLASS_OFFSET_NODIE(AAirHockeyTable_NativeBase,AirHockeyTable_NativeBase,PuckPaddleSoundName)
VERIFY_CLASS_OFFSET_NODIE(AAirHockeyTable_NativeBase,AirHockeyTable_NativeBase,PuckTableSoundName)
VERIFY_CLASS_OFFSET_NODIE(AAirHockeyTable_NativeBase,AirHockeyTable_NativeBase,ScoreSoundName)
VERIFY_CLASS_SIZE_NODIE(AAirHockeyTable_NativeBase)
#endif // VERIFY_CLASS_SIZES
