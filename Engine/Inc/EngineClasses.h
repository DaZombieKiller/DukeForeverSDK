/*===========================================================================
    C++ class definitions exported from UnrealScript.
    This is automatically generated by the tools.
    DO NOT modify this manually! Edit the corresponding .uc files instead!
    If you even *think* about it, the engine will *know* and will come looking
    to devour your soul. You don't want to make it angry. Trust me.
===========================================================================*/
#if _MSC_VER
#pragma warning(disable:4121)
#elif defined PS3
#pragma ms_struct on
#endif
#pragma pack (push,4)

#ifndef ENGINE_API
#define ENGINE_API DLL_IMPORT
#endif

#ifndef NAMES_ONLY
#define AUTOGENERATE_NAME(name) extern ENGINE_API FName ENGINE_##name;
#define AUTOGENERATE_FUNCTION(cls,idx,name)
#endif

AUTOGENERATE_NAME(Spawned)
AUTOGENERATE_NAME(Destroyed)
AUTOGENERATE_NAME(GainedChild)
AUTOGENERATE_NAME(LostChild)
AUTOGENERATE_NAME(Trigger)
AUTOGENERATE_NAME(UnTrigger)
AUTOGENERATE_NAME(HitWall)
AUTOGENERATE_NAME(Landed)
AUTOGENERATE_NAME(ZoneChange)
AUTOGENERATE_NAME(Touch)
AUTOGENERATE_NAME(UnTouch)
AUTOGENERATE_NAME(Bump)
AUTOGENERATE_NAME(BaseChange)
AUTOGENERATE_NAME(Attach)
AUTOGENERATE_NAME(Detach)
AUTOGENERATE_NAME(ActorEntered)
AUTOGENERATE_NAME(ActorLeaving)
AUTOGENERATE_NAME(InterpolateEnd)
AUTOGENERATE_NAME(Tick)
AUTOGENERATE_NAME(PostNetReceive)
AUTOGENERATE_NAME(AnimEndEx)
AUTOGENERATE_NAME(Init)
AUTOGENERATE_NAME(KeyType)
AUTOGENERATE_NAME(KeyEvent)
AUTOGENERATE_NAME(GetMaterial)
AUTOGENERATE_NAME(AmbientMusicEarlyEnd)
AUTOGENERATE_NAME(AmbientMusicEnded)
AUTOGENERATE_NAME(ClientMessage)
AUTOGENERATE_NAME(PostBeginPlay)
AUTOGENERATE_NAME(RegisterPrecacheComponents)
AUTOGENERATE_NAME(FindSoundAndSpeak)
AUTOGENERATE_NAME(TakeDamage)
AUTOGENERATE_NAME(PreBeginPlay)
AUTOGENERATE_NAME(IsFrozen)
AUTOGENERATE_NAME(SetPause)
AUTOGENERATE_NAME(ExecuteEffect)
AUTOGENERATE_NAME(Used)
AUTOGENERATE_NAME(PostNetInitial)
AUTOGENERATE_NAME(CanUse4Weapons)
AUTOGENERATE_NAME(HurtRadiusActivity)
AUTOGENERATE_NAME(SetNewPostureState)
AUTOGENERATE_NAME(FindHUDEffectIndex)
AUTOGENERATE_NAME(SetHUDEffectByIndex)
AUTOGENERATE_NAME(ShakeView)
AUTOGENERATE_NAME(TraceFireHit)
AUTOGENERATE_NAME(Initialize)
AUTOGENERATE_NAME(CheckTouching)
AUTOGENERATE_NAME(Unfire)
AUTOGENERATE_NAME(ServerTravel)
AUTOGENERATE_NAME(CanActivateNow)
AUTOGENERATE_NAME(PhysicsChange)
AUTOGENERATE_NAME(SetAnimControllerState)
AUTOGENERATE_NAME(GetHUDEffectByIndex)
AUTOGENERATE_NAME(BuildPath)
AUTOGENERATE_NAME(GiveTo)
AUTOGENERATE_NAME(GetFullSize)
AUTOGENERATE_NAME(AttemptFire)
AUTOGENERATE_NAME(BeginPlay)
AUTOGENERATE_NAME(PostRender)
AUTOGENERATE_NAME(InstigateClientTravel)
AUTOGENERATE_NAME(IsActiveInGame)
AUTOGENERATE_NAME(DestroyInventory)
AUTOGENERATE_NAME(PhysicsVolumeChange)
AUTOGENERATE_NAME(LostCarriedActor)
AUTOGENERATE_NAME(PreGameInit)
AUTOGENERATE_NAME(ShouldSpawnDamageEffectDecal)
AUTOGENERATE_NAME(AttachToPath)
AUTOGENERATE_NAME(PostLoadMap)
AUTOGENERATE_NAME(Update)
AUTOGENERATE_NAME(FinalizeState)
AUTOGENERATE_NAME(EnumerateRawAnimationSequences)
AUTOGENERATE_NAME(TeamMessage)
AUTOGENERATE_NAME(PreRender)
AUTOGENERATE_NAME(ChangeTeam)
AUTOGENERATE_NAME(OnStartLoading)
AUTOGENERATE_NAME(IncompleteReplication)
AUTOGENERATE_NAME(CanBreatheNormally)
AUTOGENERATE_NAME(IsAlien)
AUTOGENERATE_NAME(GetLoadedAmmo)
AUTOGENERATE_NAME(GenerateDamageMomentum)
AUTOGENERATE_NAME(Locked)
AUTOGENERATE_NAME(ReceivedText)
AUTOGENERATE_NAME(RenderOverlays)
AUTOGENERATE_NAME(InitGame)
AUTOGENERATE_NAME(ForceGenerate)
AUTOGENERATE_NAME(TravelPreAccept)
AUTOGENERATE_NAME(GetSpawnLocation)
AUTOGENERATE_NAME(AttemptMelee)
AUTOGENERATE_NAME(OnPostBeginPlay)
AUTOGENERATE_NAME(SoundOwnedByLocalPlayer)
AUTOGENERATE_NAME(GetCurrentBarrelLocation)
AUTOGENERATE_NAME(CalcRadiusDamagePercent)
AUTOGENERATE_NAME(rShakeView)
AUTOGENERATE_NAME(TraceFireMaterialHit)
AUTOGENERATE_NAME(GetUsePhrase)
AUTOGENERATE_NAME(ShouldDrawHUDInfoUsePhrase)
AUTOGENERATE_NAME(RaiseHealthToCap)
AUTOGENERATE_NAME(NU_Mesh)
AUTOGENERATE_NAME(PerformAdditionalDamageEffect)
AUTOGENERATE_NAME(ClientBreakGlass)
AUTOGENERATE_NAME(KillLoadingScreen)
AUTOGENERATE_NAME(SetInitialLightState)
AUTOGENERATE_NAME(OnLeaveRoom)
AUTOGENERATE_NAME(OnPlayerJoin)
AUTOGENERATE_NAME(OnPlayerLeave)
AUTOGENERATE_NAME(OnEndGame)
AUTOGENERATE_NAME(KImpact)
AUTOGENERATE_NAME(Closed)
AUTOGENERATE_NAME(Opened)
AUTOGENERATE_NAME(OnInviteAccepted)
AUTOGENERATE_NAME(OnPostLogin)
AUTOGENERATE_NAME(ReceivedBinary)
AUTOGENERATE_NAME(ReceiveLocalizedMessage)
AUTOGENERATE_NAME(FellOutOfWorld)
AUTOGENERATE_NAME(ClientTravel)
AUTOGENERATE_NAME(GetBeaconText)
AUTOGENERATE_NAME(TravelPostAccept)
AUTOGENERATE_NAME(Generate)
AUTOGENERATE_NAME(StopHoldingBreath)
AUTOGENERATE_NAME(GetIndexedMaterial)
AUTOGENERATE_NAME(ShouldShowHoloDukeEffect)
AUTOGENERATE_NAME(InputHook)
AUTOGENERATE_NAME(SpawnPickupForWeapon)
AUTOGENERATE_NAME(StopWeaponViewKick)
AUTOGENERATE_NAME(GetBaseDamage)
AUTOGENERATE_NAME(NotifyPlayerChangedTeam)
AUTOGENERATE_NAME(DoZoomUp)
AUTOGENERATE_NAME(DoZoomDown)
AUTOGENERATE_NAME(HandleServerFireDown)
AUTOGENERATE_NAME(IsZoomedIn)
AUTOGENERATE_NAME(HandleServerFireUp)
AUTOGENERATE_NAME(HandleServerMeleeDown)
AUTOGENERATE_NAME(HandleServerMeleeUp)
AUTOGENERATE_NAME(IsPreMatch)
AUTOGENERATE_NAME(OnDLCRescanComplete)
AUTOGENERATE_NAME(ActivateHUD)
AUTOGENERATE_NAME(GetOverridePlayerClass)
AUTOGENERATE_NAME(DoTick)
AUTOGENERATE_NAME(RealCompressedServerMove)
AUTOGENERATE_NAME(ShouldTakeDamageImpulse)
AUTOGENERATE_NAME(TakeHitDamage)
AUTOGENERATE_NAME(GetBoneName)
AUTOGENERATE_NAME(NotifyHitActor)
AUTOGENERATE_NAME(UnhideWeapon)
AUTOGENERATE_NAME(PreRemove)
AUTOGENERATE_NAME(DoFire_Effects)
AUTOGENERATE_NAME(UpdateWeaponTraceVars)
AUTOGENERATE_NAME(RecordShot)
AUTOGENERATE_NAME(CanSpawnBloodyMess)
AUTOGENERATE_NAME(SprintBreathing)
AUTOGENERATE_NAME(PlayCountdownSound)
AUTOGENERATE_NAME(CalculateDeferredFallingDamage)
AUTOGENERATE_NAME(StartLanding)
AUTOGENERATE_NAME(FinishPickup)
AUTOGENERATE_NAME(FailedPickupAttempt)
AUTOGENERATE_NAME(HandlePickup)
AUTOGENERATE_NAME(AdjustDOFBlur)
AUTOGENERATE_NAME(UpdateLookHitActor)
AUTOGENERATE_NAME(ServerReceivedInventory)
AUTOGENERATE_NAME(SpecialLook)
AUTOGENERATE_NAME(UpdateShrinkScale)
AUTOGENERATE_NAME(IsDestroyedActorPool)
AUTOGENERATE_NAME(GetNumDecals)
AUTOGENERATE_NAME(CreateActorPoolsOnDestroyed)
AUTOGENERATE_NAME(IsVehicleSpace)
AUTOGENERATE_NAME(ReceiveAddJoinLeaveEvent)
AUTOGENERATE_NAME(Login)
AUTOGENERATE_NAME(OnShutdown)
AUTOGENERATE_NAME(OnLeaderboardError)
AUTOGENERATE_NAME(PostLogin)
AUTOGENERATE_NAME(PreClientTravel)
AUTOGENERATE_NAME(InterpolateBegin)
AUTOGENERATE_NAME(CalcView)
AUTOGENERATE_NAME(ReceivedLine)
AUTOGENERATE_NAME(OnTick)
AUTOGENERATE_NAME(HitBackdrop)
AUTOGENERATE_NAME(GetTravelURL)
AUTOGENERATE_NAME(ProcessDedicatedServerTravel)
AUTOGENERATE_NAME(OnJoinRoom)
AUTOGENERATE_NAME(Paused)
AUTOGENERATE_NAME(Unpaused)
AUTOGENERATE_NAME(NU_SetShrinkScale)
AUTOGENERATE_NAME(TickAlmostDisabled)
AUTOGENERATE_NAME(EndedDesiredRotation)
AUTOGENERATE_NAME(AttachAnimationControllerEx)
AUTOGENERATE_NAME(HeadVolumeChange)
AUTOGENERATE_NAME(ShouldDropCarriedActor)
AUTOGENERATE_NAME(IsInLevelTransition)
AUTOGENERATE_NAME(NU_WeaponStateImpulse)
AUTOGENERATE_NAME(CreateShield)
AUTOGENERATE_NAME(SaveComplete)
AUTOGENERATE_NAME(NU_MountParent)
AUTOGENERATE_NAME(NU_PostureStateChange)
AUTOGENERATE_NAME(NU_WeaponChange)
AUTOGENERATE_NAME(BeginSenseObject)
AUTOGENERATE_NAME(EndSenseObject)
AUTOGENERATE_NAME(OrientDrawScale3D)
AUTOGENERATE_NAME(NU_DrawScale)
AUTOGENERATE_NAME(NU_DrawScale3D)
AUTOGENERATE_NAME(NU_Skins)
AUTOGENERATE_NAME(NU_StaticMesh)
AUTOGENERATE_NAME(DecoPlayAnim)
AUTOGENERATE_NAME(CanBaseOn)
AUTOGENERATE_NAME(CalcRadiusDamage)
AUTOGENERATE_NAME(CalculatePawnPhysics)
AUTOGENERATE_NAME(IsAIMoveable)
AUTOGENERATE_NAME(ScriptGetActorColor)
AUTOGENERATE_NAME(DrawscaleChanged)
AUTOGENERATE_NAME(GetFirstTouchingPawn)
AUTOGENERATE_NAME(GetGrabUsePhrase)
AUTOGENERATE_NAME(CanGrabUseCombine)
AUTOGENERATE_NAME(GetGrabUseCombinePhrase)
AUTOGENERATE_NAME(PerformTraceFireEffects)
AUTOGENERATE_NAME(NotifyCrushed)
AUTOGENERATE_NAME(TakePhysicsImpactDamage)
AUTOGENERATE_NAME(GenerateExplosionImpulse)
AUTOGENERATE_NAME(ShouldOpenDoor)
AUTOGENERATE_NAME(ViewMapperDisableCrosshairHUD)
AUTOGENERATE_NAME(UsableSomethingUsesHomePose)
AUTOGENERATE_NAME(SpawnWeaponTracer)
AUTOGENERATE_NAME(GetHUDNumber)
AUTOGENERATE_NAME(GetTeleportToLocation)
AUTOGENERATE_NAME(StartMatch)
AUTOGENERATE_NAME(CausedPhysicsImpactDamage)
AUTOGENERATE_NAME(FindFriendSpawner)
AUTOGENERATE_NAME(GetImpactEffectAdditionalScale)
AUTOGENERATE_NAME(ShouldPlayDamageSound)
AUTOGENERATE_NAME(PostPhysMeqon)
AUTOGENERATE_NAME(IsEnemyTo)
AUTOGENERATE_NAME(CheckLock)
AUTOGENERATE_NAME(GetLongKeyName)
AUTOGENERATE_NAME(WeaponTraceFireHit)
AUTOGENERATE_NAME(MountParentDestroyed)
AUTOGENERATE_NAME(IsMostlyShrunk)
AUTOGENERATE_NAME(UnlockActionPoint)
AUTOGENERATE_NAME(LockActionPoint)
AUTOGENERATE_NAME(GetBaseBarrelLocation)
AUTOGENERATE_NAME(BrainHUD)
AUTOGENERATE_NAME(UsableSomethingInterpolatingOut)
AUTOGENERATE_NAME(PostUserTick)
AUTOGENERATE_NAME(ShouldUpdateRotation)
AUTOGENERATE_NAME(ScriptCanActivate)
AUTOGENERATE_NAME(PhysicsEntityGroupChanged)
AUTOGENERATE_NAME(NotifyPhysicsContact)
AUTOGENERATE_NAME(NotifyDesiredRotationEnd)
AUTOGENERATE_NAME(NotifyDesiredRotationBegin)
AUTOGENERATE_NAME(NotifyDesiredLocationEnd)
AUTOGENERATE_NAME(NotifyDesiredLocationBegin)
AUTOGENERATE_NAME(FadeOverlayEffect)
AUTOGENERATE_NAME(InventoryIsActive)
AUTOGENERATE_NAME(GetShotError)
AUTOGENERATE_NAME(rClientDebugDrawCross)
AUTOGENERATE_NAME(rClientDebugDrawCylinder)
AUTOGENERATE_NAME(AnimationControllerAnimStateEnd)
AUTOGENERATE_NAME(OnSleep)
AUTOGENERATE_NAME(OnWake)
AUTOGENERATE_NAME(OnEntitySleep)
AUTOGENERATE_NAME(OnEntityWake)
AUTOGENERATE_NAME(ServerNextMap)
AUTOGENERATE_NAME(GetPawnMoveSpeed)
AUTOGENERATE_NAME(QueryInteractKeyInfoState)
AUTOGENERATE_NAME(ShouldDrawCrosshair)
AUTOGENERATE_NAME(NotifyFinishingMove)
AUTOGENERATE_NAME(FinishingMoveAllowed)
AUTOGENERATE_NAME(CalcMaxAITicksPerFrame)
AUTOGENERATE_NAME(SayDialog)
AUTOGENERATE_NAME(GetInternalControlRemapper)
AUTOGENERATE_NAME(DetachedFromMountParent)
AUTOGENERATE_NAME(AttachedToMountParent)
AUTOGENERATE_NAME(EnableIKSystem)
AUTOGENERATE_NAME(ViewMapperSetCrosshair)
AUTOGENERATE_NAME(ModifyHealthCap)
AUTOGENERATE_NAME(HiddenChanged)
AUTOGENERATE_NAME(rClientHearSound)
AUTOGENERATE_NAME(rClientShortHearSound)
AUTOGENERATE_NAME(rClientVeryShortHearSound)
AUTOGENERATE_NAME(Died)
AUTOGENERATE_NAME(IsFullyLoaded)
AUTOGENERATE_NAME(Warn)
AUTOGENERATE_NAME(WalkedOn)
AUTOGENERATE_NAME(ConstraintDisabled)
AUTOGENERATE_NAME(IsVisiontTypeActive)
AUTOGENERATE_NAME(AcceptLevelTransitionInfo)
AUTOGENERATE_NAME(GenerateLevelTransitionInfo)
AUTOGENERATE_NAME(HurtRadiusDirectional)
AUTOGENERATE_NAME(HurtRadius)
AUTOGENERATE_NAME(SpeakAnim)
AUTOGENERATE_NAME(AddListener)
AUTOGENERATE_NAME(ClientReceivePhysicsState)
AUTOGENERATE_NAME(MeshEvent)
AUTOGENERATE_NAME(ClientShatterGlass)
AUTOGENERATE_NAME(Speak)
AUTOGENERATE_NAME(AISoundAllowed)
AUTOGENERATE_NAME(HearSound)
AUTOGENERATE_NAME(VehicleIsFullSize)
AUTOGENERATE_NAME(dnQAAnimationLoad)
AUTOGENERATE_NAME(dnQATextureLoad)
AUTOGENERATE_NAME(dnQABumpmapLoad)
AUTOGENERATE_NAME(dnQASoundLoad)
AUTOGENERATE_NAME(DesiredMovementCrush)
AUTOGENERATE_NAME(dnQASkinMeshLoad)
AUTOGENERATE_NAME(RegisterIKClass)
AUTOGENERATE_NAME(ApplyDukeStompKnockback)
AUTOGENERATE_NAME(GetCrosshairIndex)
AUTOGENERATE_NAME(GetIKActor)
AUTOGENERATE_NAME(FindMountedActor)
AUTOGENERATE_NAME(PickedUp)
AUTOGENERATE_NAME(GetPistolClass)
AUTOGENERATE_NAME(GiveToAI)
AUTOGENERATE_NAME(PadReleased_Y)
AUTOGENERATE_NAME(PadReleased_X)
AUTOGENERATE_NAME(PadReleased_B)
AUTOGENERATE_NAME(PadReleased_A)
AUTOGENERATE_NAME(PadPressed_Y)
AUTOGENERATE_NAME(PadPressed_X)
AUTOGENERATE_NAME(PadPressed_B)
AUTOGENERATE_NAME(PadPressed_A)
AUTOGENERATE_NAME(PadReleased_Right)
AUTOGENERATE_NAME(PadReleased_Left)
AUTOGENERATE_NAME(PadReleased_Down)
AUTOGENERATE_NAME(ApplyAIScale)
AUTOGENERATE_NAME(SetDifficulty)
AUTOGENERATE_NAME(HandleHit)
AUTOGENERATE_NAME(GiveEgoCapAward)
AUTOGENERATE_NAME(UsableSomething_AIShouldIgnoreUser)
AUTOGENERATE_NAME(ShouldRemoveStepHeightContact)
AUTOGENERATE_NAME(GetEnemySpottedDialog)
AUTOGENERATE_NAME(PawnNeedsSpecialStepHeightCollision)
AUTOGENERATE_NAME(DetachPawn)
AUTOGENERATE_NAME(PrepareForExportTravel)
AUTOGENERATE_NAME(PadReleased_Up)
AUTOGENERATE_NAME(PadPressed_Right)
AUTOGENERATE_NAME(PadPressed_Left)
AUTOGENERATE_NAME(PadPressed_Down)
AUTOGENERATE_NAME(PadPressed_Up)
AUTOGENERATE_NAME(NotifyButtonPadChange)
AUTOGENERATE_NAME(NotifyDirectionalPadChange)
AUTOGENERATE_NAME(CallFunction)
AUTOGENERATE_NAME(UpdateFaceTarget)
AUTOGENERATE_NAME(GetFaceTargetLocation)
AUTOGENERATE_NAME(AnimEarlyEnd)
AUTOGENERATE_NAME(FootVolumeChange)
AUTOGENERATE_NAME(ActorLeavingVolume)
AUTOGENERATE_NAME(ActorEnteredVolume)
AUTOGENERATE_NAME(FindStaticActor)
AUTOGENERATE_NAME(ExecuteVerifySelf)
AUTOGENERATE_NAME(ModifyHealth)
AUTOGENERATE_NAME(MassChange)
AUTOGENERATE_NAME(PreLoadMap)
AUTOGENERATE_NAME(EndedDesiredLocation)
AUTOGENERATE_NAME(RestoreCollision)
AUTOGENERATE_NAME(StoreCollision)
AUTOGENERATE_NAME(BroadcastLog)
AUTOGENERATE_NAME(DuckUp)
AUTOGENERATE_NAME(DuckDown)
AUTOGENERATE_NAME(TraceFromCrosshairMesh)
AUTOGENERATE_NAME(PawnUsesSphereCollision)
AUTOGENERATE_NAME(ReachedDestination)
AUTOGENERATE_NAME(ShouldAbortMovement)
AUTOGENERATE_NAME(rClientVeryShortHearActorSound)
AUTOGENERATE_NAME(rClientShortHearActorSound)
AUTOGENERATE_NAME(rClientHearActorSound)
AUTOGENERATE_NAME(OnLeaderboardRefreshed)
AUTOGENERATE_NAME(CanDrawCrosshair)
AUTOGENERATE_NAME(OnServerBrowserClosed)
AUTOGENERATE_NAME(GlassRespawned)
AUTOGENERATE_NAME(GlassShattered)
AUTOGENERATE_NAME(GlassCracked)
AUTOGENERATE_NAME(EnabledStateChange)
AUTOGENERATE_NAME(LoginNewClass)
AUTOGENERATE_NAME(Unlocked)
AUTOGENERATE_NAME(OnJoinRoomFailed)
AUTOGENERATE_NAME(Accepted)
AUTOGENERATE_NAME(ResolveFailed)
AUTOGENERATE_NAME(Resolved)
AUTOGENERATE_NAME(FinishedLoading)
AUTOGENERATE_NAME(TriggerBySurface)
AUTOGENERATE_NAME(BroadcastLocalizedMessage)
AUTOGENERATE_NAME(IsGoreFree)
AUTOGENERATE_NAME(BroadcastMessage)
AUTOGENERATE_NAME(BroadcastJoinLeaveEvent)
AUTOGENERATE_NAME(PreLogin)
AUTOGENERATE_NAME(SetInitialState)
AUTOGENERATE_NAME(EndEvent)
AUTOGENERATE_NAME(BeginEvent)
AUTOGENERATE_NAME(AcceptInventory)
AUTOGENERATE_NAME(PlayerTimeout)
AUTOGENERATE_NAME(PlayerCalcView)
AUTOGENERATE_NAME(OnStopWaitingForResponse)
AUTOGENERATE_NAME(TraceFromCrosshairMeshEx)
AUTOGENERATE_NAME(TickHeldBreath)
AUTOGENERATE_NAME(HealthRecovery_UpdateRecharge)
AUTOGENERATE_NAME(EgoRecovery_UpdateRecharge)
AUTOGENERATE_NAME(UpdateGameSpeed)
AUTOGENERATE_NAME(PostSpawnDestroyedActorPool)
AUTOGENERATE_NAME(ResumeCallbackTimerDestroyedActorPool)
AUTOGENERATE_NAME(AdjustLeftHandIn)
AUTOGENERATE_NAME(AdjustLeftHandOut)
AUTOGENERATE_NAME(GetShrunkPercentage)
AUTOGENERATE_NAME(DoNotifyUnUsed)
AUTOGENERATE_NAME(PlayerMove)
AUTOGENERATE_NAME(HandlePlayerMovePrePhysics)
AUTOGENERATE_NAME(TriggerViewRotationAdjust)
AUTOGENERATE_NAME(UsableSomethingOverrideFOV)
AUTOGENERATE_NAME(UsableSomethingGetOverrideFOV)
AUTOGENERATE_NAME(CallServerMove)
AUTOGENERATE_NAME(SetChallIdx)
AUTOGENERATE_NAME(CheckChallenge)
AUTOGENERATE_NAME(GetDefaultStatus)
AUTOGENERATE_NAME(PawnAllowPickup)
AUTOGENERATE_NAME(PickedUpAdditionalCopy)
AUTOGENERATE_NAME(UpdateAdditionalAnimationState)
AUTOGENERATE_NAME(OnEvalBonesHelper)
AUTOGENERATE_NAME(PostUserAnimTick)
AUTOGENERATE_NAME(ClientAdjustPosition)
AUTOGENERATE_NAME(DrawCrosshairHUD)
AUTOGENERATE_NAME(NotifyLandedEffect)
AUTOGENERATE_NAME(CalculatePhysics_Base3DMotion_ShouldFlyUp)
AUTOGENERATE_NAME(CalculatePhysics_Base3DMotion_ShouldFlyDown)
AUTOGENERATE_NAME(PostureStateExChangeBase)
AUTOGENERATE_NAME(PrepareForFastSave)
AUTOGENERATE_NAME(GetHealthMeterPercent)
AUTOGENERATE_NAME(GetZoomTime)
AUTOGENERATE_NAME(HandleLimboHit)
AUTOGENERATE_NAME(GetRemainingRoundTime)
AUTOGENERATE_NAME(MimicOwner)
AUTOGENERATE_NAME(UnMimicOwner)
AUTOGENERATE_NAME(StartedSprinting)
AUTOGENERATE_NAME(StoppedSprinting)
AUTOGENERATE_NAME(RemoveListener)
AUTOGENERATE_NAME(PlayerCalcView_Behind)
AUTOGENERATE_NAME(PlayerCalcView_MPDead)
AUTOGENERATE_NAME(MountCorpseCamera)
AUTOGENERATE_NAME(GetCompositeWeaponAnimName)
AUTOGENERATE_NAME(CheckCanBeUsedBy)
AUTOGENERATE_NAME(CanBeGrabbedBy)
AUTOGENERATE_NAME(ShouldDropBehind)
AUTOGENERATE_NAME(CorpseGibbed)
AUTOGENERATE_NAME(SpawnLimb)
AUTOGENERATE_NAME(RemoveBoneCap)
AUTOGENERATE_NAME(GetTraceFireAim)
AUTOGENERATE_NAME(PerformFire_Custom)
AUTOGENERATE_NAME(ProjectileFire)
AUTOGENERATE_NAME(GetProjectileClass)
AUTOGENERATE_NAME(ExpendAmmo)
AUTOGENERATE_NAME(PreAdd)
AUTOGENERATE_NAME(ShutdownErrorMessage)
AUTOGENERATE_NAME(ClientPerformDamageCategoryEffectEx)
AUTOGENERATE_NAME(GetBodyPartForBone)
AUTOGENERATE_NAME(GetDestroyableBoneForBone)
AUTOGENERATE_NAME(GetLimbDestroyedEffect)
AUTOGENERATE_NAME(GetLimbCapInfo)
AUTOGENERATE_NAME(GetBonePartMapper)
AUTOGENERATE_NAME(ExpandingDeath)
AUTOGENERATE_NAME(ScheduleTraceFireHit)
AUTOGENERATE_NAME(NotifyNearTraceFire)
AUTOGENERATE_NAME(HearNearMissEffect)
AUTOGENERATE_NAME(LowGoreReplacementEffect)
AUTOGENERATE_NAME(OnVirtualKeyboardClosed)
AUTOGENERATE_NAME(DirtyTraceMasks)
AUTOGENERATE_NAME(HurtRadiusNoVisTest)
AUTOGENERATE_NAME(GetMapsForGameType)
AUTOGENERATE_NAME(GetOptionsForGameType)
AUTOGENERATE_NAME(IsPaxDemo)
AUTOGENERATE_NAME(GetSpawnLocationWithOverride)
AUTOGENERATE_NAME(IdleWarning)
AUTOGENERATE_NAME(ClientAckGoodMove)
AUTOGENERATE_NAME(OnNewDLCCheckComplete)
AUTOGENERATE_NAME(SetNetSpeed)
AUTOGENERATE_NAME(rClientFindAndPlaySound)
AUTOGENERATE_NAME(rNativeClientFindAndPlaySound)
AUTOGENERATE_NAME(HostLeft)
AUTOGENERATE_NAME(ReliableRealCompressedServerMove)
AUTOGENERATE_NAME(CarrierFireUp)
AUTOGENERATE_NAME(CarrierFireDown)
AUTOGENERATE_NAME(CarrierMeleeUp)
AUTOGENERATE_NAME(CarrierMeleeDown)
AUTOGENERATE_NAME(CodeUnlockedPreorderGroup)
AUTOGENERATE_NAME(HandlePostureStateExBase_Turning)
AUTOGENERATE_NAME(PostureStateExLeaving_Unknown)
AUTOGENERATE_NAME(PostureStateExLeaving_Standing)
AUTOGENERATE_NAME(PostureStateExLeaving_Crouching)
AUTOGENERATE_NAME(PostureStateExLeaving_InAir)
AUTOGENERATE_NAME(PostureStateExLeaving_Swimming)
AUTOGENERATE_NAME(PostureStateExLeaving_Jetpack)
AUTOGENERATE_NAME(PostureStateExLeaving_Mounted)
AUTOGENERATE_NAME(PostureStateExLeaving_Ladder)
AUTOGENERATE_NAME(PostureStateExChange_Standing)
AUTOGENERATE_NAME(PostureStateExChange_Crouching)
AUTOGENERATE_NAME(PostureStateExChange_InAir)
AUTOGENERATE_NAME(PostureStateExChange_Swimming)
AUTOGENERATE_NAME(PostureStateExChange_Jetpack)
AUTOGENERATE_NAME(PostureStateExChange_Mounted)
AUTOGENERATE_NAME(PostureStateExChange_Ladder)
AUTOGENERATE_NAME(OnNewDLCInstalled)
AUTOGENERATE_NAME(GetDecalMaterial)
AUTOGENERATE_NAME(GetIndexedDecalMaterial)
AUTOGENERATE_NAME(HasDiscoveredEgoAward)
AUTOGENERATE_NAME(OnChatMessageReceived)
AUTOGENERATE_NAME(ClientCreateDesiredLocationEx)
AUTOGENERATE_NAME(ClientCreateDesiredRotation)
AUTOGENERATE_NAME(TickBloat)
AUTOGENERATE_NAME(GetMapPackageSwap)
AUTOGENERATE_NAME(NativeEndGame)
AUTOGENERATE_NAME(PostMoveFillFrom)

#ifndef NAMES_ONLY


//***************************************************************************//
/*	\class UFactory
*/
//***************************************************************************//

class ENGINE_API UFactory : public UObject
{
public:
    dnArray<FString> Formats;
    DECLARE_CLASS(UFactory,UObject,0,Engine)
    NO_DEFAULT_CONSTRUCTOR_START(UFactory)
    NO_DEFAULT_CONSTRUCTOR_INITLAST(Formats)
};
// Class Factory exported:
//   Properties size: 64 bytes (104 total)


//***************************************************************************//
/*	\class UTextBufferFactory
*/
//***************************************************************************//

class ENGINE_API UTextBufferFactory : public UFactory
{
public:
    DECLARE_CLASS(UTextBufferFactory,UFactory,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UTextBufferFactory)
};
// Class TextBufferFactory exported:
//   Properties size: 0 bytes (104 total)


//***************************************************************************//
/*	\class UUpdateServerCommandlet
*/
//***************************************************************************//

class ENGINE_API UUpdateServerCommandlet : public UCommandlet
{
public:
    DECLARE_CLASS(UUpdateServerCommandlet,UCommandlet,0|CLASS_Transient,Engine)
    NO_DEFAULT_CONSTRUCTOR(UUpdateServerCommandlet)
};
// Class UpdateServerCommandlet exported:
//   Properties size: 60 bytes (536 total)


//***************************************************************************//
/*	\class UMasterServerCommandlet
*/
//***************************************************************************//

class ENGINE_API UMasterServerCommandlet : public UCommandlet
{
public:
    DECLARE_CLASS(UMasterServerCommandlet,UCommandlet,0|CLASS_Transient,Engine)
    NO_DEFAULT_CONSTRUCTOR(UMasterServerCommandlet)
};
// Class MasterServerCommandlet exported:
//   Properties size: 976 bytes (1452 total)


//***************************************************************************//
/*	\class UServerCommandlet
*/
//***************************************************************************//

class ENGINE_API UServerCommandlet : public UCommandlet
{
public:
    DECLARE_CLASS(UServerCommandlet,UCommandlet,0|CLASS_Transient,Engine)
    NO_DEFAULT_CONSTRUCTOR(UServerCommandlet)
};
// Class ServerCommandlet exported:
//   Properties size: 0 bytes (476 total)


//***************************************************************************//
/*	\class UGameEngine
*/
//***************************************************************************//

class ENGINE_API UGameEngine : public UEngine
{
public:
    BITFIELD RenderWithoutFocus:1 GCC_PACK(4);
    dnArray<FString> ServerPackages GCC_PACK(4);
    dnArray<FString> ServerActors;
    DECLARE_CLASS(UGameEngine,UEngine,0|CLASS_Transient|CLASS_Config,Engine)
    NO_DEFAULT_CONSTRUCTOR_START(UGameEngine)
    NO_DEFAULT_CONSTRUCTOR_INIT(ServerPackages)
    NO_DEFAULT_CONSTRUCTOR_INITLAST(ServerActors)
};
// Class GameEngine exported:
//   Properties size: 108 bytes (236 total)


//***************************************************************************//
/*	\class UNetDriver
*/
//***************************************************************************//

class ENGINE_API UNetDriver : public USubsystem
{
public:
    BITFIELD AllowDownloads:1 GCC_PACK(4);
    INT LanServerMaxTickRate GCC_PACK(4);
    INT NetServerMaxTickRate;
    INT MinClientRate;
    INT MaxClientRate;
    INT MaxTolerablePing;
    INT MinTolerableNetSpeed;
    FLOAT ServerTravelPause;
    FLOAT SpawnPrioritySeconds;
    FLOAT RelevantTimeout;
    FLOAT KeepAliveTime;
    FLOAT InitialConnectTimeout;
    FLOAT ConnectionTimeout;
    DECLARE_CLASS(UNetDriver,USubsystem,0|CLASS_Transient|CLASS_Config,Engine)
    NO_DEFAULT_CONSTRUCTOR(UNetDriver)
};
// Class NetDriver exported:
//   Properties size: 108 bytes (152 total)


//***************************************************************************//
/*	\class UAgentNetDriver
*/
//***************************************************************************//

class ENGINE_API UAgentNetDriver : public UNetDriver
{
public:
    DECLARE_CLASS(UAgentNetDriver,UNetDriver,0|CLASS_Transient|CLASS_Config,Engine)
    NO_DEFAULT_CONSTRUCTOR(UAgentNetDriver)
};
// Class AgentNetDriver exported:
//   Properties size: 16 bytes (168 total)


//***************************************************************************//
/*	\class UTcpNetDriver
*/
//***************************************************************************//

class ENGINE_API UTcpNetDriver : public UNetDriver
{
public:
    BITFIELD LogPortUnreach:1 GCC_PACK(4);
    BITFIELD LogMaxConnPerIPPerMin:1;
    INT MaxConnPerIPPerMinute GCC_PACK(4);
    DECLARE_CLASS(UTcpNetDriver,UNetDriver,0|CLASS_Transient|CLASS_Config,Engine)
    NO_DEFAULT_CONSTRUCTOR(UTcpNetDriver)
};
// Class TcpNetDriver exported:
//   Properties size: 32 bytes (184 total)


//***************************************************************************//
/*	\class UDemoRecDriver
*/
//***************************************************************************//

class ENGINE_API UDemoRecDriver : public UNetDriver
{
public:
    FStringNoInit DemoSpectatorClass;
    DECLARE_CLASS(UDemoRecDriver,UNetDriver,0|CLASS_Transient|CLASS_Config,Engine)
    NO_DEFAULT_CONSTRUCTOR(UDemoRecDriver)
};
// Class DemoRecDriver exported:
//   Properties size: 44 bytes (196 total)


//***************************************************************************//
/*	\class UOnlineAgent
*/
//***************************************************************************//


struct UOnlineAgent_eventShutdownErrorMessage_Parms
{
    INT Reason;
};

struct UOnlineAgent_eventProcessDedicatedServerTravel_Parms
{
    FString URL;
};

struct UOnlineAgent_eventGetTravelURL_Parms
{
    FString in_NextMapName;
    FString in_NextGameModeName;
    FString ReturnValue;
};
class ENGINE_API UOnlineAgent : public UOnlineSubsystem
{
public:
    dnArray<class UOnlineAgentListener*> OnlineAgentListeners;
    FPlayListEntry CurrentPlaylist;
    INT CurrentPlaylistMapIndex;
    INT CurrentMapId;
    INT CurrentGameModeId;
    INT CurrentMutatorId;
    FStringNoInit CurrentMapName;
    FStringNoInit CurrentGameModeName;
    FStringNoInit CurrentMutatorName;
    FStringNoInit CustomMatchString;
    FStringNoInit AdditionalClientTravelOptions;
    FStringNoInit AdditionalServerTravelOptions;
    dnArray<FLeaderBoardData> LeaderboardEntries;
    FLeaderBoardData CurrentPlayerLeaderboardData;
    dnArray<FSAgentPlayer> LobbyPlayers;
    BITFIELD bWaitingForResponse:1 GCC_PACK(4);
    INT Quitter GCC_PACK(4);
    INT EORCountTime;
    DECLARE_FUNCTION(execIsDLCInstalled);
    DECLARE_FUNCTION(execCheckForNewDLC);
    DECLARE_FUNCTION(execGetInstalledDlcMask);
    DECLARE_FUNCTION(execGetNewDlcNames);
    DECLARE_FUNCTION(execHasInstalledNewDlc);
    DECLARE_FUNCTION(execGetCorruptDLCNames);
    DECLARE_FUNCTION(execIsDLCCorrupt);
    DECLARE_FUNCTION(execIsPrivateMatch);
    DECLARE_FUNCTION(execIsActive);
    DECLARE_FUNCTION(execBreakpoint);
    DECLARE_FUNCTION(execStopAsyncLeaderboardOperations);
    DECLARE_FUNCTION(execCancel);
    DECLARE_FUNCTION(execProcessDedicatedServerTravel);
    DECLARE_FUNCTION(execStartWaitingForResponse);
    DECLARE_FUNCTION(execIsWaitingForResponse);
    DECLARE_FUNCTION(execStopVoIPRecording);
    DECLARE_FUNCTION(execStartVoIPRecording);
    DECLARE_FUNCTION(execSetReliableVoIP);
    DECLARE_FUNCTION(execIsVoipTeamOnly);
    DECLARE_FUNCTION(execSetTeamGame);
    DECLARE_FUNCTION(execAddVoIPPlayer);
    DECLARE_FUNCTION(execGetLocalizedGameTypeForId);
    DECLARE_FUNCTION(execSubmitScoreToLeaderboard);
    DECLARE_FUNCTION(execRefreshLeaderboard);
    DECLARE_FUNCTION(execShowPartyUI);
    DECLARE_FUNCTION(execIsInMainMenu);
    DECLARE_FUNCTION(execGetChatPermission);
    DECLARE_FUNCTION(execGetOnlinePermission);
    DECLARE_FUNCTION(execHasOnlinePermission);
    DECLARE_FUNCTION(execIsSignedIn);
    DECLARE_FUNCTION(execLogin);
    DECLARE_FUNCTION(execIsLoggedIn);
    DECLARE_FUNCTION(execJoinLobby);
    DECLARE_FUNCTION(execCheckInvites);
    DECLARE_FUNCTION(execHasInvite);
    DECLARE_FUNCTION(execGetDefaultPlayerName);
    DECLARE_FUNCTION(execShowStore);
    DECLARE_FUNCTION(execGetPlayerProfileTexture);
    DECLARE_FUNCTION(execShowVirtualKeyboard);
    DECLARE_FUNCTION(execTranslateJoinFailReason);
    DECLARE_FUNCTION(execTranslateShutdownReason);
    DECLARE_FUNCTION(execShowGamercardFromAccountID);
    DECLARE_FUNCTION(execShowGamercardFromUid);
    DECLARE_FUNCTION(execShowGamercardByName);
    DECLARE_FUNCTION(execShowGamerCard);
    DECLARE_FUNCTION(execGetCountdownTime);
    DECLARE_FUNCTION(execShouldShowCountdownTimer);
    DECLARE_FUNCTION(execGetTravelURL);
    DECLARE_FUNCTION(execPlaylistHasNextMap);
    DECLARE_FUNCTION(execSendChatMessage);
    DECLARE_FUNCTION(execIsHost);
    DECLARE_FUNCTION(execIsInGame);
    DECLARE_FUNCTION(execLoadNextMap);
    DECLARE_FUNCTION(execDisconnectUnreal);
    DECLARE_FUNCTION(execIsInParty);
    DECLARE_FUNCTION(execShowSystemInviteUI);
    DECLARE_FUNCTION(execGetGameMaxPlayers);
    DECLARE_FUNCTION(execGetHostPingFor);
    DECLARE_FUNCTION(execGetLocalAgentPlayer);
    DECLARE_FUNCTION(execGetAgentPlayers);
    DECLARE_FUNCTION(execGetAgentPlayerAccountId);
    DECLARE_FUNCTION(execGetPlayerVoIPState);
    DECLARE_FUNCTION(execIsPlayerMuted);
    DECLARE_FUNCTION(execMutePlayer);
    DECLARE_FUNCTION(execRequestChangeTeam);
    DECLARE_FUNCTION(execKickPlayer);
    DECLARE_FUNCTION(execGetLevel);
    DECLARE_FUNCTION(execSaveLevel);
    DECLARE_FUNCTION(execReadyUp);
    DECLARE_FUNCTION(execEndRound);
    DECLARE_FUNCTION(execEndGame);
    DECLARE_FUNCTION(execStartRound);
    DECLARE_FUNCTION(execStartGame);
    DECLARE_FUNCTION(execLeaveGame);
    DECLARE_FUNCTION(execJoinGame);
    DECLARE_FUNCTION(execOnPostBeginPlay);
    DECLARE_FUNCTION(execOnPostLogin);
    DECLARE_FUNCTION(execGetSearchGame);
    DECLARE_FUNCTION(execGetSearchGameCount);
    DECLARE_FUNCTION(execSearchGames);
    DECLARE_FUNCTION(execCreateGame);
    DECLARE_FUNCTION(execQuickMatch);
    DECLARE_FUNCTION(execUnregisterListener);
    DECLARE_FUNCTION(execRegisterListener);
    inline void __fastcall eventShutdownErrorMessage(INT Reason)
    {
        UOnlineAgent_eventShutdownErrorMessage_Parms Parms;
        Parms.Reason=Reason;
        ProcessEvent(FindFunctionChecked(ENGINE_ShutdownErrorMessage), &Parms);
    }
    inline void __fastcall eventProcessDedicatedServerTravel(const FString& URL)
    {
        UOnlineAgent_eventProcessDedicatedServerTravel_Parms Parms;
        Parms.URL=URL;
        ProcessEvent(FindFunctionChecked(ENGINE_ProcessDedicatedServerTravel), &Parms);
    }
    inline FString __fastcall eventGetTravelURL(const FString& in_NextMapName, const FString& in_NextGameModeName)
    {
        UOnlineAgent_eventGetTravelURL_Parms Parms;
        Parms.in_NextMapName=in_NextMapName;
        Parms.in_NextGameModeName=in_NextGameModeName;
        ProcessEvent(FindFunctionChecked(ENGINE_GetTravelURL), &Parms);
        return Parms.ReturnValue;
    }
    inline void __fastcall eventInit()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_Init), NULL);
    }
    DECLARE_CLASS(UOnlineAgent,UOnlineSubsystem,0|CLASS_Transient|CLASS_Config,Engine)
    NO_DEFAULT_CONSTRUCTOR_START(UOnlineAgent)
    NO_DEFAULT_CONSTRUCTOR_INIT(OnlineAgentListeners)
    NO_DEFAULT_CONSTRUCTOR_INIT(CurrentPlaylist)
    NO_DEFAULT_CONSTRUCTOR_INIT(LeaderboardEntries)
    NO_DEFAULT_CONSTRUCTOR_INITLAST(LobbyPlayers)
};
// Class OnlineAgent exported:
//   Properties size: 224 bytes (268 total)


//***************************************************************************//
/*	\class URender
*/
//***************************************************************************//

class ENGINE_API URender : public USubsystem
{
public:
    DECLARE_CLASS(URender,USubsystem,0|CLASS_Transient|CLASS_Config,Engine)
    NO_DEFAULT_CONSTRUCTOR(URender)
};
// Class Render exported:
//   Properties size: 84 bytes (128 total)


//***************************************************************************//
/*	\class UInput
*/
//***************************************************************************//

class ENGINE_API UInput : public USubsystem
{
public:
    DECLARE_CLASS(UInput,USubsystem,0|CLASS_Transient|CLASS_Config,Engine)
    NO_DEFAULT_CONSTRUCTOR(UInput)
};
// Class Input exported:
//   Properties size: 6316 bytes (6360 total)


//***************************************************************************//
/*	\class URenderDevice
*/
//***************************************************************************//

class ENGINE_API URenderDevice : public USubsystem
{
public:
    INT DescFlags;
    FStringNoInit Description;
    DECLARE_CLASS(URenderDevice,USubsystem,0|CLASS_Transient|CLASS_Config,Engine)
    NO_DEFAULT_CONSTRUCTOR(URenderDevice)
};
// Class RenderDevice exported:
//   Properties size: 164 bytes (208 total)


//***************************************************************************//
/*	\class UAudioSubsystem
*/
//***************************************************************************//

class ENGINE_API UAudioSubsystem : public USubsystem
{
public:
    DECLARE_CLASS(UAudioSubsystem,USubsystem,0|CLASS_Transient|CLASS_Config,Engine)
    NO_DEFAULT_CONSTRUCTOR(UAudioSubsystem)
};
// Class AudioSubsystem exported:
//   Properties size: 0 bytes (44 total)


//***************************************************************************//
/*	\class UMetagameData
*/
//***************************************************************************//

class ENGINE_API UMetagameData : public USubsystem
{
public:
    dnArray<FMetaGameDataStruct> ChallengeStorageArray;
    dnArray<FMetaGameDataStruct> StatStorageArray;
    INT TotalXP;
    BITFIELD bSeenOverdriveMsg:1 GCC_PACK(4);
    BITFIELD bHittingDisk:1;
    BITFIELD bAllowResetNew:1;
    DECLARE_FUNCTION(execLoadMetagame);
    DECLARE_FUNCTION(execSaveMetagame);
    DECLARE_CLASS(UMetagameData,USubsystem,0,Engine)
    NO_DEFAULT_CONSTRUCTOR_START(UMetagameData)
    NO_DEFAULT_CONSTRUCTOR_INIT(ChallengeStorageArray)
    NO_DEFAULT_CONSTRUCTOR_INITLAST(StatStorageArray)
};
// Class MetagameData exported:
//   Properties size: 32 bytes (76 total)


//***************************************************************************//
/*	\class USystem
*/
//***************************************************************************//

class ENGINE_API USystem : public USubsystem
{
public:
    dnArray<FName> Suppress;
    dnArray<FString> Paths;
    FStringNoInit CacheExt;
    FStringNoInit CachePath;
    FStringNoInit SavePath;
    INT PurgeCacheDays;
    DECLARE_CLASS(USystem,USubsystem,0|CLASS_Transient|CLASS_Config,Engine)
    NO_DEFAULT_CONSTRUCTOR_START(USystem)
    NO_DEFAULT_CONSTRUCTOR_INIT(Suppress)
    NO_DEFAULT_CONSTRUCTOR_INITLAST(Paths)
};
// Class System exported:
//   Properties size: 64 bytes (108 total)


//***************************************************************************//
/*	\class UExporter
*/
//***************************************************************************//

class ENGINE_API UExporter : public UObject
{
public:
    dnArray<FString> Formats;
    DECLARE_CLASS(UExporter,UObject,0,Engine)
    NO_DEFAULT_CONSTRUCTOR_START(UExporter)
    NO_DEFAULT_CONSTRUCTOR_INITLAST(Formats)
};
// Class Exporter exported:
//   Properties size: 24 bytes (64 total)


//***************************************************************************//
/*	\class UObjectExporterT3D
*/
//***************************************************************************//

class ENGINE_API UObjectExporterT3D : public UExporter
{
public:
    DECLARE_CLASS(UObjectExporterT3D,UExporter,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UObjectExporterT3D)
};
// Class ObjectExporterT3D exported:
//   Properties size: 0 bytes (64 total)


//***************************************************************************//
/*	\class AActor
*/
//***************************************************************************//


struct AActor_eventNU_DrawScale3D_Parms
{
    FVector NewDrawscale3D;
};

struct AActor_eventNU_DrawScale_Parms
{
    FLOAT NewDrawscale;
};

struct AActor_eventNU_MountParent_Parms
{
    class AActor* NewMountParent;
};

struct AActor_eventNU_Skins_Parms
{
    dnArray<class UMaterialEx*> NewSkins;
};

struct AActor_eventNU_StaticMesh_Parms
{
    class UStaticMesh* NewStaticMesh;
};

struct AActor_eventNU_Mesh_Parms
{
    class UMesh* NewMesh;
};

struct AActor_eventRegisterPrecacheComponents_Parms
{
    class UPrecacheIndex* PrecacheIndex;
};

struct AActor_eventIsDestroyedActorPool_Parms
{
    BITFIELD ReturnValue;
};

struct AActor_eventIsPaxDemo_Parms
{
    BITFIELD ReturnValue;
};

struct AActor_eventIsGoreFree_Parms
{
    BITFIELD ReturnValue;
};

struct AActor_eventEnumerateRawAnimationSequences_Parms
{
    dnArray<FSAnimationEnumeration> References;
};

struct AActor_eventIsAIMoveable_Parms
{
    BITFIELD ReturnValue;
};

struct AActor_eventFindMountedActor_Parms
{
    FName FindTag;
    class UClass* FindClass;
    class AActor* ReturnValue;
};

struct AActor_eventFindFriendSpawner_Parms
{
    class UClass* FindClass;
    class AdnFriendFX_Spawners* ReturnValue;
};

struct AActor_eventFindStaticActor_Parms
{
    class UClass* FindClass;
    BITFIELD bDontCreate;
    class AActor* ReturnValue;
};

struct AActor_eventSpecialLook_Parms
{
    class APlayerPawn* LookPlayer;
    class AInteractiveActor* ReturnValue;
};

struct AActor_eventInputHook_Parms
{
    FLOAT aForward;
    FLOAT aLookUp;
    FLOAT aTurn;
    FLOAT aStrafe;
    FLOAT DeltaTime;
};

struct AActor_eventViewMapperSetCrosshair_Parms
{
    INT ReturnValue;
};

struct AActor_eventViewMapperDisableCrosshairHUD_Parms
{
    BITFIELD ReturnValue;
};

struct AActor_eventKeyEvent_Parms
{
    BYTE Key;
    BYTE Action;
    FLOAT Delta;
    BITFIELD ReturnValue;
};

struct AActor_eventKeyType_Parms
{
    BYTE Key;
    BITFIELD ReturnValue;
};

struct AActor_eventCalcView_Parms
{
    class AActor* CameraActor;
    FVector CameraLocation;
    FRotator CameraRotation;
};

struct AActor_eventRenderOverlays_Parms
{
    class UCanvas* Canvas;
};

struct AActor_eventUsed_Parms
{
    class AActor* Other;
    class APawn* EventInstigator;
};

struct AActor_eventTriggerBySurface_Parms
{
    INT SurfaceIndex;
};

struct AActor_eventUnTrigger_Parms
{
    class AActor* Other;
    class APawn* EventInstigator;
};

struct AActor_eventTrigger_Parms
{
    class AActor* Other;
    class APawn* EventInsigator;
};

struct AActor_eventOnEvalBonesHelper_Parms
{
    BITFIELD ReturnValue;
};

struct AActor_eventDecoPlayAnim_Parms
{
    FName Sequence;
    FLOAT Rate;
    FLOAT TweenTime;
    INT Channel;
    FSAnimFlags SequenceFlags;
    BITFIELD bAnimPhysics;
};

struct AActor_eventAnimEarlyEnd_Parms
{
    FSAnimEndInfo AnimEndInfo;
};

struct AActor_eventAnimEndEx_Parms
{
    FSAnimEndInfo AnimEndInfo;
};

struct AActor_eventSoundOwnedByLocalPlayer_Parms
{
    BITFIELD ReturnValue;
};

struct AActor_eventNotifyPhysicsContact_Parms
{
    class AActor* Actor;
};

struct AActor_eventAttachToPath_Parms
{
    FName PathName;
    BITFIELD TeleportTo;
};

struct AActor_eventInterpolateEnd_Parms
{
    class AActor* Other;
};

struct AActor_eventInterpolateBegin_Parms
{
    class AActor* Other;
};

struct AActor_eventDetach_Parms
{
    class AActor* Other;
};

struct AActor_eventAttach_Parms
{
    class AActor* Other;
};

struct AActor_eventDesiredMovementCrush_Parms
{
    class AActor* HurtActor;
    FSDesiredCrush CrushInfo;
};

struct AActor_eventVehicleIsFullSize_Parms
{
    BITFIELD ReturnValue;
};

struct AActor_eventGetFirstTouchingPawn_Parms
{
    class APawn* ReturnValue;
};

struct AActor_eventPhysicsVolumeChange_Parms
{
    class APhysicsVolume* NewVolume;
};

struct AActor_eventLostChild_Parms
{
    class AActor* Other;
};

struct AActor_eventGainedChild_Parms
{
    class AActor* Other;
};

struct AActor_eventZoneChange_Parms
{
    class AZoneInfo* NewZone;
};

struct AActor_eventUnTouch_Parms
{
    class AActor* Other;
};

struct AActor_eventTouch_Parms
{
    class AActor* Other;
};

struct AActor_eventBump_Parms
{
    class AActor* Other;
};

struct AActor_eventHitWall_Parms
{
    FVector HitNormal;
    class AActor* HitWall;
};

struct AActor_eventLanded_Parms
{
    FVector HitNormal;
    class AActor* LandedOnActor;
};

struct AActor_eventPhysicsChange_Parms
{
    BYTE PreviousPhysics;
};

struct AActor_eventClientCreateDesiredRotation_Parms
{
    FRotator NewRotationTarget;
    BYTE NewRotationStyle;
    FLOAT NewRotationTimeTotal;
    FLOAT NewRotationTimeMid;
    FLOAT NewRotationExponent;
    FRotator NewRotationRate;
    BITFIELD bRelativeRotation;
    FName NewRotationEvent;
    FName NewRotationFunction;
    BITFIELD bShortestDistance;
    FName NewRotationEventAbort;
    FName NewRotationFunctionAbort;
    FSDesiredCrush NewRotationCrush;
    BYTE NewRotationStyleStopped;
};

struct AActor_eventClientCreateDesiredLocationEx_Parms
{
    FSDesiredLocation NewDesiredLocation;
    BITFIELD bRelativeLocation;
};

struct AActor_eventGetIndexedDecalMaterial_Parms
{
    class UClass* DecalClass;
    INT Index;
    class UMaterialEx* ReturnValue;
};

struct AActor_eventGetDecalMaterial_Parms
{
    class UClass* DecalClass;
    class UMaterialEx* ReturnValue;
};

struct AActor_eventSpawnWeaponTracer_Parms
{
    FVector TracerStart;
    FVector TracerEnd;
    FLOAT TracerChance;
    class UClass* TracerBeamClass;
    class UClass* TracerBubblesClass;
    class AActor* HitActor;
};

struct AActor_eventPerformTraceFireEffects_Parms
{
    class UClass* TraceDamageType;
    FVector TraceStart;
    FVector TraceEnd;
    class AActor* HitActor;
};

struct AActor_eventTraceFireHit_Parms
{
    class AActor* SourceActor;
    class UClass* TraceDamageType;
    FVector SourceTraceOrigin;
    FVector HitLocation;
    FVector HitNormal;
    FName HitBoneName;
    BITFIELD bExtentTrace;
    BYTE ReturnValue;
};

struct AActor_eventWeaponTraceFireHit_Parms
{
    class AActor* HitActor;
    class UClass* TraceDamageType;
    FVector SourceTraceOrigin;
    FVector HitLocation;
    FVector HitNormal;
    FName HitBoneName;
};

struct AActor_eventPerformAdditionalDamageEffect_Parms
{
    class UClass* DamageType;
    class AActor* ShootActor;
    FLOAT ShootActorRelativeDrawscale;
    FVector HitLocation;
    FVector HitNormal;
    class UClass* HitMaterial;
};

struct AActor_eventShouldSpawnDamageEffectDecal_Parms
{
    class UClass* DamageType;
    class UClass* HitMaterial;
    class AActor* ShootActor;
    BITFIELD ReturnValue;
};

struct AActor_eventGetImpactEffectAdditionalScale_Parms
{
    FLOAT ReturnValue;
};

struct AActor_eventShouldPlayDamageSound_Parms
{
    class UClass* DamageType;
    BITFIELD ReturnValue;
};

struct AActor_eventTraceFireMaterialHit_Parms
{
    class UClass* TraceDamageType;
    class AActor* HitActor;
    FVector HitLocation;
    FVector HitNormal;
    class UClass* HitMaterial;
    BITFIELD bNoDecal;
};

struct AActor_eventNotifyHitActor_Parms
{
    class AActor* HitActor;
    class UClass* DamageType;
};

struct AActor_eventClientPerformDamageCategoryEffectEx_Parms
{
    class UClass* DamageType;
    class UClass* HitMaterial;
    class AActor* HitActor;
    FVector HitLocation;
    FVector HitNormal;
    BITFIELD bNoDecal;
};

struct AActor_eventHurtRadiusActivity_Parms
{
    class AActor* DamageInstigator;
    FLOAT DamageAmount;
    FVector DamageOrigin;
    FLOAT DamageRadius;
    FLOAT DamageFalloffStart;
    class UClass* DamageType;
    FVector DamageStart;
    BITFIELD bIgnoreDrawScale;
    FLOAT RelativeScale;
};

struct AActor_eventCalcRadiusDamage_Parms
{
    class AActor* DamageWho;
    FLOAT DamageAmount;
    FVector DamageOrigin;
    FVector DamageTest;
    FLOAT DamageRadius;
    FLOAT DamageFalloffStart;
    BITFIELD bDontScale;
    FLOAT ReturnValue;
};

struct AActor_eventCalcRadiusDamagePercent_Parms
{
    FVector DamageOrigin;
    FVector DamageTest;
    FLOAT DamageRadius;
    FLOAT DamageFalloffStart;
    FLOAT ReturnValue;
};

struct AActor_eventHurtRadiusDirectional_Parms
{
    FLOAT DamageAmount;
    FVector DamageOrigin;
    FLOAT DamageRadius;
    FLOAT DamageFalloffStart;
    FVector Direction;
    FLOAT DirectionAngleLimit;
    class UClass* DamageType;
    FVector DamageStart;
    FLOAT DamagePlayerScale;
};

struct AActor_eventHurtRadiusNoVisTest_Parms
{
    FLOAT DamageAmount;
    FVector DamageOrigin;
    FLOAT DamageRadius;
    FLOAT DamageFalloffStart;
    class UClass* DamageType;
    FVector DamageStart;
    FLOAT DamagePlayerScale;
    BITFIELD bIgnoreDrawScale;
};

struct AActor_eventHurtRadius_Parms
{
    FLOAT DamageAmount;
    FVector DamageOrigin;
    FLOAT DamageRadius;
    FLOAT DamageFalloffStart;
    class UClass* DamageType;
    FVector DamageStart;
    FLOAT DamagePlayerScale;
    BITFIELD bIgnoreDrawScale;
};

struct AActor_eventTakeHitDamage_Parms
{
    class APawn* HitInstigator;
    FLOAT HitDamage;
    FVector HitOrigin;
    FVector HitDirection;
    FName HitMeshBone;
    class UClass* HitDamageType;
    FVector HitDamageStart;
};

struct AActor_eventGetBoneName_Parms
{
    INT Index;
    FName ReturnValue;
};

struct AActor_eventGetBaseDamage_Parms
{
    class AActor* Victim;
    class APawn* DamageInstigator;
    class UClass* DamageType;
    FVector HitDirection;
    FVector HitPosition;
    FName BoneName;
    FVector SourceTraceOrigin;
    FLOAT ReturnValue;
};

struct AActor_eventTakeDamage_Parms
{
    class APawn* Instigator;
    FLOAT Damage;
    FVector DamageOrigin;
    FVector DamageDirection;
    class UClass* DamageType;
    FName HitBoneName;
    FVector DamageStart;
};

struct AActor_eventCallFunction_Parms
{
    FName FunctionNam;
};

struct AActor_eventTick_Parms
{
    FLOAT DeltaTime;
};

struct AActor_eventOrientDrawScale3D_Parms
{
    FVector DS3D;
    FVector ReturnValue;
};

struct AActor_eventFadeOverlayEffect_Parms
{
    FLOAT TargetAlpha;
    FLOAT TransitionTime;
};

struct AActor_eventDrawscaleChanged_Parms
{
    FLOAT DefaultDrawscaleRatio;
    FVector DefaultDrawscale3DRatio;
};

struct AActor_eventBroadcastJoinLeaveEvent_Parms
{
    FString PlayerName;
    BYTE Team;
    BITFIELD joining;
    BITFIELD idle;
};

struct AActor_eventBroadcastLocalizedMessage_Parms
{
    class UClass* Message;
    INT Switch;
    class APlayerReplicationInfo* RelatedPRI_1;
    class APlayerReplicationInfo* RelatedPRI_2;
    class UObject* OptionalObject;
    class UClass* OptionalClass;
};

struct AActor_eventWarn_Parms
{
    FString msg;
};

struct AActor_eventBroadcastLog_Parms
{
    FString msg;
    BITFIELD bBeep;
    FName Type;
};

struct AActor_eventBroadcastMessage_Parms
{
    FString msg;
    BITFIELD bBeep;
    FName Type;
};

struct AActor_eventGetBonePartMapper_Parms
{
    class UMesh* Mesh;
    class UClass* ReturnValue;
};

struct AActor_eventGetLimbCapInfo_Parms
{
    class UMesh* Mesh;
    FName BoneName;
    FSMountPrefab MountInfo;
    class UClass* ReturnValue;
};

struct AActor_eventGetLimbDestroyedEffect_Parms
{
    class UMesh* Mesh;
    FName BoneName;
    BITFIELD bFrozen;
    class UClass* ReturnValue;
};

struct AActor_eventGetDestroyableBoneForBone_Parms
{
    class UMesh* Mesh;
    FName BoneName;
    FName ReturnValue;
};

struct AActor_eventGetBodyPartForBone_Parms
{
    class UMesh* Mesh;
    FName BoneName;
    BYTE ReturnValue;
};

struct AActor_eventCreateActorPoolsOnDestroyed_Parms
{
    BITFIELD ReturnValue;
};
class ENGINE_API AActor : public UObject
{
public:
    INT CollisionTag;
    UPrimitive* CachePrimitive;
    INT TraceFalseMask;
    INT TraceTrueMaskEarly;
    INT TraceTrueMask;
    FVector Velocity;
    BYTE Physics;
    BITFIELD bAlwaysRejectTraceEarly:1 GCC_PACK(4);
    BITFIELD bTraceUsable:1;
    BITFIELD bTraceShootable:1;
    BITFIELD bNeverMeshAccurate:1;
    BITFIELD bCollisionAssumeValid:1;
    BITFIELD bUseCylinderCollision:1;
    BITFIELD bAITransparent:1;
    BITFIELD bSpecialLook:1;
    BITFIELD bRequestMeshAccurateMoveActorTrace:1;
    BITFIELD bAcceptMeshAccurateMoveActorTrace:1;
    BITFIELD bTraceAgainstMounts:1;
    BITFIELD bStatic:1;
    BITFIELD bBlockActors:1;
    BITFIELD bBlockPlayers:1;
    BITFIELD bBlockKarma:1;
    BITFIELD bBlockAI:1;
    BITFIELD bBlockPath:1;
    BITFIELD bStaticAI:1;
    BITFIELD bBlockParticles:1;
    BITFIELD bBlockBeams:1;
    BITFIELD bBlockCamera:1;
    BITFIELD bWorldGeometry:1;
    BITFIELD bOccludeSounds:1;
    BITFIELD bHidden:1;
    BITFIELD bIgnoreMaxRadius:1;
    BITFIELD bCanBeThrown:1;
    BITFIELD bIsLevelInfo:1;
    BITFIELD bIsZoneInfo:1;
    BITFIELD bIsPawn:1;
    BITFIELD bIsInfo:1;
    BITFIELD bIsBrush:1;
    BITFIELD bIsRenderActor:1;
    BITFIELD bIsInteractiveActor:1;
    BITFIELD bIsPlayerPawn:1;
    BITFIELD bIsMover:1;
    BITFIELD bIsDecoration:1;
    BITFIELD bIsdnDecoration:1;
    BITFIELD bIsdnUsableSomething:1;
    BITFIELD bIsInventory:1;
    BITFIELD bIsActivatableInventory:1;
    BITFIELD bIsBreakableGlass:1;
    BITFIELD bIsKarmaActor:1;
    BITFIELD bIsKarmaConstraint:1;
    BITFIELD bIsSoftParticleSystem:1;
    BITFIELD bIsInterpolationPoint:1;
    BITFIELD bIsVolume:1;
    BITFIELD bIsPhysicsVolume:1;
    BITFIELD bIsVehicle:1;
    BITFIELD bIsVehicleSensor:1;
    BITFIELD bIsVehicleDeco:1;
    BITFIELD bIsCorpse:1;
    BITFIELD bIsAmmoCasing:1;
    BITFIELD bIsProjectile:1;
    BITFIELD bIsPipeBombOrTripMine:1;
    BITFIELD bIsDestructibleArmor:1;
    BITFIELD bIsLightEx:1;
    BITFIELD bIsProjector:1;
    BITFIELD bIsProjectilePool:1;
    BITFIELD bIsDestroyedActorPool:1;
    BITFIELD bIsPickup:1;
    BITFIELD bIsAIActor:1;
    BITFIELD bIsCTBBabe:1;
    BITFIELD bIsHTTKMarker:1;
    BITFIELD bIsAssaultTrooper:1;
    BITFIELD bGameRelevant:1;
    BITFIELD bHurtEntry:1;
    BITFIELD bSpawnInitialized:1;
    BITFIELD bMountUpdate:1;
    BITFIELD bHasEvalBonesHelper:1;
    BITFIELD bTeleporting:1;
    BITFIELD bDeleteMe:1;
    BITFIELD bDeleting:1;
    BITFIELD bDestroyed:1;
    BITFIELD bSilentDestroy:1;
    BITFIELD bNoDelete:1;
    BITFIELD bDebugEvents:1;
    BITFIELD bUnlisted:1;
    BITFIELD bCanExistOutOfWorld:1;
    BITFIELD bNotForClient:1;
    BITFIELD bNoDamageGlass:1;
    BITFIELD bNoAutoCleanup:1;
    BITFIELD bGibActor:1;
    BITFIELD bDestroyOnLevelTransition:1;
    BITFIELD bGoryActor:1;
    BITFIELD bNoNativeTick:1;
    BITFIELD bDumbMesh:1;
    BITFIELD bTickOnlyRecent:1;
    BITFIELD bTickOnlyZoneRecent:1;
    BITFIELD bTickOnlyNearby:1;
    BITFIELD bTickOnlyWhenOwnerShould:1;
    BITFIELD bTickedLastFrame:1;
    BITFIELD bTickOnlyExternalPhysics:1;
    BITFIELD bLateTicker:1;
    BITFIELD bUseLightTag:1;
    BITFIELD bUseShadowTag:1;
    BITFIELD bNoAmbientLight:1;
    BITFIELD bForceTwoSidedShadows:1;
    BITFIELD bForceDirectionalShadows:1;
    BITFIELD bCanTeleport:1;
    BITFIELD bMovable:1;
    BITFIELD bBounce:1;
    BITFIELD bDisturbWaterSurface:1;
    BITFIELD bFixedRotationDir:1;
    BITFIELD bRotationRateChanging:1;
    BITFIELD bDesiredLocating:1;
    BITFIELD bDesiredRotatingPitch:1;
    BITFIELD bDesiredRotatingYaw:1;
    BITFIELD bDesiredRotatingRoll:1;
    BITFIELD bInterpolating:1;
    BITFIELD bJustTeleported:1;
    BITFIELD bForceEncroacher:1;
    BITFIELD bStopAmbientOnEndRotation:1;
    BITFIELD bStopAmbientOnEndLocation:1;
    BITFIELD bNotifyTargetOnRotationEnd:1;
    BITFIELD IndependentRotation:1;
    BITFIELD IndependentLocation:1;
    BITFIELD DestroyOnDismount:1;
    BITFIELD bGenerateMountOffsets:1;
    BITFIELD bTakeMountParentAsOwner:1;
    BITFIELD bNoFailMountedMovement:1;
    BITFIELD bUpdateMountParentRenderTime:1;
    BITFIELD bAcceptMinesInMultiplayer:1;
    BITFIELD bAcceptMinesAtAnyAngle:1;
    BITFIELD bAcceptMines:1;
    BITFIELD bHasPostMountUpdate:1;
    BITFIELD bNoInterpolationRotPitch:1;
    BITFIELD bNoInterpolationRotYaw:1;
    BITFIELD bNoInterpolationRotRoll:1;
    BITFIELD bNoInterpolationLocX:1;
    BITFIELD bNoInterpolationLocY:1;
    BITFIELD bNoInterpolationLocZ:1;
    BITFIELD bNoFailInterpolation:1;
    BITFIELD bAlwaysVisible:1;
    BITFIELD bPortalView:1;
    BITFIELD bAcceptsProjectors:1;
    BITFIELD bAcceptsDecalProjectors:1;
    BITFIELD bCastStencilShadows:1;
    BITFIELD bForceSmoothShadowUpdates:1;
    BITFIELD bUnlit:1;
    BITFIELD bIgnoreBList:1;
    BITFIELD bDontReflect:1;
    BITFIELD bLowerByCollision:1;
    BITFIELD bLowerAsPrePivot:1;
    BITFIELD bDisableRenderBatching:1;
    BITFIELD bDontHardwareOcclude:1;
    BITFIELD bNoTransparentFog:1;
    BITFIELD bAnimLight:1;
    BITFIELD bAnimEarlyEnd:1;
    BITFIELD bOneSidedMirror:1;
    BITFIELD bSortByCenter:1;
    BITFIELD bSortByLocation:1;
    BITFIELD bDoOverlayEffect:1;
    BITFIELD bOverlayEffectUsedAsHint:1;
    BITFIELD bOverlayBumpShader:1;
    BITFIELD bNeedsScriptActorColor:1;
    BITFIELD bPerformDamageEffect:1;
    BITFIELD AmbientMusicEnableVis:1;
    BITFIELD AmbientMusicIgnoreTimeDilation:1;
    BITFIELD SoundScaled:1;
    BITFIELD SoundNoOcclude:1;
    BITFIELD SoundNoDoppler:1;
    BITFIELD SoundIgnoreTimeDilation:1;
    BITFIELD TransientSoundNoOcclude:1;
    BITFIELD TransientSoundScaled:1;
    BITFIELD TransientSoundNoDoppler:1;
    BITFIELD bDrawableViewMapper:1;
    BITFIELD bNetTemporary:1;
    BITFIELD bNetOptional:1;
    BITFIELD bAlwaysRelevant:1;
    BITFIELD bReplicateWhenOwnerSeen:1;
    BITFIELD bReplicateTicking:1;
    BITFIELD bNoRoleSwap:1;
    BITFIELD bDebugReplication:1;
    BITFIELD bNetInitialRotation:1;
    BITFIELD bTravel:1;
    BITFIELD bWillTravel:1;
    BITFIELD bNeverTravel:1;
    BITFIELD bNetInitial:1;
    BITFIELD bNetOwner:1;
    BITFIELD bSimulatedPawn:1;
    BITFIELD bDemoRecording:1;
    BITFIELD bClientDemoRecording:1;
    BITFIELD bClientDemoNetFunc:1;
    BITFIELD bForceCollisionRep:1;
    BITFIELD bForceTagEventRep:1;
    BITFIELD bDontSimulateMotion:1;
    BITFIELD bDontReplicateMesh:1;
    BITFIELD bReplicateInstigator:1;
    BITFIELD bHiddenEd:1;
    BITFIELD bDirectional:1;
    BITFIELD bEdShouldSnap:1;
    BITFIELD bNoDrawEditorLines:1;
    BITFIELD bSelected:1;
    BITFIELD bEdSnap:1;
    BITFIELD bTempEditor:1;
    BITFIELD bHiddenTool:1;
    BITFIELD bStepUpAble:1;
    BITFIELD bCollideWhenPlacing:1;
    BITFIELD bCollideActors:1;
    BITFIELD bCollideWorld:1;
    BITFIELD bAIMoveable:1;
    BITFIELD bAutoNavDoor:1;
    BITFIELD bCollideActorsStored:1;
    BITFIELD bCollideWorldStored:1;
    BITFIELD bBlockActorsStored:1;
    BITFIELD bBlockPlayersStored:1;
    BITFIELD bBlockKarmaStored:1;
    BITFIELD bWasSNFiltered:1;
    BITFIELD bMoveWithSpecialCollisionTag:1;
    BITFIELD bSinglePlayer:1;
    BITFIELD bNet:1;
    BITFIELD bNetSpecial:1;
    BITFIELD bDontUseMeqonPhysics:1;
    BITFIELD bUsePlayerCollisions:1;
    BITFIELD bIgnoreInstigatorCollision:1;
    class UClass* GametypeSpecific GCC_PACK(4);
    class AActor* Owner;
    FPointRegion Region;
    class ALevelInfo* Level;
    INT NumOwned;
    class AActor* Target;
    class APawn* Instigator;
    ActorInfo* SPActorInfo;
    FName InitialState;
    FName Group;
    FName Tag;
    FName Event;
    dnArray<FSForwardTags> ForwardTags;
    dnArray<FSSpecialEvent> SpecialEvents;
    dnArray<class AActor*> ActorLinks;
    INT LatentInt;
    FLOAT LatentFloat;
    class AActor* Deleted;
    FLOAT PlacementZOffset;
    FName SpecialCollisionTag;
    FLOAT CollisionRadius;
    FLOAT CollisionHeight;
    dnArray<class UClass*> TouchClasses;
    FVector VisibleCollidingCenterOffset;
    dnArray<class AActor*> Touching;
    INT BasedActorCount;
    dnArray<FSBasedParticles> BasedParticlesList;
    dnArray<FOctreeNode*> OctreeNodes;
    FBox OctreeBox;
    FVector OctreeBoxCenter;
    FVector OctreeBoxRadii;
    class ANavVolume_Door* NavVolume;
    FLOAT TickSelfRecentTime;
    FLOAT TickZoneRecentTime;
    FLOAT TickNearbyRadius;
    INT TickStamp;
    FRotator RotationRate;
    FRotator RotationRateTarget;
    FLOAT RotationRateTargetTimer;
    FLOAT DisturbWaterStrength;
    FLOAT DisturbWaterRadius;
    FLOAT AccelRate;
    FLOAT ForcePawnBaseHeight;
    FName StartingInterpolationPoint;
    FLOAT PhysAlpha;
    FLOAT PhysRate;
    INT OldRoll;
    FLOAT RollLerpAlpha;
    INT DesiredLocationCurrent;
    dnArray<FSDesiredLocation> DesiredLocation;
    INT DesiredRotationPitchCurrent;
    INT DesiredRotationYawCurrent;
    INT DesiredRotationRollCurrent;
    dnArray<FSDesiredRotationAxis> DesiredRotationPitch;
    dnArray<FSDesiredRotationAxis> DesiredRotationYaw;
    dnArray<FSDesiredRotationAxis> DesiredRotationRoll;
    FLOAT Mass;
    FVector Location;
    FRotator Rotation;
    class AVolume* VolumeProxy;
    class APhysicsVolume* PhysicsVolume;
    FVector Acceleration;
    FVector OldLocation;
    FRotator OldRotation;
    FVector ColLocation;
    FLOAT NetworkTweenCompletion;
    FVector NetworkLocationDelta;
    FLOAT NetworkTweenRate;
    BYTE TickStyle;
    BYTE MountType;
    BYTE DismountPhysics;
    FName MountParentTag;
    FVector MountOrigin;
    FRotator MountAngles;
    FName MountMeshItem;
    class AActor* MountParent;
    dnArray<FSMountedActor> MountedActorList;
    BYTE Style;
    BYTE DrawType;
    BYTE AnimToggleState;
    INT AlphaSortGroup;
    FVector PrePivot;
    FVector PostPivot;
    FLOAT DrawScale;
    FVector DrawScale3D;
    class UMaterialEx* Sprite;
    class UMaterialEx* OverlayMaterial;
    FLOAT OverlayEffectAlpha;
    FLOAT OverlayEffectAlphaTarget;
    FLOAT OverlayEffectTransitionStartTime;
    FLOAT OverlayEffectTransitionTotalTime;
    FLOAT OverlayScaleU;
    FLOAT OverlayScaleV;
    class UMaterialEx* Texture;
    class UModel* Brush;
    class UStaticMesh* StaticMesh;
    class UStaticMesh* RenderStaticMesh;
    class UMesh* Mesh;
    class UMesh* RenderMesh;
    FLOAT LastRenderTime;
    dnArray<class UMaterialEx*> Skins;
    BYTE OwnerSeeStyle;
    BYTE DirtyRenderFlags;
    BYTE TraceFireHitResponse;
    BYTE VertexFunction;
    FLOAT VF_Phase;
    FLOAT VF_PhaseX;
    FLOAT VF_PhaseY;
    FLOAT VF_PhaseZ;
    FLOAT VF_Frequency;
    FLOAT VF_Amplitude;
    FLOAT VF_AmplitudeOffset;
    class AActor* CameraActor;
    FLOAT CameraFOV;
    class URenderTarget* MirrorRenderTarget;
    FVector MirrorNormal;
    FLOAT PixelMotionBlurFactor;
    dnArray<FSActorColor> ActorColorList;
    dnArray<FSActorColorFadeInfo> ActorColorFadeList;
    FOverlayBumpShaderInfo OverlayBumpShaderInfo;
    class UMeshInstance* MeshInstance;
    class UMeshInstance* RenderMeshInstance;
    class UStaticMeshInstance* StaticMeshInstance;
    class UStaticMeshInstance* RenderStaticMeshInstance;
    dnArray<class ALightEx*> LightExs;
    FName LightTag;
    FName ShadowTag;
    FLOAT DirShadowExtrudeDist;
    dnArray<dnProjectorInstance*> Projectors;
    class UConvexVolume* AntiPortal;
    dnArray<INT> Leaves;
    FBox LeafBox;
    INT VisibleLightTag;
    FName PortalViewName;
    dnRenderData* RenderData;
    class AActor* TickBefore;
    FLOAT TimeWarp;
    FLOAT LifeSpan;
    FLOAT LifeSpanVariance;
    dnArray<FSCallbackTimer> CallbackTimers;
    dnArray<FSCallbackTimer> CallbackTimers_Always;
    FLOAT AnimTimeScale;
    INT NetTag;
    FLOAT NetPriority;
    FLOAT NetUpdateFrequency;
    FVector TravelLocation;
    FRotator TravelRotation;
    BYTE Role;
    BYTE RemoteRole;
    BYTE SoundVolume;
    BYTE SoundPitch;
    INT SoundRadius;
    INT SoundInnerRadius;
    class USound* AmbientSound;
    FName AmbientSoundMixerGroup;
    FLOAT SoundOcclusionScale;
    FLOAT AmbientMusicVolume;
    FLOAT AmbientMusicStartTime;
    FLOAT AmbientMusicEarlyEndTime;
    FLOAT AmbientMusicInnerRadius;
    FLOAT AmbientMusicRadius;
    FLOAT AmbientMusicOldFadeTime;
    FLOAT AmbientMusicCrossfadeTime;
    FStringNoInit AmbientMusic;
    FName AmbientMusicMixerGroup;
    FLOAT TransientSoundVolume;
    FLOAT TransientSoundRadius;
    FLOAT TransientSoundInnerRadius;
    FLOAT TransientSoundPitch;
    FLOAT SoundPitchDrawScaleOverride;
    class UClass* VoicePack;
    dnArray<FSVPSoundThrottle> VoicePackSoundThrottles;
    class USound* DoneMovingSound;
    FName DoneMovingSoundName;
    class UClass* HurtRadiusAffectClass;
    class UClass* EffectsMaterial;
    dnArray<FSScaleModifierGroup> ScaleModifierGroupList;
    DECLARE_FUNCTION(execNU_Location);
    DECLARE_FUNCTION(execBSPSurfaceIsValidForMineAttachment);
    DECLARE_FUNCTION(execGetSaveGameMapName);
    DECLARE_FUNCTION(execFastSavesEnabled);
    DECLARE_FUNCTION(execSaveGameExistsEx);
    DECLARE_FUNCTION(execSaveGameExists);
    DECLARE_FUNCTION(execGetSavedGameLongInfo);
    DECLARE_FUNCTION(execGetSavedGameInfo);
    DECLARE_FUNCTION(execGetNumSavedGames);
    DECLARE_FUNCTION(execDeleteSavedGame);
    DECLARE_FUNCTION(execSaveGame);
    DECLARE_FUNCTION(execLoadGame);
    DECLARE_FUNCTION(execSendMailMessage);
    DECLARE_FUNCTION(execScreenShotIsValid);
    DECLARE_FUNCTION(execScreenshot);
    DECLARE_FUNCTION(execGetNextPlayerProfile);
    DECLARE_FUNCTION(execDestroyPlayerProfile);
    DECLARE_FUNCTION(execCreatePlayerProfile);
    DECLARE_FUNCTION(execSwitchToPlayerProfile);
    DECLARE_FUNCTION(execProfileSwitchNeedsReLaunch);
    DECLARE_FUNCTION(execGetCurrentPlayerProfile);
    DECLARE_FUNCTION(execGetMeshList);
    DECLARE_FUNCTION(execGetSkinList);
    DECLARE_FUNCTION(execGetNextMDSMapList);
    DECLARE_FUNCTION(execGetNextMDSMap);
    DECLARE_FUNCTION(execGetNextClass);
    DECLARE_FUNCTION(execGetNextThing);
    DECLARE_FUNCTION(execGetNextIntDesc);
    DECLARE_FUNCTION(execGetNextInt);
    DECLARE_FUNCTION(execGetURLMap);
    DECLARE_FUNCTION(execGetNextSkin);
    DECLARE_FUNCTION(execGetMapName);
    DECLARE_FUNCTION(execNewColor);
    DECLARE_FUNCTION(execRotateVectorAroundAxis);
    DECLARE_FUNCTION(execEvalTimeCurve);
    DECLARE_FUNCTION(execEvalTimeRampUnsafe);
    DECLARE_FUNCTION(execEvalTimeRamp);
    DECLARE_FUNCTION(execVisibleCollidingActors);
    DECLARE_FUNCTION(execMountedActorListActors);
    DECLARE_FUNCTION(execVisibleActors);
    DECLARE_FUNCTION(execRadiusActors);
    DECLARE_FUNCTION(execTraceActors);
    DECLARE_FUNCTION(execTouchingActors);
    DECLARE_FUNCTION(execChildActors);
    DECLARE_FUNCTION(execAllActors);
    DECLARE_FUNCTION(execAllProperties);
    DECLARE_FUNCTION(execMarkDirtyRenderFlags);
    DECLARE_FUNCTION(execCopyDisplaySkinsToActorSkins);
    DECLARE_FUNCTION(execGetNumberOfMaterials);
    DECLARE_FUNCTION(execGetRenderObjectDefaultTexture);
    DECLARE_FUNCTION(execSetRenderObjectTexture);
    DECLARE_FUNCTION(execGetRenderObjectTexture);
    DECLARE_FUNCTION(execSetPortalSurfaceState);
    DECLARE_FUNCTION(execIsIntersecting);
    DECLARE_FUNCTION(execGetLightBrightness);
    DECLARE_FUNCTION(execGetLightColor);
    DECLARE_FUNCTION(execTraceEx);
    DECLARE_FUNCTION(execTrace);
    DECLARE_FUNCTION(execFastTrace);
    DECLARE_FUNCTION(execEncompasses);
    DECLARE_FUNCTION(execFindNearWaterPoint);
    DECLARE_FUNCTION(execTraceWaterPoint);
    DECLARE_FUNCTION(execIsInWaterRegion);
    DECLARE_FUNCTION(execGetPointRegion);
    DECLARE_FUNCTION(execGetPointPhysicsVolume);
    DECLARE_FUNCTION(execPushOutCheck);
    DECLARE_FUNCTION(execPointCheck);
    DECLARE_FUNCTION(execActorClassPointCheck);
    DECLARE_FUNCTION(execPlayerCanSeeMe);
    DECLARE_FUNCTION(execZoneIsVisible);
    DECLARE_FUNCTION(execGetCameraViewInfo);
    DECLARE_FUNCTION(execGlobalTrigger);
    DECLARE_FUNCTION(execGetSpecialEventParms);
    DECLARE_FUNCTION(execUnregisterSpecialEvent);
    DECLARE_FUNCTION(execRegisterSpecialEvent);
    DECLARE_FUNCTION(execGetSequence);
    DECLARE_FUNCTION(execFreezeAnimations);
    DECLARE_FUNCTION(execGetAnimMovement);
    DECLARE_FUNCTION(execSetGlobalAnimRate);
    DECLARE_FUNCTION(execSetAnimRate);
    DECLARE_FUNCTION(execSetAnimFrame);
    DECLARE_FUNCTION(execClearAnimGroup);
    DECLARE_FUNCTION(execClearAnim);
    DECLARE_FUNCTION(execClearAnimAll);
    DECLARE_FUNCTION(execHasAnim);
    DECLARE_FUNCTION(execFinishAnim);
    DECLARE_FUNCTION(execGetAnimGroup);
    DECLARE_FUNCTION(execSetAnimGroup);
    DECLARE_FUNCTION(execIsAnimating);
    DECLARE_FUNCTION(execPlayAnimEx);
    DECLARE_FUNCTION(execOnDetachFromPinball);
    DECLARE_FUNCTION(execOnAttachToPinball);
    DECLARE_FUNCTION(execSetAmbientMusic);
    DECLARE_FUNCTION(execSetAmbientSound);
    DECLARE_FUNCTION(execScaleSoundVolume);
    DECLARE_FUNCTION(execScaleSoundPitch);
    DECLARE_FUNCTION(execScaleSoundRadius);
    DECLARE_FUNCTION(execFindAndStopSound);
    DECLARE_FUNCTION(execFindAndFadeSound);
    DECLARE_FUNCTION(execFindAndPlaySound);
    DECLARE_FUNCTION(execFindSoundIndex);
    DECLARE_FUNCTION(execPlayAmbientSoundInfo);
    DECLARE_FUNCTION(execGetSoundInfoDuration);
    DECLARE_FUNCTION(execStopSoundInfo);
    DECLARE_FUNCTION(execFadeSoundInfo);
    DECLARE_FUNCTION(execPlaySoundInfo);
    DECLARE_FUNCTION(execOverrideMixerGroupVolume);
    DECLARE_FUNCTION(execMusicPlay);
    DECLARE_FUNCTION(execFadeSound);
    DECLARE_FUNCTION(execPlaySound);
    DECLARE_FUNCTION(execStopAllMySounds);
    DECLARE_FUNCTION(execStopSound);
    DECLARE_FUNCTION(execSetSlotVisFalloffRate);
    DECLARE_FUNCTION(execSetSlotPitch);
    DECLARE_FUNCTION(execSetSlotVolume);
    DECLARE_FUNCTION(execSetGlobalVolume);
    DECLARE_FUNCTION(execGetSlotVisData);
    DECLARE_FUNCTION(execGetSlotLoopAlpha);
    DECLARE_FUNCTION(execGetSlotPitch);
    DECLARE_FUNCTION(execGetSlotVolume);
    DECLARE_FUNCTION(execGetSoundDuration);
    DECLARE_FUNCTION(execGetGlobalVolume);
    DECLARE_FUNCTION(execIsSoundPlayingOnSlot);
    DECLARE_FUNCTION(execGetVisibilityPoint);
    DECLARE_FUNCTION(execMarkers_ClearAll);
    DECLARE_FUNCTION(execMarkers_AddText);
    DECLARE_FUNCTION(execMarkers_AddSprite);
    DECLARE_FUNCTION(execMarkers_AddIcon);
    DECLARE_FUNCTION(execMarkers_AddCross);
    DECLARE_FUNCTION(execMarkers_AddBounds);
    DECLARE_FUNCTION(execMarkers_AddLine);
    DECLARE_FUNCTION(execMarkers_AddCylinder);
    DECLARE_FUNCTION(execMarkers_AddCircle);
    DECLARE_FUNCTION(execMarkers_AddArrow);
    DECLARE_FUNCTION(execMarkers_AddDiamond);
    DECLARE_FUNCTION(execMarkers_AddPoint);
    DECLARE_FUNCTION(execFinishInterpolation);
    DECLARE_FUNCTION(execVehicleDriverCanPickupItem);
    DECLARE_FUNCTION(execVehicleGetDriver);
    DECLARE_FUNCTION(execCalcProjVelocity);
    DECLARE_FUNCTION(execCreateDesiredRotation_Roll);
    DECLARE_FUNCTION(execCreateDesiredRotation_Yaw);
    DECLARE_FUNCTION(execCreateDesiredRotation_Pitch);
    DECLARE_FUNCTION(execClientCreateDesiredRotation);
    DECLARE_FUNCTION(execCreateDesiredRotation);
    DECLARE_FUNCTION(execDisableDesiredRotation_Roll);
    DECLARE_FUNCTION(execDisableDesiredRotation_Yaw);
    DECLARE_FUNCTION(execDisableDesiredRotation_Pitch);
    DECLARE_FUNCTION(execDisableDesiredRotation);
    DECLARE_FUNCTION(execSetDesiredRotation_Roll);
    DECLARE_FUNCTION(execSetDesiredRotation_Yaw);
    DECLARE_FUNCTION(execSetDesiredRotation_Pitch);
    DECLARE_FUNCTION(execSetDesiredRotation);
    DECLARE_FUNCTION(execDisableFixedRotationRate);
    DECLARE_FUNCTION(execSetFixedRotationRate);
    DECLARE_FUNCTION(execSetRotation);
    DECLARE_FUNCTION(execClientCreateDesiredLocationEx);
    DECLARE_FUNCTION(execCreateDesiredLocationEx);
    DECLARE_FUNCTION(execCreateDesiredLocation);
    DECLARE_FUNCTION(execDisableDesiredLocation);
    DECLARE_FUNCTION(execSetDesiredLocationPoints);
    DECLARE_FUNCTION(execSetDesiredLocation);
    DECLARE_FUNCTION(execSetLocation);
    DECLARE_FUNCTION(execMoveActor);
    DECLARE_FUNCTION(execDropToFloor);
    DECLARE_FUNCTION(execSetPhysics);
    DECLARE_FUNCTION(execSetOwner);
    DECLARE_FUNCTION(execGetGravity);
    DECLARE_FUNCTION(execSetMass);
    DECLARE_FUNCTION(execWorldExtentCheck);
    DECLARE_FUNCTION(execFindBlockingActors);
    DECLARE_FUNCTION(execFindSpot);
    DECLARE_FUNCTION(execAttachToActor);
    DECLARE_FUNCTION(execAttachToActorTagged);
    DECLARE_FUNCTION(execAttachToActorMountPrefab);
    DECLARE_FUNCTION(execGenerateMountPrefabLocation);
    DECLARE_FUNCTION(execDetachFromMountParent);
    DECLARE_FUNCTION(execForceMountUpdate);
    DECLARE_FUNCTION(execIsMountedTo);
    DECLARE_FUNCTION(execGetMountLocation);
    DECLARE_FUNCTION(execHandleInitialMountParent);
    DECLARE_FUNCTION(execGetCollisionBounds);
    DECLARE_FUNCTION(execShouldTouch);
    DECLARE_FUNCTION(execEmptyTouchClasses);
    DECLARE_FUNCTION(execRemoveTouchClass);
    DECLARE_FUNCTION(execAddTouchClass);
    DECLARE_FUNCTION(execSetCollision);
    DECLARE_FUNCTION(execSetCollisionSize);
    DECLARE_FUNCTION(execStaticAttachDecal);
    DECLARE_FUNCTION(execSpawnAmmoCasing);
    DECLARE_FUNCTION(execPerformTraceFireEffects);
    DECLARE_FUNCTION(execTraceFireHit);
    DECLARE_FUNCTION(execTraceFireMaterialHit);
    DECLARE_FUNCTION(execTraceActor);
    DECLARE_FUNCTION(execPerformDamageCategoryEffectEx);
    DECLARE_FUNCTION(execTraceFire);
    DECLARE_FUNCTION(execSpawn);
    DECLARE_FUNCTION(execDestroy);
    DECLARE_FUNCTION(execCallFunction);
    DECLARE_FUNCTION(execGetTickFrameStamp);
    DECLARE_FUNCTION(execFinishSlottedSound);
    DECLARE_FUNCTION(execSleep);
    DECLARE_FUNCTION(execCopyTimers);
    DECLARE_FUNCTION(execEndCallbackTimer_Always);
    DECLARE_FUNCTION(execSetCallbackTimer_Always);
    DECLARE_FUNCTION(execEndCallbackTimer);
    DECLARE_FUNCTION(execSetCallbackTimer);
    DECLARE_FUNCTION(execGetOverlayEffectAlpha);
    DECLARE_FUNCTION(execGetActorColor);
    DECLARE_FUNCTION(execSetActorColorEx);
    DECLARE_FUNCTION(execSetActorColor);
    DECLARE_FUNCTION(execRemoveActorColor);
    DECLARE_FUNCTION(execGetZoneLastRenderTime);
    DECLARE_FUNCTION(execSetPostPivot);
    DECLARE_FUNCTION(execSetPrePivot);
    DECLARE_FUNCTION(execGetRenderObject);
    DECLARE_FUNCTION(execSetRenderObject);
    DECLARE_FUNCTION(execCalculateDrawScaleDifference);
    DECLARE_FUNCTION(execSetDrawscaleEx);
    DECLARE_FUNCTION(execSetDrawscale3D);
    DECLARE_FUNCTION(execSetDrawscale);
    DECLARE_FUNCTION(execSetHidden);
    DECLARE_FUNCTION(execFadeActorColor);
    DECLARE_FUNCTION(execClearActorColorFade);
    DECLARE_FUNCTION(execGetScaleModifierTime);
    DECLARE_FUNCTION(execGetScaleModifierTarget);
    DECLARE_FUNCTION(execGetScaleModifier);
    DECLARE_FUNCTION(execHasScaleModifier);
    DECLARE_FUNCTION(execClearScaleModifier);
    DECLARE_FUNCTION(execClearScaleModifierGroup);
    DECLARE_FUNCTION(execCalcScaleModifier);
    DECLARE_FUNCTION(execUpdateScaleModifier);
    DECLARE_FUNCTION(execResetScaleModifier);
    DECLARE_FUNCTION(execSetScaleModifierEx);
    DECLARE_FUNCTION(execSetScaleModifier);
    DECLARE_FUNCTION(execGetAnimationStart);
    DECLARE_FUNCTION(execDrawWorldDebugPoint);
    DECLARE_FUNCTION(execGetBonePartMapper);
    DECLARE_FUNCTION(execGetLimbCapInfo);
    DECLARE_FUNCTION(execGetLimbDestroyedEffect);
    DECLARE_FUNCTION(execGetDestroyableBoneForBone);
    DECLARE_FUNCTION(execGetBodyPartForBone);
    DECLARE_FUNCTION(execGetStaticMeshInstance);
    DECLARE_FUNCTION(execGetMeshInstance);
    DECLARE_FUNCTION(execSetTag);
    DECLARE_FUNCTION(execConsoleCommand);
    DECLARE_FUNCTION(execShowStack);
    DECLARE_FUNCTION(execDebugBreak);
    DECLARE_FUNCTION(execError);
    DECLARE_FUNCTION(execIsMyDigs);
    DECLARE_FUNCTION(execIsMP);
    DECLARE_FUNCTION(execGetEntryLevel);
    DECLARE_FUNCTION(execSentinelAddEvent);
    inline void __fastcall eventNU_DrawScale3D(FVector NewDrawscale3D)
    {
        AActor_eventNU_DrawScale3D_Parms Parms;
        Parms.NewDrawscale3D=NewDrawscale3D;
        ProcessEvent(FindFunctionChecked(ENGINE_NU_DrawScale3D), &Parms);
    }
    inline void __fastcall eventNU_DrawScale(FLOAT NewDrawscale)
    {
        AActor_eventNU_DrawScale_Parms Parms;
        Parms.NewDrawscale=NewDrawscale;
        ProcessEvent(FindFunctionChecked(ENGINE_NU_DrawScale), &Parms);
    }
    inline void __fastcall eventNU_MountParent(class AActor* NewMountParent)
    {
        AActor_eventNU_MountParent_Parms Parms;
        Parms.NewMountParent=NewMountParent;
        ProcessEvent(FindFunctionChecked(ENGINE_NU_MountParent), &Parms);
    }
    inline void __fastcall eventNU_Skins(dnArray<class UMaterialEx*> NewSkins)
    {
        AActor_eventNU_Skins_Parms Parms;
        Parms.NewSkins=NewSkins;
        ProcessEvent(FindFunctionChecked(ENGINE_NU_Skins), &Parms);
    }
    inline void __fastcall eventNU_StaticMesh(class UStaticMesh* NewStaticMesh)
    {
        AActor_eventNU_StaticMesh_Parms Parms;
        Parms.NewStaticMesh=NewStaticMesh;
        ProcessEvent(FindFunctionChecked(ENGINE_NU_StaticMesh), &Parms);
    }
    inline void __fastcall eventNU_Mesh(class UMesh* NewMesh)
    {
        AActor_eventNU_Mesh_Parms Parms;
        Parms.NewMesh=NewMesh;
        ProcessEvent(FindFunctionChecked(ENGINE_NU_Mesh), &Parms);
    }
    inline void __fastcall eventRegisterPrecacheComponents(class UPrecacheIndex* PrecacheIndex)
    {
        AActor_eventRegisterPrecacheComponents_Parms Parms;
        Parms.PrecacheIndex=PrecacheIndex;
        ProcessEvent(FindFunctionChecked(ENGINE_RegisterPrecacheComponents), &Parms);
    }
    inline BITFIELD __fastcall eventIsDestroyedActorPool()
    {
        AActor_eventIsDestroyedActorPool_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_IsDestroyedActorPool), &Parms);
        return Parms.ReturnValue;
    }
    inline BITFIELD __fastcall eventIsPaxDemo()
    {
        AActor_eventIsPaxDemo_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_IsPaxDemo), &Parms);
        return Parms.ReturnValue;
    }
    inline BITFIELD __fastcall eventIsGoreFree()
    {
        AActor_eventIsGoreFree_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_IsGoreFree), &Parms);
        return Parms.ReturnValue;
    }
    inline void __fastcall eventEnumerateRawAnimationSequences(dnArray<FSAnimationEnumeration>& References)
    {
        AActor_eventEnumerateRawAnimationSequences_Parms Parms;
        Parms.References=References;
        ProcessEvent(FindFunctionChecked(ENGINE_EnumerateRawAnimationSequences), &Parms);
        References=Parms.References;
    }
    inline BITFIELD __fastcall eventIsAIMoveable()
    {
        AActor_eventIsAIMoveable_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_IsAIMoveable), &Parms);
        return Parms.ReturnValue;
    }
    inline class AActor* __fastcall eventFindMountedActor(FName FindTag, class UClass* FindClass)
    {
        AActor_eventFindMountedActor_Parms Parms;
        Parms.ReturnValue=0;
        Parms.FindTag=FindTag;
        Parms.FindClass=FindClass;
        ProcessEvent(FindFunctionChecked(ENGINE_FindMountedActor), &Parms);
        return Parms.ReturnValue;
    }
    inline class AdnFriendFX_Spawners* __fastcall eventFindFriendSpawner(class UClass* FindClass)
    {
        AActor_eventFindFriendSpawner_Parms Parms;
        Parms.ReturnValue=0;
        Parms.FindClass=FindClass;
        ProcessEvent(FindFunctionChecked(ENGINE_FindFriendSpawner), &Parms);
        return Parms.ReturnValue;
    }
    inline class AActor* __fastcall eventFindStaticActor(class UClass* FindClass, BITFIELD bDontCreate)
    {
        AActor_eventFindStaticActor_Parms Parms;
        Parms.ReturnValue=0;
        Parms.FindClass=FindClass;
        Parms.bDontCreate=bDontCreate;
        ProcessEvent(FindFunctionChecked(ENGINE_FindStaticActor), &Parms);
        return Parms.ReturnValue;
    }
    inline class AInteractiveActor* __fastcall eventSpecialLook(class APlayerPawn* LookPlayer)
    {
        AActor_eventSpecialLook_Parms Parms;
        Parms.ReturnValue=0;
        Parms.LookPlayer=LookPlayer;
        ProcessEvent(FindFunctionChecked(ENGINE_SpecialLook), &Parms);
        return Parms.ReturnValue;
    }
    inline void __fastcall eventInputHook(FLOAT& aForward, FLOAT& aLookUp, FLOAT& aTurn, FLOAT& aStrafe, FLOAT DeltaTime)
    {
        AActor_eventInputHook_Parms Parms;
        Parms.aForward=aForward;
        Parms.aLookUp=aLookUp;
        Parms.aTurn=aTurn;
        Parms.aStrafe=aStrafe;
        Parms.DeltaTime=DeltaTime;
        ProcessEvent(FindFunctionChecked(ENGINE_InputHook), &Parms);
        aForward=Parms.aForward;
        aLookUp=Parms.aLookUp;
        aTurn=Parms.aTurn;
        aStrafe=Parms.aStrafe;
    }
    inline INT __fastcall eventViewMapperSetCrosshair()
    {
        AActor_eventViewMapperSetCrosshair_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_ViewMapperSetCrosshair), &Parms);
        return Parms.ReturnValue;
    }
    inline BITFIELD __fastcall eventViewMapperDisableCrosshairHUD()
    {
        AActor_eventViewMapperDisableCrosshairHUD_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_ViewMapperDisableCrosshairHUD), &Parms);
        return Parms.ReturnValue;
    }
    inline BITFIELD __fastcall eventKeyEvent(BYTE Key, BYTE Action, FLOAT Delta)
    {
        AActor_eventKeyEvent_Parms Parms;
        Parms.ReturnValue=0;
        Parms.Key=Key;
        Parms.Action=Action;
        Parms.Delta=Delta;
        ProcessEvent(FindFunctionChecked(ENGINE_KeyEvent), &Parms);
        return Parms.ReturnValue;
    }
    inline BITFIELD __fastcall eventKeyType(BYTE Key)
    {
        AActor_eventKeyType_Parms Parms;
        Parms.ReturnValue=0;
        Parms.Key=Key;
        ProcessEvent(FindFunctionChecked(ENGINE_KeyType), &Parms);
        return Parms.ReturnValue;
    }
    inline void __fastcall eventCalcView(class AActor* CameraActor, FVector& CameraLocation, FRotator& CameraRotation)
    {
        AActor_eventCalcView_Parms Parms;
        Parms.CameraActor=CameraActor;
        Parms.CameraLocation=CameraLocation;
        Parms.CameraRotation=CameraRotation;
        ProcessEvent(FindFunctionChecked(ENGINE_CalcView), &Parms);
        CameraLocation=Parms.CameraLocation;
        CameraRotation=Parms.CameraRotation;
    }
    inline void __fastcall eventRenderOverlays(class UCanvas* Canvas)
    {
        AActor_eventRenderOverlays_Parms Parms;
        Parms.Canvas=Canvas;
        ProcessEvent(FindFunctionChecked(ENGINE_RenderOverlays), &Parms);
    }
    inline void __fastcall eventUsed(class AActor* Other, class APawn* EventInstigator)
    {
        AActor_eventUsed_Parms Parms;
        Parms.Other=Other;
        Parms.EventInstigator=EventInstigator;
        ProcessEvent(FindFunctionChecked(ENGINE_Used), &Parms);
    }
    inline void __fastcall eventEndEvent()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_EndEvent), NULL);
    }
    inline void __fastcall eventBeginEvent()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_BeginEvent), NULL);
    }
    inline void __fastcall eventTriggerBySurface(INT SurfaceIndex)
    {
        AActor_eventTriggerBySurface_Parms Parms;
        Parms.SurfaceIndex=SurfaceIndex;
        ProcessEvent(FindFunctionChecked(ENGINE_TriggerBySurface), &Parms);
    }
    inline void __fastcall eventUnTrigger(class AActor* Other, class APawn* EventInstigator)
    {
        AActor_eventUnTrigger_Parms Parms;
        if(IsProbing(NAME_UnTrigger)) {
        Parms.Other=Other;
        Parms.EventInstigator=EventInstigator;
        ProcessEvent(FindFunctionChecked(ENGINE_UnTrigger), &Parms);
        }
    }
    inline void __fastcall eventTrigger(class AActor* Other, class APawn* EventInsigator)
    {
        AActor_eventTrigger_Parms Parms;
        if(IsProbing(NAME_Trigger)) {
        Parms.Other=Other;
        Parms.EventInsigator=EventInsigator;
        ProcessEvent(FindFunctionChecked(ENGINE_Trigger), &Parms);
        }
    }
    inline BITFIELD __fastcall eventOnEvalBonesHelper()
    {
        AActor_eventOnEvalBonesHelper_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_OnEvalBonesHelper), &Parms);
        return Parms.ReturnValue;
    }
    inline void __fastcall eventDecoPlayAnim(FName Sequence, FLOAT Rate, FLOAT TweenTime, INT Channel, FSAnimFlags SequenceFlags, BITFIELD bAnimPhysics)
    {
        AActor_eventDecoPlayAnim_Parms Parms;
        Parms.Sequence=Sequence;
        Parms.Rate=Rate;
        Parms.TweenTime=TweenTime;
        Parms.Channel=Channel;
        Parms.SequenceFlags=SequenceFlags;
        Parms.bAnimPhysics=bAnimPhysics;
        ProcessEvent(FindFunctionChecked(ENGINE_DecoPlayAnim), &Parms);
    }
    inline void __fastcall eventAnimEarlyEnd(FSAnimEndInfo AnimEndInfo)
    {
        AActor_eventAnimEarlyEnd_Parms Parms;
        Parms.AnimEndInfo=AnimEndInfo;
        ProcessEvent(FindFunctionChecked(ENGINE_AnimEarlyEnd), &Parms);
    }
    inline void __fastcall eventAnimEndEx(FSAnimEndInfo AnimEndInfo)
    {
        AActor_eventAnimEndEx_Parms Parms;
        if(IsProbing(NAME_AnimEndEx)) {
        Parms.AnimEndInfo=AnimEndInfo;
        ProcessEvent(FindFunctionChecked(ENGINE_AnimEndEx), &Parms);
        }
    }
    inline void __fastcall eventAmbientMusicEnded()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_AmbientMusicEnded), NULL);
    }
    inline void __fastcall eventAmbientMusicEarlyEnd()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_AmbientMusicEarlyEnd), NULL);
    }
    inline BITFIELD __fastcall eventSoundOwnedByLocalPlayer()
    {
        AActor_eventSoundOwnedByLocalPlayer_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_SoundOwnedByLocalPlayer), &Parms);
        return Parms.ReturnValue;
    }
    inline void __fastcall eventNotifyPhysicsContact(class AActor* Actor)
    {
        AActor_eventNotifyPhysicsContact_Parms Parms;
        Parms.Actor=Actor;
        ProcessEvent(FindFunctionChecked(ENGINE_NotifyPhysicsContact), &Parms);
    }
    inline void __fastcall eventAttachToPath(FName PathName, BITFIELD TeleportTo)
    {
        AActor_eventAttachToPath_Parms Parms;
        Parms.PathName=PathName;
        Parms.TeleportTo=TeleportTo;
        ProcessEvent(FindFunctionChecked(ENGINE_AttachToPath), &Parms);
    }
    inline void __fastcall eventInterpolateEnd(class AActor* Other)
    {
        AActor_eventInterpolateEnd_Parms Parms;
        if(IsProbing(NAME_InterpolateEnd)) {
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_InterpolateEnd), &Parms);
        }
    }
    inline void __fastcall eventInterpolateBegin(class AActor* Other)
    {
        AActor_eventInterpolateBegin_Parms Parms;
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_InterpolateBegin), &Parms);
    }
    inline void __fastcall eventDetach(class AActor* Other)
    {
        AActor_eventDetach_Parms Parms;
        if(IsProbing(NAME_Detach)) {
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_Detach), &Parms);
        }
    }
    inline void __fastcall eventAttach(class AActor* Other)
    {
        AActor_eventAttach_Parms Parms;
        if(IsProbing(NAME_Attach)) {
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_Attach), &Parms);
        }
    }
    inline void __fastcall eventDesiredMovementCrush(class AActor* HurtActor, FSDesiredCrush& CrushInfo)
    {
        AActor_eventDesiredMovementCrush_Parms Parms;
        Parms.HurtActor=HurtActor;
        Parms.CrushInfo=CrushInfo;
        ProcessEvent(FindFunctionChecked(ENGINE_DesiredMovementCrush), &Parms);
        CrushInfo=Parms.CrushInfo;
    }
    inline void __fastcall eventEndedDesiredRotation()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_EndedDesiredRotation), NULL);
    }
    inline void __fastcall eventEndedDesiredLocation()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_EndedDesiredLocation), NULL);
    }
    inline void __fastcall eventFellOutOfWorld()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_FellOutOfWorld), NULL);
    }
    inline void __fastcall eventNotifyDesiredRotationEnd()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_NotifyDesiredRotationEnd), NULL);
    }
    inline void __fastcall eventNotifyDesiredRotationBegin()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_NotifyDesiredRotationBegin), NULL);
    }
    inline void __fastcall eventNotifyDesiredLocationEnd()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_NotifyDesiredLocationEnd), NULL);
    }
    inline void __fastcall eventNotifyDesiredLocationBegin()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_NotifyDesiredLocationBegin), NULL);
    }
    inline BITFIELD __fastcall eventVehicleIsFullSize()
    {
        AActor_eventVehicleIsFullSize_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_VehicleIsFullSize), &Parms);
        return Parms.ReturnValue;
    }
    inline void __fastcall eventCheckTouching()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_CheckTouching), NULL);
    }
    inline class APawn* __fastcall eventGetFirstTouchingPawn()
    {
        AActor_eventGetFirstTouchingPawn_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_GetFirstTouchingPawn), &Parms);
        return Parms.ReturnValue;
    }
    inline void __fastcall eventPhysicsVolumeChange(class APhysicsVolume* NewVolume)
    {
        AActor_eventPhysicsVolumeChange_Parms Parms;
        Parms.NewVolume=NewVolume;
        ProcessEvent(FindFunctionChecked(ENGINE_PhysicsVolumeChange), &Parms);
    }
    inline void __fastcall eventLostChild(class AActor* Other)
    {
        AActor_eventLostChild_Parms Parms;
        if(IsProbing(NAME_LostChild)) {
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_LostChild), &Parms);
        }
    }
    inline void __fastcall eventGainedChild(class AActor* Other)
    {
        AActor_eventGainedChild_Parms Parms;
        if(IsProbing(NAME_GainedChild)) {
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_GainedChild), &Parms);
        }
    }
    inline void __fastcall eventZoneChange(class AZoneInfo* NewZone)
    {
        AActor_eventZoneChange_Parms Parms;
        if(IsProbing(NAME_ZoneChange)) {
        Parms.NewZone=NewZone;
        ProcessEvent(FindFunctionChecked(ENGINE_ZoneChange), &Parms);
        }
    }
    inline void __fastcall eventUnTouch(class AActor* Other)
    {
        AActor_eventUnTouch_Parms Parms;
        if(IsProbing(NAME_UnTouch)) {
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_UnTouch), &Parms);
        }
    }
    inline void __fastcall eventTouch(class AActor* Other)
    {
        AActor_eventTouch_Parms Parms;
        if(IsProbing(NAME_Touch)) {
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_Touch), &Parms);
        }
    }
    inline void __fastcall eventBump(class AActor* Other)
    {
        AActor_eventBump_Parms Parms;
        if(IsProbing(NAME_Bump)) {
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_Bump), &Parms);
        }
    }
    inline void __fastcall eventHitBackdrop()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_HitBackdrop), NULL);
    }
    inline void __fastcall eventHitWall(FVector HitNormal, class AActor* HitWall)
    {
        AActor_eventHitWall_Parms Parms;
        if(IsProbing(NAME_HitWall)) {
        Parms.HitNormal=HitNormal;
        Parms.HitWall=HitWall;
        ProcessEvent(FindFunctionChecked(ENGINE_HitWall), &Parms);
        }
    }
    inline void __fastcall eventLanded(FVector HitNormal, class AActor* LandedOnActor)
    {
        AActor_eventLanded_Parms Parms;
        if(IsProbing(NAME_Landed)) {
        Parms.HitNormal=HitNormal;
        Parms.LandedOnActor=LandedOnActor;
        ProcessEvent(FindFunctionChecked(ENGINE_Landed), &Parms);
        }
    }
    inline void __fastcall eventMassChange()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_MassChange), NULL);
    }
    inline void __fastcall eventPhysicsChange(BYTE PreviousPhysics)
    {
        AActor_eventPhysicsChange_Parms Parms;
        Parms.PreviousPhysics=PreviousPhysics;
        ProcessEvent(FindFunctionChecked(ENGINE_PhysicsChange), &Parms);
    }
    inline void __fastcall eventClientCreateDesiredRotation(FRotator NewRotationTarget, BYTE NewRotationStyle, FLOAT NewRotationTimeTotal, FLOAT NewRotationTimeMid, FLOAT NewRotationExponent, FRotator NewRotationRate, BITFIELD bRelativeRotation, FName NewRotationEvent, FName NewRotationFunction, BITFIELD bShortestDistance, FName NewRotationEventAbort, FName NewRotationFunctionAbort, FSDesiredCrush NewRotationCrush, BYTE NewRotationStyleStopped)
    {
        AActor_eventClientCreateDesiredRotation_Parms Parms;
        Parms.NewRotationTarget=NewRotationTarget;
        Parms.NewRotationStyle=NewRotationStyle;
        Parms.NewRotationTimeTotal=NewRotationTimeTotal;
        Parms.NewRotationTimeMid=NewRotationTimeMid;
        Parms.NewRotationExponent=NewRotationExponent;
        Parms.NewRotationRate=NewRotationRate;
        Parms.bRelativeRotation=bRelativeRotation;
        Parms.NewRotationEvent=NewRotationEvent;
        Parms.NewRotationFunction=NewRotationFunction;
        Parms.bShortestDistance=bShortestDistance;
        Parms.NewRotationEventAbort=NewRotationEventAbort;
        Parms.NewRotationFunctionAbort=NewRotationFunctionAbort;
        Parms.NewRotationCrush=NewRotationCrush;
        Parms.NewRotationStyleStopped=NewRotationStyleStopped;
        ProcessEvent(FindFunctionChecked(ENGINE_ClientCreateDesiredRotation), &Parms);
    }
    inline void __fastcall eventClientCreateDesiredLocationEx(FSDesiredLocation NewDesiredLocation, BITFIELD bRelativeLocation)
    {
        AActor_eventClientCreateDesiredLocationEx_Parms Parms;
        Parms.NewDesiredLocation=NewDesiredLocation;
        Parms.bRelativeLocation=bRelativeLocation;
        ProcessEvent(FindFunctionChecked(ENGINE_ClientCreateDesiredLocationEx), &Parms);
    }
    inline void __fastcall eventMountParentDestroyed()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_MountParentDestroyed), NULL);
    }
    inline void __fastcall eventDetachedFromMountParent()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_DetachedFromMountParent), NULL);
    }
    inline void __fastcall eventAttachedToMountParent()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_AttachedToMountParent), NULL);
    }
    inline void __fastcall eventDirtyTraceMasks()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_DirtyTraceMasks), NULL);
    }
    inline void __fastcall eventRestoreCollision()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_RestoreCollision), NULL);
    }
    inline void __fastcall eventStoreCollision()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_StoreCollision), NULL);
    }
    inline class UMaterialEx* __fastcall eventGetIndexedDecalMaterial(class UClass* DecalClass, INT Index)
    {
        AActor_eventGetIndexedDecalMaterial_Parms Parms;
        Parms.ReturnValue=0;
        Parms.DecalClass=DecalClass;
        Parms.Index=Index;
        ProcessEvent(FindFunctionChecked(ENGINE_GetIndexedDecalMaterial), &Parms);
        return Parms.ReturnValue;
    }
    inline class UMaterialEx* __fastcall eventGetDecalMaterial(class UClass* DecalClass)
    {
        AActor_eventGetDecalMaterial_Parms Parms;
        Parms.ReturnValue=0;
        Parms.DecalClass=DecalClass;
        ProcessEvent(FindFunctionChecked(ENGINE_GetDecalMaterial), &Parms);
        return Parms.ReturnValue;
    }
    inline void __fastcall eventSpawnWeaponTracer(FVector TracerStart, FVector TracerEnd, FLOAT TracerChance, class UClass* TracerBeamClass, class UClass* TracerBubblesClass, class AActor* HitActor)
    {
        AActor_eventSpawnWeaponTracer_Parms Parms;
        Parms.TracerStart=TracerStart;
        Parms.TracerEnd=TracerEnd;
        Parms.TracerChance=TracerChance;
        Parms.TracerBeamClass=TracerBeamClass;
        Parms.TracerBubblesClass=TracerBubblesClass;
        Parms.HitActor=HitActor;
        ProcessEvent(FindFunctionChecked(ENGINE_SpawnWeaponTracer), &Parms);
    }
    inline void __fastcall eventPerformTraceFireEffects(class UClass* TraceDamageType, FVector TraceStart, FVector TraceEnd, class AActor* HitActor)
    {
        AActor_eventPerformTraceFireEffects_Parms Parms;
        Parms.TraceDamageType=TraceDamageType;
        Parms.TraceStart=TraceStart;
        Parms.TraceEnd=TraceEnd;
        Parms.HitActor=HitActor;
        ProcessEvent(FindFunctionChecked(ENGINE_PerformTraceFireEffects), &Parms);
    }
    inline BYTE __fastcall eventTraceFireHit(class AActor* SourceActor, class UClass* TraceDamageType, FVector SourceTraceOrigin, FVector HitLocation, FVector HitNormal, FName HitBoneName, BITFIELD bExtentTrace)
    {
        AActor_eventTraceFireHit_Parms Parms;
        Parms.ReturnValue=0;
        Parms.SourceActor=SourceActor;
        Parms.TraceDamageType=TraceDamageType;
        Parms.SourceTraceOrigin=SourceTraceOrigin;
        Parms.HitLocation=HitLocation;
        Parms.HitNormal=HitNormal;
        Parms.HitBoneName=HitBoneName;
        Parms.bExtentTrace=bExtentTrace;
        ProcessEvent(FindFunctionChecked(ENGINE_TraceFireHit), &Parms);
        return Parms.ReturnValue;
    }
    inline void __fastcall eventWeaponTraceFireHit(class AActor* HitActor, class UClass* TraceDamageType, FVector SourceTraceOrigin, FVector HitLocation, FVector HitNormal, FName HitBoneName)
    {
        AActor_eventWeaponTraceFireHit_Parms Parms;
        Parms.HitActor=HitActor;
        Parms.TraceDamageType=TraceDamageType;
        Parms.SourceTraceOrigin=SourceTraceOrigin;
        Parms.HitLocation=HitLocation;
        Parms.HitNormal=HitNormal;
        Parms.HitBoneName=HitBoneName;
        ProcessEvent(FindFunctionChecked(ENGINE_WeaponTraceFireHit), &Parms);
    }
    inline void __fastcall eventPerformAdditionalDamageEffect(class UClass* DamageType, class AActor* ShootActor, FLOAT ShootActorRelativeDrawscale, FVector HitLocation, FVector HitNormal, class UClass* HitMaterial)
    {
        AActor_eventPerformAdditionalDamageEffect_Parms Parms;
        Parms.DamageType=DamageType;
        Parms.ShootActor=ShootActor;
        Parms.ShootActorRelativeDrawscale=ShootActorRelativeDrawscale;
        Parms.HitLocation=HitLocation;
        Parms.HitNormal=HitNormal;
        Parms.HitMaterial=HitMaterial;
        ProcessEvent(FindFunctionChecked(ENGINE_PerformAdditionalDamageEffect), &Parms);
    }
    inline BITFIELD __fastcall eventShouldSpawnDamageEffectDecal(class UClass* DamageType, class UClass* HitMaterial, class AActor* ShootActor)
    {
        AActor_eventShouldSpawnDamageEffectDecal_Parms Parms;
        Parms.ReturnValue=0;
        Parms.DamageType=DamageType;
        Parms.HitMaterial=HitMaterial;
        Parms.ShootActor=ShootActor;
        ProcessEvent(FindFunctionChecked(ENGINE_ShouldSpawnDamageEffectDecal), &Parms);
        return Parms.ReturnValue;
    }
    inline FLOAT __fastcall eventGetImpactEffectAdditionalScale()
    {
        AActor_eventGetImpactEffectAdditionalScale_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_GetImpactEffectAdditionalScale), &Parms);
        return Parms.ReturnValue;
    }
    inline BITFIELD __fastcall eventShouldPlayDamageSound(class UClass* DamageType)
    {
        AActor_eventShouldPlayDamageSound_Parms Parms;
        Parms.ReturnValue=0;
        Parms.DamageType=DamageType;
        ProcessEvent(FindFunctionChecked(ENGINE_ShouldPlayDamageSound), &Parms);
        return Parms.ReturnValue;
    }
    inline void __fastcall eventTraceFireMaterialHit(class UClass* TraceDamageType, class AActor* HitActor, FVector HitLocation, FVector HitNormal, class UClass* HitMaterial, BITFIELD bNoDecal)
    {
        AActor_eventTraceFireMaterialHit_Parms Parms;
        Parms.TraceDamageType=TraceDamageType;
        Parms.HitActor=HitActor;
        Parms.HitLocation=HitLocation;
        Parms.HitNormal=HitNormal;
        Parms.HitMaterial=HitMaterial;
        Parms.bNoDecal=bNoDecal;
        ProcessEvent(FindFunctionChecked(ENGINE_TraceFireMaterialHit), &Parms);
    }
    inline void __fastcall eventNotifyHitActor(class AActor* HitActor, class UClass* DamageType)
    {
        AActor_eventNotifyHitActor_Parms Parms;
        Parms.HitActor=HitActor;
        Parms.DamageType=DamageType;
        ProcessEvent(FindFunctionChecked(ENGINE_NotifyHitActor), &Parms);
    }
    inline void __fastcall eventClientPerformDamageCategoryEffectEx(class UClass* DamageType, class UClass* HitMaterial, class AActor* HitActor, FVector HitLocation, FVector HitNormal, BITFIELD bNoDecal)
    {
        AActor_eventClientPerformDamageCategoryEffectEx_Parms Parms;
        Parms.DamageType=DamageType;
        Parms.HitMaterial=HitMaterial;
        Parms.HitActor=HitActor;
        Parms.HitLocation=HitLocation;
        Parms.HitNormal=HitNormal;
        Parms.bNoDecal=bNoDecal;
        ProcessEvent(FindFunctionChecked(ENGINE_ClientPerformDamageCategoryEffectEx), &Parms);
    }
    inline void __fastcall eventHurtRadiusActivity(class AActor* DamageInstigator, FLOAT DamageAmount, FVector DamageOrigin, FLOAT DamageRadius, FLOAT DamageFalloffStart, class UClass* DamageType, FVector DamageStart, BITFIELD bIgnoreDrawScale, FLOAT RelativeScale)
    {
        AActor_eventHurtRadiusActivity_Parms Parms;
        Parms.DamageInstigator=DamageInstigator;
        Parms.DamageAmount=DamageAmount;
        Parms.DamageOrigin=DamageOrigin;
        Parms.DamageRadius=DamageRadius;
        Parms.DamageFalloffStart=DamageFalloffStart;
        Parms.DamageType=DamageType;
        Parms.DamageStart=DamageStart;
        Parms.bIgnoreDrawScale=bIgnoreDrawScale;
        Parms.RelativeScale=RelativeScale;
        ProcessEvent(FindFunctionChecked(ENGINE_HurtRadiusActivity), &Parms);
    }
    inline FLOAT __fastcall eventCalcRadiusDamage(class AActor* DamageWho, FLOAT DamageAmount, FVector DamageOrigin, FVector DamageTest, FLOAT DamageRadius, FLOAT DamageFalloffStart, BITFIELD bDontScale)
    {
        AActor_eventCalcRadiusDamage_Parms Parms;
        Parms.ReturnValue=0;
        Parms.DamageWho=DamageWho;
        Parms.DamageAmount=DamageAmount;
        Parms.DamageOrigin=DamageOrigin;
        Parms.DamageTest=DamageTest;
        Parms.DamageRadius=DamageRadius;
        Parms.DamageFalloffStart=DamageFalloffStart;
        Parms.bDontScale=bDontScale;
        ProcessEvent(FindFunctionChecked(ENGINE_CalcRadiusDamage), &Parms);
        return Parms.ReturnValue;
    }
    inline FLOAT __fastcall eventCalcRadiusDamagePercent(FVector DamageOrigin, FVector DamageTest, FLOAT DamageRadius, FLOAT DamageFalloffStart)
    {
        AActor_eventCalcRadiusDamagePercent_Parms Parms;
        Parms.ReturnValue=0;
        Parms.DamageOrigin=DamageOrigin;
        Parms.DamageTest=DamageTest;
        Parms.DamageRadius=DamageRadius;
        Parms.DamageFalloffStart=DamageFalloffStart;
        ProcessEvent(FindFunctionChecked(ENGINE_CalcRadiusDamagePercent), &Parms);
        return Parms.ReturnValue;
    }
    inline void __fastcall eventHurtRadiusDirectional(FLOAT DamageAmount, FVector DamageOrigin, FLOAT DamageRadius, FLOAT DamageFalloffStart, FVector Direction, FLOAT DirectionAngleLimit, class UClass* DamageType, FVector DamageStart, FLOAT DamagePlayerScale)
    {
        AActor_eventHurtRadiusDirectional_Parms Parms;
        Parms.DamageAmount=DamageAmount;
        Parms.DamageOrigin=DamageOrigin;
        Parms.DamageRadius=DamageRadius;
        Parms.DamageFalloffStart=DamageFalloffStart;
        Parms.Direction=Direction;
        Parms.DirectionAngleLimit=DirectionAngleLimit;
        Parms.DamageType=DamageType;
        Parms.DamageStart=DamageStart;
        Parms.DamagePlayerScale=DamagePlayerScale;
        ProcessEvent(FindFunctionChecked(ENGINE_HurtRadiusDirectional), &Parms);
    }
    inline void __fastcall eventHurtRadiusNoVisTest(FLOAT DamageAmount, FVector DamageOrigin, FLOAT DamageRadius, FLOAT DamageFalloffStart, class UClass* DamageType, FVector DamageStart, FLOAT DamagePlayerScale, BITFIELD bIgnoreDrawScale)
    {
        AActor_eventHurtRadiusNoVisTest_Parms Parms;
        Parms.DamageAmount=DamageAmount;
        Parms.DamageOrigin=DamageOrigin;
        Parms.DamageRadius=DamageRadius;
        Parms.DamageFalloffStart=DamageFalloffStart;
        Parms.DamageType=DamageType;
        Parms.DamageStart=DamageStart;
        Parms.DamagePlayerScale=DamagePlayerScale;
        Parms.bIgnoreDrawScale=bIgnoreDrawScale;
        ProcessEvent(FindFunctionChecked(ENGINE_HurtRadiusNoVisTest), &Parms);
    }
    inline void __fastcall eventHurtRadius(FLOAT DamageAmount, FVector DamageOrigin, FLOAT DamageRadius, FLOAT DamageFalloffStart, class UClass* DamageType, FVector DamageStart, FLOAT DamagePlayerScale, BITFIELD bIgnoreDrawScale)
    {
        AActor_eventHurtRadius_Parms Parms;
        Parms.DamageAmount=DamageAmount;
        Parms.DamageOrigin=DamageOrigin;
        Parms.DamageRadius=DamageRadius;
        Parms.DamageFalloffStart=DamageFalloffStart;
        Parms.DamageType=DamageType;
        Parms.DamageStart=DamageStart;
        Parms.DamagePlayerScale=DamagePlayerScale;
        Parms.bIgnoreDrawScale=bIgnoreDrawScale;
        ProcessEvent(FindFunctionChecked(ENGINE_HurtRadius), &Parms);
    }
    inline void __fastcall eventTakeHitDamage(class APawn* HitInstigator, FLOAT HitDamage, FVector HitOrigin, FVector HitDirection, FName HitMeshBone, class UClass* HitDamageType, FVector HitDamageStart)
    {
        AActor_eventTakeHitDamage_Parms Parms;
        Parms.HitInstigator=HitInstigator;
        Parms.HitDamage=HitDamage;
        Parms.HitOrigin=HitOrigin;
        Parms.HitDirection=HitDirection;
        Parms.HitMeshBone=HitMeshBone;
        Parms.HitDamageType=HitDamageType;
        Parms.HitDamageStart=HitDamageStart;
        ProcessEvent(FindFunctionChecked(ENGINE_TakeHitDamage), &Parms);
    }
    inline FName __fastcall eventGetBoneName(INT Index)
    {
        AActor_eventGetBoneName_Parms Parms;
        Parms.ReturnValue=NAME_None;
        Parms.Index=Index;
        ProcessEvent(FindFunctionChecked(ENGINE_GetBoneName), &Parms);
        return Parms.ReturnValue;
    }
    inline FLOAT __fastcall eventGetBaseDamage(class AActor* Victim, class APawn* DamageInstigator, class UClass* DamageType, FVector HitDirection, FVector HitPosition, FName BoneName, FVector SourceTraceOrigin)
    {
        AActor_eventGetBaseDamage_Parms Parms;
        Parms.ReturnValue=0;
        Parms.Victim=Victim;
        Parms.DamageInstigator=DamageInstigator;
        Parms.DamageType=DamageType;
        Parms.HitDirection=HitDirection;
        Parms.HitPosition=HitPosition;
        Parms.BoneName=BoneName;
        Parms.SourceTraceOrigin=SourceTraceOrigin;
        ProcessEvent(FindFunctionChecked(ENGINE_GetBaseDamage), &Parms);
        return Parms.ReturnValue;
    }
    inline void __fastcall eventTakeDamage(class APawn* Instigator, FLOAT Damage, FVector DamageOrigin, FVector DamageDirection, class UClass* DamageType, FName HitBoneName, FVector DamageStart)
    {
        AActor_eventTakeDamage_Parms Parms;
        Parms.Instigator=Instigator;
        Parms.Damage=Damage;
        Parms.DamageOrigin=DamageOrigin;
        Parms.DamageDirection=DamageDirection;
        Parms.DamageType=DamageType;
        Parms.HitBoneName=HitBoneName;
        Parms.DamageStart=DamageStart;
        ProcessEvent(FindFunctionChecked(ENGINE_TakeDamage), &Parms);
    }
    inline void __fastcall eventDestroyed()
    {
        if(IsProbing(NAME_Destroyed)) {
        ProcessEvent(FindFunctionChecked(ENGINE_Destroyed), NULL);
        }
    }
    inline void __fastcall eventSpawned()
    {
        if(IsProbing(NAME_Spawned)) {
        ProcessEvent(FindFunctionChecked(ENGINE_Spawned), NULL);
        }
    }
    inline void __fastcall eventCallFunction(FName FunctionNam)
    {
        AActor_eventCallFunction_Parms Parms;
        Parms.FunctionNam=FunctionNam;
        ProcessEvent(FindFunctionChecked(ENGINE_CallFunction), &Parms);
    }
    inline void __fastcall eventTickAlmostDisabled()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_TickAlmostDisabled), NULL);
    }
    inline void __fastcall eventTick(FLOAT DeltaTime)
    {
        AActor_eventTick_Parms Parms;
        if(IsProbing(NAME_Tick)) {
        Parms.DeltaTime=DeltaTime;
        ProcessEvent(FindFunctionChecked(ENGINE_Tick), &Parms);
        }
    }
    inline void __fastcall eventScriptGetActorColor()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_ScriptGetActorColor), NULL);
    }
    inline FVector __fastcall eventOrientDrawScale3D(FVector DS3D)
    {
        AActor_eventOrientDrawScale3D_Parms Parms;
        Parms.ReturnValue.Init();
        Parms.DS3D=DS3D;
        ProcessEvent(FindFunctionChecked(ENGINE_OrientDrawScale3D), &Parms);
        return Parms.ReturnValue;
    }
    inline void __fastcall eventFadeOverlayEffect(FLOAT TargetAlpha, FLOAT TransitionTime)
    {
        AActor_eventFadeOverlayEffect_Parms Parms;
        Parms.TargetAlpha=TargetAlpha;
        Parms.TransitionTime=TransitionTime;
        ProcessEvent(FindFunctionChecked(ENGINE_FadeOverlayEffect), &Parms);
    }
    inline void __fastcall eventDrawscaleChanged(FLOAT DefaultDrawscaleRatio, FVector DefaultDrawscale3DRatio)
    {
        AActor_eventDrawscaleChanged_Parms Parms;
        Parms.DefaultDrawscaleRatio=DefaultDrawscaleRatio;
        Parms.DefaultDrawscale3DRatio=DefaultDrawscale3DRatio;
        ProcessEvent(FindFunctionChecked(ENGINE_DrawscaleChanged), &Parms);
    }
    inline void __fastcall eventHiddenChanged()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_HiddenChanged), NULL);
    }
    inline void __fastcall eventBroadcastJoinLeaveEvent(const FString& PlayerName, BYTE Team, BITFIELD joining, BITFIELD idle)
    {
        AActor_eventBroadcastJoinLeaveEvent_Parms Parms;
        Parms.PlayerName=PlayerName;
        Parms.Team=Team;
        Parms.joining=joining;
        Parms.idle=idle;
        ProcessEvent(FindFunctionChecked(ENGINE_BroadcastJoinLeaveEvent), &Parms);
    }
    inline void __fastcall eventBroadcastLocalizedMessage(class UClass* Message, INT Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject, class UClass* OptionalClass)
    {
        AActor_eventBroadcastLocalizedMessage_Parms Parms;
        Parms.Message=Message;
        Parms.Switch=Switch;
        Parms.RelatedPRI_1=RelatedPRI_1;
        Parms.RelatedPRI_2=RelatedPRI_2;
        Parms.OptionalObject=OptionalObject;
        Parms.OptionalClass=OptionalClass;
        ProcessEvent(FindFunctionChecked(ENGINE_BroadcastLocalizedMessage), &Parms);
    }
    inline void __fastcall eventWarn(const FString& msg)
    {
        AActor_eventWarn_Parms Parms;
        Parms.msg=msg;
        ProcessEvent(FindFunctionChecked(ENGINE_Warn), &Parms);
    }
    inline void __fastcall eventBroadcastLog(const FString& msg, BITFIELD bBeep, FName Type)
    {
        AActor_eventBroadcastLog_Parms Parms;
        Parms.msg=msg;
        Parms.bBeep=bBeep;
        Parms.Type=Type;
        ProcessEvent(FindFunctionChecked(ENGINE_BroadcastLog), &Parms);
    }
    inline void __fastcall eventBroadcastMessage(const FString& msg, BITFIELD bBeep, FName Type)
    {
        AActor_eventBroadcastMessage_Parms Parms;
        Parms.msg=msg;
        Parms.bBeep=bBeep;
        Parms.Type=Type;
        ProcessEvent(FindFunctionChecked(ENGINE_BroadcastMessage), &Parms);
    }
    inline class UClass* __fastcall eventGetBonePartMapper(class UMesh* Mesh)
    {
        AActor_eventGetBonePartMapper_Parms Parms;
        Parms.ReturnValue=0;
        Parms.Mesh=Mesh;
        ProcessEvent(FindFunctionChecked(ENGINE_GetBonePartMapper), &Parms);
        return Parms.ReturnValue;
    }
    inline class UClass* __fastcall eventGetLimbCapInfo(class UMesh* Mesh, FName BoneName, FSMountPrefab& MountInfo)
    {
        AActor_eventGetLimbCapInfo_Parms Parms;
        Parms.ReturnValue=0;
        Parms.Mesh=Mesh;
        Parms.BoneName=BoneName;
        Parms.MountInfo=MountInfo;
        ProcessEvent(FindFunctionChecked(ENGINE_GetLimbCapInfo), &Parms);
        MountInfo=Parms.MountInfo;
        return Parms.ReturnValue;
    }
    inline class UClass* __fastcall eventGetLimbDestroyedEffect(class UMesh* Mesh, FName BoneName, BITFIELD bFrozen)
    {
        AActor_eventGetLimbDestroyedEffect_Parms Parms;
        Parms.ReturnValue=0;
        Parms.Mesh=Mesh;
        Parms.BoneName=BoneName;
        Parms.bFrozen=bFrozen;
        ProcessEvent(FindFunctionChecked(ENGINE_GetLimbDestroyedEffect), &Parms);
        return Parms.ReturnValue;
    }
    inline FName __fastcall eventGetDestroyableBoneForBone(class UMesh* Mesh, FName BoneName)
    {
        AActor_eventGetDestroyableBoneForBone_Parms Parms;
        Parms.ReturnValue=NAME_None;
        Parms.Mesh=Mesh;
        Parms.BoneName=BoneName;
        ProcessEvent(FindFunctionChecked(ENGINE_GetDestroyableBoneForBone), &Parms);
        return Parms.ReturnValue;
    }
    inline BYTE __fastcall eventGetBodyPartForBone(class UMesh* Mesh, FName BoneName)
    {
        AActor_eventGetBodyPartForBone_Parms Parms;
        Parms.ReturnValue=0;
        Parms.Mesh=Mesh;
        Parms.BoneName=BoneName;
        ProcessEvent(FindFunctionChecked(ENGINE_GetBodyPartForBone), &Parms);
        return Parms.ReturnValue;
    }
    inline void __fastcall eventPostSpawnDestroyedActorPool()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_PostSpawnDestroyedActorPool), NULL);
    }
    inline void __fastcall eventTravelPostAccept()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_TravelPostAccept), NULL);
    }
    inline void __fastcall eventTravelPreAccept()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_TravelPreAccept), NULL);
    }
    inline void __fastcall eventPostNetReceive()
    {
        if(IsProbing(NAME_PostNetReceive)) {
        ProcessEvent(FindFunctionChecked(ENGINE_PostNetReceive), NULL);
        }
    }
    inline void __fastcall eventPostNetInitial()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_PostNetInitial), NULL);
    }
    inline void __fastcall eventPostLoadMap()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_PostLoadMap), NULL);
    }
    inline void __fastcall eventPostBeginPlay()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_PostBeginPlay), NULL);
    }
    inline BITFIELD __fastcall eventCreateActorPoolsOnDestroyed()
    {
        AActor_eventCreateActorPoolsOnDestroyed_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_CreateActorPoolsOnDestroyed), &Parms);
        return Parms.ReturnValue;
    }
    inline void __fastcall eventExecuteVerifySelf()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_ExecuteVerifySelf), NULL);
    }
    inline void __fastcall eventSetInitialState()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_SetInitialState), NULL);
    }
    inline void __fastcall eventBeginPlay()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_BeginPlay), NULL);
    }
    inline void __fastcall eventPreGameInit()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_PreGameInit), NULL);
    }
    inline void __fastcall eventPreBeginPlay()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_PreBeginPlay), NULL);
    }
    inline void __fastcall eventPreLoadMap()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_PreLoadMap), NULL);
    }
    DECLARE_CLASS(AActor,UObject,0|CLASS_NativeReplication,Engine)
    NO_DEFAULT_CONSTRUCTOR_START(AActor)
    NO_DEFAULT_CONSTRUCTOR_INIT(ForwardTags)
    NO_DEFAULT_CONSTRUCTOR_INIT(SpecialEvents)
    NO_DEFAULT_CONSTRUCTOR_INIT(ActorLinks)
    NO_DEFAULT_CONSTRUCTOR_INIT(TouchClasses)
    NO_DEFAULT_CONSTRUCTOR_INIT(Touching)
    NO_DEFAULT_CONSTRUCTOR_INIT(BasedParticlesList)
    NO_DEFAULT_CONSTRUCTOR_INIT(OctreeNodes)
    NO_DEFAULT_CONSTRUCTOR_INIT(DesiredLocation)
    NO_DEFAULT_CONSTRUCTOR_INIT(DesiredRotationPitch)
    NO_DEFAULT_CONSTRUCTOR_INIT(DesiredRotationYaw)
    NO_DEFAULT_CONSTRUCTOR_INIT(DesiredRotationRoll)
    NO_DEFAULT_CONSTRUCTOR_INIT(MountedActorList)
    NO_DEFAULT_CONSTRUCTOR_INIT(Skins)
    NO_DEFAULT_CONSTRUCTOR_INIT(ActorColorList)
    NO_DEFAULT_CONSTRUCTOR_INIT(ActorColorFadeList)
    NO_DEFAULT_CONSTRUCTOR_INIT(LightExs)
    NO_DEFAULT_CONSTRUCTOR_INIT(Projectors)
    NO_DEFAULT_CONSTRUCTOR_INIT(Leaves)
    NO_DEFAULT_CONSTRUCTOR_INIT(CallbackTimers)
    NO_DEFAULT_CONSTRUCTOR_INIT(CallbackTimers_Always)
    NO_DEFAULT_CONSTRUCTOR_INIT(VoicePackSoundThrottles)
    NO_DEFAULT_CONSTRUCTOR_INITLAST(ScaleModifierGroupList)
};
// Class Actor exported:
//   Properties size: 1148 bytes (1188 total)


//***************************************************************************//
/*	\class AKarmaActor
*/
//***************************************************************************//


struct AKarmaActor_eventClientReceivePhysicsState_Parms
{
    FMeqonRigidBodyNetworkState NetworkState;
};

struct AKarmaActor_eventGenerateExplosionImpulse_Parms
{
    FVector DamageDirection;
    class UClass* DamageType;
    FLOAT RelativeScale;
    FVector ReturnValue;
};

struct AKarmaActor_eventGenerateDamageMomentum_Parms
{
    FVector DamageDirection;
    class UClass* DamageType;
    FLOAT RelativeScale;
    BITFIELD bSteroids;
    FVector ReturnValue;
};

struct AKarmaActor_eventShouldTakeDamageImpulse_Parms
{
    class UClass* DamageType;
    BITFIELD ReturnValue;
};

struct AKarmaActor_eventOnEntitySleep_Parms
{
    INT NumAwake;
};

struct AKarmaActor_eventOnEntityWake_Parms
{
    INT NumAwake;
};

struct AKarmaActor_eventCausedPhysicsImpactDamage_Parms
{
    FLOAT Damage;
    FVector DamageOrigin;
    FVector DamageDirection;
    class UClass* DamageType;
    class APawn* Instigator;
    class AKarmaActor* DamagedActor;
    BITFIELD ReturnValue;
};

struct AKarmaActor_eventTakePhysicsImpactDamage_Parms
{
    FLOAT Damage;
    FVector DamageOrigin;
    FVector DamageDirection;
    class UClass* DamageType;
    class APawn* Instigator;
    class AKarmaActor* DamageActor;
    BITFIELD ReturnValue;
};

struct AKarmaActor_eventNotifyCrushed_Parms
{
    BITFIELD ReturnValue;
};

struct AKarmaActor_eventWalkedOn_Parms
{
    class APawn* Other;
};

struct AKarmaActor_eventKImpact_Parms
{
    FName SelfBoneName;
    class AKarmaActor* Other;
    FName OtherBoneName;
    FVector Position;
    FVector ImpactVelocity;
    FVector ImpactNormal;
};

struct AKarmaActor_eventPostPhysMeqon_Parms
{
    FLOAT DeltaTime;
};
class ENGINE_API AKarmaActor : public AActor
{
public:
    BITFIELD bDirtyPhysics:1 GCC_PACK(4);
    BITFIELD bGearboxEngineGlobalReference:1;
    BITFIELD bIsDeferredJumpPadLaunch:1;
    BITFIELD bResetOnFellOutOfWorld:1;
    BITFIELD bClientSidePhysics:1;
    BITFIELD bPawnRideable:1;
    BITFIELD bModifyTickOnPhysicsChange:1;
    BITFIELD bIgnoresAmmoCasings:1;
    BITFIELD bTakeDamageMomentum:1;
    BITFIELD bTakeExplosionDamageMomentum:1;
    BITFIELD bStartEnabled:1;
    BITFIELD bHighInertia:1;
    BITFIELD bCanBreakGlass:1;
    BITFIELD bIgnorePawnAirCushion:1;
    BITFIELD bIgnoreVehicles:1;
    BITFIELD bIgnorePawnDownwardForce:1;
    BITFIELD bEnableImpactSounds:1;
    BITFIELD bEnableImpactEffects:1;
    BITFIELD bDoPhysicsWaterEffects:1;
    BITFIELD bCanCrushOthers:1;
    BITFIELD bDontCrush:1;
    BITFIELD bIgnoresPhysicsDamage:1;
    BITFIELD bIgnoreSelfDamage:1;
    BITFIELD bPlayerFallingDamageExempt:1;
    BITFIELD bUsePhysMeqonInterp:1;
    BITFIELD bUsePhysMeqonKeyframing:1;
    BITFIELD bTickOnlyWhenPhysicsAwake:1;
    class UClass* WaterSplash GCC_PACK(4);
    FLOAT MinSplashTime;
    dnArray<FSPhysicsWaterInteraction> WaterInteractions;
    FLOAT NextSplashTime;
    IMeqonUserData* PhysicsUserData;
    FMeqonConstraintsArray* MeqConstraints;
    dnArray<IMeqonState*> PhysicsStateStack;
    INT iAwake;
    INT PseudoDynamicsHandle;
    FLOAT ImpactSoundRadius;
    FLOAT ImpactSoundInnerRadius;
    FLOAT ImpactSoundVolume;
    FLOAT ImpactSoundTimer;
    FLOAT NextLegalImpactSoundTime;
    INT NextLegalImpactSoundOffset;
    BYTE StaticInteractionClassification;
    BYTE DynamicInteractionClassification;
    BYTE PersistantEffectType;
    BYTE LastPersistantEffectType;
    INT PersistantEffectDBIndex;
    INT LastPersistantEffectDBIndex;
    class USound* PersistantEffectSound;
    FLOAT PersistantEffectVolume;
    FLOAT PersistantEffectPitch;
    FLOAT PersistantEffectTime;
    class UClass* PhysicsMaterial;
    BYTE PhysicsMassType;
    FLOAT KFriction;
    FLOAT KRestitution;
    FLOAT KImpactThreshold;
    FLOAT KLinearDamping;
    FLOAT StoredKLinearDamping;
    FLOAT KAngularDamping;
    FVector KCenterOfMass;
    FLOAT GravityScale;
    FLOAT Density;
    FLOAT MagneticCharge;
    FLOAT MagneticRange;
    FLOAT EnableDisableThreshold;
    FLOAT PhysicsTimeScale;
    FName KImpactEvent;
    FName KWakeEvent;
    FName KSleepEvent;
    FLOAT MinImpactTime;
    FLOAT MinDamageVelocity;
    FLOAT MinDamageVelocityThrown;
    FLOAT MinDamageVelocityDropped;
    FLOAT DefaultMinDamageVelocity;
    FLOAT DamageScaler;
    FLOAT MaxImpactDamage;
    FLOAT FixedPhysicsDamageToNotPlayer;
    FLOAT FixedPhysicsDamageToPlayer;
    class UClass* OverridePhysicsImpactDamageType;
    FLOAT CurrentImpactDamage;
    FLOAT NextImpactTime;
    FLOAT CrushResistance;
    FLOAT PhysicsReplicationThrottle;
    FLOAT PhysicsReplicationTimer;
    class UStandardPhysicsAction* StandardPhysicsAction;
    dnArray<class UPhysicsAction*> PhysicsActions;
    FName PhysicsEntityGroup;
    dnArray<FSPhysicsSoundOverride> PhysicsSoundOverrides;
    FLOAT PhysicsStartupTime;
    class UModel* SimpleCollisionModel;
    DECLARE_FUNCTION(execImportNetworkRigidBodyState);
    DECLARE_FUNCTION(execTraceFireHit);
    DECLARE_FUNCTION(execKGetSensors);
    DECLARE_FUNCTION(execKGetInteractingActors);
    DECLARE_FUNCTION(execKGetCollidingActors);
    DECLARE_FUNCTION(execKSetJointsFrozenPercent);
    DECLARE_FUNCTION(execKRemoveAboveNamed);
    DECLARE_FUNCTION(execKRemoveBelowNamed);
    DECLARE_FUNCTION(execKRemovePhysicsAction);
    DECLARE_FUNCTION(execKFindPhysicsAction);
    DECLARE_FUNCTION(execKUndisableCollisionBetween);
    DECLARE_FUNCTION(execKDisableCollisionBetween);
    DECLARE_FUNCTION(execKAddTorque);
    DECLARE_FUNCTION(execKAddImpulse);
    DECLARE_FUNCTION(execKAddForce);
    DECLARE_FUNCTION(execKSleep);
    DECLARE_FUNCTION(execKWake);
    DECLARE_FUNCTION(execSetPhysicsEntityGroup);
    DECLARE_FUNCTION(execSetPhysicsTimeScale);
    DECLARE_FUNCTION(execSetEnableDisableThreshold);
    DECLARE_FUNCTION(execSetMagneticProperties);
    DECLARE_FUNCTION(execSetDynamicInteractionClassification);
    DECLARE_FUNCTION(execSetStaticInteractionClassification);
    DECLARE_FUNCTION(execSetKMaterialProperties);
    DECLARE_FUNCTION(execSetKRestitution);
    DECLARE_FUNCTION(execSetKFriction);
    DECLARE_FUNCTION(execGetConstraint);
    DECLARE_FUNCTION(execGetConstraintCount);
    DECLARE_FUNCTION(execStopPersistantPhysicsEffects);
    DECLARE_FUNCTION(execKHurtRadiusActivity);
    DECLARE_FUNCTION(execSetPhysicsPose);
    DECLARE_FUNCTION(execKPushGeneratedSimpleState);
    DECLARE_FUNCTION(execKPopState);
    DECLARE_FUNCTION(execKPushState);
    DECLARE_FUNCTION(execKGetRotationVector);
    DECLARE_FUNCTION(execKGetLinearVelocityAtPoint);
    DECLARE_FUNCTION(execKGetAngularAcceleration);
    DECLARE_FUNCTION(execKGetLinearAcceleration);
    DECLARE_FUNCTION(execKGetAngularVelocity);
    DECLARE_FUNCTION(execKGetLinearVelocity);
    DECLARE_FUNCTION(execKSetAngularAcceleration);
    DECLARE_FUNCTION(execKSetLinearAcceleration);
    DECLARE_FUNCTION(execKSetAngularVelocity);
    DECLARE_FUNCTION(execKSetLinearVelocity);
    inline void __fastcall eventClientReceivePhysicsState(FMeqonRigidBodyNetworkState NetworkState)
    {
        AKarmaActor_eventClientReceivePhysicsState_Parms Parms;
        Parms.NetworkState=NetworkState;
        ProcessEvent(FindFunctionChecked(ENGINE_ClientReceivePhysicsState), &Parms);
    }
    inline FVector __fastcall eventGenerateExplosionImpulse(FVector DamageDirection, class UClass* DamageType, FLOAT RelativeScale)
    {
        AKarmaActor_eventGenerateExplosionImpulse_Parms Parms;
        Parms.ReturnValue.Init();
        Parms.DamageDirection=DamageDirection;
        Parms.DamageType=DamageType;
        Parms.RelativeScale=RelativeScale;
        ProcessEvent(FindFunctionChecked(ENGINE_GenerateExplosionImpulse), &Parms);
        return Parms.ReturnValue;
    }
    inline FVector __fastcall eventGenerateDamageMomentum(FVector DamageDirection, class UClass* DamageType, FLOAT RelativeScale, BITFIELD bSteroids)
    {
        AKarmaActor_eventGenerateDamageMomentum_Parms Parms;
        Parms.ReturnValue.Init();
        Parms.DamageDirection=DamageDirection;
        Parms.DamageType=DamageType;
        Parms.RelativeScale=RelativeScale;
        Parms.bSteroids=bSteroids;
        ProcessEvent(FindFunctionChecked(ENGINE_GenerateDamageMomentum), &Parms);
        return Parms.ReturnValue;
    }
    inline BITFIELD __fastcall eventShouldTakeDamageImpulse(class UClass* DamageType)
    {
        AKarmaActor_eventShouldTakeDamageImpulse_Parms Parms;
        Parms.ReturnValue=0;
        Parms.DamageType=DamageType;
        ProcessEvent(FindFunctionChecked(ENGINE_ShouldTakeDamageImpulse), &Parms);
        return Parms.ReturnValue;
    }
    inline void __fastcall eventOnSleep()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_OnSleep), NULL);
    }
    inline void __fastcall eventOnWake()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_OnWake), NULL);
    }
    inline void __fastcall eventOnEntitySleep(INT NumAwake)
    {
        AKarmaActor_eventOnEntitySleep_Parms Parms;
        Parms.NumAwake=NumAwake;
        ProcessEvent(FindFunctionChecked(ENGINE_OnEntitySleep), &Parms);
    }
    inline void __fastcall eventOnEntityWake(INT NumAwake)
    {
        AKarmaActor_eventOnEntityWake_Parms Parms;
        Parms.NumAwake=NumAwake;
        ProcessEvent(FindFunctionChecked(ENGINE_OnEntityWake), &Parms);
    }
    inline BITFIELD __fastcall eventCausedPhysicsImpactDamage(FLOAT Damage, FVector DamageOrigin, FVector DamageDirection, class UClass* DamageType, class APawn* Instigator, class AKarmaActor* DamagedActor)
    {
        AKarmaActor_eventCausedPhysicsImpactDamage_Parms Parms;
        Parms.ReturnValue=0;
        Parms.Damage=Damage;
        Parms.DamageOrigin=DamageOrigin;
        Parms.DamageDirection=DamageDirection;
        Parms.DamageType=DamageType;
        Parms.Instigator=Instigator;
        Parms.DamagedActor=DamagedActor;
        ProcessEvent(FindFunctionChecked(ENGINE_CausedPhysicsImpactDamage), &Parms);
        return Parms.ReturnValue;
    }
    inline BITFIELD __fastcall eventTakePhysicsImpactDamage(FLOAT Damage, FVector DamageOrigin, FVector DamageDirection, class UClass* DamageType, class APawn* Instigator, class AKarmaActor* DamageActor)
    {
        AKarmaActor_eventTakePhysicsImpactDamage_Parms Parms;
        Parms.ReturnValue=0;
        Parms.Damage=Damage;
        Parms.DamageOrigin=DamageOrigin;
        Parms.DamageDirection=DamageDirection;
        Parms.DamageType=DamageType;
        Parms.Instigator=Instigator;
        Parms.DamageActor=DamageActor;
        ProcessEvent(FindFunctionChecked(ENGINE_TakePhysicsImpactDamage), &Parms);
        return Parms.ReturnValue;
    }
    inline BITFIELD __fastcall eventNotifyCrushed()
    {
        AKarmaActor_eventNotifyCrushed_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_NotifyCrushed), &Parms);
        return Parms.ReturnValue;
    }
    inline void __fastcall eventPhysicsEntityGroupChanged()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_PhysicsEntityGroupChanged), NULL);
    }
    inline void __fastcall eventWalkedOn(class APawn* Other)
    {
        AKarmaActor_eventWalkedOn_Parms Parms;
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_WalkedOn), &Parms);
    }
    inline void __fastcall eventKImpact(FName SelfBoneName, class AKarmaActor* Other, FName OtherBoneName, FVector Position, FVector ImpactVelocity, FVector ImpactNormal)
    {
        AKarmaActor_eventKImpact_Parms Parms;
        Parms.SelfBoneName=SelfBoneName;
        Parms.Other=Other;
        Parms.OtherBoneName=OtherBoneName;
        Parms.Position=Position;
        Parms.ImpactVelocity=ImpactVelocity;
        Parms.ImpactNormal=ImpactNormal;
        ProcessEvent(FindFunctionChecked(ENGINE_KImpact), &Parms);
    }
    inline void __fastcall eventPostPhysMeqon(FLOAT DeltaTime)
    {
        AKarmaActor_eventPostPhysMeqon_Parms Parms;
        Parms.DeltaTime=DeltaTime;
        ProcessEvent(FindFunctionChecked(ENGINE_PostPhysMeqon), &Parms);
    }
    DECLARE_CLASS(AKarmaActor,AActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR_START(AKarmaActor)
    NO_DEFAULT_CONSTRUCTOR_INIT(WaterInteractions)
    NO_DEFAULT_CONSTRUCTOR_INIT(PhysicsStateStack)
    NO_DEFAULT_CONSTRUCTOR_INIT(PhysicsActions)
    NO_DEFAULT_CONSTRUCTOR_INITLAST(PhysicsSoundOverrides)
};
// Class KarmaActor exported:
//   Properties size: 288 bytes (1476 total)


//***************************************************************************//
/*	\class ARenderActor
*/
//***************************************************************************//


struct ARenderActor_eventShouldShowHoloDukeEffect_Parms
{
    BITFIELD ReturnValue;
};

struct ARenderActor_eventRegisterIKClass_Parms
{
    class UClass* IKClass;
};

struct ARenderActor_eventEnableIKSystem_Parms
{
    class UClass* IKClass;
    BITFIELD bEnabled;
    BITFIELD ReturnValue;
};

struct ARenderActor_eventSetAnimControllerState_Parms
{
    FName NewStateName;
    BITFIELD bForceReset;
    BITFIELD ReturnValue;
};

struct ARenderActor_eventAttachAnimationControllerEx_Parms
{
    class UAnimationControllerEx* NewController;
};

struct ARenderActor_eventAnimationControllerAnimStateEnd_Parms
{
    FName AnimState;
};

struct ARenderActor_eventRaiseHealthToCap_Parms
{
    FVector ModifiedFrom;
};

struct ARenderActor_eventModifyHealthCap_Parms
{
    FLOAT DeltaHealthCap;
};

struct ARenderActor_eventModifyHealth_Parms
{
    FLOAT DeltaHealth;
    FVector ModifiedFrom;
};

struct ARenderActor_eventGetHealthMeterPercent_Parms
{
    FLOAT ReturnValue;
};

struct ARenderActor_eventMeshEvent_Parms
{
    FString EventName;
};
class ENGINE_API ARenderActor : public AKarmaActor
{
public:
    FName ForceAnimTickTag;
    FLOAT VisibilityRadius;
    class AActor* ShadowGroupOwner;
    FLOAT DukeVisionInterference;
    dnArray<FSMountedActorPrefab> MountOnSpawn;
    dnArray<class UClass*> AutoRegisterIKClasses;
    FLOAT Health;
    FLOAT HealthCap;
    FLOAT HealthMin;
    FSDamageInfo ThisFrameDamage;
    BITFIELD bNoDamage:1 GCC_PACK(4);
    BITFIELD bAnimateOffscreen:1;
    BITFIELD bSpawnOnDestroyed:1;
    dnArray<class UClass*> SpawnOnDestroyedSimple GCC_PACK(4);
    dnArray<FSSpawnActorPrefab> SpawnOnDestroyed;
    dnArray<FSParticleFriendEffect> DestroyedParticleFriendEffects;
    dnArray<FSDestructionLevel> DestructionLevels;
    class UMotionPrefab* DefaultMotionPrefab;
    class UMotionPrefab* NoMotionPrefab;
    dnArray<class AActor*> ActorPoolOnDestroyed;
    dnArray<FName> BonesToDrawInTheEditor;
    class UAnimationControllerEx* AnimationController;
    class UClass* AnimationControllerClass;
    UMovementBoneTracker* MovementBoneTracker;
    INT LoadedIKSystemInfos;
    DECLARE_FUNCTION(execRegisterIKClass);
    DECLARE_FUNCTION(execEnableIKSystem);
    DECLARE_FUNCTION(execProcessSpawnActorPoolOnDestroyed);
    DECLARE_FUNCTION(execForceAnimTick);
    DECLARE_FUNCTION(execGetAnimationMotion);
    DECLARE_FUNCTION(execAllAnims);
    DECLARE_FUNCTION(execMeshEvent);
    DECLARE_FUNCTION(execGetRenderBoundingBox);
    DECLARE_FUNCTION(execSpawnMountPrefabActor);
    DECLARE_FUNCTION(execProcessSpawnActorPrefab);
    DECLARE_FUNCTION(execApplyMotionPrefab);
    DECLARE_FUNCTION(execSpawnMotionPrefab);
    DECLARE_FUNCTION(execSkinMeshOptimization);
    DECLARE_FUNCTION(execSetHealth);
    inline BITFIELD __fastcall eventShouldShowHoloDukeEffect()
    {
        ARenderActor_eventShouldShowHoloDukeEffect_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_ShouldShowHoloDukeEffect), &Parms);
        return Parms.ReturnValue;
    }
    inline void __fastcall eventRegisterIKClass(class UClass* IKClass)
    {
        ARenderActor_eventRegisterIKClass_Parms Parms;
        Parms.IKClass=IKClass;
        ProcessEvent(FindFunctionChecked(ENGINE_RegisterIKClass), &Parms);
    }
    inline BITFIELD __fastcall eventEnableIKSystem(class UClass* IKClass, BITFIELD bEnabled)
    {
        ARenderActor_eventEnableIKSystem_Parms Parms;
        Parms.ReturnValue=0;
        Parms.IKClass=IKClass;
        Parms.bEnabled=bEnabled;
        ProcessEvent(FindFunctionChecked(ENGINE_EnableIKSystem), &Parms);
        return Parms.ReturnValue;
    }
    inline BITFIELD __fastcall eventSetAnimControllerState(FName NewStateName, BITFIELD bForceReset)
    {
        ARenderActor_eventSetAnimControllerState_Parms Parms;
        Parms.ReturnValue=0;
        Parms.NewStateName=NewStateName;
        Parms.bForceReset=bForceReset;
        ProcessEvent(FindFunctionChecked(ENGINE_SetAnimControllerState), &Parms);
        return Parms.ReturnValue;
    }
    inline void __fastcall eventAttachAnimationControllerEx(class UAnimationControllerEx* NewController)
    {
        ARenderActor_eventAttachAnimationControllerEx_Parms Parms;
        Parms.NewController=NewController;
        ProcessEvent(FindFunctionChecked(ENGINE_AttachAnimationControllerEx), &Parms);
    }
    inline void __fastcall eventAnimationControllerAnimStateEnd(FName AnimState)
    {
        ARenderActor_eventAnimationControllerAnimStateEnd_Parms Parms;
        Parms.AnimState=AnimState;
        ProcessEvent(FindFunctionChecked(ENGINE_AnimationControllerAnimStateEnd), &Parms);
    }
    inline void __fastcall eventRaiseHealthToCap(FVector ModifiedFrom)
    {
        ARenderActor_eventRaiseHealthToCap_Parms Parms;
        Parms.ModifiedFrom=ModifiedFrom;
        ProcessEvent(FindFunctionChecked(ENGINE_RaiseHealthToCap), &Parms);
    }
    inline void __fastcall eventModifyHealthCap(FLOAT DeltaHealthCap)
    {
        ARenderActor_eventModifyHealthCap_Parms Parms;
        Parms.DeltaHealthCap=DeltaHealthCap;
        ProcessEvent(FindFunctionChecked(ENGINE_ModifyHealthCap), &Parms);
    }
    inline void __fastcall eventModifyHealth(FLOAT DeltaHealth, FVector ModifiedFrom)
    {
        ARenderActor_eventModifyHealth_Parms Parms;
        Parms.DeltaHealth=DeltaHealth;
        Parms.ModifiedFrom=ModifiedFrom;
        ProcessEvent(FindFunctionChecked(ENGINE_ModifyHealth), &Parms);
    }
    inline void __fastcall eventResumeCallbackTimerDestroyedActorPool()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_ResumeCallbackTimerDestroyedActorPool), NULL);
    }
    inline FLOAT __fastcall eventGetHealthMeterPercent()
    {
        ARenderActor_eventGetHealthMeterPercent_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_GetHealthMeterPercent), &Parms);
        return Parms.ReturnValue;
    }
    inline void __fastcall eventMeshEvent(const FString& EventName)
    {
        ARenderActor_eventMeshEvent_Parms Parms;
        Parms.EventName=EventName;
        ProcessEvent(FindFunctionChecked(ENGINE_MeshEvent), &Parms);
    }
    DECLARE_CLASS(ARenderActor,AKarmaActor,0|CLASS_NativeReplication,Engine)
    NO_DEFAULT_CONSTRUCTOR_START(ARenderActor)
    NO_DEFAULT_CONSTRUCTOR_INIT(MountOnSpawn)
    NO_DEFAULT_CONSTRUCTOR_INIT(AutoRegisterIKClasses)
    NO_DEFAULT_CONSTRUCTOR_INIT(SpawnOnDestroyedSimple)
    NO_DEFAULT_CONSTRUCTOR_INIT(SpawnOnDestroyed)
    NO_DEFAULT_CONSTRUCTOR_INIT(DestroyedParticleFriendEffects)
    NO_DEFAULT_CONSTRUCTOR_INIT(DestructionLevels)
    NO_DEFAULT_CONSTRUCTOR_INIT(ActorPoolOnDestroyed)
    NO_DEFAULT_CONSTRUCTOR_INITLAST(BonesToDrawInTheEditor)
};
// Class RenderActor exported:
//   Properties size: 192 bytes (1668 total)


//***************************************************************************//
/*	\class AStaticMeshActor
*/
//***************************************************************************//

class ENGINE_API AStaticMeshActor : public ARenderActor
{
public:
    DECLARE_CLASS(AStaticMeshActor,ARenderActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AStaticMeshActor)
};
// Class StaticMeshActor exported:
//   Properties size: 0 bytes (1668 total)


//***************************************************************************//
/*	\class ABrush
*/
//***************************************************************************//

class ENGINE_API ABrush : public ARenderActor
{
public:
    BYTE CsgOper;
    FScale MainScale;
    FScale PostScale;
    FScale TempScale;
    FColor BrushColor;
    INT PolyFlags;
    BITFIELD bColored:1 GCC_PACK(4);
    FRotator BrushRotation GCC_PACK(4);
    DECLARE_CLASS(ABrush,ARenderActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ABrush)
};
// Class Brush exported:
//   Properties size: 88 bytes (1756 total)


//***************************************************************************//
/*	\class AVolume
*/
//***************************************************************************//

class ENGINE_API AVolume : public ABrush
{
public:
    FColor VolumeColor;
    BITFIELD bDrawSolidEditor:1 GCC_PACK(4);
    FStringNoInit LocationName GCC_PACK(4);
    DECLARE_CLASS(AVolume,ABrush,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AVolume)
};
// Class Volume exported:
//   Properties size: 20 bytes (1776 total)


//***************************************************************************//
/*	\class ACollisionVolume
*/
//***************************************************************************//

class ENGINE_API ACollisionVolume : public AVolume
{
public:
    DECLARE_CLASS(ACollisionVolume,AVolume,0,Engine)
};
// Class CollisionVolume exported:
//   Properties size: 0 bytes (1776 total)


//***************************************************************************//
/*	\class ANavVolume
*/
//***************************************************************************//

class ENGINE_API ANavVolume : public AVolume
{
public:
    INT Priority;
    BYTE VolumeType;
    dnArray<FSNavBSPInfo> NavBSPInfo;
    DECLARE_FUNCTION(execSetState);
    DECLARE_CLASS(ANavVolume,AVolume,0,Engine)

    // properties that must be constructed special for ANavVolume:
    //       * NavBSPInfo

};
// Class NavVolume exported:
//   Properties size: 20 bytes (1796 total)


//***************************************************************************//
/*	\class ANavVolume_Door
*/
//***************************************************************************//

class ENGINE_API ANavVolume_Door : public ANavVolume
{
public:
    BITFIELD bInitialState:1 GCC_PACK(4);
    BITFIELD bSolid:1;
    BITFIELD bStateInitialized:1;
    DECLARE_CLASS(ANavVolume_Door,ANavVolume,0,Engine)
};
// Class NavVolume_Door exported:
//   Properties size: 4 bytes (1800 total)


//***************************************************************************//
/*	\class ALadderVolume
*/
//***************************************************************************//

class ENGINE_API ALadderVolume : public AVolume
{
public:
    DECLARE_CLASS(ALadderVolume,AVolume,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ALadderVolume)
};
// Class LadderVolume exported:
//   Properties size: 0 bytes (1776 total)


//***************************************************************************//
/*	\class APhysicsVolume
*/
//***************************************************************************//


struct APhysicsVolume_eventActorLeavingVolume_Parms
{
    class AActor* Other;
};

struct APhysicsVolume_eventActorEnteredVolume_Parms
{
    class AActor* Other;
};
class ENGINE_API APhysicsVolume : public AVolume
{
public:
    INT Priority;
    BITFIELD bWaterVolume:1 GCC_PACK(4);
    BITFIELD bKillVolume:1;
    BITFIELD bKillAI:1;
    BITFIELD bGibOnDeath:1;
    BITFIELD bKillMarkedProjectiles:1;
    BITFIELD bExtentBasedVolume:1;
    BITFIELD bMoveProjectiles:1;
    BITFIELD bRelativeVolumeVelocity:1;
    BITFIELD bRelativeIncludeActorRotation:1;
    BITFIELD bVolumeWalkMaterialOnly:1;
    BITFIELD bVolumeHitMaterialOnly:1;
    BITFIELD bHasDistanceFog:1;
    BITFIELD bDOFOverride:1;
    BITFIELD Scene_UseToneMapping:1;
    BITFIELD bSuffocatePawns:1;
    BITFIELD bVolumeMusicAllowReverb:1;
    BITFIELD bReverbVolume:1;
    BITFIELD bUseExtendedReverb:1;
    BYTE ReverbPreset GCC_PACK(4);
    BYTE VolumeFlotsamEffect;
    FRotator VolumeFlotsamRotation;
    FLOAT GroundFriction;
    FLOAT FluidFriction;
    FVector VolumeVelocity;
    FLOAT KVolumeVelocityPositiveStrength;
    FLOAT KVolumeVelocityNegativeStrength;
    FVector Gravity;
    FLOAT TerminalVelocity;
    FLOAT KLinearDampingScale;
    FLOAT KAngularDampingScale;
    FLOAT VolumeVelocityNonPawnScale;
    FLOAT KEnableDisableScalar;
    FVector KVolumeAngularVelocity;
    FLOAT KVolumeAngularMaximumTorque;
    FLOAT PhysicsTimeScale;
    class AActor* KGravityActor;
    FLOAT PlayerWaterGravityScale;
    class AActor* InteractionHandler;
    FName VolumePlayerEvent;
    FName VolumePlayerExitEvent;
    FLOAT ActorTimeScale;
    class UMaterialEx* HUDEffectMaterial;
    FLOAT HUDEffectFadeTime;
    dnArray<BYTE> HUDIgnoredVisionTypes;
    class AGeoWater* GeoWaterActor;
    class UClass* VolumeMaterial;
    class UClass* FullSubmergedMaterial;
    class UClass* HalfSubmergedMaterial;
    class UClass* BarelySubmergedMaterial;
    FSDistanceFog DistanceFog;
    FLOAT DistanceFogFadeTime;
    FLOAT DOFBlurAmount;
    FLOAT DOFFocalRangeMin;
    FLOAT DOFFocalRangeMax;
    FLOAT DOFFocalDist;
    FSSceneInfo Scene;
    class UMaterialEx* UnderWaterMaterial;
    FName SuffocationEnabledTag;
    FName SuffocationDisabledTag;
    FStringNoInit VolumeMusic;
    FLOAT VolumeMusicVolume;
    FLOAT VolumeMusicCrossfadeTime;
    FName VolumeMusicMixerGroup;
    FLOAT ReverbTime;
    FLOAT ReverbPreDelay;
    FLOAT ReverbDamping;
    FLOAT ReverbDryLevel;
    FLOAT ReverbWetLevel;
    dnArray<FSSoundInfo> VolumeInSounds;
    dnArray<FSSoundInfo> VolumeOutSounds;
    FLOAT VolumeSoundsMinInterval;
    FLOAT VolumeSoundsMaxInterval;
    FSSoundInfo VolumeSubmergedAmbience;
    FName VolumeSubmergedAmbienceName;
    INT VolumePlayerCount;
    FVector VolumeVelocity_Orig;
    FVector VolumeVelocityDirection;
    FLOAT VolumeVelocityMagnitude;
    FVector VolumeAngularVelocity_Orig;
    FVector VolumeAngularVelocityDirection;
    FLOAT VolumeAngularVelocityMagnitude;
    DECLARE_FUNCTION(execSetVolumeAngularVelocity);
    DECLARE_FUNCTION(execSetVolumeVelocity);
    inline void __fastcall eventActorLeavingVolume(class AActor* Other)
    {
        APhysicsVolume_eventActorLeavingVolume_Parms Parms;
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_ActorLeavingVolume), &Parms);
    }
    inline void __fastcall eventActorEnteredVolume(class AActor* Other)
    {
        APhysicsVolume_eventActorEnteredVolume_Parms Parms;
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_ActorEnteredVolume), &Parms);
    }
    DECLARE_CLASS(APhysicsVolume,AVolume,0|CLASS_NativeReplication,Engine)
    NO_DEFAULT_CONSTRUCTOR_START(APhysicsVolume)
    NO_DEFAULT_CONSTRUCTOR_INIT(HUDIgnoredVisionTypes)
    NO_DEFAULT_CONSTRUCTOR_INIT(VolumeInSounds)
    NO_DEFAULT_CONSTRUCTOR_INIT(VolumeOutSounds)
    NO_DEFAULT_CONSTRUCTOR_INITLAST(VolumeSubmergedAmbience)
};
// Class PhysicsVolume exported:
//   Properties size: 648 bytes (2424 total)


//***************************************************************************//
/*	\class ADefaultPhysicsVolume
*/
//***************************************************************************//

class ENGINE_API ADefaultPhysicsVolume : public APhysicsVolume
{
public:
    DECLARE_CLASS(ADefaultPhysicsVolume,APhysicsVolume,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ADefaultPhysicsVolume)
};
// Class DefaultPhysicsVolume exported:
//   Properties size: 0 bytes (2424 total)


//***************************************************************************//
/*	\class AAntiPortalActor
*/
//***************************************************************************//

class ENGINE_API AAntiPortalActor : public ABrush
{
public:
    DECLARE_CLASS(AAntiPortalActor,ABrush,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AAntiPortalActor)
};
// Class AntiPortalActor exported:
//   Properties size: 0 bytes (1756 total)


//***************************************************************************//
/*	\class AProjector
*/
//***************************************************************************//

class ENGINE_API AProjector : public ARenderActor
{
public:
    class UMaterialEx* ProjTexture;
    INT FOV;
    INT MaxTraceDistance;
    FLOAT MaxViewDistance;
    FLOAT FadeOutStart;
    BITFIELD bProjectBSP:1 GCC_PACK(4);
    BITFIELD bProjectMesh:1;
    BITFIELD bProjectStaticMesh:1;
    BITFIELD bProjectActor:1;
    BITFIELD bProjectPawn:1;
    BITFIELD bProjectOwner:1;
    BITFIELD bProjectAmmoCasings:1;
    BITFIELD bLevelStatic:1;
    BITFIELD bProjectNonStatic:1;
    BITFIELD bClipBSP:1;
    BITFIELD bClipStaticMesh:1;
    BITFIELD bProjectOnUnlit:1;
    BITFIELD bBackFaceCull:1;
    BITFIELD FlipX:1;
    BITFIELD FlipY:1;
    BITFIELD bIsDecal:1;
    BITFIELD bDestroyOnTrigger:1;
    BITFIELD bProjectingShadow:1;
    FName ProjectTag GCC_PACK(4);
    FLOAT BackFaceThreshold;
    FLOAT ScaleX;
    FLOAT ScaleY;
    FLOAT MinSpawnDistance;
    FLOAT OverrideNearPlaneDist;
    FLOAT ProjectorOpacity;
    FName TurnOnTag;
    FName TurnOffTag;
    FProjectorData* InternalData;
    class AActor* ExclusiveActor;
    DECLARE_FUNCTION(execUpdateMatrix);
    DECLARE_FUNCTION(execTurnOff);
    DECLARE_FUNCTION(execGetLastRenderTime);
    DECLARE_FUNCTION(execDetachActor);
    DECLARE_FUNCTION(execAttachActor);
    DECLARE_FUNCTION(execAbandonProjector);
    DECLARE_FUNCTION(execDetachProjector);
    DECLARE_FUNCTION(execAttachProjector);
    DECLARE_CLASS(AProjector,ARenderActor,0,Engine)
};
// Class Projector exported:
//   Properties size: 68 bytes (1736 total)


//***************************************************************************//
/*	\class ADecal
*/
//***************************************************************************//


struct ADecal_eventGetNumDecals_Parms
{
    INT ReturnValue;
};

struct ADecal_eventGetIndexedMaterial_Parms
{
    INT Index;
    class UMaterialEx* ReturnValue;
};

struct ADecal_eventGetMaterial_Parms
{
    class UMaterialEx* ReturnValue;
};
class ENGINE_API ADecal : public AProjector
{
public:
    FLOAT BehaviorArgument;
    BYTE Behavior;
    BITFIELD bRandomRotation:1 GCC_PACK(4);
    BITFIELD bRandomFlipX:1;
    BITFIELD bRandomFlipY:1;
    BITFIELD bAutoAlignToSurface:1;
    BITFIELD bIgnoreOwner:1;
    BITFIELD bInitialized:1;
    DECLARE_FUNCTION(execDetachDecal);
    DECLARE_FUNCTION(execAttachDecal);
    inline void __fastcall eventInitialize()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_Initialize), NULL);
    }
    inline INT __fastcall eventGetNumDecals()
    {
        ADecal_eventGetNumDecals_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_GetNumDecals), &Parms);
        return Parms.ReturnValue;
    }
    inline class UMaterialEx* __fastcall eventGetIndexedMaterial(INT Index)
    {
        ADecal_eventGetIndexedMaterial_Parms Parms;
        Parms.ReturnValue=0;
        Parms.Index=Index;
        ProcessEvent(FindFunctionChecked(ENGINE_GetIndexedMaterial), &Parms);
        return Parms.ReturnValue;
    }
    inline class UMaterialEx* __fastcall eventGetMaterial()
    {
        ADecal_eventGetMaterial_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_GetMaterial), &Parms);
        return Parms.ReturnValue;
    }
    DECLARE_CLASS(ADecal,AProjector,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ADecal)
};
// Class Decal exported:
//   Properties size: 12 bytes (1748 total)


//***************************************************************************//
/*	\class AdnDecal
*/
//***************************************************************************//

class ENGINE_API AdnDecal : public ADecal
{
public:
    dnArray<class UMaterialEx*> Decals;
    FLOAT RandomDrawscale;
    BITFIELD bScaleByOwner:1 GCC_PACK(4);
    BITFIELD bStartedLife:1;
    BITFIELD bImportant:1;
    DECLARE_CLASS(AdnDecal,ADecal,0,Engine)
    NO_DEFAULT_CONSTRUCTOR_START(AdnDecal)
    NO_DEFAULT_CONSTRUCTOR_INITLAST(Decals)
};
// Class dnDecal exported:
//   Properties size: 20 bytes (1768 total)


//***************************************************************************//
/*	\class AInteractiveActor
*/
//***************************************************************************//


struct AInteractiveActor_eventMimicOwner_Parms
{
    class AInteractiveActor* ThisOwner;
};

struct AInteractiveActor_eventPickedUp_Parms
{
    class APawn* Carrier;
};

struct AInteractiveActor_eventGetGrabUseCombinePhrase_Parms
{
    class AInteractiveActor* Combinee;
    FString SpecialKey;
    FString ReturnValue;
};

struct AInteractiveActor_eventCanGrabUseCombine_Parms
{
    class AInteractiveActor* Combinee;
    BITFIELD ReturnValue;
};

struct AInteractiveActor_eventGetGrabUsePhrase_Parms
{
    FString ReturnValue;
};

struct AInteractiveActor_eventGetUsePhrase_Parms
{
    FString ReturnValue;
};

struct AInteractiveActor_eventCanBeGrabbedBy_Parms
{
    class APawn* User;
    BITFIELD ReturnValue;
};

struct AInteractiveActor_eventShouldDrawHUDInfoUsePhrase_Parms
{
    class APawn* TestPawn;
    BITFIELD ReturnValue;
};

struct AInteractiveActor_eventCarrierMeleeDown_Parms
{
    BITFIELD ReturnValue;
};

struct AInteractiveActor_eventCarrierMeleeUp_Parms
{
    BITFIELD ReturnValue;
};

struct AInteractiveActor_eventCarrierFireDown_Parms
{
    BITFIELD ReturnValue;
};

struct AInteractiveActor_eventCarrierFireUp_Parms
{
    BITFIELD ReturnValue;
};
class ENGINE_API AInteractiveActor : public ARenderActor
{
public:
    FName ChallengeTag;
    BITFIELD ShowWhenChallengeLocked:1 GCC_PACK(4);
    FName ShowComponentEvent GCC_PACK(4);
    FName HideComponentEvent;
    FLOAT ProximityDistance;
    FLOAT GlowDistance;
    BITFIELD bChallengeGlow:1 GCC_PACK(4);
    FName ChallengeTurnOnGlowTag GCC_PACK(4);
    FName ChallengeTurnOffGlowTag;
    BITFIELD bLookWhenHidden:1 GCC_PACK(4);
    BITFIELD bDrawHUDInfo:1;
    BITFIELD bDrawUsePhrase:1;
    BITFIELD bNoUseKeyInfo:1;
    BITFIELD bForceUsePhrase:1;
    BITFIELD bUnUseOnLookChange:1;
    BITFIELD bUsable:1;
    BITFIELD bUnUsable:1;
    BITFIELD bUseTriggered:1;
    BITFIELD bGrabUsable:1;
    BITFIELD bGrabUnusable:1;
    BITFIELD bCheckUseAngle:1;
    BITFIELD bMimicOwner:1;
    BITFIELD bPassUseToOwner:1;
    BITFIELD bGrabbable:1;
    BITFIELD SavedbGrabbable:1;
    BITFIELD BeingThrown:1;
    BITFIELD WasThrownByPlayer:1;
    BITFIELD ReservedForPickup:1;
    BITFIELD UnderTelekineticControl:1;
    BITFIELD BeingTelekineticThrown:1;
    BITFIELD bTelekineticable:1;
    BITFIELD bTelekineticableSingleOnly:1;
    BITFIELD bShowUpOnRadar:1;
    BITFIELD bShielded:1;
    BITFIELD bEMPulsed:1;
    BITFIELD bMultiEMPulse:1;
    BITFIELD bAbsorbDamage:1;
    BITFIELD bIgnoreTestCanSeeMe:1;
    BITFIELD bCanShowSelf:1;
    BYTE ShrunkUseStyle GCC_PACK(4);
    BYTE ShrunkGrabStyle;
    BYTE ThrowPhysics;
    BYTE PostTKPhysics;
    FStringNoInit UsePhrase;
    FStringNoInit GrabUsePhrase;
    FStringNoInit GrabUseCombinePhrase;
    FStringNoInit IconGrab;
    FStringNoInit IconUse;
    dnArray<BYTE> UsePostureSuccess;
    dnArray<BYTE> UsePostureFailure;
    dnArray<BYTE> UsePhysicsSuccess;
    dnArray<BYTE> UsePhysicsFailure;
    FLOAT UseAngleThreshold;
    FLOAT EndViewingAngleMinDiff;
    class APawn* CarriedBy;
    FSGrabInfo GrabInfo;
    FLOAT ThrowForce;
    FName ThrowBone;
    FRotator ThrowBaseRotation;
    FRotator ThrowBaseRotationVariance;
    FRotator ThrowDropBaseRotation;
    FLOAT ThrowForceScale;
    FLOAT ThrowForceScaleAI;
    FStringNoInit TelekinesisChargeClassName;
    FStringNoInit TelekinesisBeamSystemClassName;
    FVector TelekinesisAngularVel;
    FLOAT TelekinesisThrowVel;
    class ASoftParticleSystem* TelekinesisCharge;
    class ABeamSystem* TelekinesisBeamSystem;
    FSMicrowaveInfo MicrowaveInfo;
    dnArray<FSExitWoundInfo> ExitWoundInfo;
    class AInteractiveActor* VendOwner;
    class UVendItemInfo* VendInfo;
    class UClass* ShieldClass;
    FLOAT ShieldLifetime;
    FLOAT ShieldScaleFactor;
    class UMaterialEx* ShieldTex;
    FName ForceEMPTag;
    FName ForceUnEMPTag;
    FLOAT ForcedEMPDisableTime;
    FLOAT EMPDisableTime;
    class ARenderActor* ShieldActor;
    FLOAT LastEMPTime;
    FLOAT DamageAbsorbAmount;
    FLOAT DamageAbsorbPct;
    FLOAT AvoidRange;
    FName StartAnimSequence;
    FLOAT StartAnimFrame;
    DECLARE_FUNCTION(execGetTargetedPoint);
    DECLARE_FUNCTION(execCheckUserShrunkUse);
    DECLARE_FUNCTION(execCanBeGrabbedBy);
    DECLARE_FUNCTION(execDoExitWound);
    DECLARE_FUNCTION(execSetTelekineticable);
    inline void __fastcall eventUnMimicOwner()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_UnMimicOwner), NULL);
    }
    inline void __fastcall eventMimicOwner(class AInteractiveActor* ThisOwner)
    {
        AInteractiveActor_eventMimicOwner_Parms Parms;
        Parms.ThisOwner=ThisOwner;
        ProcessEvent(FindFunctionChecked(ENGINE_MimicOwner), &Parms);
    }
    inline void __fastcall eventCreateShield()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_CreateShield), NULL);
    }
    inline void __fastcall eventPickedUp(class APawn* Carrier)
    {
        AInteractiveActor_eventPickedUp_Parms Parms;
        Parms.Carrier=Carrier;
        ProcessEvent(FindFunctionChecked(ENGINE_PickedUp), &Parms);
    }
    inline FString __fastcall eventGetGrabUseCombinePhrase(class AInteractiveActor* Combinee, const FString& SpecialKey)
    {
        AInteractiveActor_eventGetGrabUseCombinePhrase_Parms Parms;
        Parms.Combinee=Combinee;
        Parms.SpecialKey=SpecialKey;
        ProcessEvent(FindFunctionChecked(ENGINE_GetGrabUseCombinePhrase), &Parms);
        return Parms.ReturnValue;
    }
    inline BITFIELD __fastcall eventCanGrabUseCombine(class AInteractiveActor* Combinee)
    {
        AInteractiveActor_eventCanGrabUseCombine_Parms Parms;
        Parms.ReturnValue=0;
        Parms.Combinee=Combinee;
        ProcessEvent(FindFunctionChecked(ENGINE_CanGrabUseCombine), &Parms);
        return Parms.ReturnValue;
    }
    inline FString __fastcall eventGetGrabUsePhrase()
    {
        AInteractiveActor_eventGetGrabUsePhrase_Parms Parms;
        ProcessEvent(FindFunctionChecked(ENGINE_GetGrabUsePhrase), &Parms);
        return Parms.ReturnValue;
    }
    inline FString __fastcall eventGetUsePhrase()
    {
        AInteractiveActor_eventGetUsePhrase_Parms Parms;
        ProcessEvent(FindFunctionChecked(ENGINE_GetUsePhrase), &Parms);
        return Parms.ReturnValue;
    }
    inline BITFIELD __fastcall eventCanBeGrabbedBy(class APawn* User)
    {
        AInteractiveActor_eventCanBeGrabbedBy_Parms Parms;
        Parms.ReturnValue=0;
        Parms.User=User;
        ProcessEvent(FindFunctionChecked(ENGINE_CanBeGrabbedBy), &Parms);
        return Parms.ReturnValue;
    }
    inline BITFIELD __fastcall eventShouldDrawHUDInfoUsePhrase(class APawn* TestPawn)
    {
        AInteractiveActor_eventShouldDrawHUDInfoUsePhrase_Parms Parms;
        Parms.ReturnValue=0;
        Parms.TestPawn=TestPawn;
        ProcessEvent(FindFunctionChecked(ENGINE_ShouldDrawHUDInfoUsePhrase), &Parms);
        return Parms.ReturnValue;
    }
    inline BITFIELD __fastcall eventCarrierMeleeDown()
    {
        AInteractiveActor_eventCarrierMeleeDown_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_CarrierMeleeDown), &Parms);
        return Parms.ReturnValue;
    }
    inline BITFIELD __fastcall eventCarrierMeleeUp()
    {
        AInteractiveActor_eventCarrierMeleeUp_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_CarrierMeleeUp), &Parms);
        return Parms.ReturnValue;
    }
    inline BITFIELD __fastcall eventCarrierFireDown()
    {
        AInteractiveActor_eventCarrierFireDown_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_CarrierFireDown), &Parms);
        return Parms.ReturnValue;
    }
    inline BITFIELD __fastcall eventCarrierFireUp()
    {
        AInteractiveActor_eventCarrierFireUp_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_CarrierFireUp), &Parms);
        return Parms.ReturnValue;
    }
    DECLARE_CLASS(AInteractiveActor,ARenderActor,0|CLASS_NativeReplication,Engine)
    NO_DEFAULT_CONSTRUCTOR_START(AInteractiveActor)
    NO_DEFAULT_CONSTRUCTOR_INIT(UsePostureSuccess)
    NO_DEFAULT_CONSTRUCTOR_INIT(UsePostureFailure)
    NO_DEFAULT_CONSTRUCTOR_INIT(UsePhysicsSuccess)
    NO_DEFAULT_CONSTRUCTOR_INIT(UsePhysicsFailure)
    NO_DEFAULT_CONSTRUCTOR_INIT(GrabInfo)
    NO_DEFAULT_CONSTRUCTOR_INITLAST(ExitWoundInfo)
};
// Class InteractiveActor exported:
//   Properties size: 752 bytes (2420 total)


//***************************************************************************//
/*	\class APawn
*/
//***************************************************************************//


struct APawn_eventShouldRemoveStepHeightContact_Parms
{
    class AKarmaActor* Other;
    BITFIELD ReturnValue;
};

struct APawn_eventCalculatePawnPhysics_Parms
{
    FLOAT dt;
};

struct APawn_eventNotifyLandedEffect_Parms
{
    FLOAT VerticalVelocity;
    BITFIELD bForceLand;
};

struct APawn_eventShouldDropBehind_Parms
{
    BITFIELD ReturnValue;
};

struct APawn_eventShouldDropCarriedActor_Parms
{
    BITFIELD ReturnValue;
};

struct APawn_eventTickBloat_Parms
{
    FLOAT DeltaTime;
};

struct APawn_eventGiveEgoCapAward_Parms
{
    FLOAT DeltaEgoCap;
};

struct APawn_eventApplyDukeStompKnockback_Parms
{
    FVector Impulse;
};

struct APawn_eventDied_Parms
{
    class APawn* Killer;
    INT Damage;
    FVector DamageOrigin;
    FVector DamageDirection;
    class UClass* DamageType;
    FName HitBoneName;
};

struct APawn_eventExpandingDeath_Parms
{
    class APawn* DeathInstigator;
};

struct APawn_eventEgoRecovery_UpdateRecharge_Parms
{
    FLOAT DeltaTime;
};

struct APawn_eventHealthRecovery_UpdateRecharge_Parms
{
    FLOAT DeltaTime;
};

struct APawn_eventGetPistolClass_Parms
{
    class UClass* ReturnValue;
};

struct APawn_eventCanUse4Weapons_Parms
{
    BITFIELD ReturnValue;
};

struct APawn_eventSpawnPickupForWeapon_Parms
{
    class AWeapon* DropWeapon;
};

struct APawn_eventIsMostlyShrunk_Parms
{
    BITFIELD ReturnValue;
};

struct APawn_eventGetShrunkPercentage_Parms
{
    FLOAT ReturnValue;
};

struct APawn_eventUpdateShrinkScale_Parms
{
    FLOAT ShrinkSizeScale;
};

struct APawn_eventNU_SetShrinkScale_Parms
{
    FLOAT NewShrinkScale;
};

struct APawn_eventGetFullSize_Parms
{
    FLOAT ReturnValue;
};

struct APawn_eventGetZoomTime_Parms
{
    FLOAT ReturnValue;
};

struct APawn_eventIsZoomedIn_Parms
{
    BITFIELD ReturnValue;
};

struct APawn_eventFailedPickupAttempt_Parms
{
    class UClass* InvClass;
    class APickup* PickupRef;
    BYTE PickupSource;
};

struct APawn_eventHandlePickup_Parms
{
    class AInventory* Inv;
    class APickup* PickupRef;
    FLOAT Count;
};

struct APawn_eventPawnAllowPickup_Parms
{
    class UClass* InvClass;
    BITFIELD ReturnValue;
};

struct APawn_eventInventoryIsActive_Parms
{
    class UClass* ActInvClass;
    BITFIELD ReturnValue;
};

struct APawn_eventSetNewPostureState_Parms
{
    BYTE NewPostureStateEx;
};

struct APawn_eventStartLanding_Parms
{
    FLOAT LandingVelocity;
};

struct APawn_eventHearNearMissEffect_Parms
{
    class UClass* EffectClass;
    FVector ClosestPoint;
};

struct APawn_eventIsActiveInGame_Parms
{
    BITFIELD ReturnValue;
};

struct APawn_eventIsFrozen_Parms
{
    BITFIELD ReturnValue;
};

struct APawn_eventNU_WeaponChange_Parms
{
    class AWeapon* NewWeapon;
};

struct APawn_eventNU_PostureStateChange_Parms
{
    BYTE NewPS;
};

struct APawn_eventRecordShot_Parms
{
    class AWeapon* Weapon;
};

struct APawn_eventGetEnemySpottedDialog_Parms
{
    BYTE ReturnValue;
};

struct APawn_eventSayDialog_Parms
{
    FName DialogSound;
    BITFIELD ForceDialog;
    FLOAT ReturnValue;
};

struct APawn_eventSpeakAnim_Parms
{
    FSCharacterSoundInfo Sound;
    INT AnimIndex;
    BITFIELD bPlayWithoutBreath;
    FLOAT ReturnValue;
};

struct APawn_eventSpeak_Parms
{
    FSSoundInfo SoundInfo;
    BITFIELD bPlayWithoutBreath;
    BITFIELD bDontReplicate;
    FLOAT ReturnValue;
};

struct APawn_eventFindSoundAndSpeak_Parms
{
    FName SoundName;
    BITFIELD bPlayWithoutBreath;
    FLOAT ReturnValue;
};

struct APawn_eventReachedDestination_Parms
{
    BITFIELD ReturnValue;
};

struct APawn_eventShouldAbortMovement_Parms
{
    BITFIELD ReturnValue;
};

struct APawn_eventHearSound_Parms
{
    class AActor* SoundInstigator;
    FVector SoundLocation;
};

struct APawn_eventFootVolumeChange_Parms
{
    class APhysicsVolume* NewFootVolume;
};

struct APawn_eventHeadVolumeChange_Parms
{
    class APhysicsVolume* NewHeadVolume;
};

struct APawn_eventUpdateFaceTarget_Parms
{
    FVector vDirTo;
    FVector vCurDir;
    BITFIELD ReturnValue;
};

struct APawn_eventGetFaceTargetLocation_Parms
{
    FVector OutLocation;
};

struct APawn_eventrShakeView_Parms
{
    FVector ShakeInfoA;
    FVector ShakeInfoB;
    INT ShakeFlags;
    FName ShakeID;
    class AActor* FalloffActor;
};

struct APawn_eventShakeView_Parms
{
    FSViewShakeInfo ViewShakeInfo;
    BITFIELD bRestartExisiting;
    FLOAT MagnitudeScale;
};

struct APawn_eventTraceFromCrosshairMeshEx_Parms
{
    FLOAT MaxDistance;
    FVector HitLocation;
    FVector HitNormal;
    FName HitMeshBone;
    class UMaterialEx* HitMeshTexture;
    FVector HitUV;
    FVector Extent;
    BITFIELD bShootable;
    class AActor* ReturnValue;
};

struct APawn_eventNotifyNearTraceFire_Parms
{
    FVector TraceStart;
    FVector TraceEnd;
};

struct APawn_eventTraceFromCrosshairMesh_Parms
{
    FLOAT MaxDistance;
    FVector HitLocation;
    FVector HitNormal;
    FName HitMeshBone;
    class UMaterialEx* HitMeshTexture;
    FVector HitUV;
    FVector Extent;
    BITFIELD bShootable;
    class AActor* ReturnValue;
};

struct APawn_eventReceiveAddJoinLeaveEvent_Parms
{
    FString PlayerName;
    BYTE Team;
    BITFIELD joining;
    BITFIELD idle;
};

struct APawn_eventReceiveLocalizedMessage_Parms
{
    class UClass* Message;
    INT Switch;
    class APlayerReplicationInfo* RelatedPRI_1;
    class APlayerReplicationInfo* RelatedPRI_2;
    class UObject* OptionalObject;
    class UClass* OptionalClass;
};

struct APawn_eventTeamMessage_Parms
{
    class APlayerReplicationInfo* PRI;
    FString S;
    FName Type;
    BITFIELD bBeep;
};

struct APawn_eventClientMessage_Parms
{
    FString S;
    FName Type;
    BITFIELD bBeep;
};

struct APawn_eventPlayCountdownSound_Parms
{
    INT Num;
};

struct APawn_eventTickHeldBreath_Parms
{
    FLOAT DeltaTime;
};

struct APawn_eventStopHoldingBreath_Parms
{
    BITFIELD bNoGasp;
};

struct APawn_eventCanBreatheNormally_Parms
{
    BITFIELD ReturnValue;
};

struct APawn_eventIsEnemyTo_Parms
{
    class APawn* Other;
    BITFIELD ReturnValue;
};

struct APawn_eventIsAlien_Parms
{
    BITFIELD ReturnValue;
};

struct APawn_eventCanBaseOn_Parms
{
    class AActor* PotentialBase;
    BITFIELD ReturnValue;
};

struct APawn_eventPawnNeedsSpecialStepHeightCollision_Parms
{
    BITFIELD ReturnValue;
};

struct APawn_eventPawnUsesSphereCollision_Parms
{
    BITFIELD ReturnValue;
};
class ENGINE_API APawn : public AInteractiveActor
{
public:
    BITFIELD bAttachedToUsableSomething:1 GCC_PACK(4);
    BITFIELD bForceDetachOnDamage:1;
    BITFIELD bPissing:1;
    BITFIELD bSimplePawnPhysicsCollision:1;
    BITFIELD bPhysicsControllerActive:1;
    BITFIELD bEnablePhysicsRotation:1;
    BITFIELD bCanHear:1;
    BITFIELD bIsBot:1;
    BITFIELD bCanStrafe:1;
    BITFIELD bCanSwim:1;
    BITFIELD bCanFly:1;
    BITFIELD bOnSteroids:1;
    BITFIELD bSlomoKill:1;
    BITFIELD bShouldCauseKillSound:1;
    BITFIELD bAllowSpecialKillSounds:1;
    BITFIELD bShouldCauseStompKillSound:1;
    BITFIELD bUseHealthRecovery:1;
    BITFIELD bUsedHealthRecovery:1;
    BITFIELD bProtectedEgoRecharge:1;
    BITFIELD bIsHuman:1;
    BITFIELD bIsPlayer:1;
    BITFIELD bDying:1;
    BITFIELD bGodMode:1;
    BITFIELD bGhostMode:1;
    BITFIELD bAutoActivate:1;
    BITFIELD bHideDeactivatedWeapons:1;
    BITFIELD bWeaponsActive:1;
    BITFIELD bDisplayThrowDropMessage:1;
    BITFIELD DelayCorpseRagdoll:1;
    BITFIELD bInstaGib:1;
    BITFIELD NoDecorationPain:1;
    BITFIELD bDemoMode:1;
    BITFIELD bFinishAnimsEarly:1;
    BITFIELD bAllowShrinkPostProcessEffect:1;
    BITFIELD bFullyShrunk:1;
    BITFIELD bCanUnshrinkWithSteroids:1;
    BITFIELD bShrinkable:1;
    FLOAT CurrentShrinkScale GCC_PACK(4);
    BITFIELD bHackDropshipNoShrink:1 GCC_PACK(4);
    BITFIELD bFreezable:1;
    BITFIELD bExpanding:1;
    BITFIELD bCanPiss:1;
    BITFIELD Stompable:1;
    BITFIELD bIgnoreAimAssist:1;
    BITFIELD bCanBloat:1;
    BYTE BloatState GCC_PACK(4);
    FLOAT ExpandAmount;
    FLOAT ExpandTimeWarp;
    FLOAT BloatStartTime;
    FLOAT ExpandRate;
    BITFIELD bGrabbing:1 GCC_PACK(4);
    BITFIELD CanStepUp:1;
    BITFIELD bAdjustStepHeight:1;
    BITFIELD bIsWalking:1;
    BITFIELD bWarping:1;
    BITFIELD bHasDeferredRotation:1;
    BITFIELD bChoking:1;
    BITFIELD bHoldingBreath:1;
    BITFIELD bWasUsingAirPocket:1;
    BITFIELD bMonitoringBreath:1;
    FLOAT UnderwaterThrowVelocityAdjust GCC_PACK(4);
    BITFIELD bRotateToDesiredView:1 GCC_PACK(4);
    BITFIELD FootstepSimple:1;
    BITFIELD bPlayPickupSounds:1;
    class UClass* PickupOverride GCC_PACK(4);
    FLOAT PickupKImpulseMagnitude;
    BITFIELD bBehindView:1 GCC_PACK(4);
    BITFIELD bViewPitchRotation:1;
    BITFIELD bViewTarget:1;
    BITFIELD bNoLogout:1;
    BITFIELD SavedDisplayPropbLowerByCollision:1;
    BITFIELD bExtendedVolumeSupport:1;
    BITFIELD bPerformLipSync:1;
    BYTE PostureStateEx GCC_PACK(4);
    BYTE Team;
    BYTE EnemySpottedDialog;
    BYTE ConfirmKillDialog;
    BYTE HealthRecoveryState;
    BYTE EgoRecoveryState;
    BYTE FrozenState;
    BYTE CarriedActorMountType;
    BYTE FootstepCategory;
    BYTE FootprintType;
    BYTE Gender;
    BYTE TurnType;
    class APawn* NextPawn;
    class UClass* Faction;
    class AInventory* InventoryPhysicsItem;
    FMeqonPawnController* PhysicsController;
    FMeqonBoxAirCloudSensor* PhysicsAirCloudSensor;
    FMeqonPawnSimpleCollision* PhysicsSimpleCollision;
    FLOAT SlopeMinimumDotEx;
    FLOAT SteepSlopeStrengthScaleEx;
    FVector GameplayDesiredPhysicsVelocity;
    class AInventory* InventoryListHead;
    class AActor* Base;
    class AActor* Enemy;
    FLOAT FieldOfView;
    FLOAT BaseTraceHeight;
    FRotator PawnRotationRate;
    FLOAT InitialSpeed;
    FLOAT FallingTime;
    FLOAT FluidFrictionScale;
    FSEgoInfo EgoThisFrame;
    class UFinalBlend* SteroidHUDEffectMaterial;
    class UFinalBlend* SteroidHUDEffectMaterial2;
    class UFinalBlend* InvincibilityHUDEffectMaterial;
    FLOAT SteroidsMeleeDamageMultiplier;
    FLOAT SteroidsFakeExplosionMagnitude;
    FLOAT Ego;
    FLOAT EgoCap;
    FLOAT SteroidEgoCap;
    FLOAT SteroidEgoCapPct;
    FLOAT SlomoKillRampInTime;
    FLOAT SlomoKillRampOutTime;
    FLOAT SlomoKillLength;
    FLOAT SlomoKillSpeed;
    FLOAT SlomoKillStart;
    FLOAT SlomoKillEnd;
    FName EyeBone;
    FName BodyBone;
    FName LockOnBone;
    FLOAT DialogGate;
    FLOAT KillSoundRandomChance;
    FName CustomKillSoundName;
    FLOAT CustomKillSoundChance;
    FLOAT CanRespawnTime;
    FLOAT ShrinkScale;
    FLOAT TargetCollisionRadius;
    FLOAT TargetCollisionHeight;
    FLOAT TargetMaxStepHeightEx;
    FLOAT TargetMass;
    FLOAT CrouchTransitionTime;
    FLOAT StandingCollisionRadius;
    FLOAT StandingCollisionHeight;
    FLOAT StandingMaxStepHeightEx;
    FLOAT CrouchingCollisionRadius;
    FLOAT CrouchingCollisionHeight;
    FLOAT CrouchingMaxStepHeightEx;
    FLOAT TargetUseDistance;
    FLOAT TargetShrunkUseDistance;
    FLOAT CollisionInterpolationTimer;
    FLOAT CollisionInterpolationDuration;
    FLOAT CollisionInterpolationStartRadius;
    FLOAT CollisionInterpolationDestinationRadius;
    FLOAT CollisionInterpolationStartHeight;
    FLOAT CollisionInterpolationDestinationHeight;
    FLOAT CollisionInterpolationStartStepHeight;
    FLOAT CollisionInterpolationDestinationStepHeight;
    FLOAT HealthRecoveryWaitForRechargeTime;
    FLOAT HealthRecoveryRate;
    FLOAT HealthDangerDeafenFactor;
    FLOAT HealthDangerEffectRampTime;
    FLOAT HealthDangerMotionBlurFactor;
    FLOAT HealthDangerBlurFactor;
    FLOAT HealthDangerBlurBrightnessFactor;
    FLOAT HealthDangerBloomFactor;
    FLOAT EgoRecoveryWaitForRechargeTime;
    FLOAT EgoRecoveryRate;
    INT Spree;
    INT WeaponSpree;
    class UClass* LastKillDamageType;
    INT StartInventorySize;
    class AWeapon* Weapon;
    class AActor* WeaponChangeNotify;
    INT NoWeaponCrossHairIndex;
    class AActivatableInventory* SelectedItem;
    FLOAT UseDistance;
    FLOAT MeleeDamageMultiplier;
    FLOAT TraceFireDamageMultiplier;
    class AWeapon* PrimaryWeapon1;
    class AWeapon* PrimaryWeapon2;
    class AWeapon* PrimaryWeapon3;
    class AWeapon* PrimaryWeapon4;
    BITFIELD bUse4Weapons:1 GCC_PACK(4);
    FLOAT WeaponSelectStartTime GCC_PACK(4);
    BITFIELD bWeaponSelectPressed:1 GCC_PACK(4);
    class AWeapon* WeaponSelectSelectedWeapon GCC_PACK(4);
    FLOAT WeaponSelectActivateTime;
    class AActor* ActiveHoloDuke;
    FName PickupMountBone;
    BITFIELD bStartingToDrink:1 GCC_PACK(4);
    class UClass* CorpseType GCC_PACK(4);
    class ACorpse* MyCorpse;
    class AWeapon* PreviousWeapon;
    class AWeapon* PendingWeapon;
    class AWeapon* PreviousWeaponForQuickSwitch;
    FLOAT LastPainSound;
    FLOAT DamageScaling;
    INT ExplosiveArea;
    dnArray<class AActor*> DamageAbsorbers;
    class UAnimationControllerEx* AnimationControllerServer;
    INT LastYawMoveDirection;
    FLOAT PercentageMoved;
    FLOAT SizeChangeTime;
    FSSoundInfo ShrinkSound;
    FSSoundInfo ExpandSound;
    class UMaterialEx* ShrinkingMaterial;
    FLOAT SizeChangeRelativeDrawscale;
    FLOAT SizeChangeTargetRelativeDrawscale;
    FLOAT FrozenStateChangeTime;
    FLOAT FreezeTime;
    FLOAT UnFreezeTime;
    FSSoundInfo FreezingSound;
    FSSoundInfo ThawingSound;
    FLOAT ExpandingStartTime;
    FLOAT ExpandingAlpha;
    FName ExpandingBoneName;
    class UClass* PissEffectClass;
    class ASoftParticleSystem* PissEffect;
    FName PissEffectBoneName;
    FLOAT DrainedLockoutTime;
    BITFIELD bDontModifyHeadSize:1 GCC_PACK(4);
    FLOAT MaxStepHeightEx GCC_PACK(4);
    FLOAT GroundSpeed;
    FLOAT AirSpeed;
    FLOAT WalkSpeedScale;
    FLOAT DuckSpeedScale;
    FLOAT MaxStepHeight;
    FLOAT AirControl;
    FLOAT MoveTimer;
    FSTarget DestinationTarget;
    FSTarget BodyTarget;
    FSTarget LookTarget;
    FSTarget AimTarget;
    FLOAT DesiredSpeed;
    FLOAT MaxDesiredSpeed;
    class UClass* LastWalkMaterial;
    class APhysicsVolume* HeadVolume;
    class APhysicsVolume* FootVolume;
    class ALadderVolume* LadderVolume;
    FRotator DeferredRotation;
    FLOAT ChokingDamage;
    FLOAT SwimSoundTime;
    dnArray<class USound*> SwimSounds;
    FLOAT RemainingAir;
    FLOAT ChokeHurtRate;
    FLOAT HoldBreathTime;
    FLOAT BreathDrainRate;
    FLOAT BreathRechargeRate;
    FLOAT ChokeHurtDamage;
    FLOAT ChokeGaspMinorPercentage;
    FLOAT ChokeGaspMajorPercentage;
    class APhysicsVolume* BreathPhysicsVolume;
    class AZoneInfo* BreathZoneInfo;
    FSPathInfo PathInfo;
    FSTimePath CarriedActorThrowCurve;
    INT CarriedActorDropResolution;
    FSRange CarriedActorDropAngles;
    FSRange CarriedActorThrowAngles;
    FLOAT CarriedActorPositionBuffer;
    FRotator CarriedActorRightHandAdjust;
    FRotator CarriedActorLeftHandAdjust;
    FName CarriedActorMountMeshItem;
    FLOAT LastThrownActorDelay;
    class AInteractiveActor* CarriedActor;
    FName CarriedActorMountPose;
    class AInteractiveActor* LastThrownActor;
    FLOAT LastThrownClearTime;
    class AInteractiveActor* HandFocusActor;
    class UClass* HandFocusActorClass;
    FName LastQuickAction;
    FLOAT MinHitWall;
    class APlayerReplicationInfo* PlayerReplicationInfo;
    class UClass* PlayerReplicationInfoClass;
    FStringNoInit MenuName;
    FLOAT OldMessageTime;
    BITFIELD bDeferMoved:1 GCC_PACK(4);
    BITFIELD bHasDeferMoved:1;
    BITFIELD bIsUsingFakeVelocity:1;
    FVector LastReplicatedLocation GCC_PACK(4);
    BITFIELD bDoOverlayForWeapons:1 GCC_PACK(4);
    FLOAT LandedVelocityThreshold GCC_PACK(4);
    dnArray<FSFootBones> FootBones;
    FLOAT FootprintSpecialLength;
    FLOAT FootprintSpecialTime;
    class ATriggerMaterialOverride* CurrentMaterialOverride;
    FLOAT FootstepTraceLength;
    FStringNoInit VoiceType;
    FName ExitSplashSoundName;
    FName BigSplashSoundName;
    FName LittleSplashSoundName;
    FName SwimStrokeSoundName;
    FSSoundInfo ExitSplash;
    FSSoundInfo BigSplash;
    FSSoundInfo LittleSplash;
    FLOAT SplashTime;
    FRotator ViewRotation;
    FRotator PreviousViewRotation;
    INT ViewRotationInt;
    FLOAT FovAngle;
    FName CameraMount;
    dnArray<FSFinishAnimSequenceEntry> FinishAnimSequences;
    FVector SavedDisplayPropPrePivot;
    FVector SavedDisplayPropPostPivot;
    class ADecoration* InteractiveDecoration;
    class AActor* LipSyncSoundSource;
    class UClass* LipSyncInfoClass;
    FName LipSyncPrevPose;
    BITFIELD bSpawnShrunk:1 GCC_PACK(4);
    BITFIELD bCollisionInitialized:1;
    DECLARE_FUNCTION(execCalculatePawnPhysics);
    DECLARE_FUNCTION(execPhysController_CanFit);
    DECLARE_FUNCTION(execPhysController_IsProcessingFinalSubtick);
    DECLARE_FUNCTION(execPhysController_ClearFallingVelocity);
    DECLARE_FUNCTION(execPhysController_UpdateFallingVelocity);
    DECLARE_FUNCTION(execPhysController_GetFallingVelocity);
    DECLARE_FUNCTION(execPhysController_GetGroundFriction);
    DECLARE_FUNCTION(execPhysController_GetGroundNormal);
    DECLARE_FUNCTION(execPhysController_GetGroundDistance);
    DECLARE_FUNCTION(execPhysController_GetGroundBoneName);
    DECLARE_FUNCTION(execPhysController_GetGroundActor);
    DECLARE_FUNCTION(execPhysController_GetGroundContact);
    DECLARE_FUNCTION(execPhysController_GetEndOfFrameCallback);
    DECLARE_FUNCTION(execPhysController_GetDownwardPushScale);
    DECLARE_FUNCTION(execPhysController_GetGravityScale);
    DECLARE_FUNCTION(execPhysController_GetGroundConstraintType);
    DECLARE_FUNCTION(execPhysController_GetGroundConstraintStrength);
    DECLARE_FUNCTION(execPhysController_GetGroundConstraintDirection);
    DECLARE_FUNCTION(execPhysController_GetGroundHeight);
    DECLARE_FUNCTION(execPhysController_GetConstraintGroundType);
    DECLARE_FUNCTION(execPhysController_GetConstraintStrength);
    DECLARE_FUNCTION(execPhysController_GetDesiredVelocity);
    DECLARE_FUNCTION(execPhysController_AddDesiredVelocity);
    DECLARE_FUNCTION(execPhysController_ScaleConstraintStrengthScalar);
    DECLARE_FUNCTION(execPhysController_ScaleDesiredVelocityScalar);
    DECLARE_FUNCTION(execPhysController_ScaleDownwardPushScale);
    DECLARE_FUNCTION(execPhysController_ScaleGravityScale);
    DECLARE_FUNCTION(execPhysController_ScaleGroundConstraintStrength);
    DECLARE_FUNCTION(execPhysController_ScaleGroundHeight);
    DECLARE_FUNCTION(execPhysController_ScaleConstraintStrength);
    DECLARE_FUNCTION(execPhysController_ScaleDesiredVelocity);
    DECLARE_FUNCTION(execPhysController_SetEndOfFrameCallback);
    DECLARE_FUNCTION(execPhysController_SetDownwardPushScale);
    DECLARE_FUNCTION(execPhysController_SetGravityScale);
    DECLARE_FUNCTION(execPhysController_SetGroundConstraintType);
    DECLARE_FUNCTION(execPhysController_SetGroundConstraintStrength);
    DECLARE_FUNCTION(execPhysController_SetGroundConstraintDirection);
    DECLARE_FUNCTION(execPhysController_SetGroundHeight);
    DECLARE_FUNCTION(execPhysController_SetConstraintGroundType);
    DECLARE_FUNCTION(execPhysController_SetConstraintStrength);
    DECLARE_FUNCTION(execPhysController_SetDesiredVelocity);
    DECLARE_FUNCTION(execPhysController_PerformedCast);
    DECLARE_FUNCTION(execPhysController_GetSteepSlopeDot);
    DECLARE_FUNCTION(execPhysController_GetMaximumLength);
    DECLARE_FUNCTION(execPhysController_EnableGroundFinder);
    DECLARE_FUNCTION(execPhysController_SetSteepSlopeDot);
    DECLARE_FUNCTION(execPhysController_SetMaximumLength);
    DECLARE_FUNCTION(execGetFootstepMaterialFast);
    DECLARE_FUNCTION(execCanGrabActor);
    DECLARE_FUNCTION(execTraceFireHit);
    DECLARE_FUNCTION(execIsDead);
    DECLARE_FUNCTION(execIsSizeChangeActive);
    DECLARE_FUNCTION(execShrinkingActive);
    DECLARE_FUNCTION(execSetShrinkScale);
    DECLARE_FUNCTION(execFindInventoryByReferenceClass);
    DECLARE_FUNCTION(execFindInventoryByClass);
    DECLARE_FUNCTION(execFindInventoryTypeByName);
    DECLARE_FUNCTION(execFindInventoryType);
    DECLARE_FUNCTION(execRemoveInventory);
    DECLARE_FUNCTION(execAddInventory);
    DECLARE_FUNCTION(execCanDoThings);
    DECLARE_FUNCTION(execGetStoredLocationAdjust);
    DECLARE_FUNCTION(execAdjustLocationRestore);
    DECLARE_FUNCTION(execAdjustLocationAbsolute);
    DECLARE_FUNCTION(execGetLookDirection);
    DECLARE_FUNCTION(execDialogGateOpen);
    DECLARE_FUNCTION(execWaitForLanding);
    DECLARE_FUNCTION(execGetLockOnPos);
    DECLARE_FUNCTION(execGetBodyPos);
    DECLARE_FUNCTION(execGetEyePos);
    DECLARE_FUNCTION(execStopWaiting);
    DECLARE_FUNCTION(execLineOfSightTo);
    DECLARE_FUNCTION(execGetAimTargetActor);
    DECLARE_FUNCTION(execGetAimTargetLocation);
    DECLARE_FUNCTION(execClearAimTarget);
    DECLARE_FUNCTION(execSetAimTargetPoint);
    DECLARE_FUNCTION(execSetAimTargetActor);
    DECLARE_FUNCTION(execGetLookTargetActor);
    DECLARE_FUNCTION(execGetLookTargetLocation);
    DECLARE_FUNCTION(execClearLookTarget);
    DECLARE_FUNCTION(execSetLookTargetPoint);
    DECLARE_FUNCTION(execSetLookTargetActor);
    DECLARE_FUNCTION(execGetBodyTargetActor);
    DECLARE_FUNCTION(execGetBodyTargetLocation);
    DECLARE_FUNCTION(execClearBodyTarget);
    DECLARE_FUNCTION(execSetBodyTargetPoint);
    DECLARE_FUNCTION(execSetBodyTargetActor);
    DECLARE_FUNCTION(execGetDestinationActor);
    DECLARE_FUNCTION(execGetDestinationLocation);
    DECLARE_FUNCTION(execClearDestination);
    DECLARE_FUNCTION(execSetDestinationPoint);
    DECLARE_FUNCTION(execSetDestinationActor);
    DECLARE_FUNCTION(execClearLatentAction);
    DECLARE_FUNCTION(execFaceTarget);
    DECLARE_FUNCTION(execSlideTo);
    DECLARE_FUNCTION(execTurnToward);
    DECLARE_FUNCTION(execTurnTo);
    DECLARE_FUNCTION(execStrafeFacing);
    DECLARE_FUNCTION(execStrafeTo);
    DECLARE_FUNCTION(execMoveToward);
    DECLARE_FUNCTION(execMoveTo);
    DECLARE_FUNCTION(execFindStairRotation);
    DECLARE_FUNCTION(execGetCameraViewRotation);
    DECLARE_FUNCTION(execGetCameraLocation);
    DECLARE_FUNCTION(execCanBreatheNormally);
    DECLARE_FUNCTION(execFinishCachedAnims);
    DECLARE_FUNCTION(execFinishAnims);
    DECLARE_FUNCTION(execIsSpectating);
    DECLARE_FUNCTION(execIsLocallyControlled);
    DECLARE_FUNCTION(execRemovePawn);
    DECLARE_FUNCTION(execAddPawn);
    DECLARE_FUNCTION(execChangeCollisionHeightToCrouching);
    DECLARE_FUNCTION(execChangeCollisionHeightToStanding);
    DECLARE_FUNCTION(execChangeCollisionHeightToFull);
    DECLARE_FUNCTION(execSetCollisionInterpolationTarget);
    DECLARE_FUNCTION(execInterpolateCollisionSize);
    DECLARE_FUNCTION(execPawnSetLocation);
    DECLARE_FUNCTION(execSetMaxStepHeightEx);
    DECLARE_FUNCTION(execSetPhysicsControllerActive);
    DECLARE_FUNCTION(execSetSimplePawnPhysicsCollision);
    DECLARE_FUNCTION(execSetBase);
    DECLARE_FUNCTION(execdnPathSystem_FindPathPointTo);
    inline BITFIELD __fastcall eventShouldRemoveStepHeightContact(class AKarmaActor* Other)
    {
        APawn_eventShouldRemoveStepHeightContact_Parms Parms;
        Parms.ReturnValue=0;
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_ShouldRemoveStepHeightContact), &Parms);
        return Parms.ReturnValue;
    }
    inline void __fastcall eventCalculatePawnPhysics(FLOAT dt)
    {
        APawn_eventCalculatePawnPhysics_Parms Parms;
        Parms.dt=dt;
        ProcessEvent(FindFunctionChecked(ENGINE_CalculatePawnPhysics), &Parms);
    }
    inline void __fastcall eventNotifyLandedEffect(FLOAT VerticalVelocity, BITFIELD bForceLand)
    {
        APawn_eventNotifyLandedEffect_Parms Parms;
        Parms.VerticalVelocity=VerticalVelocity;
        Parms.bForceLand=bForceLand;
        ProcessEvent(FindFunctionChecked(ENGINE_NotifyLandedEffect), &Parms);
    }
    inline void __fastcall eventLostCarriedActor()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_LostCarriedActor), NULL);
    }
    inline BITFIELD __fastcall eventShouldDropBehind()
    {
        APawn_eventShouldDropBehind_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_ShouldDropBehind), &Parms);
        return Parms.ReturnValue;
    }
    inline BITFIELD __fastcall eventShouldDropCarriedActor()
    {
        APawn_eventShouldDropCarriedActor_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_ShouldDropCarriedActor), &Parms);
        return Parms.ReturnValue;
    }
    inline void __fastcall eventTickBloat(FLOAT DeltaTime)
    {
        APawn_eventTickBloat_Parms Parms;
        Parms.DeltaTime=DeltaTime;
        ProcessEvent(FindFunctionChecked(ENGINE_TickBloat), &Parms);
    }
    inline void __fastcall eventGiveEgoCapAward(FLOAT DeltaEgoCap)
    {
        APawn_eventGiveEgoCapAward_Parms Parms;
        Parms.DeltaEgoCap=DeltaEgoCap;
        ProcessEvent(FindFunctionChecked(ENGINE_GiveEgoCapAward), &Parms);
    }
    inline void __fastcall eventApplyDukeStompKnockback(FVector Impulse)
    {
        APawn_eventApplyDukeStompKnockback_Parms Parms;
        Parms.Impulse=Impulse;
        ProcessEvent(FindFunctionChecked(ENGINE_ApplyDukeStompKnockback), &Parms);
    }
    inline void __fastcall eventDied(class APawn* Killer, INT Damage, FVector DamageOrigin, FVector DamageDirection, class UClass* DamageType, FName HitBoneName)
    {
        APawn_eventDied_Parms Parms;
        Parms.Killer=Killer;
        Parms.Damage=Damage;
        Parms.DamageOrigin=DamageOrigin;
        Parms.DamageDirection=DamageDirection;
        Parms.DamageType=DamageType;
        Parms.HitBoneName=HitBoneName;
        ProcessEvent(FindFunctionChecked(ENGINE_Died), &Parms);
    }
    inline void __fastcall eventExpandingDeath(class APawn* DeathInstigator)
    {
        APawn_eventExpandingDeath_Parms Parms;
        Parms.DeathInstigator=DeathInstigator;
        ProcessEvent(FindFunctionChecked(ENGINE_ExpandingDeath), &Parms);
    }
    inline void __fastcall eventEgoRecovery_UpdateRecharge(FLOAT DeltaTime)
    {
        APawn_eventEgoRecovery_UpdateRecharge_Parms Parms;
        Parms.DeltaTime=DeltaTime;
        ProcessEvent(FindFunctionChecked(ENGINE_EgoRecovery_UpdateRecharge), &Parms);
    }
    inline void __fastcall eventHealthRecovery_UpdateRecharge(FLOAT DeltaTime)
    {
        APawn_eventHealthRecovery_UpdateRecharge_Parms Parms;
        Parms.DeltaTime=DeltaTime;
        ProcessEvent(FindFunctionChecked(ENGINE_HealthRecovery_UpdateRecharge), &Parms);
    }
    inline class UClass* __fastcall eventGetPistolClass()
    {
        APawn_eventGetPistolClass_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_GetPistolClass), &Parms);
        return Parms.ReturnValue;
    }
    inline BITFIELD __fastcall eventCanUse4Weapons()
    {
        APawn_eventCanUse4Weapons_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_CanUse4Weapons), &Parms);
        return Parms.ReturnValue;
    }
    inline void __fastcall eventSpawnPickupForWeapon(class AWeapon* DropWeapon)
    {
        APawn_eventSpawnPickupForWeapon_Parms Parms;
        Parms.DropWeapon=DropWeapon;
        ProcessEvent(FindFunctionChecked(ENGINE_SpawnPickupForWeapon), &Parms);
    }
    inline void __fastcall eventUpdateWeaponTraceVars()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_UpdateWeaponTraceVars), NULL);
    }
    inline BITFIELD __fastcall eventIsMostlyShrunk()
    {
        APawn_eventIsMostlyShrunk_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_IsMostlyShrunk), &Parms);
        return Parms.ReturnValue;
    }
    inline FLOAT __fastcall eventGetShrunkPercentage()
    {
        APawn_eventGetShrunkPercentage_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_GetShrunkPercentage), &Parms);
        return Parms.ReturnValue;
    }
    inline void __fastcall eventUpdateShrinkScale(FLOAT ShrinkSizeScale)
    {
        APawn_eventUpdateShrinkScale_Parms Parms;
        Parms.ShrinkSizeScale=ShrinkSizeScale;
        ProcessEvent(FindFunctionChecked(ENGINE_UpdateShrinkScale), &Parms);
    }
    inline void __fastcall eventNU_SetShrinkScale(FLOAT NewShrinkScale)
    {
        APawn_eventNU_SetShrinkScale_Parms Parms;
        Parms.NewShrinkScale=NewShrinkScale;
        ProcessEvent(FindFunctionChecked(ENGINE_NU_SetShrinkScale), &Parms);
    }
    inline FLOAT __fastcall eventGetFullSize()
    {
        APawn_eventGetFullSize_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_GetFullSize), &Parms);
        return Parms.ReturnValue;
    }
    inline FLOAT __fastcall eventGetZoomTime()
    {
        APawn_eventGetZoomTime_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_GetZoomTime), &Parms);
        return Parms.ReturnValue;
    }
    inline BITFIELD __fastcall eventIsZoomedIn()
    {
        APawn_eventIsZoomedIn_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_IsZoomedIn), &Parms);
        return Parms.ReturnValue;
    }
    inline void __fastcall eventFailedPickupAttempt(class UClass* InvClass, class APickup* PickupRef, BYTE PickupSource)
    {
        APawn_eventFailedPickupAttempt_Parms Parms;
        Parms.InvClass=InvClass;
        Parms.PickupRef=PickupRef;
        Parms.PickupSource=PickupSource;
        ProcessEvent(FindFunctionChecked(ENGINE_FailedPickupAttempt), &Parms);
    }
    inline void __fastcall eventHandlePickup(class AInventory* Inv, class APickup* PickupRef, FLOAT Count)
    {
        APawn_eventHandlePickup_Parms Parms;
        Parms.Inv=Inv;
        Parms.PickupRef=PickupRef;
        Parms.Count=Count;
        ProcessEvent(FindFunctionChecked(ENGINE_HandlePickup), &Parms);
    }
    inline BITFIELD __fastcall eventPawnAllowPickup(class UClass* InvClass)
    {
        APawn_eventPawnAllowPickup_Parms Parms;
        Parms.ReturnValue=0;
        Parms.InvClass=InvClass;
        ProcessEvent(FindFunctionChecked(ENGINE_PawnAllowPickup), &Parms);
        return Parms.ReturnValue;
    }
    inline BITFIELD __fastcall eventInventoryIsActive(class UClass* ActInvClass)
    {
        APawn_eventInventoryIsActive_Parms Parms;
        Parms.ReturnValue=0;
        Parms.ActInvClass=ActInvClass;
        ProcessEvent(FindFunctionChecked(ENGINE_InventoryIsActive), &Parms);
        return Parms.ReturnValue;
    }
    inline void __fastcall eventDestroyInventory()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_DestroyInventory), NULL);
    }
    inline void __fastcall eventSetNewPostureState(BYTE NewPostureStateEx)
    {
        APawn_eventSetNewPostureState_Parms Parms;
        Parms.NewPostureStateEx=NewPostureStateEx;
        ProcessEvent(FindFunctionChecked(ENGINE_SetNewPostureState), &Parms);
    }
    inline void __fastcall eventStartLanding(FLOAT LandingVelocity)
    {
        APawn_eventStartLanding_Parms Parms;
        Parms.LandingVelocity=LandingVelocity;
        ProcessEvent(FindFunctionChecked(ENGINE_StartLanding), &Parms);
    }
    inline void __fastcall eventSaveComplete()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_SaveComplete), NULL);
    }
    inline void __fastcall eventHearNearMissEffect(class UClass* EffectClass, FVector ClosestPoint)
    {
        APawn_eventHearNearMissEffect_Parms Parms;
        Parms.EffectClass=EffectClass;
        Parms.ClosestPoint=ClosestPoint;
        ProcessEvent(FindFunctionChecked(ENGINE_HearNearMissEffect), &Parms);
    }
    inline BITFIELD __fastcall eventIsActiveInGame()
    {
        APawn_eventIsActiveInGame_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_IsActiveInGame), &Parms);
        return Parms.ReturnValue;
    }
    inline BITFIELD __fastcall eventIsFrozen()
    {
        APawn_eventIsFrozen_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_IsFrozen), &Parms);
        return Parms.ReturnValue;
    }
    inline void __fastcall eventNU_WeaponChange(class AWeapon* NewWeapon)
    {
        APawn_eventNU_WeaponChange_Parms Parms;
        Parms.NewWeapon=NewWeapon;
        ProcessEvent(FindFunctionChecked(ENGINE_NU_WeaponChange), &Parms);
    }
    inline void __fastcall eventNU_PostureStateChange(BYTE NewPS)
    {
        APawn_eventNU_PostureStateChange_Parms Parms;
        Parms.NewPS=NewPS;
        ProcessEvent(FindFunctionChecked(ENGINE_NU_PostureStateChange), &Parms);
    }
    inline void __fastcall eventRecordShot(class AWeapon* Weapon)
    {
        APawn_eventRecordShot_Parms Parms;
        Parms.Weapon=Weapon;
        ProcessEvent(FindFunctionChecked(ENGINE_RecordShot), &Parms);
    }
    inline BYTE __fastcall eventGetEnemySpottedDialog()
    {
        APawn_eventGetEnemySpottedDialog_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_GetEnemySpottedDialog), &Parms);
        return Parms.ReturnValue;
    }
    inline FLOAT __fastcall eventSayDialog(FName DialogSound, BITFIELD ForceDialog)
    {
        APawn_eventSayDialog_Parms Parms;
        Parms.ReturnValue=0;
        Parms.DialogSound=DialogSound;
        Parms.ForceDialog=ForceDialog;
        ProcessEvent(FindFunctionChecked(ENGINE_SayDialog), &Parms);
        return Parms.ReturnValue;
    }
    inline FLOAT __fastcall eventSpeakAnim(FSCharacterSoundInfo& Sound, INT AnimIndex, BITFIELD bPlayWithoutBreath)
    {
        APawn_eventSpeakAnim_Parms Parms;
        Parms.ReturnValue=0;
        Parms.Sound=Sound;
        Parms.AnimIndex=AnimIndex;
        Parms.bPlayWithoutBreath=bPlayWithoutBreath;
        ProcessEvent(FindFunctionChecked(ENGINE_SpeakAnim), &Parms);
        Sound=Parms.Sound;
        return Parms.ReturnValue;
    }
    inline FLOAT __fastcall eventSpeak(FSSoundInfo& SoundInfo, BITFIELD bPlayWithoutBreath, BITFIELD bDontReplicate)
    {
        APawn_eventSpeak_Parms Parms;
        Parms.ReturnValue=0;
        Parms.SoundInfo=SoundInfo;
        Parms.bPlayWithoutBreath=bPlayWithoutBreath;
        Parms.bDontReplicate=bDontReplicate;
        ProcessEvent(FindFunctionChecked(ENGINE_Speak), &Parms);
        SoundInfo=Parms.SoundInfo;
        return Parms.ReturnValue;
    }
    inline FLOAT __fastcall eventFindSoundAndSpeak(FName SoundName, BITFIELD bPlayWithoutBreath)
    {
        APawn_eventFindSoundAndSpeak_Parms Parms;
        Parms.ReturnValue=0;
        Parms.SoundName=SoundName;
        Parms.bPlayWithoutBreath=bPlayWithoutBreath;
        ProcessEvent(FindFunctionChecked(ENGINE_FindSoundAndSpeak), &Parms);
        return Parms.ReturnValue;
    }
    inline BITFIELD __fastcall eventReachedDestination()
    {
        APawn_eventReachedDestination_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_ReachedDestination), &Parms);
        return Parms.ReturnValue;
    }
    inline BITFIELD __fastcall eventShouldAbortMovement()
    {
        APawn_eventShouldAbortMovement_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_ShouldAbortMovement), &Parms);
        return Parms.ReturnValue;
    }
    inline void __fastcall eventHearSound(class AActor* SoundInstigator, FVector SoundLocation)
    {
        APawn_eventHearSound_Parms Parms;
        Parms.SoundInstigator=SoundInstigator;
        Parms.SoundLocation=SoundLocation;
        ProcessEvent(FindFunctionChecked(ENGINE_HearSound), &Parms);
    }
    inline void __fastcall eventFootVolumeChange(class APhysicsVolume* NewFootVolume)
    {
        APawn_eventFootVolumeChange_Parms Parms;
        Parms.NewFootVolume=NewFootVolume;
        ProcessEvent(FindFunctionChecked(ENGINE_FootVolumeChange), &Parms);
    }
    inline void __fastcall eventHeadVolumeChange(class APhysicsVolume* NewHeadVolume)
    {
        APawn_eventHeadVolumeChange_Parms Parms;
        Parms.NewHeadVolume=NewHeadVolume;
        ProcessEvent(FindFunctionChecked(ENGINE_HeadVolumeChange), &Parms);
    }
    inline BITFIELD __fastcall eventUpdateFaceTarget(FVector vDirTo, FVector vCurDir)
    {
        APawn_eventUpdateFaceTarget_Parms Parms;
        Parms.ReturnValue=0;
        Parms.vDirTo=vDirTo;
        Parms.vCurDir=vCurDir;
        ProcessEvent(FindFunctionChecked(ENGINE_UpdateFaceTarget), &Parms);
        return Parms.ReturnValue;
    }
    inline void __fastcall eventGetFaceTargetLocation(FVector& OutLocation)
    {
        APawn_eventGetFaceTargetLocation_Parms Parms;
        Parms.OutLocation=OutLocation;
        ProcessEvent(FindFunctionChecked(ENGINE_GetFaceTargetLocation), &Parms);
        OutLocation=Parms.OutLocation;
    }
    inline void __fastcall eventServerReceivedInventory()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_ServerReceivedInventory), NULL);
    }
    inline void __fastcall eventPlayerTimeout()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_PlayerTimeout), NULL);
    }
    inline void __fastcall eventrShakeView(FVector ShakeInfoA, FVector ShakeInfoB, INT ShakeFlags, FName ShakeID, class AActor* FalloffActor)
    {
        APawn_eventrShakeView_Parms Parms;
        Parms.ShakeInfoA=ShakeInfoA;
        Parms.ShakeInfoB=ShakeInfoB;
        Parms.ShakeFlags=ShakeFlags;
        Parms.ShakeID=ShakeID;
        Parms.FalloffActor=FalloffActor;
        ProcessEvent(FindFunctionChecked(ENGINE_rShakeView), &Parms);
    }
    inline void __fastcall eventShakeView(FSViewShakeInfo ViewShakeInfo, BITFIELD bRestartExisiting, FLOAT MagnitudeScale)
    {
        APawn_eventShakeView_Parms Parms;
        Parms.ViewShakeInfo=ViewShakeInfo;
        Parms.bRestartExisiting=bRestartExisiting;
        Parms.MagnitudeScale=MagnitudeScale;
        ProcessEvent(FindFunctionChecked(ENGINE_ShakeView), &Parms);
    }
    inline class AActor* __fastcall eventTraceFromCrosshairMeshEx(FLOAT MaxDistance, FVector& HitLocation, FVector& HitNormal, FName& HitMeshBone, class UMaterialEx*& HitMeshTexture, FVector& HitUV, FVector Extent, BITFIELD bShootable)
    {
        APawn_eventTraceFromCrosshairMeshEx_Parms Parms;
        Parms.ReturnValue=0;
        Parms.MaxDistance=MaxDistance;
        Parms.HitLocation=HitLocation;
        Parms.HitNormal=HitNormal;
        Parms.HitMeshBone=HitMeshBone;
        Parms.HitMeshTexture=HitMeshTexture;
        Parms.HitUV=HitUV;
        Parms.Extent=Extent;
        Parms.bShootable=bShootable;
        ProcessEvent(FindFunctionChecked(ENGINE_TraceFromCrosshairMeshEx), &Parms);
        HitLocation=Parms.HitLocation;
        HitNormal=Parms.HitNormal;
        HitMeshBone=Parms.HitMeshBone;
        HitMeshTexture=Parms.HitMeshTexture;
        HitUV=Parms.HitUV;
        return Parms.ReturnValue;
    }
    inline void __fastcall eventNotifyNearTraceFire(FVector TraceStart, FVector TraceEnd)
    {
        APawn_eventNotifyNearTraceFire_Parms Parms;
        Parms.TraceStart=TraceStart;
        Parms.TraceEnd=TraceEnd;
        ProcessEvent(FindFunctionChecked(ENGINE_NotifyNearTraceFire), &Parms);
    }
    inline class AActor* __fastcall eventTraceFromCrosshairMesh(FLOAT MaxDistance, FVector& HitLocation, FVector& HitNormal, FName& HitMeshBone, class UMaterialEx*& HitMeshTexture, FVector& HitUV, FVector Extent, BITFIELD bShootable)
    {
        APawn_eventTraceFromCrosshairMesh_Parms Parms;
        Parms.ReturnValue=0;
        Parms.MaxDistance=MaxDistance;
        Parms.HitLocation=HitLocation;
        Parms.HitNormal=HitNormal;
        Parms.HitMeshBone=HitMeshBone;
        Parms.HitMeshTexture=HitMeshTexture;
        Parms.HitUV=HitUV;
        Parms.Extent=Extent;
        Parms.bShootable=bShootable;
        ProcessEvent(FindFunctionChecked(ENGINE_TraceFromCrosshairMesh), &Parms);
        HitLocation=Parms.HitLocation;
        HitNormal=Parms.HitNormal;
        HitMeshBone=Parms.HitMeshBone;
        HitMeshTexture=Parms.HitMeshTexture;
        HitUV=Parms.HitUV;
        return Parms.ReturnValue;
    }
    inline void __fastcall eventReceiveAddJoinLeaveEvent(const FString& PlayerName, BYTE Team, BITFIELD joining, BITFIELD idle)
    {
        APawn_eventReceiveAddJoinLeaveEvent_Parms Parms;
        Parms.PlayerName=PlayerName;
        Parms.Team=Team;
        Parms.joining=joining;
        Parms.idle=idle;
        ProcessEvent(FindFunctionChecked(ENGINE_ReceiveAddJoinLeaveEvent), &Parms);
    }
    inline void __fastcall eventReceiveLocalizedMessage(class UClass* Message, INT Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject, class UClass* OptionalClass)
    {
        APawn_eventReceiveLocalizedMessage_Parms Parms;
        Parms.Message=Message;
        Parms.Switch=Switch;
        Parms.RelatedPRI_1=RelatedPRI_1;
        Parms.RelatedPRI_2=RelatedPRI_2;
        Parms.OptionalObject=OptionalObject;
        Parms.OptionalClass=OptionalClass;
        ProcessEvent(FindFunctionChecked(ENGINE_ReceiveLocalizedMessage), &Parms);
    }
    inline void __fastcall eventTeamMessage(class APlayerReplicationInfo* PRI, const FString& S, FName Type, BITFIELD bBeep)
    {
        APawn_eventTeamMessage_Parms Parms;
        Parms.PRI=PRI;
        Parms.S=S;
        Parms.Type=Type;
        Parms.bBeep=bBeep;
        ProcessEvent(FindFunctionChecked(ENGINE_TeamMessage), &Parms);
    }
    inline void __fastcall eventClientMessage(const FString& S, FName Type, BITFIELD bBeep)
    {
        APawn_eventClientMessage_Parms Parms;
        Parms.S=S;
        Parms.Type=Type;
        Parms.bBeep=bBeep;
        ProcessEvent(FindFunctionChecked(ENGINE_ClientMessage), &Parms);
    }
    inline void __fastcall eventPlayCountdownSound(INT Num)
    {
        APawn_eventPlayCountdownSound_Parms Parms;
        Parms.Num=Num;
        ProcessEvent(FindFunctionChecked(ENGINE_PlayCountdownSound), &Parms);
    }
    inline void __fastcall eventTickHeldBreath(FLOAT DeltaTime)
    {
        APawn_eventTickHeldBreath_Parms Parms;
        Parms.DeltaTime=DeltaTime;
        ProcessEvent(FindFunctionChecked(ENGINE_TickHeldBreath), &Parms);
    }
    inline void __fastcall eventStopHoldingBreath(BITFIELD bNoGasp)
    {
        APawn_eventStopHoldingBreath_Parms Parms;
        Parms.bNoGasp=bNoGasp;
        ProcessEvent(FindFunctionChecked(ENGINE_StopHoldingBreath), &Parms);
    }
    inline BITFIELD __fastcall eventCanBreatheNormally()
    {
        APawn_eventCanBreatheNormally_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_CanBreatheNormally), &Parms);
        return Parms.ReturnValue;
    }
    inline BITFIELD __fastcall eventIsEnemyTo(class APawn* Other)
    {
        APawn_eventIsEnemyTo_Parms Parms;
        Parms.ReturnValue=0;
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_IsEnemyTo), &Parms);
        return Parms.ReturnValue;
    }
    inline BITFIELD __fastcall eventIsAlien()
    {
        APawn_eventIsAlien_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_IsAlien), &Parms);
        return Parms.ReturnValue;
    }
    inline void __fastcall eventBaseChange()
    {
        if(IsProbing(NAME_BaseChange)) {
        ProcessEvent(FindFunctionChecked(ENGINE_BaseChange), NULL);
        }
    }
    inline BITFIELD __fastcall eventCanBaseOn(class AActor* PotentialBase)
    {
        APawn_eventCanBaseOn_Parms Parms;
        Parms.ReturnValue=0;
        Parms.PotentialBase=PotentialBase;
        ProcessEvent(FindFunctionChecked(ENGINE_CanBaseOn), &Parms);
        return Parms.ReturnValue;
    }
    inline BITFIELD __fastcall eventPawnNeedsSpecialStepHeightCollision()
    {
        APawn_eventPawnNeedsSpecialStepHeightCollision_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_PawnNeedsSpecialStepHeightCollision), &Parms);
        return Parms.ReturnValue;
    }
    inline BITFIELD __fastcall eventPawnUsesSphereCollision()
    {
        APawn_eventPawnUsesSphereCollision_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_PawnUsesSphereCollision), &Parms);
        return Parms.ReturnValue;
    }
    DECLARE_CLASS(APawn,AInteractiveActor,0|CLASS_Config|CLASS_NativeReplication,Engine)
    NO_DEFAULT_CONSTRUCTOR_START(APawn)
    NO_DEFAULT_CONSTRUCTOR_INIT(DamageAbsorbers)
    NO_DEFAULT_CONSTRUCTOR_INIT(ShrinkSound)
    NO_DEFAULT_CONSTRUCTOR_INIT(ExpandSound)
    NO_DEFAULT_CONSTRUCTOR_INIT(FreezingSound)
    NO_DEFAULT_CONSTRUCTOR_INIT(ThawingSound)
    NO_DEFAULT_CONSTRUCTOR_INIT(SwimSounds)
    NO_DEFAULT_CONSTRUCTOR_INIT(CarriedActorThrowCurve)
    NO_DEFAULT_CONSTRUCTOR_INIT(FootBones)
    NO_DEFAULT_CONSTRUCTOR_INIT(ExitSplash)
    NO_DEFAULT_CONSTRUCTOR_INIT(BigSplash)
    NO_DEFAULT_CONSTRUCTOR_INIT(LittleSplash)
    NO_DEFAULT_CONSTRUCTOR_INITLAST(FinishAnimSequences)
};
// Class Pawn exported:
//   Properties size: 2368 bytes (4788 total)


//***************************************************************************//
/*	\class APlayerPawn
*/
//***************************************************************************//


struct APlayerPawn_eventPostMoveFillFrom_Parms
{
    class ASavedMove* newMove;
    FLOAT DeltaTime;
};

struct APlayerPawn_eventReliableRealCompressedServerMove_Parms
{
    FSCompressedServerMove n;
};

struct APlayerPawn_eventRealCompressedServerMove_Parms
{
    FSCompressedServerMove n;
};

struct APlayerPawn_eventClientAckGoodMove_Parms
{
    FLOAT Timestamp;
};

struct APlayerPawn_eventClientAdjustPosition_Parms
{
    FSClientAdjustment Adjustment;
};

struct APlayerPawn_eventCalculatePhysics_Base3DMotion_ShouldFlyDown_Parms
{
    BITFIELD ReturnValue;
};

struct APlayerPawn_eventCalculatePhysics_Base3DMotion_ShouldFlyUp_Parms
{
    BITFIELD ReturnValue;
};

struct APlayerPawn_eventIsInLevelTransition_Parms
{
    BITFIELD ReturnValue;
};

struct APlayerPawn_eventChangeTeam_Parms
{
    INT n;
};

struct APlayerPawn_eventrNativeClientFindAndPlaySound_Parms
{
    class UClass* VoicePack;
    FName SoundName;
    BITFIELD bSpoken;
    BITFIELD bPlayWithoutBreath;
    class AActor* PlayThroughActor;
    BYTE iNumRandomSounds;
};

struct APlayerPawn_eventrClientFindAndPlaySound_Parms
{
    class UClass* VoicePack;
    FName SoundName;
    BITFIELD bSpoken;
    BITFIELD bPlayWithoutBreath;
    class AActor* PlayThroughActor;
    BYTE iNumRandomSounds;
    BITFIELD bActorShouldExist;
};

struct APlayerPawn_eventrClientHearActorSound_Parms
{
    class AActor* Actor;
    class USound* Sound;
    BYTE Slot;
    FLOAT InnerRadius;
    FLOAT Radius;
    FLOAT Pitch;
    FLOAT Volume;
    BYTE SoundPriority;
    FSSoundFlags Flags;
    FSSoundFadeInfo FadeInfo;
    FName SoundEndCallback;
    INT Offset;
    FSSoundLocationOverride SoundLocationOverride;
    FName MixerGroup;
    FLOAT PlaybackDelay;
};

struct APlayerPawn_eventrClientHearSound_Parms
{
    class USound* Sound;
    BYTE Slot;
    FLOAT InnerRadius;
    FLOAT Radius;
    FLOAT Pitch;
    FLOAT Volume;
    BYTE SoundPriority;
    FSSoundFlags Flags;
    FSSoundFadeInfo FadeInfo;
    FName SoundEndCallback;
    INT Offset;
    FSSoundLocationOverride SoundLocationOverride;
    FName MixerGroup;
    FLOAT PlaybackDelay;
};

struct APlayerPawn_eventrClientShortHearActorSound_Parms
{
    class AActor* Actor;
    class USound* Sound;
    BYTE Slot;
    FLOAT InnerRadius;
    FLOAT Radius;
    FLOAT Pitch;
    FLOAT Volume;
    BYTE SoundPriority;
    FSSoundFlags Flags;
    FSSoundFadeInfo FadeInfo;
    FName SoundEndCallback;
    FName MixerGroup;
    FLOAT PlaybackDelay;
};

struct APlayerPawn_eventrClientShortHearSound_Parms
{
    FVector SoundLocation;
    class USound* Sound;
    BYTE Slot;
    FLOAT InnerRadius;
    FLOAT Radius;
    FLOAT Pitch;
    FLOAT Volume;
    BYTE SoundPriority;
    FSSoundFlags Flags;
    FSSoundFadeInfo FadeInfo;
    FName SoundEndCallback;
    FName MixerGroup;
    FLOAT PlaybackDelay;
};

struct APlayerPawn_eventrClientVeryShortHearActorSound_Parms
{
    class AActor* Actor;
    class USound* Sound;
    BYTE Slot;
    FLOAT InnerRadius;
    FLOAT Radius;
    FLOAT Pitch;
    FLOAT Volume;
    FName MixerGroup;
};

struct APlayerPawn_eventrClientVeryShortHearSound_Parms
{
    FVector SoundLocation;
    class USound* Sound;
    BYTE Slot;
    FLOAT InnerRadius;
    FLOAT Radius;
    FLOAT Pitch;
    FLOAT Volume;
    FName MixerGroup;
};

struct APlayerPawn_eventrClientDebugDrawCross_Parms
{
    FVector vPoint;
    FColor MarkerColor;
    FLOAT fExpireTime;
};

struct APlayerPawn_eventrClientDebugDrawCylinder_Parms
{
    FVector vPoint;
    FLOAT fRadius;
    FLOAT fHalfHeight;
    FColor MarkerColor;
    FLOAT fExpireTime;
};

struct APlayerPawn_eventTriggerViewRotationAdjust_Parms
{
    INT PitchAdjust;
    INT YawAdjust;
    INT RollAdjust;
    FLOAT DeltaTime;
};

struct APlayerPawn_eventShouldUpdateRotation_Parms
{
    BITFIELD ReturnValue;
};

struct APlayerPawn_eventCalculateDeferredFallingDamage_Parms
{
    FLOAT ImpactVelocity;
};

struct APlayerPawn_eventHandlePlayerMovePrePhysics_Parms
{
    FLOAT DeltaTime;
    BITFIELD ReturnValue;
};

struct APlayerPawn_eventPlayerMove_Parms
{
    FLOAT DeltaTime;
};

struct APlayerPawn_eventIsVisiontTypeActive_Parms
{
    BYTE Type;
    BITFIELD ReturnValue;
};

struct APlayerPawn_eventAdjustDOFBlur_Parms
{
    FLOAT DeltaTime;
    BITFIELD Instant;
};

struct APlayerPawn_eventMountCorpseCamera_Parms
{
    FVector WorkingLocation;
};

struct APlayerPawn_eventPlayerCalcView_MPDead_Parms
{
    FVector CameraLocation;
    FRotator CameraRotation;
    FLOAT Dist;
    class AActor* TraceActor;
};

struct APlayerPawn_eventPlayerCalcView_Behind_Parms
{
    FVector CameraLocation;
    FRotator CameraRotation;
    FLOAT Dist;
    class AActor* TraceActor;
};

struct APlayerPawn_eventPlayerCalcView_Parms
{
    class AActor* ViewActor;
    FVector CameraLocation;
    FRotator CameraRotation;
};

struct APlayerPawn_eventPostureStateExChange_Ladder_Parms
{
    BITFIELD bImmediate;
};

struct APlayerPawn_eventPostureStateExChange_Mounted_Parms
{
    BITFIELD bImmediate;
    BITFIELD bUncrouch;
};

struct APlayerPawn_eventPostureStateExChange_Jetpack_Parms
{
    BITFIELD bImmediate;
};

struct APlayerPawn_eventPostureStateExChange_Swimming_Parms
{
    BITFIELD bImmediate;
};

struct APlayerPawn_eventPostureStateExChange_InAir_Parms
{
    BITFIELD bImmediate;
};

struct APlayerPawn_eventPostureStateExChange_Crouching_Parms
{
    BITFIELD bImmediate;
};

struct APlayerPawn_eventPostureStateExChange_Standing_Parms
{
    BITFIELD bImmediate;
};

struct APlayerPawn_eventPostureStateExLeaving_Ladder_Parms
{
    BITFIELD bImmediate;
};

struct APlayerPawn_eventPostureStateExLeaving_Mounted_Parms
{
    BITFIELD bImmediate;
};

struct APlayerPawn_eventPostureStateExLeaving_Jetpack_Parms
{
    BITFIELD bImmediate;
};

struct APlayerPawn_eventPostureStateExLeaving_Swimming_Parms
{
    BITFIELD bImmediate;
};

struct APlayerPawn_eventPostureStateExLeaving_InAir_Parms
{
    BITFIELD bImmediate;
};

struct APlayerPawn_eventPostureStateExLeaving_Crouching_Parms
{
    BITFIELD bImmediate;
};

struct APlayerPawn_eventPostureStateExLeaving_Standing_Parms
{
    BITFIELD bImmediate;
};

struct APlayerPawn_eventPostureStateExLeaving_Unknown_Parms
{
    BITFIELD bImmediate;
};

struct APlayerPawn_eventHandlePostureStateExBase_Turning_Parms
{
    BYTE NewTurnType;
    INT YawDelta;
};

struct APlayerPawn_eventAdjustLeftHandOut_Parms
{
    FVector LeftHandLoc;
    FRotator LeftHandRot;
};

struct APlayerPawn_eventAdjustLeftHandIn_Parms
{
    FVector LeftHandLoc;
    FRotator LeftHandRot;
};

struct APlayerPawn_eventNotifyPlayerChangedTeam_Parms
{
    class APlayerPawn* P;
    INT NewTeam;
};

struct APlayerPawn_eventdnQASoundLoad_Parms
{
    FString SoundName;
    INT SoundSize;
};

struct APlayerPawn_eventdnQABumpmapLoad_Parms
{
    FString BumpmapName;
    INT BumpmapSize;
};

struct APlayerPawn_eventdnQATextureLoad_Parms
{
    FString TextureName;
    INT TextureSize;
};

struct APlayerPawn_eventdnQASkinMeshLoad_Parms
{
    FString SkinMeshName;
    INT SkinMeshSize;
};

struct APlayerPawn_eventdnQAAnimationLoad_Parms
{
    FString AnimName;
    INT AnimSize;
};

struct APlayerPawn_eventCorpseGibbed_Parms
{
    class APawn* OwnerPawn;
};

struct APlayerPawn_eventRemoveListener_Parms
{
    class AActor* Listener;
};

struct APlayerPawn_eventAddListener_Parms
{
    class AActor* NewListener;
};

struct APlayerPawn_eventHostLeft_Parms
{
    INT Reason;
};

struct APlayerPawn_eventCheckCanBeUsedBy_Parms
{
    class AActor* TestActor;
    BITFIELD ReturnValue;
};

struct APlayerPawn_eventPaused_Parms
{
    BITFIELD bSkipFade;
};

struct APlayerPawn_eventSetPause_Parms
{
    BITFIELD bPause;
    FString Pauser;
    BITFIELD bSkipFade;
    BITFIELD ReturnValue;
};

struct APlayerPawn_eventPostRender_Parms
{
    class UCanvas* Canvas;
};

struct APlayerPawn_eventPreRender_Parms
{
    class UCanvas* Canvas;
};

struct APlayerPawn_eventBrainHUD_Parms
{
    class AHUD* NewHUD;
};

struct APlayerPawn_eventClientTravel_Parms
{
    FString URL;
    BYTE TravelType;
    BITFIELD bItems;
};

struct APlayerPawn_eventInstigateClientTravel_Parms
{
    FString URL;
    BYTE TravelType;
    BITFIELD bItems;
};

struct APlayerPawn_eventUpdateLookHitActor_Parms
{
    class AActor* NonTraceBaseActor;
    class AActor* ReturnValue;
};

struct APlayerPawn_eventSetNetSpeed_Parms
{
    INT Rate;
};
class ENGINE_API APlayerPawn : public APawn
{
public:
    FLOAT OrthoZoom;
    class UPlayer* Player;
    FStringNoInit StoredURL;
    BYTE StoredTravelType;
    class UMesh* QueuedMesh;
    BITFIELD StoredbItems:1 GCC_PACK(4);
    BITFIELD bLevelTransition:1;
    BITFIELD bJumpInProgress:1;
    BITFIELD bIsJumpPadLaunching:1;
    BITFIELD bIsInAirFromJumpPad:1;
    BITFIELD bIsSubmerged:1;
    BITFIELD bForceCrouch:1;
    BITFIELD bInMapView:1;
    BITFIELD bPlayerViewLock:1;
    BITFIELD bAutoAdjustDOF:1;
    BITFIELD bDebugAutoDOF:1;
    BITFIELD bUsingZoneDOF:1;
    BITFIELD LastFog:1;
    BITFIELD bCenterView:1;
    BITFIELD bCameraLook:1;
    BITFIELD bDrawStandardOverlays:1;
    BITFIELD bNoSpam:1;
    BITFIELD bTakingCubeShot:1;
    BITFIELD bReadyLoadGame:1;
    BITFIELD bUseHelpPanel:1;
    BITFIELD bPlayerPausedGame:1;
    BITFIELD bBadConnectionAlert:1;
    BITFIELD ShowLogo:1;
    BITFIELD bIsTyping:1;
    BITFIELD bHitRumble:1;
    FLOAT LastPostNetReceiveShrinkScale GCC_PACK(4);
    BITFIELD bMessageBeep:1 GCC_PACK(4);
    BITFIELD bDoAimAssist:1;
    BITFIELD bShowGameHints:1;
    BITFIELD bShowSubtitles:1;
    BITFIELD bShowBossMeter:1;
    BITFIELD bFilmGrainEnabled:1;
    BITFIELD bDeafened:1;
    FLOAT bUnDeafenSpeed GCC_PACK(4);
    BITFIELD bFallingSound:1 GCC_PACK(4);
    BITFIELD bSnapToLevel:1;
    BYTE PreviousPostureStateEx GCC_PACK(4);
    BYTE LowerBodyOverrideState;
    BYTE ForwardMovementState;
    BYTE PreviousForwardMovementState;
    BYTE StrafeMovementState;
    BYTE PreviousStrafeMovementState;
    BYTE VerticalMovementState;
    BYTE PreviousVerticalMovementState;
    FLOAT ForwardMovementStateSlowThreshold;
    FLOAT ForwardMovementStateFastThreshold;
    FLOAT StrafeMovementStateSlowThreshold;
    FLOAT StrafeMovementStateFastThreshold;
    FLOAT VerticalMovementStateSlowThreshold;
    FLOAT VerticalMovementStateFastThreshold;
    FLOAT TargetMoveAlphaX;
    FVector LastMoveRelDir;
    FLOAT MoveAlpha;
    FLOAT MoveAlphaX;
    FLOAT MoveAlphaY;
    FLOAT MoveAlphaZ;
    FLOAT MoveAnimTimer;
    FName LastIdleAnim;
    FName LastAnimX;
    FName LastAnimZ;
    FLOAT WeaponBlendInTime;
    FLOAT WeaponBlendOutTime;
    FRotator AimOffset;
    FRotator MinAimOffset[11];
    FRotator MaxAimOffset[11];
    FLOAT AirControlEx;
    FLOAT AccelRateEx;
    FLOAT LadderControlXYEx;
    FLOAT LadderControlZEx;
    FLOAT StoredAirControlEx;
    FLOAT LastFallingDamageTime;
    FLOAT MinFallingDamageRepeatTime;
    FLOAT LightFallingDamageVelocity;
    FLOAT MediumFallingDamageVelocity;
    FLOAT FatalFallingDamageVelocity;
    FLOAT LightFallingDamage;
    FLOAT MediumFallingDamage;
    FLOAT HeavyFallingDamage;
    FLOAT DeferredFallingDamage;
    class UClass* DeferredFallingDamageType;
    class UClass* FatalFallingDamageType;
    FSRumbleInfo LandRumble;
    class UClass* WaterSplatterClass;
    INT AnimationControllerCacheIndex;
    dnArray<FSPlayerPawnAnimationControllerExCacheEntry> AnimationControllerCache;
    FName LastUpperBodyState;
    BYTE LastUpperBodyPostureState;
    FVector CalcedViewLocation;
    FRotator CalcedViewRotation;
    class AMenuCamera* CurrentMenuCamera;
    FLOAT MapFloatHeight;
    FVector ViewLockLocation;
    class AActor* ViewLockActor;
    FVector ViewLockLocationOffset;
    BYTE CameraStyle;
    FLOAT BlurAmount;
    FLOAT BlurBrightnessScale;
    FLOAT BloomBrightnessScale;
    FLOAT MotionBlurIntensity;
    FLOAT MotionBlurAmount;
    FLOAT DOF_BlurAmount;
    FLOAT DOF_FocalDist;
    FLOAT DOF_FocalRangeMin;
    FLOAT DOF_FocalRangeMax;
    FLOAT DOF_WeapDist;
    FLOAT DOF_WeapDistDelta;
    class AActor* DOF_CameraActor;
    FLOAT AutoDOF_FadeTime;
    FLOAT AutoDOF_PawnFadeTime;
    FLOAT AutoDOF_LastPawnTraceTime;
    FLOAT MaxPixelMotionBlurVel;
    FLOAT BSPPixelMotionBlurFactor;
    FLOAT WaterBlurFactor;
    FLOAT FloatingPushUpIntensity;
    FColor HeatVisionBackground;
    class AActor* ViewTarget;
    dnArray<FSSoundListener> ListenTargets;
    FLOAT ShakeFadeRate;
    FVector CompOldShakes;
    dnArray<FSActiveViewShake> ActiveShakes;
    FRotator CurrentShake;
    dnArray<FSRumbleInfo> ActiveRumbles;
    BYTE CameraBobState;
    dnArray<FSViewShakeInfo> WalkingCameraBob;
    dnArray<FSViewShakeInfo> CrouchingCameraBob;
    dnArray<FSViewShakeInfo> SprintingCameraBob;
    FLOAT BobPCT;
    FLOAT DamageViewKickSoft;
    FLOAT DamageViewKickHard;
    FLOAT DamageViewKickHardThreshold;
    FSViewShakeInfo MeleeContactShake;
    FSViewShakeInfo ExecutionContactShake;
    FSRumbleInfo MeleeContactRumble;
    FSRumbleInfo ExecutionContactRumble;
    FSRumbleInfo LightContactRumbleInfo;
    FSRumbleInfo MediumContactRumbleInfo;
    FSRumbleInfo HeavyContactRumbleInfo;
    FSRumbleInfo EgoCapIncreaseRumbleInfo;
    FColor HeatFogColor;
    FColor NightFogColor;
    FSDistanceFogOverride ZoneFogOverride;
    FSDistanceFogOverride VolumeFogOverride;
    FLOAT LastFogCheckTime;
    FLOAT LastFogStart;
    FLOAT LastFogEnd;
    FColor LastFogColor;
    FLOAT LastFogOpacity;
    FLOAT CurrentFOV;
    FLOAT DefaultFOV;
    FLOAT DefaultFOVShrunk;
    INT ShowFlags;
    INT RendMap;
    INT Misc1;
    INT Misc2;
    class AActor* ViewMapper;
    class AActor* OverlayActor;
    BYTE LoadGameType;
    INT LoadGameNum;
    BYTE HelpKey[10];
    BYTE HelpKeyAlt[10];
    FStringNoInit HelpText[10];
    class AHUD* MyHUD;
    class UClass* HUDType;
    INT MultiKillLevel;
    FLOAT LastKillTime;
    FStringNoInit ProgressMessage[8];
    FColor ProgressColor[8];
    FLOAT ProgressTimeOut;
    INT AccuracyHits;
    INT AccuracyHitsMax;
    INT AccuracyShots;
    FStringNoInit MatchMessage[8];
    FColor MatchColor[8];
    FLOAT MatchTimeOut;
    INT StartMatchTime;
    FLOAT RespawnCountdown;
    FStringNoInit QuickSaveString;
    FStringNoInit NoPauseMessage;
    FStringNoInit ViewingFrom;
    FStringNoInit OwnCamera;
    FStringNoInit FailedView;
    FStringNoInit JoinSpectatorText;
    FStringNoInit LeaveSpectatorText;
    FLOAT LastPlaySound;
    FSSoundInfo TinnitusLoopSoundInfo;
    FSSoundInfo TinnitusEndSoundInfo;
    FLOAT NextMirrorEgoTime;
    FLOAT aBaseX;
    FLOAT aBaseY;
    FLOAT aMouseX;
    FLOAT aMouseY;
    FLOAT aForward;
    FLOAT aTurn;
    FLOAT aStrafe;
    FLOAT aUp;
    FLOAT aLookUp;
    FLOAT aLeftTrigger;
    FLOAT aRightTrigger;
    FSAnalogAxisInfo LookUpAnalogInfo[10];
    FSAnalogAxisInfo TurnAnalogInfo[10];
    FLOAT LookUpAnalogAccelWarmup;
    FLOAT TurnAnalogAccelWarmup;
    class AActor* AimAssistEnemy;
    FLOAT AimAssistTimer;
    FVector AimAssistPoint;
    FRotator AimAssistAdjust;
    FLOAT MouseSensitivity;
    FLOAT MouseAccelDampening;
    FLOAT MouseSmoothThreshold;
    INT LookSensitivityH;
    INT LookSensitivityV;
    INT PrefabConfigIndex;
    INT RumbleLeftSpeed;
    INT RumbleRightSpeed;
    BITFIELD bMaxMouseSmoothing:1 GCC_PACK(4);
    BITFIELD bInvertMouse:1;
    BITFIELD bInvertXboxAim:1;
    BITFIELD bVibration:1;
    BITFIELD bToggleCrouch:1;
    BITFIELD bToggleZoom:1;
    BITFIELD bSwapJoysticks:1;
    INT OMPL GCC_PACK(4);
    BITFIELD bAlwaysTalk:1 GCC_PACK(4);
    BITFIELD bDontAllowToggleZoom:1;
    BITFIELD bDrawDebugEnemyBounds:1;
    BITFIELD bInfiniteAmmo:1;
    BITFIELD TeleportTravel:1;
    BITFIELD bInventorySent:1;
    BITFIELD bCheckInventoryReceived:1;
    BITFIELD bTouchingWeaponDelayedUse:1;
    FName TravelVehicleTag GCC_PACK(4);
    FVector TravelVehicleVelocity;
    FLOAT MyAutoAim;
    FName WeaponPriority[20];
    INT UserCrosshairIndex;
    FRotator TravelViewRotation;
    class AActor* TouchingWeaponPickup;
    class AInteractiveActor* NotifyUnUsed;
    class AInteractiveActor* NotifyGrabUnUsed;
    FLOAT ThrowTime;
    INT BladderLevel;
    class UTexture* EgoDepletedHUDEffectMaterial;
    FLOAT EgoDepletedHUDEffectAmp;
    FLOAT EgoDepletedHUDEffectFreq;
    FLOAT EgoDepletedHUDEffectOffset;
    class AActor* DirectLookHitActor;
    class AInteractiveActor* LookHitActor;
    class APawn* LookHitPawn;
    class AActor* LookActor;
    FLOAT LookHitDistance;
    FLOAT RestartTime;
    FLOAT VolumeSoundsTimer;
    FLOAT MaxDrunkLevel;
    FLOAT DrunkRampUpTime;
    FLOAT DrunkTime;
    FLOAT DrunkRecoveryTime;
    FLOAT DrunkBlurAmount;
    FLOAT DrunkZoomDuration;
    FLOAT DrunkZoomPct;
    FSSoundInfo DrunkRingingSound;
    FLOAT DrunkRingingSoundVolume;
    FLOAT DrunkDeafFactorBase;
    FLOAT DrunkDeafFactorDelta;
    FLOAT DrunkHiccupTime;
    FLOAT DrunkHiccupTimeVar;
    FLOAT DrunkDamageAbsorbPct;
    FLOAT SteroidDamageAbsorbPct;
    FLOAT SteroidsDuration;
    FLOAT SteroidsStartTime;
    FLOAT DrunkStartTime;
    FLOAT DrunkEndTime;
    FLOAT DrunkLevel;
    class AActor* CigarAttachment;
    FLOAT DebugSlomo;
    BITFIELD bHoloDukeActive:1 GCC_PACK(4);
    class UMaterialEx* HoloDukeEffectMaterial GCC_PACK(4);
    dnArray<FSHoloDukeEffectActor> HoloDukeEffectActors;
    class AWeapon* DetonatorRef;
    BYTE inputWalk;
    BYTE inputEnableMouseLook;
    BYTE inputViewSnapLevel;
    BYTE inputStrafe;
    BYTE inputFreeLook;
    BITFIELD bIForward:1 GCC_PACK(4);
    BITFIELD bIBackward:1;
    BITFIELD bIStrafeLeft:1;
    BITFIELD bIStrafeRight:1;
    BITFIELD bITurnLeft:1;
    BITFIELD bITurnRight:1;
    BITFIELD bIFire:1;
    BITFIELD bIFireServer:1;
    BITFIELD bIMelee:1;
    BITFIELD bIJump:1;
    BITFIELD bIDuck:1;
    BITFIELD bIUse:1;
    BITFIELD bIZoom:1;
    BITFIELD bISprint:1;
    BITFIELD bCrouchOn:1;
    BITFIELD bOptimizedFireTrace:1;
    BITFIELD bIsFiringBulletThisFrame:1;
    BITFIELD bIsSprinting:1;
    BITFIELD bIWasForward:1;
    BITFIELD bIWasBackward:1;
    BITFIELD bIWasStrafeLeft:1;
    BITFIELD bIWasStrafeRight:1;
    BITFIELD bIWasTurnLeft:1;
    BITFIELD bIWasTurnRight:1;
    BITFIELD bIWasJump:1;
    BITFIELD bIWasDuck:1;
    BITFIELD bIWasFire:1;
    BITFIELD bIWasFireServer:1;
    BITFIELD bIWasMelee:1;
    BITFIELD bIWasUse:1;
    BITFIELD bIWasZoom:1;
    BITFIELD bIDnControlFire:1;
    BITFIELD bIWasDnControlFire:1;
    BITFIELD bIDnControlMelee:1;
    BITFIELD bIWasDnControlMelee:1;
    BITFIELD bIDnControlDuck:1;
    BITFIELD bIWasDnControlDuck:1;
    FLOAT IdleTime GCC_PACK(4);
    FLOAT IdleWarningTime;
    FRotator IdleOldViewRotation;
    INT IdleViewRotationChangeCount;
    BITFIELD bIPhysWasJump:1 GCC_PACK(4);
    FLOAT GridYCached2 GCC_PACK(4);
    BITFIELD bIJumpPressed:1 GCC_PACK(4);
    BITFIELD bReceivedServerPositionUpdate:1;
    BITFIELD bReplayingSavedMoves:1;
    BITFIELD bAdmin:1;
    BITFIELD bReadyToPlay:1;
    BITFIELD bLeftSpectator:1;
    BITFIELD bUseRemappedEvents:1;
    BITFIELD bWatchEnabled:1;
    BITFIELD bCheatsEnabled:1;
    BITFIELD bCanSprint:1;
    BITFIELD bWasSprinting:1;
    BITFIELD bSprintRecover:1;
    BITFIELD bSprintBreathing:1;
    BITFIELD bSprintFatigue:1;
    BITFIELD bChaseCam:1;
    BITFIELD bCanPlantBomb:1;
    BITFIELD bVoted:1;
    FRotator LastMoveViewRotation GCC_PACK(4);
    BYTE AnalogInputByte;
    BYTE ButtonInputByte1;
    BYTE ButtonInputByte2;
    BITFIELD bCollectingCompressedServerMoveData:1 GCC_PACK(4);
    dnArray<FSCompressedServerMove> SavedCompressedServerMoveData GCC_PACK(4);
    FSClientAdjustment ServerPendingAdjustment;
    FLOAT ClientTimeDifference;
    class UClass* SavedMoveClass;
    class ASavedMove* SavedMovesHead;
    class ASavedMove* SavedMovesTail;
    class ASavedMove* FreeMoves;
    class ASavedMove* LastGoodMove;
    FLOAT CurrentTimeStamp;
    FLOAT ServerLastUpdateTime;
    FLOAT ServerTimeStamp;
    FLOAT TimeMargin;
    FLOAT ClientUpdateTime;
    FVector WeaponStartTraceLocation;
    FVector WeaponStartTraceDirection;
    INT WeaponSeed;
    INT DemoViewPitch;
    INT DemoViewYaw;
    FVector LastDeathLoc;
    FRotator LastDeathRot;
    FLOAT PainDebounceTime;
    FLOAT PainDelay;
    FSScreenFlash HealthRecoveryScreenFlash;
    BYTE ViewRotationMode;
    FRotator DesiredViewRotation;
    FRotator StartViewRotation;
    FLOAT RotateViewLength;
    FLOAT RotateViewStartTime;
    INT MinViewPitch;
    INT MaxViewPitch;
    FVector LastGhostLocation;
    BITFIELD bHasCheatedThisLevel:1 GCC_PACK(4);
    BITFIELD bDontResetCheatTracking:1;
    class AGameReplicationInfo* GameReplicationInfo GCC_PACK(4);
    BYTE LoginTeam;
    class AActor* InputHookActor;
    class AActor* KeyEventHookActor;
    class AActor* CurrentInputDecoration;
    dnArray<FSWatchInfo> WatchInfo;
    class AActor* MyDebugView;
    INT MaxVoteCount;
    INT VoteCount;
    FLOAT CrouchSpeedScaleEx;
    FLOAT TargetWalkSpeedEx;
    FLOAT TargetSprintSpeedEx;
    FLOAT TargetJumpSpeedEx;
    FLOAT TargetSwimSpeedEx;
    FLOAT TargetLadderJumpSpeedEx;
    FLOAT WalkSpeedEx;
    FLOAT SprintSpeedEx;
    FLOAT JumpSpeedEx;
    FLOAT ShrunkenJumpSpeedEx;
    FLOAT SwimSpeedEx;
    FLOAT LadderJumpSpeedEx;
    FLOAT TargetWaterExitJumpSpeedEx;
    FLOAT WaterExitJumpSpeedEx;
    FLOAT SprintTotalTime;
    FLOAT SprintTimer;
    FLOAT SprintRecoverTime;
    FLOAT SprintFOVScale;
    FLOAT SprintDownTime;
    BYTE VehiclePOV;
    FLOAT SizeChangeFOVScale;
    FLOAT SizeChangeFOVApplyTime;
    FLOAT SizeChangeFOVRemoveTime;
    FLOAT SizeChangeMotionBlur;
    FLOAT SizeChangeMotionBlurTime;
    FLOAT SavedGameTimeSeconds;
    FLOAT LoadGameTimeSeconds;
    dnArray<FSCheckpointTravelActorData> CheckpointTravelActors;
    class APlayerStart* LoginPlayerStart;
    FSSoundInfo LoadScreenAmbience;
    FSSoundInfo NavigateSoundInfo;
    BITFIELD bLockPlayerWFP:1 GCC_PACK(4);
    DECLARE_FUNCTION(execDecompressAnalog);
    DECLARE_FUNCTION(execCompressAnalog);
    DECLARE_FUNCTION(execRealCompressedServerMove);
    DECLARE_FUNCTION(execCompressedServerMove);
    DECLARE_FUNCTION(execClientAckGoodMove);
    DECLARE_FUNCTION(execClientAdjustPosition);
    DECLARE_FUNCTION(execClearSavedMoveList);
    DECLARE_FUNCTION(execPhysicsEndOfFrameHelper_SetPostureState);
    DECLARE_FUNCTION(execCalculatePhysics_Base3DMotion);
    DECLARE_FUNCTION(execCalculatePhysics_Base2DMotion);
    DECLARE_FUNCTION(execGetWeaponTraceVars);
    DECLARE_FUNCTION(execHandleServerMeleeUp);
    DECLARE_FUNCTION(execHandleServerMeleeDown);
    DECLARE_FUNCTION(execHandleServerFireUp);
    DECLARE_FUNCTION(execHandleServerFireDown);
    DECLARE_FUNCTION(execNativeSetNewPostureState);
    DECLARE_FUNCTION(execGetPlayerNetworkAddress);
    DECLARE_FUNCTION(execrNativeClientFindAndPlaySound);
    DECLARE_FUNCTION(execCanDuck);
    DECLARE_FUNCTION(execCanTransitionToPostureState);
    DECLARE_FUNCTION(execHandlePlayerMovePrePhysics);
    DECLARE_FUNCTION(execPlayerMove);
    DECLARE_FUNCTION(execFindBestWeapon);
    DECLARE_FUNCTION(execCanGrabActor);
    DECLARE_FUNCTION(execTickDistanceFog);
    DECLARE_FUNCTION(execTickDistanceFogOverride);
    DECLARE_FUNCTION(execEndDistanceFogOverride);
    DECLARE_FUNCTION(execSetDistanceFogOverride);
    DECLARE_FUNCTION(execForceStopAllRumble);
    DECLARE_FUNCTION(execAddRumble);
    DECLARE_FUNCTION(execAddViewShake);
    DECLARE_FUNCTION(execStopAllShakes);
    DECLARE_FUNCTION(execStopShake);
    DECLARE_FUNCTION(execHasShake);
    DECLARE_FUNCTION(execPlayerCalcView_MPDead);
    DECLARE_FUNCTION(execPlayerCalcView_Behind);
    DECLARE_FUNCTION(execPlayerCalcView);
    DECLARE_FUNCTION(execPostureStateExChange_Ladder);
    DECLARE_FUNCTION(execPostureStateExChange_Mounted);
    DECLARE_FUNCTION(execPostureStateExChange_Jetpack);
    DECLARE_FUNCTION(execPostureStateExChange_Swimming);
    DECLARE_FUNCTION(execPostureStateExChange_InAir);
    DECLARE_FUNCTION(execPostureStateExChange_Crouching);
    DECLARE_FUNCTION(execPostureStateExChange_Standing);
    DECLARE_FUNCTION(execPostureStateExLeaving_Ladder);
    DECLARE_FUNCTION(execPostureStateExLeaving_Mounted);
    DECLARE_FUNCTION(execPostureStateExLeaving_Jetpack);
    DECLARE_FUNCTION(execPostureStateExLeaving_Swimming);
    DECLARE_FUNCTION(execPostureStateExLeaving_InAir);
    DECLARE_FUNCTION(execPostureStateExLeaving_Crouching);
    DECLARE_FUNCTION(execPostureStateExLeaving_Standing);
    DECLARE_FUNCTION(execPostureStateExLeaving_Unknown);
    DECLARE_FUNCTION(execUpdateMovementState);
    DECLARE_FUNCTION(execFindAnimationControllerForPostureState);
    DECLARE_FUNCTION(execTickKick);
    DECLARE_FUNCTION(execUpdateAdditionalAnimationState);
    DECLARE_FUNCTION(execGetLookAnimGrid);
    DECLARE_FUNCTION(execApplyBodyTwist);
    DECLARE_FUNCTION(execRemoveListener);
    DECLARE_FUNCTION(execAddListener);
    DECLARE_FUNCTION(execRecordShotByType);
    DECLARE_FUNCTION(execSentinelWriteShots);
    DECLARE_FUNCTION(execAddMoveToFreeList);
    DECLARE_FUNCTION(execEnumerate3DAudioProviders);
    DECLARE_FUNCTION(execSetSpeakerType);
    DECLARE_FUNCTION(execGetSpeakerType);
    DECLARE_FUNCTION(execGet3DAudioProvider);
    DECLARE_FUNCTION(execShutdown3DAudio);
    DECLARE_FUNCTION(execInitialize3DAudio);
    DECLARE_FUNCTION(execShouldInputWakePlayerPhysics);
    DECLARE_FUNCTION(execCheckViewingEnemy);
    DECLARE_FUNCTION(execInputKeyIsGamepadButton);
    DECLARE_FUNCTION(execIsKeyDown);
    DECLARE_FUNCTION(execIsUsingMouse);
    DECLARE_FUNCTION(execSetShouldHavePortLock);
    DECLARE_FUNCTION(execClearControllerFocus);
    DECLARE_FUNCTION(execSelectControllerFocus);
    DECLARE_FUNCTION(execIsUsingGamepad);
    DECLARE_FUNCTION(execResetKeyboard);
    DECLARE_FUNCTION(execPauseGameInput);
    DECLARE_FUNCTION(execIsMenuActive);
    DECLARE_FUNCTION(execPasteFromClipboard);
    DECLARE_FUNCTION(execCopyToClipboard);
    DECLARE_FUNCTION(execHasClientTravel);
    DECLARE_FUNCTION(execGetDefaultURL);
    DECLARE_FUNCTION(execUpdateURL);
    DECLARE_FUNCTION(execClientTravel);
    DECLARE_FUNCTION(execShouldSaveCheckpoint);
    DECLARE_FUNCTION(execNative_GetDisplayMode);
    DECLARE_FUNCTION(execNative_GetNumDisplayModes);
    DECLARE_FUNCTION(execNative_ShowNavPoints);
    DECLARE_FUNCTION(execNativeUpdateLookHitActor);
    DECLARE_FUNCTION(execNativeTick);
    DECLARE_FUNCTION(execGetRoundState);
    DECLARE_FUNCTION(execIsEndOfRound);
    DECLARE_FUNCTION(execIsRoundInProgress);
    DECLARE_FUNCTION(execIsCountdown);
    DECLARE_FUNCTION(execIsPreRound);
    DECLARE_FUNCTION(execSetNetSpeed);
    DECLARE_FUNCTION(execCanControlMovement);
    DECLARE_FUNCTION(execGetSprintSpeedThreshold);
    DECLARE_FUNCTION(execIsSprinting);
    DECLARE_FUNCTION(execWantsToSprint);
    DECLARE_FUNCTION(execCanSprint);
    DECLARE_FUNCTION(execGetWalkSpeed);
    DECLARE_FUNCTION(execContinueCampaignInProgress);
    DECLARE_FUNCTION(execReadyToPlay);
    DECLARE_FUNCTION(execSetTitleScreen);
    DECLARE_FUNCTION(execXBoxAwardAchievement);
    DECLARE_FUNCTION(execXBoxIsSystemUIShowing);
    DECLARE_FUNCTION(execXBoxSaveProfile);
    DECLARE_FUNCTION(execXBoxDidUserChange);
    DECLARE_FUNCTION(execXBoxIsPlayingWithoutSave);
    DECLARE_FUNCTION(execXBoxHasStorageDevice);
    DECLARE_FUNCTION(execXBoxIsSignedIn);
    inline void __fastcall eventPostMoveFillFrom(class ASavedMove* newMove, FLOAT DeltaTime)
    {
        APlayerPawn_eventPostMoveFillFrom_Parms Parms;
        Parms.newMove=newMove;
        Parms.DeltaTime=DeltaTime;
        ProcessEvent(FindFunctionChecked(ENGINE_PostMoveFillFrom), &Parms);
    }
    inline void __fastcall eventReliableRealCompressedServerMove(FSCompressedServerMove& n)
    {
        APlayerPawn_eventReliableRealCompressedServerMove_Parms Parms;
        Parms.n=n;
        ProcessEvent(FindFunctionChecked(ENGINE_ReliableRealCompressedServerMove), &Parms);
        n=Parms.n;
    }
    inline void __fastcall eventRealCompressedServerMove(FSCompressedServerMove& n)
    {
        APlayerPawn_eventRealCompressedServerMove_Parms Parms;
        Parms.n=n;
        ProcessEvent(FindFunctionChecked(ENGINE_RealCompressedServerMove), &Parms);
        n=Parms.n;
    }
    inline void __fastcall eventClientAckGoodMove(FLOAT Timestamp)
    {
        APlayerPawn_eventClientAckGoodMove_Parms Parms;
        Parms.Timestamp=Timestamp;
        ProcessEvent(FindFunctionChecked(ENGINE_ClientAckGoodMove), &Parms);
    }
    inline void __fastcall eventClientAdjustPosition(FSClientAdjustment Adjustment)
    {
        APlayerPawn_eventClientAdjustPosition_Parms Parms;
        Parms.Adjustment=Adjustment;
        ProcessEvent(FindFunctionChecked(ENGINE_ClientAdjustPosition), &Parms);
    }
    inline BITFIELD __fastcall eventCalculatePhysics_Base3DMotion_ShouldFlyDown()
    {
        APlayerPawn_eventCalculatePhysics_Base3DMotion_ShouldFlyDown_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_CalculatePhysics_Base3DMotion_ShouldFlyDown), &Parms);
        return Parms.ReturnValue;
    }
    inline BITFIELD __fastcall eventCalculatePhysics_Base3DMotion_ShouldFlyUp()
    {
        APlayerPawn_eventCalculatePhysics_Base3DMotion_ShouldFlyUp_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_CalculatePhysics_Base3DMotion_ShouldFlyUp), &Parms);
        return Parms.ReturnValue;
    }
    inline BITFIELD __fastcall eventIsInLevelTransition()
    {
        APlayerPawn_eventIsInLevelTransition_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_IsInLevelTransition), &Parms);
        return Parms.ReturnValue;
    }
    inline void __fastcall eventDoZoomUp()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_DoZoomUp), NULL);
    }
    inline void __fastcall eventDoZoomDown()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_DoZoomDown), NULL);
    }
    inline void __fastcall eventHandleServerMeleeUp()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_HandleServerMeleeUp), NULL);
    }
    inline void __fastcall eventHandleServerMeleeDown()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_HandleServerMeleeDown), NULL);
    }
    inline void __fastcall eventHandleServerFireUp()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_HandleServerFireUp), NULL);
    }
    inline void __fastcall eventHandleServerFireDown()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_HandleServerFireDown), NULL);
    }
    inline void __fastcall eventPostureStateExChangeBase()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_PostureStateExChangeBase), NULL);
    }
    inline void __fastcall eventKillLoadingScreen()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_KillLoadingScreen), NULL);
    }
    inline void __fastcall eventChangeTeam(INT n)
    {
        APlayerPawn_eventChangeTeam_Parms Parms;
        Parms.n=n;
        ProcessEvent(FindFunctionChecked(ENGINE_ChangeTeam), &Parms);
    }
    inline void __fastcall eventrNativeClientFindAndPlaySound(class UClass* VoicePack, FName SoundName, BITFIELD bSpoken, BITFIELD bPlayWithoutBreath, class AActor* PlayThroughActor, BYTE iNumRandomSounds)
    {
        APlayerPawn_eventrNativeClientFindAndPlaySound_Parms Parms;
        Parms.VoicePack=VoicePack;
        Parms.SoundName=SoundName;
        Parms.bSpoken=bSpoken;
        Parms.bPlayWithoutBreath=bPlayWithoutBreath;
        Parms.PlayThroughActor=PlayThroughActor;
        Parms.iNumRandomSounds=iNumRandomSounds;
        ProcessEvent(FindFunctionChecked(ENGINE_rNativeClientFindAndPlaySound), &Parms);
    }
    inline void __fastcall eventrClientFindAndPlaySound(class UClass* VoicePack, FName SoundName, BITFIELD bSpoken, BITFIELD bPlayWithoutBreath, class AActor* PlayThroughActor, BYTE iNumRandomSounds, BITFIELD bActorShouldExist)
    {
        APlayerPawn_eventrClientFindAndPlaySound_Parms Parms;
        Parms.VoicePack=VoicePack;
        Parms.SoundName=SoundName;
        Parms.bSpoken=bSpoken;
        Parms.bPlayWithoutBreath=bPlayWithoutBreath;
        Parms.PlayThroughActor=PlayThroughActor;
        Parms.iNumRandomSounds=iNumRandomSounds;
        Parms.bActorShouldExist=bActorShouldExist;
        ProcessEvent(FindFunctionChecked(ENGINE_rClientFindAndPlaySound), &Parms);
    }
    inline void __fastcall eventrClientHearActorSound(class AActor* Actor, class USound* Sound, BYTE Slot, FLOAT InnerRadius, FLOAT Radius, FLOAT Pitch, FLOAT Volume, BYTE SoundPriority, FSSoundFlags Flags, FSSoundFadeInfo FadeInfo, FName SoundEndCallback, INT Offset, FSSoundLocationOverride SoundLocationOverride, FName MixerGroup, FLOAT PlaybackDelay)
    {
        APlayerPawn_eventrClientHearActorSound_Parms Parms;
        Parms.Actor=Actor;
        Parms.Sound=Sound;
        Parms.Slot=Slot;
        Parms.InnerRadius=InnerRadius;
        Parms.Radius=Radius;
        Parms.Pitch=Pitch;
        Parms.Volume=Volume;
        Parms.SoundPriority=SoundPriority;
        Parms.Flags=Flags;
        Parms.FadeInfo=FadeInfo;
        Parms.SoundEndCallback=SoundEndCallback;
        Parms.Offset=Offset;
        Parms.SoundLocationOverride=SoundLocationOverride;
        Parms.MixerGroup=MixerGroup;
        Parms.PlaybackDelay=PlaybackDelay;
        ProcessEvent(FindFunctionChecked(ENGINE_rClientHearActorSound), &Parms);
    }
    inline void __fastcall eventrClientHearSound(class USound* Sound, BYTE Slot, FLOAT InnerRadius, FLOAT Radius, FLOAT Pitch, FLOAT Volume, BYTE SoundPriority, FSSoundFlags Flags, FSSoundFadeInfo FadeInfo, FName SoundEndCallback, INT Offset, FSSoundLocationOverride SoundLocationOverride, FName MixerGroup, FLOAT PlaybackDelay)
    {
        APlayerPawn_eventrClientHearSound_Parms Parms;
        Parms.Sound=Sound;
        Parms.Slot=Slot;
        Parms.InnerRadius=InnerRadius;
        Parms.Radius=Radius;
        Parms.Pitch=Pitch;
        Parms.Volume=Volume;
        Parms.SoundPriority=SoundPriority;
        Parms.Flags=Flags;
        Parms.FadeInfo=FadeInfo;
        Parms.SoundEndCallback=SoundEndCallback;
        Parms.Offset=Offset;
        Parms.SoundLocationOverride=SoundLocationOverride;
        Parms.MixerGroup=MixerGroup;
        Parms.PlaybackDelay=PlaybackDelay;
        ProcessEvent(FindFunctionChecked(ENGINE_rClientHearSound), &Parms);
    }
    inline void __fastcall eventrClientShortHearActorSound(class AActor* Actor, class USound* Sound, BYTE Slot, FLOAT InnerRadius, FLOAT Radius, FLOAT Pitch, FLOAT Volume, BYTE SoundPriority, FSSoundFlags Flags, FSSoundFadeInfo FadeInfo, FName SoundEndCallback, FName MixerGroup, FLOAT PlaybackDelay)
    {
        APlayerPawn_eventrClientShortHearActorSound_Parms Parms;
        Parms.Actor=Actor;
        Parms.Sound=Sound;
        Parms.Slot=Slot;
        Parms.InnerRadius=InnerRadius;
        Parms.Radius=Radius;
        Parms.Pitch=Pitch;
        Parms.Volume=Volume;
        Parms.SoundPriority=SoundPriority;
        Parms.Flags=Flags;
        Parms.FadeInfo=FadeInfo;
        Parms.SoundEndCallback=SoundEndCallback;
        Parms.MixerGroup=MixerGroup;
        Parms.PlaybackDelay=PlaybackDelay;
        ProcessEvent(FindFunctionChecked(ENGINE_rClientShortHearActorSound), &Parms);
    }
    inline void __fastcall eventrClientShortHearSound(FVector SoundLocation, class USound* Sound, BYTE Slot, FLOAT InnerRadius, FLOAT Radius, FLOAT Pitch, FLOAT Volume, BYTE SoundPriority, FSSoundFlags Flags, FSSoundFadeInfo FadeInfo, FName SoundEndCallback, FName MixerGroup, FLOAT PlaybackDelay)
    {
        APlayerPawn_eventrClientShortHearSound_Parms Parms;
        Parms.SoundLocation=SoundLocation;
        Parms.Sound=Sound;
        Parms.Slot=Slot;
        Parms.InnerRadius=InnerRadius;
        Parms.Radius=Radius;
        Parms.Pitch=Pitch;
        Parms.Volume=Volume;
        Parms.SoundPriority=SoundPriority;
        Parms.Flags=Flags;
        Parms.FadeInfo=FadeInfo;
        Parms.SoundEndCallback=SoundEndCallback;
        Parms.MixerGroup=MixerGroup;
        Parms.PlaybackDelay=PlaybackDelay;
        ProcessEvent(FindFunctionChecked(ENGINE_rClientShortHearSound), &Parms);
    }
    inline void __fastcall eventrClientVeryShortHearActorSound(class AActor* Actor, class USound* Sound, BYTE Slot, FLOAT InnerRadius, FLOAT Radius, FLOAT Pitch, FLOAT Volume, FName MixerGroup)
    {
        APlayerPawn_eventrClientVeryShortHearActorSound_Parms Parms;
        Parms.Actor=Actor;
        Parms.Sound=Sound;
        Parms.Slot=Slot;
        Parms.InnerRadius=InnerRadius;
        Parms.Radius=Radius;
        Parms.Pitch=Pitch;
        Parms.Volume=Volume;
        Parms.MixerGroup=MixerGroup;
        ProcessEvent(FindFunctionChecked(ENGINE_rClientVeryShortHearActorSound), &Parms);
    }
    inline void __fastcall eventrClientVeryShortHearSound(FVector SoundLocation, class USound* Sound, BYTE Slot, FLOAT InnerRadius, FLOAT Radius, FLOAT Pitch, FLOAT Volume, FName MixerGroup)
    {
        APlayerPawn_eventrClientVeryShortHearSound_Parms Parms;
        Parms.SoundLocation=SoundLocation;
        Parms.Sound=Sound;
        Parms.Slot=Slot;
        Parms.InnerRadius=InnerRadius;
        Parms.Radius=Radius;
        Parms.Pitch=Pitch;
        Parms.Volume=Volume;
        Parms.MixerGroup=MixerGroup;
        ProcessEvent(FindFunctionChecked(ENGINE_rClientVeryShortHearSound), &Parms);
    }
    inline void __fastcall eventrClientDebugDrawCross(FVector vPoint, FColor MarkerColor, FLOAT fExpireTime)
    {
        APlayerPawn_eventrClientDebugDrawCross_Parms Parms;
        Parms.vPoint=vPoint;
        Parms.MarkerColor=MarkerColor;
        Parms.fExpireTime=fExpireTime;
        ProcessEvent(FindFunctionChecked(ENGINE_rClientDebugDrawCross), &Parms);
    }
    inline void __fastcall eventrClientDebugDrawCylinder(FVector vPoint, FLOAT fRadius, FLOAT fHalfHeight, FColor MarkerColor, FLOAT fExpireTime)
    {
        APlayerPawn_eventrClientDebugDrawCylinder_Parms Parms;
        Parms.vPoint=vPoint;
        Parms.fRadius=fRadius;
        Parms.fHalfHeight=fHalfHeight;
        Parms.MarkerColor=MarkerColor;
        Parms.fExpireTime=fExpireTime;
        ProcessEvent(FindFunctionChecked(ENGINE_rClientDebugDrawCylinder), &Parms);
    }
    inline void __fastcall eventTriggerViewRotationAdjust(INT& PitchAdjust, INT& YawAdjust, INT& RollAdjust, FLOAT DeltaTime)
    {
        APlayerPawn_eventTriggerViewRotationAdjust_Parms Parms;
        Parms.PitchAdjust=PitchAdjust;
        Parms.YawAdjust=YawAdjust;
        Parms.RollAdjust=RollAdjust;
        Parms.DeltaTime=DeltaTime;
        ProcessEvent(FindFunctionChecked(ENGINE_TriggerViewRotationAdjust), &Parms);
        PitchAdjust=Parms.PitchAdjust;
        YawAdjust=Parms.YawAdjust;
        RollAdjust=Parms.RollAdjust;
    }
    inline BITFIELD __fastcall eventShouldUpdateRotation()
    {
        APlayerPawn_eventShouldUpdateRotation_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_ShouldUpdateRotation), &Parms);
        return Parms.ReturnValue;
    }
    inline void __fastcall eventCalculateDeferredFallingDamage(FLOAT ImpactVelocity)
    {
        APlayerPawn_eventCalculateDeferredFallingDamage_Parms Parms;
        Parms.ImpactVelocity=ImpactVelocity;
        ProcessEvent(FindFunctionChecked(ENGINE_CalculateDeferredFallingDamage), &Parms);
    }
    inline BITFIELD __fastcall eventHandlePlayerMovePrePhysics(FLOAT DeltaTime)
    {
        APlayerPawn_eventHandlePlayerMovePrePhysics_Parms Parms;
        Parms.ReturnValue=0;
        Parms.DeltaTime=DeltaTime;
        ProcessEvent(FindFunctionChecked(ENGINE_HandlePlayerMovePrePhysics), &Parms);
        return Parms.ReturnValue;
    }
    inline void __fastcall eventPlayerMove(FLOAT DeltaTime)
    {
        APlayerPawn_eventPlayerMove_Parms Parms;
        Parms.DeltaTime=DeltaTime;
        ProcessEvent(FindFunctionChecked(ENGINE_PlayerMove), &Parms);
    }
    inline void __fastcall eventDuckUp()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_DuckUp), NULL);
    }
    inline void __fastcall eventDuckDown()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_DuckDown), NULL);
    }
    inline BITFIELD __fastcall eventIsVisiontTypeActive(BYTE Type)
    {
        APlayerPawn_eventIsVisiontTypeActive_Parms Parms;
        Parms.ReturnValue=0;
        Parms.Type=Type;
        ProcessEvent(FindFunctionChecked(ENGINE_IsVisiontTypeActive), &Parms);
        return Parms.ReturnValue;
    }
    inline void __fastcall eventAdjustDOFBlur(FLOAT DeltaTime, BITFIELD Instant)
    {
        APlayerPawn_eventAdjustDOFBlur_Parms Parms;
        Parms.DeltaTime=DeltaTime;
        Parms.Instant=Instant;
        ProcessEvent(FindFunctionChecked(ENGINE_AdjustDOFBlur), &Parms);
    }
    inline void __fastcall eventMountCorpseCamera(FVector& WorkingLocation)
    {
        APlayerPawn_eventMountCorpseCamera_Parms Parms;
        Parms.WorkingLocation=WorkingLocation;
        ProcessEvent(FindFunctionChecked(ENGINE_MountCorpseCamera), &Parms);
        WorkingLocation=Parms.WorkingLocation;
    }
    inline void __fastcall eventPlayerCalcView_MPDead(FVector& CameraLocation, FRotator& CameraRotation, FLOAT Dist, class AActor* TraceActor)
    {
        APlayerPawn_eventPlayerCalcView_MPDead_Parms Parms;
        Parms.CameraLocation=CameraLocation;
        Parms.CameraRotation=CameraRotation;
        Parms.Dist=Dist;
        Parms.TraceActor=TraceActor;
        ProcessEvent(FindFunctionChecked(ENGINE_PlayerCalcView_MPDead), &Parms);
        CameraLocation=Parms.CameraLocation;
        CameraRotation=Parms.CameraRotation;
    }
    inline void __fastcall eventPlayerCalcView_Behind(FVector& CameraLocation, FRotator& CameraRotation, FLOAT Dist, class AActor* TraceActor)
    {
        APlayerPawn_eventPlayerCalcView_Behind_Parms Parms;
        Parms.CameraLocation=CameraLocation;
        Parms.CameraRotation=CameraRotation;
        Parms.Dist=Dist;
        Parms.TraceActor=TraceActor;
        ProcessEvent(FindFunctionChecked(ENGINE_PlayerCalcView_Behind), &Parms);
        CameraLocation=Parms.CameraLocation;
        CameraRotation=Parms.CameraRotation;
    }
    inline void __fastcall eventPlayerCalcView(class AActor*& ViewActor, FVector& CameraLocation, FRotator& CameraRotation)
    {
        APlayerPawn_eventPlayerCalcView_Parms Parms;
        Parms.ViewActor=ViewActor;
        Parms.CameraLocation=CameraLocation;
        Parms.CameraRotation=CameraRotation;
        ProcessEvent(FindFunctionChecked(ENGINE_PlayerCalcView), &Parms);
        ViewActor=Parms.ViewActor;
        CameraLocation=Parms.CameraLocation;
        CameraRotation=Parms.CameraRotation;
    }
    inline void __fastcall eventPostureStateExChange_Ladder(BITFIELD bImmediate)
    {
        APlayerPawn_eventPostureStateExChange_Ladder_Parms Parms;
        Parms.bImmediate=bImmediate;
        ProcessEvent(FindFunctionChecked(ENGINE_PostureStateExChange_Ladder), &Parms);
    }
    inline void __fastcall eventPostureStateExChange_Mounted(BITFIELD bImmediate, BITFIELD bUncrouch)
    {
        APlayerPawn_eventPostureStateExChange_Mounted_Parms Parms;
        Parms.bImmediate=bImmediate;
        Parms.bUncrouch=bUncrouch;
        ProcessEvent(FindFunctionChecked(ENGINE_PostureStateExChange_Mounted), &Parms);
    }
    inline void __fastcall eventPostureStateExChange_Jetpack(BITFIELD bImmediate)
    {
        APlayerPawn_eventPostureStateExChange_Jetpack_Parms Parms;
        Parms.bImmediate=bImmediate;
        ProcessEvent(FindFunctionChecked(ENGINE_PostureStateExChange_Jetpack), &Parms);
    }
    inline void __fastcall eventPostureStateExChange_Swimming(BITFIELD bImmediate)
    {
        APlayerPawn_eventPostureStateExChange_Swimming_Parms Parms;
        Parms.bImmediate=bImmediate;
        ProcessEvent(FindFunctionChecked(ENGINE_PostureStateExChange_Swimming), &Parms);
    }
    inline void __fastcall eventPostureStateExChange_InAir(BITFIELD bImmediate)
    {
        APlayerPawn_eventPostureStateExChange_InAir_Parms Parms;
        Parms.bImmediate=bImmediate;
        ProcessEvent(FindFunctionChecked(ENGINE_PostureStateExChange_InAir), &Parms);
    }
    inline void __fastcall eventPostureStateExChange_Crouching(BITFIELD bImmediate)
    {
        APlayerPawn_eventPostureStateExChange_Crouching_Parms Parms;
        Parms.bImmediate=bImmediate;
        ProcessEvent(FindFunctionChecked(ENGINE_PostureStateExChange_Crouching), &Parms);
    }
    inline void __fastcall eventPostureStateExChange_Standing(BITFIELD bImmediate)
    {
        APlayerPawn_eventPostureStateExChange_Standing_Parms Parms;
        Parms.bImmediate=bImmediate;
        ProcessEvent(FindFunctionChecked(ENGINE_PostureStateExChange_Standing), &Parms);
    }
    inline void __fastcall eventPostureStateExLeaving_Ladder(BITFIELD bImmediate)
    {
        APlayerPawn_eventPostureStateExLeaving_Ladder_Parms Parms;
        Parms.bImmediate=bImmediate;
        ProcessEvent(FindFunctionChecked(ENGINE_PostureStateExLeaving_Ladder), &Parms);
    }
    inline void __fastcall eventPostureStateExLeaving_Mounted(BITFIELD bImmediate)
    {
        APlayerPawn_eventPostureStateExLeaving_Mounted_Parms Parms;
        Parms.bImmediate=bImmediate;
        ProcessEvent(FindFunctionChecked(ENGINE_PostureStateExLeaving_Mounted), &Parms);
    }
    inline void __fastcall eventPostureStateExLeaving_Jetpack(BITFIELD bImmediate)
    {
        APlayerPawn_eventPostureStateExLeaving_Jetpack_Parms Parms;
        Parms.bImmediate=bImmediate;
        ProcessEvent(FindFunctionChecked(ENGINE_PostureStateExLeaving_Jetpack), &Parms);
    }
    inline void __fastcall eventPostureStateExLeaving_Swimming(BITFIELD bImmediate)
    {
        APlayerPawn_eventPostureStateExLeaving_Swimming_Parms Parms;
        Parms.bImmediate=bImmediate;
        ProcessEvent(FindFunctionChecked(ENGINE_PostureStateExLeaving_Swimming), &Parms);
    }
    inline void __fastcall eventPostureStateExLeaving_InAir(BITFIELD bImmediate)
    {
        APlayerPawn_eventPostureStateExLeaving_InAir_Parms Parms;
        Parms.bImmediate=bImmediate;
        ProcessEvent(FindFunctionChecked(ENGINE_PostureStateExLeaving_InAir), &Parms);
    }
    inline void __fastcall eventPostureStateExLeaving_Crouching(BITFIELD bImmediate)
    {
        APlayerPawn_eventPostureStateExLeaving_Crouching_Parms Parms;
        Parms.bImmediate=bImmediate;
        ProcessEvent(FindFunctionChecked(ENGINE_PostureStateExLeaving_Crouching), &Parms);
    }
    inline void __fastcall eventPostureStateExLeaving_Standing(BITFIELD bImmediate)
    {
        APlayerPawn_eventPostureStateExLeaving_Standing_Parms Parms;
        Parms.bImmediate=bImmediate;
        ProcessEvent(FindFunctionChecked(ENGINE_PostureStateExLeaving_Standing), &Parms);
    }
    inline void __fastcall eventPostureStateExLeaving_Unknown(BITFIELD bImmediate)
    {
        APlayerPawn_eventPostureStateExLeaving_Unknown_Parms Parms;
        Parms.bImmediate=bImmediate;
        ProcessEvent(FindFunctionChecked(ENGINE_PostureStateExLeaving_Unknown), &Parms);
    }
    inline void __fastcall eventHandlePostureStateExBase_Turning(BYTE NewTurnType, INT YawDelta)
    {
        APlayerPawn_eventHandlePostureStateExBase_Turning_Parms Parms;
        Parms.NewTurnType=NewTurnType;
        Parms.YawDelta=YawDelta;
        ProcessEvent(FindFunctionChecked(ENGINE_HandlePostureStateExBase_Turning), &Parms);
    }
    inline void __fastcall eventUpdateAdditionalAnimationState()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_UpdateAdditionalAnimationState), NULL);
    }
    inline void __fastcall eventAdjustLeftHandOut(FVector LeftHandLoc, FRotator LeftHandRot)
    {
        APlayerPawn_eventAdjustLeftHandOut_Parms Parms;
        Parms.LeftHandLoc=LeftHandLoc;
        Parms.LeftHandRot=LeftHandRot;
        ProcessEvent(FindFunctionChecked(ENGINE_AdjustLeftHandOut), &Parms);
    }
    inline void __fastcall eventAdjustLeftHandIn(FVector& LeftHandLoc, FRotator& LeftHandRot)
    {
        APlayerPawn_eventAdjustLeftHandIn_Parms Parms;
        Parms.LeftHandLoc=LeftHandLoc;
        Parms.LeftHandRot=LeftHandRot;
        ProcessEvent(FindFunctionChecked(ENGINE_AdjustLeftHandIn), &Parms);
        LeftHandLoc=Parms.LeftHandLoc;
        LeftHandRot=Parms.LeftHandRot;
    }
    inline void __fastcall eventNotifyPlayerChangedTeam(class APlayerPawn* P, INT NewTeam)
    {
        APlayerPawn_eventNotifyPlayerChangedTeam_Parms Parms;
        Parms.P=P;
        Parms.NewTeam=NewTeam;
        ProcessEvent(FindFunctionChecked(ENGINE_NotifyPlayerChangedTeam), &Parms);
    }
    inline void __fastcall eventdnQASoundLoad(const FString& SoundName, INT SoundSize)
    {
        APlayerPawn_eventdnQASoundLoad_Parms Parms;
        Parms.SoundName=SoundName;
        Parms.SoundSize=SoundSize;
        ProcessEvent(FindFunctionChecked(ENGINE_dnQASoundLoad), &Parms);
    }
    inline void __fastcall eventdnQABumpmapLoad(const FString& BumpmapName, INT BumpmapSize)
    {
        APlayerPawn_eventdnQABumpmapLoad_Parms Parms;
        Parms.BumpmapName=BumpmapName;
        Parms.BumpmapSize=BumpmapSize;
        ProcessEvent(FindFunctionChecked(ENGINE_dnQABumpmapLoad), &Parms);
    }
    inline void __fastcall eventdnQATextureLoad(const FString& TextureName, INT TextureSize)
    {
        APlayerPawn_eventdnQATextureLoad_Parms Parms;
        Parms.TextureName=TextureName;
        Parms.TextureSize=TextureSize;
        ProcessEvent(FindFunctionChecked(ENGINE_dnQATextureLoad), &Parms);
    }
    inline void __fastcall eventdnQASkinMeshLoad(const FString& SkinMeshName, INT SkinMeshSize)
    {
        APlayerPawn_eventdnQASkinMeshLoad_Parms Parms;
        Parms.SkinMeshName=SkinMeshName;
        Parms.SkinMeshSize=SkinMeshSize;
        ProcessEvent(FindFunctionChecked(ENGINE_dnQASkinMeshLoad), &Parms);
    }
    inline void __fastcall eventdnQAAnimationLoad(const FString& AnimName, INT AnimSize)
    {
        APlayerPawn_eventdnQAAnimationLoad_Parms Parms;
        Parms.AnimName=AnimName;
        Parms.AnimSize=AnimSize;
        ProcessEvent(FindFunctionChecked(ENGINE_dnQAAnimationLoad), &Parms);
    }
    inline void __fastcall eventCorpseGibbed(class APawn* OwnerPawn)
    {
        APlayerPawn_eventCorpseGibbed_Parms Parms;
        Parms.OwnerPawn=OwnerPawn;
        ProcessEvent(FindFunctionChecked(ENGINE_CorpseGibbed), &Parms);
    }
    inline void __fastcall eventRemoveListener(class AActor* Listener)
    {
        APlayerPawn_eventRemoveListener_Parms Parms;
        Parms.Listener=Listener;
        ProcessEvent(FindFunctionChecked(ENGINE_RemoveListener), &Parms);
    }
    inline void __fastcall eventAddListener(class AActor* NewListener)
    {
        APlayerPawn_eventAddListener_Parms Parms;
        Parms.NewListener=NewListener;
        ProcessEvent(FindFunctionChecked(ENGINE_AddListener), &Parms);
    }
    inline void __fastcall eventDoNotifyUnUsed()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_DoNotifyUnUsed), NULL);
    }
    inline void __fastcall eventHostLeft(INT Reason)
    {
        APlayerPawn_eventHostLeft_Parms Parms;
        Parms.Reason=Reason;
        ProcessEvent(FindFunctionChecked(ENGINE_HostLeft), &Parms);
    }
    inline BITFIELD __fastcall eventCheckCanBeUsedBy(class AActor* TestActor)
    {
        APlayerPawn_eventCheckCanBeUsedBy_Parms Parms;
        Parms.ReturnValue=0;
        Parms.TestActor=TestActor;
        ProcessEvent(FindFunctionChecked(ENGINE_CheckCanBeUsedBy), &Parms);
        return Parms.ReturnValue;
    }
    inline void __fastcall eventUnpaused()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_Unpaused), NULL);
    }
    inline void __fastcall eventPaused(BITFIELD bSkipFade)
    {
        APlayerPawn_eventPaused_Parms Parms;
        Parms.bSkipFade=bSkipFade;
        ProcessEvent(FindFunctionChecked(ENGINE_Paused), &Parms);
    }
    inline BITFIELD __fastcall eventSetPause(BITFIELD bPause, const FString& Pauser, BITFIELD bSkipFade)
    {
        APlayerPawn_eventSetPause_Parms Parms;
        Parms.ReturnValue=0;
        Parms.bPause=bPause;
        Parms.Pauser=Pauser;
        Parms.bSkipFade=bSkipFade;
        ProcessEvent(FindFunctionChecked(ENGINE_SetPause), &Parms);
        return Parms.ReturnValue;
    }
    inline void __fastcall eventSprintBreathing()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_SprintBreathing), NULL);
    }
    inline void __fastcall eventStoppedSprinting()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_StoppedSprinting), NULL);
    }
    inline void __fastcall eventStartedSprinting()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_StartedSprinting), NULL);
    }
    inline void __fastcall eventPostRender(class UCanvas* Canvas)
    {
        APlayerPawn_eventPostRender_Parms Parms;
        Parms.Canvas=Canvas;
        ProcessEvent(FindFunctionChecked(ENGINE_PostRender), &Parms);
    }
    inline void __fastcall eventPreRender(class UCanvas* Canvas)
    {
        APlayerPawn_eventPreRender_Parms Parms;
        Parms.Canvas=Canvas;
        ProcessEvent(FindFunctionChecked(ENGINE_PreRender), &Parms);
    }
    inline void __fastcall eventBrainHUD(class AHUD* NewHUD)
    {
        APlayerPawn_eventBrainHUD_Parms Parms;
        Parms.NewHUD=NewHUD;
        ProcessEvent(FindFunctionChecked(ENGINE_BrainHUD), &Parms);
    }
    inline void __fastcall eventPrepareForExportTravel()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_PrepareForExportTravel), NULL);
    }
    inline void __fastcall eventClientTravel(const FString& URL, BYTE TravelType, BITFIELD bItems)
    {
        APlayerPawn_eventClientTravel_Parms Parms;
        Parms.URL=URL;
        Parms.TravelType=TravelType;
        Parms.bItems=bItems;
        ProcessEvent(FindFunctionChecked(ENGINE_ClientTravel), &Parms);
    }
    inline void __fastcall eventInstigateClientTravel(const FString& URL, BYTE TravelType, BITFIELD bItems)
    {
        APlayerPawn_eventInstigateClientTravel_Parms Parms;
        Parms.URL=URL;
        Parms.TravelType=TravelType;
        Parms.bItems=bItems;
        ProcessEvent(FindFunctionChecked(ENGINE_InstigateClientTravel), &Parms);
    }
    inline void __fastcall eventPreClientTravel()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_PreClientTravel), NULL);
    }
    inline void __fastcall eventPrepareForFastSave()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_PrepareForFastSave), NULL);
    }
    inline void __fastcall eventIdleWarning()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_IdleWarning), NULL);
    }
    inline void __fastcall eventUpdateGameSpeed()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_UpdateGameSpeed), NULL);
    }
    inline class AActor* __fastcall eventUpdateLookHitActor(class AActor* NonTraceBaseActor)
    {
        APlayerPawn_eventUpdateLookHitActor_Parms Parms;
        Parms.ReturnValue=0;
        Parms.NonTraceBaseActor=NonTraceBaseActor;
        ProcessEvent(FindFunctionChecked(ENGINE_UpdateLookHitActor), &Parms);
        return Parms.ReturnValue;
    }
    inline void __fastcall eventTick(FLOAT DeltaTime)
    {
        static UFunction *pfn = NULL;
        static UClass    *pclass = NULL;
        if ( !pfn || pclass != GetClass() )
        {
            pfn = FindFunctionChecked(ENGINE_Tick);
            pclass = GetClass();
        }
        AActor_eventTick_Parms Parms;
        if(IsProbing(NAME_Tick)) {
        Parms.DeltaTime=DeltaTime;
        ProcessEvent(pfn, &Parms);
        }
    }
    inline void __fastcall eventSetNetSpeed(INT Rate)
    {
        APlayerPawn_eventSetNetSpeed_Parms Parms;
        Parms.Rate=Rate;
        ProcessEvent(FindFunctionChecked(ENGINE_SetNetSpeed), &Parms);
    }
    DECLARE_CLASS(APlayerPawn,APawn,0|CLASS_Config|CLASS_NativeReplication,Engine)
    NO_DEFAULT_CONSTRUCTOR_START(APlayerPawn)
    NO_DEFAULT_CONSTRUCTOR_INIT(AnimationControllerCache)
    NO_DEFAULT_CONSTRUCTOR_INIT(ListenTargets)
    NO_DEFAULT_CONSTRUCTOR_INIT(ActiveShakes)
    NO_DEFAULT_CONSTRUCTOR_INIT(ActiveRumbles)
    NO_DEFAULT_CONSTRUCTOR_INIT(WalkingCameraBob)
    NO_DEFAULT_CONSTRUCTOR_INIT(CrouchingCameraBob)
    NO_DEFAULT_CONSTRUCTOR_INIT(SprintingCameraBob)
    NO_DEFAULT_CONSTRUCTOR_INIT(TinnitusLoopSoundInfo)
    NO_DEFAULT_CONSTRUCTOR_INIT(TinnitusEndSoundInfo)
    NO_DEFAULT_CONSTRUCTOR_INIT(DrunkRingingSound)
    NO_DEFAULT_CONSTRUCTOR_INIT(HoloDukeEffectActors)
    NO_DEFAULT_CONSTRUCTOR_INIT(SavedCompressedServerMoveData)
    NO_DEFAULT_CONSTRUCTOR_INIT(WatchInfo)
    NO_DEFAULT_CONSTRUCTOR_INIT(CheckpointTravelActors)
    NO_DEFAULT_CONSTRUCTOR_INIT(LoadScreenAmbience)
    NO_DEFAULT_CONSTRUCTOR_INITLAST(NavigateSoundInfo)
};
// Class PlayerPawn exported:
//   Properties size: 3900 bytes (8688 total)


//***************************************************************************//
/*	\class ACamera
*/
//***************************************************************************//

class ENGINE_API ACamera : public APlayerPawn
{
public:
    DECLARE_CLASS(ACamera,APlayerPawn,0|CLASS_Config,Engine)
    NO_DEFAULT_CONSTRUCTOR(ACamera)
};
// Class Camera exported:
//   Properties size: 0 bytes (8688 total)


//***************************************************************************//
/*	\class ABaseAI
*/
//***************************************************************************//


struct ABaseAI_eventShouldOpenDoor_Parms
{
    class ADoorMoverEx* Door;
    BITFIELD ReturnValue;
};
class ENGINE_API ABaseAI : public APawn
{
public:
    FLOAT ChanceFly;
    BITFIELD DebugTicking:1 GCC_PACK(4);
    BITFIELD DebugWeaponAimer:1;
    BITFIELD DebugHeadAimer:1;
    BITFIELD DebugEyeAimer:1;
    BITFIELD DebugExecutive:1;
    BITFIELD DebugOpChanges:1;
    BITFIELD DebugDecisionTree:1;
    BITFIELD DebugScriptExec:1;
    BITFIELD DebugTarget:1;
    BITFIELD DebugWeaponTargetEval:1;
    BITFIELD DebugLookTargetEval:1;
    BITFIELD DebugHeardSound:1;
    BITFIELD DebugGoalSelection:1;
    BITFIELD DebugGotoX:1;
    BITFIELD DebugCloaking:1;
    BITFIELD DebugPipeBombs:1;
    BITFIELD DebugDangerEvaluation:1;
    BITFIELD DebugTK:1;
    BITFIELD DebugRolls:1;
    BITFIELD DebugProps:1;
    BITFIELD DebugLOSChecks:1;
    BITFIELD DebugContracts:1;
    BITFIELD DebugGuarding:1;
    BITFIELD DebugRange:1;
    BITFIELD DebugDist:1;
    BITFIELD DebugTrail:1;
    BITFIELD DebugDrawExec:1;
    BITFIELD DebugActionPoints:1;
    BITFIELD DebugRelations:1;
    BITFIELD DebugHate:1;
    BITFIELD DebugLedges:1;
    BITFIELD DebugHealth:1;
    BITFIELD DebugDrawActionPoints:1;
    BITFIELD DebugDrawCollision:1;
    BITFIELD DebugDrawFOV:1;
    BITFIELD DebugStateGotoX:1;
    BITFIELD DebugStateTurnToX:1;
    BITFIELD DebugWeaponManager:1;
    BITFIELD DebugStateAnimX:1;
    BITFIELD DebugDoors:1;
    BITFIELD DebugPain:1;
    INT PathingHistoryMaxSize GCC_PACK(4);
    dnArray<FName> DrawDebugBones;
    FVector CurrentMoveDelta;
    inline BITFIELD __fastcall eventShouldOpenDoor(class ADoorMoverEx* Door)
    {
        ABaseAI_eventShouldOpenDoor_Parms Parms;
        Parms.ReturnValue=0;
        Parms.Door=Door;
        ProcessEvent(FindFunctionChecked(ENGINE_ShouldOpenDoor), &Parms);
        return Parms.ReturnValue;
    }
    DECLARE_CLASS(ABaseAI,APawn,0|CLASS_Config,Engine)
    NO_DEFAULT_CONSTRUCTOR_START(ABaseAI)
    NO_DEFAULT_CONSTRUCTOR_INITLAST(DrawDebugBones)
};
// Class BaseAI exported:
//   Properties size: 40 bytes (4828 total)


//***************************************************************************//
/*	\class ACorpse_LimbCap
*/
//***************************************************************************//

class ENGINE_API ACorpse_LimbCap : public AInteractiveActor
{
public:
    BITFIELD bDoEffects:1 GCC_PACK(4);
    dnArray<FSMountedActorPrefab> LimbMountOnSpawn GCC_PACK(4);
    DECLARE_CLASS(ACorpse_LimbCap,AInteractiveActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR_START(ACorpse_LimbCap)
    NO_DEFAULT_CONSTRUCTOR_INITLAST(LimbMountOnSpawn)
};
// Class Corpse_LimbCap exported:
//   Properties size: 16 bytes (2436 total)


//***************************************************************************//
/*	\class ACorpseBase
*/
//***************************************************************************//


struct ACorpseBase_eventRemoveBoneCap_Parms
{
    FName BoneName;
};

struct ACorpseBase_eventSpawnLimb_Parms
{
    FSCorpseGib GibInfo;
    class ACorpse_Gib* ReturnValue;
};

struct ACorpseBase_eventCanSpawnBloodyMess_Parms
{
    BITFIELD ReturnValue;
};

struct ACorpseBase_eventIsFrozen_Parms
{
    BITFIELD ReturnValue;
};
class ENGINE_API ACorpseBase : public AInteractiveActor
{
public:
    FLOAT RemoveCheckTime;
    FLOAT BoneDamageThreshold;
    FLOAT FrozenBoneDamageThreshold;
    dnArray<FSCorpseConstraints> BoneConstraints;
    FLOAT GibThreshold;
    FLOAT FrozenGibThreshold;
    FLOAT FrozenSolidThreshold;
    FLOAT ThawJointsThreshold;
    FLOAT GibMaxDistance;
    FLOAT LimbEgoBoost;
    FLOAT GibsEgoBoost;
    INT MaxGibsPerFrame;
    INT MaxLimbsPerFrame;
    INT NumberOfLimbsGibbed;
    BITFIELD bCanDie:1 GCC_PACK(4);
    dnArray<FName> StartupDestroyedBones GCC_PACK(4);
    FVector FullyGibbedLinearVelocity;
    FVector FullyGibbedAngularVelocityVariance;
    class AActor* SavedDamageInstigator;
    FVector SavedDamageOrigin;
    FLOAT SavedDamageRadius;
    FLOAT SavedDamageFalloffStart;
    class UClass* SavedDamageType;
    FLOAT SavedRelativeScale;
    BITFIELD bDelayedRagdoll:1 GCC_PACK(4);
    BITFIELD bDamageCouldGib:1;
    BITFIELD bFullyGibbed:1;
    BITFIELD bShrunkCorpse:1;
    dnArray<class AActor*> LimbCaps GCC_PACK(4);
    dnArray<FSDestroyedBone> DestroyedBones;
    BITFIELD bIsHuman:1 GCC_PACK(4);
    dnArray<class ACorpse_Gib*> SpawnedLimbs GCC_PACK(4);
    class UClass* BloodScreenSplatterClass;
    BITFIELD bExplodeOut:1 GCC_PACK(4);
    FLOAT FrozenPercent GCC_PACK(4);
    FLOAT TargetFrozenPercent;
    FLOAT DefaultFriction;
    FLOAT FrozenFriction;
    FLOAT FreezeDuration;
    FLOAT ThawDuration;
    class APawn* OwnerPawn;
    BITFIELD bUsingFrozenOverrides:1 GCC_PACK(4);
    dnArray<FSPhysicsSoundOverride> FrozenPhysicsSoundOverrides GCC_PACK(4);
    class UMaterialEx* ClearMaterial;
    FLOAT MaxGibScaleFactor;
    FLOAT MinDist;
    FLOAT MaxDist;
    INT TotalMaxGibsPerFrame;
    INT LowGoreTotalMaxGibsPerFrame;
    INT NumGibsInFrame;
    BITFIELD DeferredGibbingInProgress:1 GCC_PACK(4);
    FLOAT ImpulseMag GCC_PACK(4);
    BITFIELD ForceUp:1 GCC_PACK(4);
    class AdnFriendFX_Spawners* Spawner GCC_PACK(4);
    BITFIELD bRandomGibDir:1 GCC_PACK(4);
    FLOAT MPLimbLinearVelocity GCC_PACK(4);
    FColor MPShirtColor;
    FLOAT LastSpawnedLimbTime;
    DECLARE_FUNCTION(execBoneIsDestroyed);
    DECLARE_FUNCTION(execDestroyBoneAndChildren);
    DECLARE_FUNCTION(execTraceFireHit);
    DECLARE_FUNCTION(execNativeHitWall);
    DECLARE_FUNCTION(execDoSplatter);
    DECLARE_FUNCTION(execGib);
    DECLARE_FUNCTION(execIsFrozen);
    DECLARE_FUNCTION(execUpdateFrictionAndJoints);
    inline void __fastcall eventRemoveBoneCap(FName BoneName)
    {
        ACorpseBase_eventRemoveBoneCap_Parms Parms;
        Parms.BoneName=BoneName;
        ProcessEvent(FindFunctionChecked(ENGINE_RemoveBoneCap), &Parms);
    }
    inline void __fastcall eventLowGoreReplacementEffect()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_LowGoreReplacementEffect), NULL);
    }
    inline class ACorpse_Gib* __fastcall eventSpawnLimb(FSCorpseGib GibInfo)
    {
        ACorpseBase_eventSpawnLimb_Parms Parms;
        Parms.ReturnValue=0;
        Parms.GibInfo=GibInfo;
        ProcessEvent(FindFunctionChecked(ENGINE_SpawnLimb), &Parms);
        return Parms.ReturnValue;
    }
    inline BITFIELD __fastcall eventCanSpawnBloodyMess()
    {
        ACorpseBase_eventCanSpawnBloodyMess_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_CanSpawnBloodyMess), &Parms);
        return Parms.ReturnValue;
    }
    inline BITFIELD __fastcall eventIsFrozen()
    {
        ACorpseBase_eventIsFrozen_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_IsFrozen), &Parms);
        return Parms.ReturnValue;
    }
    DECLARE_CLASS(ACorpseBase,AInteractiveActor,0,Engine)

    // properties that must be constructed special for ACorpseBase:
    //       * BoneConstraints
    //       * StartupDestroyedBones
    //       * LimbCaps
    //       * DestroyedBones
    //       * SpawnedLimbs
    //       * FrozenPhysicsSoundOverrides

};
// Class CorpseBase exported:
//   Properties size: 292 bytes (2712 total)


//***************************************************************************//
/*	\class AParticleSystemBase
*/
//***************************************************************************//

class ENGINE_API AParticleSystemBase : public AInteractiveActor
{
public:
    BITFIELD bForceNonFinalBlendBlooms:1 GCC_PACK(4);
    FColor NonFinalBlendBloomTint GCC_PACK(4);
    DECLARE_CLASS(AParticleSystemBase,AInteractiveActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AParticleSystemBase)
};
// Class ParticleSystemBase exported:
//   Properties size: 8 bytes (2428 total)


//***************************************************************************//
/*	\class ASoftParticleSystem
*/
//***************************************************************************//

class ENGINE_API ASoftParticleSystem : public AParticleSystemBase
{
public:
    BITFIELD Enabled:1 GCC_PACK(4);
    BITFIELD UpdateEnabled:1;
    BITFIELD DestroyWhenEmpty:1;
    BITFIELD DestroyWhenEmptyAfterSpawn:1;
    BITFIELD SaveParticles:1;
    BITFIELD bBoundParticles:1;
    BITFIELD DisableTickWhenEmpty:1;
    BITFIELD UpdateRateEnforced:1;
    BITFIELD bMovedUpdatesCurrentPosition:1;
    BITFIELD bCopyStandardOwnerProperties:1;
    BITFIELD bDisableOnDismount:1;
    BITFIELD bSetDestroyWhenEmptyOnDismount:1;
    BITFIELD AdditionalSpawnTakesOwner:1;
    BITFIELD bAdditionalSpawnOnTrigger:1;
    BITFIELD bAdditionalSpawnOnSpawn:1;
    BITFIELD bAdditionalSpawnStarted:1;
    BITFIELD bDontAutoPlayCreationSounds:1;
    BITFIELD PrimeOnSpawn:1;
    BITFIELD bOscillateLifetime:1;
    BITFIELD bSpawnOnGround:1;
    BITFIELD bSpawnOnGround_DieNoGround:1;
    BITFIELD bSpawnAtOrigin:1;
    BITFIELD SpawnInALine:1;
    BITFIELD SpawnAtApex:1;
    BITFIELD SpawnAtRadius:1;
    BITFIELD SpawnAtHeight:1;
    BITFIELD SpawnAtExistingParticle:1;
    BITFIELD RelativeSpawn:1;
    BITFIELD RelativeSpawnAcceleration:1;
    BITFIELD RelativeSpawnVelocity:1;
    BITFIELD RelativeLocation:1;
    BITFIELD RelativeRotation:1;
    BITFIELD RelativeRotation3D:1;
    BITFIELD RelativeRotationToMove:1;
    BITFIELD RelativeMoveToRotation:1;
    BITFIELD RelativeRealtimeAccelerationVariance:1;
    BITFIELD RelativeRealtimeVelocityVariance:1;
    BITFIELD bAllowEffectors:1;
    BITFIELD bAggressivePhysicsDisable:1;
    BITFIELD bInheritMountParentPhysicsVelocity:1;
    BITFIELD Bounce:1;
    BITFIELD DieOnBounce:1;
    BITFIELD ParticlesCollideWithWorld:1;
    BITFIELD WaterZoneOnly:1;
    BITFIELD WaterZoneDie:1;
    BITFIELD UseZoneGravity:1;
    BITFIELD UseZoneVelocity:1;
    BITFIELD UseZoneFluidFriction:1;
    BITFIELD UseZoneTerminalVelocity:1;
    BITFIELD DieOutsideWorld:1;
    BITFIELD DieZoneNotRendered:1;
    BITFIELD FlockMountToCenter:1;
    BITFIELD FlockMountToDirection:1;
    BITFIELD bSpawnOnGround_ScaleAlpha:1;
    BITFIELD bSpawnOnGround_ScaleAlphaInverse:1;
    BITFIELD AlphaStartUseSystemAlpha:1;
    BITFIELD bUseAlphaRamp:1;
    BITFIELD UseLines:1;
    BITFIELD Connected:1;
    BITFIELD ConstantLength:1;
    BITFIELD bLockPitch:1;
    BITFIELD bLockYaw:1;
    BITFIELD bLockRoll:1;
    BITFIELD bRandomFlipTextureX:1;
    BITFIELD bRandomFlipTextureY:1;
    BITFIELD SynchAnimFrame:1;
    BITFIELD DieOnLastFrame:1;
    BITFIELD CorrectBackfacingUVs:1;
    BITFIELD bOffsetByTextureSize:1;
    BITFIELD bUseDrawScaleRamp:1;
    BITFIELD UpdateWhenNotVisible:1;
    BITFIELD bKillParticlesOnNotVisible:1;
    BITFIELD bRePrimeOnVisible:1;
    BITFIELD bCullNonVisibleParticles:1;
    BITFIELD TriggerOnSpawn:1;
    BITFIELD TriggerOnDismount:1;
    BITFIELD UseParticleCollisionActors:1;
    BITFIELD bInitialized:1;
    BITFIELD bPulsed:1;
    BITFIELD bWasVisible:1;
    BITFIELD bHaveAnimatedTextures:1;
    BITFIELD LastEnabled:1;
    BITFIELD bParticlePhysicsDirty:1;
    BITFIELD bPriming:1;
    BITFIELD bIsParticleFriend:1;
    BITFIELD bIsFriendSpawner:1;
    BITFIELD EditorDeleteMe:1;
    BITFIELD EditorSystem:1;
    BITFIELD bScaleByDrawScale:1;
    BITFIELD bMaintainSpawnOrder:1;
    BITFIELD bReverseSpawnOrder:1;
    BITFIELD SpawnAtRadiusSpacingRandom:1;
    BITFIELD InitialVelocityAwayFromPoint:1;
    BITFIELD bUseFakeLighting:1;
    BITFIELD bDamageOnlyWhenEnabled:1;
    INT LastUpdateFrame GCC_PACK(4);
    FLOAT EditorPulsingCountdown;
    FLOAT EditorGameTimeSeconds;
    FLOAT DieOutsideRadius;
    INT GroupID;
    FVector ExtraRenderMins;
    FVector ExtraRenderMaxs;
    FLOAT fBoundInterval;
    FLOAT SystemSizeScale;
    FLOAT UpdateRateMax;
    FLOAT UpdateRateMin;
    FLOAT ZoneUpdateRate;
    dnArray<FAdditionalSpawnStruct> AdditionalSpawn;
    FSFriendData PCreationFriends;
    FSFriendData PDeathFriends;
    FSFriendData PBounceFriends;
    FSFriendData PRandomFriends;
    FLOAT PRandomFriendsRate;
    FLOAT PRandomFriendsRateVariance;
    dnArray<FSNamedFriendData> NamedFriends;
    FSFriendData SysRandomFriends;
    FLOAT SysRandomFriendsRate;
    FLOAT SysRandomFriendsRateVariance;
    INT MaxBounceSounds;
    dnArray<FSPTransientSound> ParticleSounds;
    dnArray<FSPStopSound> ParticleStopSounds;
    dnArray<FSPSystemAmbientSound> ParticleSystemAmbientSounds;
    dnArray<FSPSystemTransientSound> ParticleSystemSounds;
    dnArray<FSPSystemStopSound> ParticleSystemStopSounds;
    INT PrimeCount;
    FLOAT PrimeTime;
    FLOAT PrimeTimeIncrement;
    INT SpawnNumber;
    FLOAT SpawnPeriod;
    INT MaximumParticles;
    FLOAT Lifetime;
    FLOAT LifetimeVariance;
    FLOAT SpawnPeriodVariance;
    INT SpawnNumberVariance;
    BYTE MaxSpawnLimitTest;
    INT OscillateLifetimeCount;
    INT OscillateLifetimeCountVariance;
    FVector SpawnOffset;
    FVector SpawnOffsetVariance;
    FVector SpawnOffsetPost;
    FVector SpawnOffsetPostVariance;
    FLOAT SpawnInALineLength;
    FLOAT SpawnOnGroundLength;
    INT SpawnAtRadiusSpacing;
    FVector InitialVelocityAwayFromPointOffset;
    FVector InitialVelocity;
    FVector InitialAcceleration;
    FVector MaxVelocityVariance;
    FVector MaxAccelerationVariance;
    FVector RealtimeVelocityVariance;
    FVector RealtimeAccelerationVariance;
    FLOAT LocalFriction;
    FLOAT SlideFriction;
    FLOAT KLinearDampingVariance;
    FLOAT KAngularDampingVariance;
    FLOAT BounceElasticity;
    FVector BounceVelocityVariance;
    FLOAT ParticlesCollidePercent;
    FLOAT ParticleCollisionRadius;
    FLOAT PhysicsTimeoutThreshold;
    FVector Apex;
    FLOAT ApexInitialVelocity;
    FLOAT ApexInitialVelocityVariance;
    FLOAT ApexInitialAcceleration;
    FLOAT ApexInitialAccelerationVariance;
    FName ApexActorTag;
    FName TagZoneOnly;
    FLOAT DieZoneNotRenderedTime;
    FLOAT ZoneGravityScaler;
    FLOAT ZoneVelocityScaler;
    FLOAT FlockToCenterVelocity;
    FLOAT FlockToCenterAcceleration;
    FLOAT FlockToDirectionScale;
    FLOAT FlockCenterWeight;
    FLOAT FlockDirectionWeight;
    FLOAT SineWaveFrequency;
    FVector VelocityAmplitude;
    FVector AccelerationAmplitude;
    FLOAT SystemAlphaScale;
    FLOAT SystemAlphaScaleVelocity;
    FLOAT SystemAlphaScaleAcceleration;
    FLOAT AlphaVariance;
    FLOAT AlphaStart;
    FLOAT AlphaMid;
    FLOAT AlphaMidVariance;
    FLOAT AlphaEnd;
    FLOAT AlphaEndVariance;
    FLOAT AlphaRampMid;
    FLOAT EdgeFadeDist;
    FColor LineStartColor;
    FColor LineStartColorVariance;
    FColor LineEndColor;
    FColor LineEndColorVariance;
    FLOAT LineStartWidth;
    FLOAT LineStartWidthVariance;
    FLOAT LineEndWidth;
    FLOAT LineEndWidthVariance;
    FLOAT LineWidthVariance;
    INT MaxMeshParticles;
    dnArray<class UMesh*> Meshes;
    dnArray<class UStaticMesh*> StaticMeshes;
    dnArray<class UMaterialEx*> Textures;
    FLOAT AnimStopThreshold;
    FLOAT AnimRateScaler;
    FVector vOffsetSpawnDirection;
    dnArray<FSPColorTimePoint> ColorOverTime;
    FLOAT StartDrawScale;
    FLOAT EndDrawScale;
    FLOAT DrawScaleMid;
    FLOAT DrawScaleRampMid;
    FLOAT DrawScaleVariance;
    FLOAT DrawScaleEndVariance;
    FLOAT DrawScaleMidVariance;
    FLOAT TextureScaleX;
    FLOAT TextureScaleY;
    FLOAT TextureScaleMidX;
    FLOAT TextureScaleMidY;
    FLOAT TextureScaleMidRampX;
    FLOAT TextureScaleMidRampY;
    FLOAT TextureScaleEndX;
    FLOAT TextureScaleEndY;
    FLOAT TextureScaleVarianceX;
    FLOAT TextureScaleVarianceY;
    FLOAT RotationInitial;
    FLOAT RotationVariance;
    FLOAT RotationVelocity;
    FLOAT RotationVelocityMaxVariance;
    FLOAT RotationAcceleration;
    FLOAT RotationAccelerationMaxVariance;
    FRotator RotationInitial3d;
    FRotator RotationVariance3d;
    FRotator RotationVelocity3d;
    FRotator RotationVelocityMaxVariance3d;
    FRotator RotationAcceleration3d;
    FRotator RotationAccelerationMaxVariance3d;
    FRotator RotationVarianceOnBounce3d;
    FRotator RestingRotation3D;
    FRotator RestingRotation3DVariance;
    FColor ParticleAmbientLight;
    FColor FakeLightColor;
    FLOAT FakeLightIntensity;
    FLOAT SpawnOnBounceChance;
    class UClass* SpawnOnBounce;
    FLOAT SpawnOnDeathChance;
    class UClass* SpawnOnDeath;
    FLOAT fNotVisibleDelay;
    INT nRePrimeCount;
    FLOAT fRePrimeTime;
    FLOAT fRePrimeTimeIncrement;
    BYTE ParticleDetail;
    FLOAT TriggerAfterSeconds;
    BYTE TriggerType;
    FLOAT PulseSeconds;
    FLOAT PulseSecondsVariance;
    FLOAT PulseMagnitude;
    FLOAT DamageAmount;
    FLOAT DamageRadius;
    class UClass* DamageName;
    FLOAT DamagePeriod;
    INT ParticlesPerCollision;
    INT NumCollisionActors;
    class UClass* CollisionActorClass;
    BYTE SpawnShape;
    FVector SpawnShapeScale;
    FRotator SpawnShapeRotation;
    FLOAT ZoneUpdateTime;
    FLOAT PulseStartTime;
    FLOAT PulseEndTime;
    FLOAT DamagePeriodRemaining;
    class AActor* ApexActor;
    class AActor* InheritVelocityActor;
    FLOAT fCurSpawnPeriod;
    INT CurSpawnNumber;
    INT nMinFlockNumber;
    INT CurSpawnAtRadiusAngle;
    FVector AverageCenter;
    FVector AverageDirection;
    FLOAT fOriginalCollisionHeight;
    FLOAT fOriginalCollisionRadius;
    INT LowestDirtyParticle;
    INT CurrentSpawnNumber;
    INT ParticlesSinceCollision;
    INT UsedCollisionActors;
    FLOAT ElapsedTime;
    INT HighestParticleNumber;
    INT AllocatedParticles;
    FParticle* ParticleSystemHandle;
    FVector BoundingBoxMin;
    FVector BoundingBoxMax;
    FLOAT fNextBoundTime;
    class AParticleEffector* m_pEffector;
    FLOAT SysRandomFriendsTimer;
    FLOAT PhysicsTimeoutTimer;
    FLOAT SystemLifetime;
    dnArray<class AParticleCollisionActor*> CollisionActors;
    dnArray<FSSupportedSystem> SupportedSystems;
    dnArray<class ASoftParticleSystem*> FriendSystems;
    FVector PreviousLocation;
    FRotator PreviousRotation;
    FVector CurrentUpdateLocation;
    FRotator CurrentUpdateRotation;
    FVector CurrentDeltaLocation;
    FRotator CurrentDeltaRotation;
    FVector ThisDeltaLocation;
    FRotator ThisDeltaRotation;
    FLOAT CurrentDeltaPeriod;
    FLOAT UpdateCapOverride;
    dnArray<class AActor*> VolumeActors;
    dnArray<class ASoftParticleSystem*> EditorSpawns;
    dnArray<dnTextureAnimController*> PendingDeleteTextureAnimControllers;
    INT CacheRenderParticleNumber;
    INT AllocatedRenderData;
    FSPRenderData* ParticleRenderDataHandle;
    dnArray<INT> PendingDeleteParticles;
    FLOAT SystemSizeScaleScale;
    FLOAT LifetimeScale;
    FLOAT FakeLightIntensityOverride;
    DECLARE_FUNCTION(execScaleSoundRadius);
    DECLARE_FUNCTION(execTriggeredActivities);
    DECLARE_FUNCTION(execDoTrigger);
    DECLARE_FUNCTION(execSetAllOwner);
    DECLARE_FUNCTION(execSetDontReflect);
    DECLARE_FUNCTION(execSetParticleSystemHidden);
    DECLARE_FUNCTION(execSetScaleFactor);
    DECLARE_FUNCTION(execSetOwnerSeeSpecial);
    DECLARE_FUNCTION(execSetUpdateWhenNotVisible);
    DECLARE_FUNCTION(execStopFlocking);
    DECLARE_FUNCTION(execForceSelfEnabled);
    DECLARE_FUNCTION(execForceSelfDisabled);
    DECLARE_FUNCTION(execDelayedActivityInternal);
    DECLARE_FUNCTION(execResetParticleSystem);
    DECLARE_FUNCTION(execInitializeFriends);
    DECLARE_FUNCTION(execDoPrimeSpawn);
    DECLARE_FUNCTION(execParticleHurtRadius);
    DECLARE_FUNCTION(execInitializeParticleSystem);
    DECLARE_FUNCTION(execPlayParticleSystemSounds);
    DECLARE_FUNCTION(execNativeInitializeParticleSystem);
    DECLARE_FUNCTION(execSetUpdateRate);
    DECLARE_FUNCTION(execInitFriendData);
    DECLARE_FUNCTION(execPrimeParticles);
    DECLARE_FUNCTION(execDoAdditionalSpawn);
    DECLARE_FUNCTION(execDestroyParticleCollisionActors);
    DECLARE_FUNCTION(execDrawParticles);
    DECLARE_FUNCTION(execSpawnParticleEx);
    DECLARE_FUNCTION(execSpawnParticle);
    DECLARE_FUNCTION(execSetParticle);
    DECLARE_FUNCTION(execGetParticle);
    DECLARE_FUNCTION(execFreeParticle);
    DECLARE_FUNCTION(execResetParticles);
    DECLARE_FUNCTION(execForceTick);
    inline void __fastcall eventEnabledStateChange()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_EnabledStateChange), NULL);
    }
    DECLARE_CLASS_NO_DESTRUCTOR(ASoftParticleSystem,AParticleSystemBase,0|CLASS_NativeDestructor,Engine)
    NO_DEFAULT_CONSTRUCTOR_START(ASoftParticleSystem)
    NO_DEFAULT_CONSTRUCTOR_INIT(AdditionalSpawn)
    NO_DEFAULT_CONSTRUCTOR_INIT(PCreationFriends)
    NO_DEFAULT_CONSTRUCTOR_INIT(PDeathFriends)
    NO_DEFAULT_CONSTRUCTOR_INIT(PBounceFriends)
    NO_DEFAULT_CONSTRUCTOR_INIT(PRandomFriends)
    NO_DEFAULT_CONSTRUCTOR_INIT(NamedFriends)
    NO_DEFAULT_CONSTRUCTOR_INIT(SysRandomFriends)
    NO_DEFAULT_CONSTRUCTOR_INIT(ParticleSounds)
    NO_DEFAULT_CONSTRUCTOR_INIT(ParticleStopSounds)
    NO_DEFAULT_CONSTRUCTOR_INIT(ParticleSystemAmbientSounds)
    NO_DEFAULT_CONSTRUCTOR_INIT(ParticleSystemSounds)
    NO_DEFAULT_CONSTRUCTOR_INIT(ParticleSystemStopSounds)
    NO_DEFAULT_CONSTRUCTOR_INIT(Meshes)
    NO_DEFAULT_CONSTRUCTOR_INIT(StaticMeshes)
    NO_DEFAULT_CONSTRUCTOR_INIT(Textures)
    NO_DEFAULT_CONSTRUCTOR_INIT(ColorOverTime)
    NO_DEFAULT_CONSTRUCTOR_INIT(CollisionActors)
    NO_DEFAULT_CONSTRUCTOR_INIT(SupportedSystems)
    NO_DEFAULT_CONSTRUCTOR_INIT(FriendSystems)
    NO_DEFAULT_CONSTRUCTOR_INIT(VolumeActors)
    NO_DEFAULT_CONSTRUCTOR_INIT(EditorSpawns)
    NO_DEFAULT_CONSTRUCTOR_INIT(PendingDeleteTextureAnimControllers)
    NO_DEFAULT_CONSTRUCTOR_INITLAST(PendingDeleteParticles)
};
// Class SoftParticleSystem exported:
//   Properties size: 1512 bytes (3940 total)


//***************************************************************************//
/*	\class AdnFriendFX_Spawners
*/
//***************************************************************************//


struct AdnFriendFX_Spawners_eventExecuteEffect_Parms
{
    BITFIELD bPlaySounds;
};
class ENGINE_API AdnFriendFX_Spawners : public ASoftParticleSystem
{
public:
    inline void __fastcall eventExecuteEffect(BITFIELD bPlaySounds)
    {
        AdnFriendFX_Spawners_eventExecuteEffect_Parms Parms;
        Parms.bPlaySounds=bPlaySounds;
        ProcessEvent(FindFunctionChecked(ENGINE_ExecuteEffect), &Parms);
    }
    DECLARE_CLASS(AdnFriendFX_Spawners,ASoftParticleSystem,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AdnFriendFX_Spawners)
};
// Class dnFriendFX_Spawners exported:
//   Properties size: 0 bytes (3940 total)


//***************************************************************************//
/*	\class AdnPhysicsFX_Spawners
*/
//***************************************************************************//

class ENGINE_API AdnPhysicsFX_Spawners : public AdnFriendFX_Spawners
{
public:
    FLOAT PerformChance;
    FLOAT OriginalSystemSizeScale;
    DECLARE_CLASS(AdnPhysicsFX_Spawners,AdnFriendFX_Spawners,0,Engine)
};
// Class dnPhysicsFX_Spawners exported:
//   Properties size: 8 bytes (3948 total)


//***************************************************************************//
/*	\class AParticleSystem
*/
//***************************************************************************//

class ENGINE_API AParticleSystem : public AParticleSystemBase
{
public:
    DECLARE_CLASS(AParticleSystem,AParticleSystemBase,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AParticleSystem)
};
// Class ParticleSystem exported:
//   Properties size: 0 bytes (2428 total)


//***************************************************************************//
/*	\class ASoftParticleAffector
*/
//***************************************************************************//

class ENGINE_API ASoftParticleAffector : public AParticleSystem
{
public:
    BITFIELD Enabled:1 GCC_PACK(4);
    BITFIELD EnableOnTouch:1;
    BITFIELD FindSystemsOnStartup:1;
    BITFIELD AlwaysAffectGroup:1;
    INT AffectedGroupID GCC_PACK(4);
    BYTE Type;
    FLOAT VortexMagnitude;
    FLOAT Magnitude;
    FLOAT PulseApexMagnitude;
    FLOAT PulseDuration;
    BYTE TriggerReaction;
    FVector AffectScaler;
    FLOAT OriginalMagnitude;
    FLOAT PulseStartTime;
    FLOAT PulseHalfDuration;
    dnArray<class ASoftParticleSystem*> Systems;
    DECLARE_CLASS(ASoftParticleAffector,AParticleSystem,0,Engine)

    // properties that must be constructed special for ASoftParticleAffector:
    //       * Systems

};
// Class SoftParticleAffector exported:
//   Properties size: 68 bytes (2496 total)


//***************************************************************************//
/*	\class ABeamSystem
*/
//***************************************************************************//


struct ABeamSystem_eventHandleLimboHit_Parms
{
    FVector HitLocation;
    class AActor* HitActor;
    FLOAT DeltaSeconds;
};

struct ABeamSystem_eventHandleHit_Parms
{
    FVector HitLocation;
    class AActor* HitActor;
    FLOAT DeltaSeconds;
};
class ENGINE_API ABeamSystem : public AParticleSystemBase
{
public:
    BITFIELD Enabled:1 GCC_PACK(4);
    BITFIELD TraceEnabled:1;
    BITFIELD DisableTraceAfterTick:1;
    BITFIELD bDrawPreviewInEditor:1;
    INT TesselationLevel GCC_PACK(4);
    FLOAT BeamStartWidth;
    FLOAT BeamEndWidth;
    FLOAT TimeScale;
    FLOAT DefaultLifetime;
    FLOAT AlphaAnimStart;
    FLOAT AlphaAnimMid;
    FLOAT AlphaAnimEnd;
    FColor ColorAnimStart;
    FColor ColorAnimMid;
    FColor ColorAnimEnd;
    FLOAT AlphaMidPercent;
    FLOAT ColorMidPercent;
    BITFIELD bUseSineAnim:1 GCC_PACK(4);
    FName SE_ResetEventSegments GCC_PACK(4);
    FName SE_ToggleTraceStatus;
    FLOAT DynamicBeamPoints;
    FColor PreviewColor;
    FName SE_ToggleEnable;
    FName SE_ForceEnable;
    FName SE_ForceDisable;
    FLOAT LimboZOffset;
    FLOAT MaxAmplitude;
    FLOAT AmplitudeLimit;
    FLOAT AmplitudeVelocity;
    FLOAT MaxFrequency;
    FLOAT FrequencyLimit;
    FLOAT FrequencyVelocity;
    FLOAT TracerSpeed;
    FLOAT TracerLength;
    FLOAT TracerRejectScale;
    FLOAT Noise;
    FLOAT NoiseLimit;
    FLOAT NoiseVelocity;
    class UMaterialEx* BeamTexture;
    FLOAT BeamTextureScaleX;
    FLOAT BeamTextureScaleY;
    FLOAT BeamTexturePanX;
    FLOAT BeamTexturePanY;
    FLOAT BeamTextureXVelocity;
    FLOAT BeamTextureYVelocity;
    FLOAT BeamTextureRotate;
    FLOAT BeamTextureXSize;
    BITFIELD bUseFakeLighting:1 GCC_PACK(4);
    FColor FakeLightColor GCC_PACK(4);
    FLOAT FakeLightIntensity;
    BITFIELD bAllowLimboHit:1 GCC_PACK(4);
    dnArray<FSBeamSegment> BeamSegments GCC_PACK(4);
    dnArray<FSInternalBeamSegment> Segments;
    INT FirstSegment;
    INT LastSegment;
    INT FirstFreeSegment;
    INT ActiveSegmentCount;
    dnArray<FSInternalBeamSegment> RenderSegments;
    INT FirstRenderSegment;
    INT ActiveRenderSegmentCount;
    BYTE BeamType;
    BITFIELD DepthCued:1 GCC_PACK(4);
    BITFIELD BeamBrokenIgnoreWorld:1;
    BITFIELD bBeamOnlyCheckDynamicShootable:1;
    BITFIELD bBeamOnlyCheckPawns:1;
    BITFIELD bBeamTraceMeshAccurate:1;
    BYTE TriggerType GCC_PACK(4);
    class UClass* SpawnClassOnBeamCollision;
    FLOAT SpawnClassMinInterval;
    FLOAT SpawnClassGate;
    BYTE BeamBrokenWhen;
    BITFIELD bDebugBrokenCheck:1 GCC_PACK(4);
    dnArray<class UClass*> BeamBrokenWhenClass GCC_PACK(4);
    BYTE BeamBrokenAction;
    class AActor* BeamTriggerActor;
    FName BeamBrokenEvent;
    BITFIELD BeamBrokenRetriggerable:1 GCC_PACK(4);
    FLOAT BeamBrokenOtherDamage GCC_PACK(4);
    class UClass* BeamBrokenOtherDamageType;
    FLOAT BeamBrokenOtherDamageDelay;
    FLOAT BeamBrokenOtherDamageTime;
    BYTE BeamPlayerCameraStyleMode;
    BYTE BeamPlayerCameraStyle;
    FBox WorldBox;
    BYTE OrientationType;
    DECLARE_FUNCTION(execTickNative);
    DECLARE_FUNCTION(execFreeSegment);
    DECLARE_FUNCTION(execAllocSegment);
    inline void __fastcall eventHandleLimboHit(FVector HitLocation, class AActor* HitActor, FLOAT DeltaSeconds)
    {
        ABeamSystem_eventHandleLimboHit_Parms Parms;
        Parms.HitLocation=HitLocation;
        Parms.HitActor=HitActor;
        Parms.DeltaSeconds=DeltaSeconds;
        ProcessEvent(FindFunctionChecked(ENGINE_HandleLimboHit), &Parms);
    }
    inline void __fastcall eventHandleHit(FVector HitLocation, class AActor* HitActor, FLOAT DeltaSeconds)
    {
        ABeamSystem_eventHandleHit_Parms Parms;
        Parms.HitLocation=HitLocation;
        Parms.HitActor=HitActor;
        Parms.DeltaSeconds=DeltaSeconds;
        ProcessEvent(FindFunctionChecked(ENGINE_HandleHit), &Parms);
    }
    DECLARE_CLASS(ABeamSystem,AParticleSystemBase,0,Engine)
    NO_DEFAULT_CONSTRUCTOR_START(ABeamSystem)
    NO_DEFAULT_CONSTRUCTOR_INIT(BeamSegments)
    NO_DEFAULT_CONSTRUCTOR_INIT(Segments)
    NO_DEFAULT_CONSTRUCTOR_INIT(RenderSegments)
    NO_DEFAULT_CONSTRUCTOR_INITLAST(BeamBrokenWhenClass)
};
// Class BeamSystem exported:
//   Properties size: 364 bytes (2792 total)


//***************************************************************************//
/*	\class AInventory
*/
//***************************************************************************//


struct AInventory_eventGetPawnMoveSpeed_Parms
{
    class APawn* User;
    FLOAT ReturnValue;
};

struct AInventory_eventCalculatePawnPhysics_Parms
{
    class APawn* User;
    FLOAT DeltaTime;
};

struct AInventory_eventPickedUpAdditionalCopy_Parms
{
    class APawn* PawnOther;
    class UClass* InvClass;
    class APickup* Source;
    FLOAT ReturnValue;
};

struct AInventory_eventGiveTo_Parms
{
    class APawn* Other;
    BITFIELD bTravel;
    FLOAT ReturnValue;
};
class ENGINE_API AInventory : public AInteractiveActor
{
public:
    class AInventory* NextInventory;
    class UClass* InventoryReferenceClass;
    class UClass* PickupClass;
    BYTE MultiplePickupBehavior;
    BITFIELD bIsWeapon:1 GCC_PACK(4);
    BITFIELD bIsPrimaryWeapon:1;
    BITFIELD bIsDefaultWeapon:1;
    BITFIELD bIsAmmo:1;
    BITFIELD bIsQuestItem:1;
    BITFIELD bIsHealth:1;
    BITFIELD bIsEnergy:1;
    BITFIELD bStoredInInventory:1;
    FLOAT Charge GCC_PACK(4);
    FLOAT MaxCharge;
    INT HUDPickupEventIcon;
    class UTexture* HUDPickupIconTex[2];
    DECLARE_FUNCTION(execGiveTo);
    DECLARE_FUNCTION(execPickupSuccess);
    DECLARE_FUNCTION(execAttemptPickup);
    DECLARE_FUNCTION(execCanPickupClass);
    inline FLOAT __fastcall eventGetPawnMoveSpeed(class APawn* User)
    {
        AInventory_eventGetPawnMoveSpeed_Parms Parms;
        Parms.ReturnValue=0;
        Parms.User=User;
        ProcessEvent(FindFunctionChecked(ENGINE_GetPawnMoveSpeed), &Parms);
        return Parms.ReturnValue;
    }
    inline void __fastcall eventCalculatePawnPhysics(class APawn* User, FLOAT DeltaTime)
    {
        AInventory_eventCalculatePawnPhysics_Parms Parms;
        Parms.User=User;
        Parms.DeltaTime=DeltaTime;
        ProcessEvent(FindFunctionChecked(ENGINE_CalculatePawnPhysics), &Parms);
    }
    inline void __fastcall eventPreRemove()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_PreRemove), NULL);
    }
    inline void __fastcall eventPreAdd()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_PreAdd), NULL);
    }
    inline FLOAT __fastcall eventPickedUpAdditionalCopy(class APawn* PawnOther, class UClass* InvClass, class APickup* Source)
    {
        AInventory_eventPickedUpAdditionalCopy_Parms Parms;
        Parms.ReturnValue=0;
        Parms.PawnOther=PawnOther;
        Parms.InvClass=InvClass;
        Parms.Source=Source;
        ProcessEvent(FindFunctionChecked(ENGINE_PickedUpAdditionalCopy), &Parms);
        return Parms.ReturnValue;
    }
    inline FLOAT __fastcall eventGiveTo(class APawn* Other, BITFIELD bTravel)
    {
        AInventory_eventGiveTo_Parms Parms;
        Parms.ReturnValue=0;
        Parms.Other=Other;
        Parms.bTravel=bTravel;
        ProcessEvent(FindFunctionChecked(ENGINE_GiveTo), &Parms);
        return Parms.ReturnValue;
    }
    DECLARE_CLASS(AInventory,AInteractiveActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AInventory)
};
// Class Inventory exported:
//   Properties size: 40 bytes (2460 total)


//***************************************************************************//
/*	\class AAmmo
*/
//***************************************************************************//

class ENGINE_API AAmmo : public AInventory
{
public:
    class UStaticMesh* AmmoCasingMesh;
    class UClass* AmmoCasingMaterial;
    DECLARE_CLASS(AAmmo,AInventory,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AAmmo)
};
// Class Ammo exported:
//   Properties size: 8 bytes (2468 total)


//***************************************************************************//
/*	\class AActivatableInventory
*/
//***************************************************************************//


struct AActivatableInventory_eventGetHUDNumber_Parms
{
    FString ReturnValue;
};

struct AActivatableInventory_eventCanActivateNow_Parms
{
    BITFIELD ReturnValue;
};

struct AActivatableInventory_eventScriptCanActivate_Parms
{
    BITFIELD ReturnValue;
};
class ENGINE_API AActivatableInventory : public AInventory
{
public:
    class UClass* InventoryDrainClass;
    class UClass* InventoryDrainClass_MP;
    FName ActivateSoundName;
    FName DeactivateSoundName;
    BYTE ActivationNetworkSoundType;
    BITFIELD bAutoActivate:1 GCC_PACK(4);
    BITFIELD bActivatable:1;
    BITFIELD bActivatableByCategoryIteration:1;
    BITFIELD bActivatableByGlobalIteration:1;
    BITFIELD bActive:1;
    BITFIELD bActivationRequiresHands:1;
    BITFIELD bActivatableWhileAttached:1;
    BYTE dnInventoryCategory GCC_PACK(4);
    BYTE dnCategoryPriority;
    BYTE ChargeDisplayType;
    FStringNoInit CommandAlias;
    class AHUDItem* HUDItem;
    BITFIELD bAutoActivationMount:1 GCC_PACK(4);
    inline FString __fastcall eventGetHUDNumber()
    {
        AActivatableInventory_eventGetHUDNumber_Parms Parms;
        ProcessEvent(FindFunctionChecked(ENGINE_GetHUDNumber), &Parms);
        return Parms.ReturnValue;
    }
    inline BITFIELD __fastcall eventCanActivateNow()
    {
        AActivatableInventory_eventCanActivateNow_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_CanActivateNow), &Parms);
        return Parms.ReturnValue;
    }
    inline BITFIELD __fastcall eventScriptCanActivate()
    {
        AActivatableInventory_eventScriptCanActivate_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_ScriptCanActivate), &Parms);
        return Parms.ReturnValue;
    }
    DECLARE_CLASS(AActivatableInventory,AInventory,0,Engine)
};
// Class ActivatableInventory exported:
//   Properties size: 48 bytes (2508 total)


//***************************************************************************//
/*	\class AWeapon
*/
//***************************************************************************//


struct AWeapon_eventGetCompositeWeaponAnimName_Parms
{
    FName ReturnValue;
};

struct AWeapon_eventGetLoadedAmmo_Parms
{
    INT ReturnValue;
};

struct AWeapon_eventIsFullyLoaded_Parms
{
    BITFIELD ReturnValue;
};

struct AWeapon_eventExpendAmmo_Parms
{
    INT amount;
    BITFIELD ReturnValue;
};

struct AWeapon_eventAttemptMelee_Parms
{
    BITFIELD ReturnValue;
};

struct AWeapon_eventGetProjectileClass_Parms
{
    class UClass* ReturnValue;
};

struct AWeapon_eventProjectileFire_Parms
{
    class UClass* ProjClass;
    class AProjectile* ReturnValue;
};

struct AWeapon_eventGetShotError_Parms
{
    FLOAT HorizShotError;
    FLOAT VertShotError;
};

struct AWeapon_eventGetTraceFireAim_Parms
{
    FVector Start;
    FVector Forward;
};

struct AWeapon_eventAttemptFire_Parms
{
    BITFIELD bContinueFire;
    BITFIELD ReturnValue;
};

struct AWeapon_eventGetCurrentBarrelLocation_Parms
{
    FVector OutBarrelLocation;
    FRotator OutBarrelRotation;
};

struct AWeapon_eventGetBaseBarrelLocation_Parms
{
    FVector OutBarrelLocation;
    FRotator OutBarrelRotation;
};

struct AWeapon_eventStopWeaponViewKick_Parms
{
    class APlayerPawn* PlayerOwner;
};

struct AWeapon_eventNU_WeaponStateImpulse_Parms
{
    INT NewImpulse;
};

struct AWeapon_eventIncompleteReplication_Parms
{
    BITFIELD ReturnValue;
};

struct AWeapon_eventDrawCrosshairHUD_Parms
{
    class UCanvas* C;
    FLOAT CenterScale;
};

struct AWeapon_eventGetCrosshairIndex_Parms
{
    INT ReturnValue;
};

struct AWeapon_eventCanDrawCrosshair_Parms
{
    BITFIELD ReturnValue;
};

struct AWeapon_eventApplyAIScale_Parms
{
    class APawn* Other;
};

struct AWeapon_eventGiveToAI_Parms
{
    class APawn* receiver;
};
class ENGINE_API AWeapon : public AActivatableInventory
{
public:
    BITFIELD bPlayActivateSound:1 GCC_PACK(4);
    BITFIELD bAttemptWeaponDown:1;
    BITFIELD bAttemptWeaponReload:1;
    BITFIELD bWeaponFireLockout:1;
    BITFIELD bDeactivationAllowed:1;
    BITFIELD bQuickChangeTo:1;
    BITFIELD bQuickChangeFrom:1;
    BITFIELD bAutoSwitchOnPickup:1;
    BITFIELD bDrawLastWeaponHUD:1;
    BITFIELD bNonWeapon:1;
    BITFIELD bDebugWeapon:1;
    BITFIELD bCantUseActorWhileEquiped:1;
    class UClass* WeaponConfig GCC_PACK(4);
    class AAmmo* Ammo;
    INT AmmoLoaded;
    INT HUDAmmoClipIcon;
    INT MuzzleFireIndex;
    dnArray<class ASoftParticleSystem*> MuzzleFlashActors;
    class AWeapon_LightEx* MuzzleLightActor;
    INT LastMeleeIndex;
    FVector MeleeStartTrace;
    FStringNoInit MeleeAnimEventString;
    FLOAT DOFWeapDist;
    FLOAT DOFWeapDistDelta;
    INT CrosshairIndex;
    BITFIELD bDrawInfiniteAmmo:1 GCC_PACK(4);
    INT WeaponStateImpulse GCC_PACK(4);
    BYTE WeaponState;
    BYTE ChangeSpeed;
    class AWeaponClip* InsertingClip;
    class AWeaponClip* EjectingClip;
    class UStaticMesh* FullClipRenderObject;
    class UStaticMesh* EmptyClipRenderObject;
    FSMountPrefab UserInsertClipMount;
    FSMountPrefab WeaponClipMount;
    class UClass* EmptyClipPhysMaterial;
    BITFIELD bUseHitEffectOverrides:1 GCC_PACK(4);
    FLOAT FireHitEffectSystemSizeScaleScale GCC_PACK(4);
    FLOAT FireHitEffectFakeLightIntensityOverride;
    FLOAT FireHitEffectLifetimeScale;
    FLOAT LastShellCasingTime;
    FLOAT MinTimeBetweenShellCasings;
    DECLARE_FUNCTION(execGetWeaponAnimName);
    DECLARE_FUNCTION(execGetMaxClip);
    DECLARE_FUNCTION(execPerformFire);
    DECLARE_FUNCTION(execGetCurrentShellEjectionLocation);
    DECLARE_FUNCTION(execEject_Casing);
    DECLARE_FUNCTION(execFindLookActor);
    DECLARE_FUNCTION(execGiveToAI);
    DECLARE_FUNCTION(execUserCanSprint);
    inline FName __fastcall eventGetCompositeWeaponAnimName()
    {
        AWeapon_eventGetCompositeWeaponAnimName_Parms Parms;
        Parms.ReturnValue=NAME_None;
        ProcessEvent(FindFunctionChecked(ENGINE_GetCompositeWeaponAnimName), &Parms);
        return Parms.ReturnValue;
    }
    inline INT __fastcall eventGetLoadedAmmo()
    {
        AWeapon_eventGetLoadedAmmo_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_GetLoadedAmmo), &Parms);
        return Parms.ReturnValue;
    }
    inline BITFIELD __fastcall eventIsFullyLoaded()
    {
        AWeapon_eventIsFullyLoaded_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_IsFullyLoaded), &Parms);
        return Parms.ReturnValue;
    }
    inline BITFIELD __fastcall eventExpendAmmo(INT amount)
    {
        AWeapon_eventExpendAmmo_Parms Parms;
        Parms.ReturnValue=0;
        Parms.amount=amount;
        ProcessEvent(FindFunctionChecked(ENGINE_ExpendAmmo), &Parms);
        return Parms.ReturnValue;
    }
    inline BITFIELD __fastcall eventAttemptMelee()
    {
        AWeapon_eventAttemptMelee_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_AttemptMelee), &Parms);
        return Parms.ReturnValue;
    }
    inline class UClass* __fastcall eventGetProjectileClass()
    {
        AWeapon_eventGetProjectileClass_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_GetProjectileClass), &Parms);
        return Parms.ReturnValue;
    }
    inline class AProjectile* __fastcall eventProjectileFire(class UClass* ProjClass)
    {
        AWeapon_eventProjectileFire_Parms Parms;
        Parms.ReturnValue=0;
        Parms.ProjClass=ProjClass;
        ProcessEvent(FindFunctionChecked(ENGINE_ProjectileFire), &Parms);
        return Parms.ReturnValue;
    }
    inline void __fastcall eventUnfire()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_Unfire), NULL);
    }
    inline void __fastcall eventPerformFire_Custom()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_PerformFire_Custom), NULL);
    }
    inline void __fastcall eventGetShotError(FLOAT& HorizShotError, FLOAT& VertShotError)
    {
        AWeapon_eventGetShotError_Parms Parms;
        Parms.HorizShotError=HorizShotError;
        Parms.VertShotError=VertShotError;
        ProcessEvent(FindFunctionChecked(ENGINE_GetShotError), &Parms);
        HorizShotError=Parms.HorizShotError;
        VertShotError=Parms.VertShotError;
    }
    inline void __fastcall eventGetTraceFireAim(FVector& Start, FVector& Forward)
    {
        AWeapon_eventGetTraceFireAim_Parms Parms;
        Parms.Start=Start;
        Parms.Forward=Forward;
        ProcessEvent(FindFunctionChecked(ENGINE_GetTraceFireAim), &Parms);
        Start=Parms.Start;
        Forward=Parms.Forward;
    }
    inline BITFIELD __fastcall eventAttemptFire(BITFIELD bContinueFire)
    {
        AWeapon_eventAttemptFire_Parms Parms;
        Parms.ReturnValue=0;
        Parms.bContinueFire=bContinueFire;
        ProcessEvent(FindFunctionChecked(ENGINE_AttemptFire), &Parms);
        return Parms.ReturnValue;
    }
    inline void __fastcall eventGetCurrentBarrelLocation(FVector& OutBarrelLocation, FRotator& OutBarrelRotation)
    {
        AWeapon_eventGetCurrentBarrelLocation_Parms Parms;
        Parms.OutBarrelLocation=OutBarrelLocation;
        Parms.OutBarrelRotation=OutBarrelRotation;
        ProcessEvent(FindFunctionChecked(ENGINE_GetCurrentBarrelLocation), &Parms);
        OutBarrelLocation=Parms.OutBarrelLocation;
        OutBarrelRotation=Parms.OutBarrelRotation;
    }
    inline void __fastcall eventGetBaseBarrelLocation(FVector& OutBarrelLocation, FRotator& OutBarrelRotation)
    {
        AWeapon_eventGetBaseBarrelLocation_Parms Parms;
        Parms.OutBarrelLocation=OutBarrelLocation;
        Parms.OutBarrelRotation=OutBarrelRotation;
        ProcessEvent(FindFunctionChecked(ENGINE_GetBaseBarrelLocation), &Parms);
        OutBarrelLocation=Parms.OutBarrelLocation;
        OutBarrelRotation=Parms.OutBarrelRotation;
    }
    inline void __fastcall eventDoFire_Effects()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_DoFire_Effects), NULL);
    }
    inline void __fastcall eventStopWeaponViewKick(class APlayerPawn* PlayerOwner)
    {
        AWeapon_eventStopWeaponViewKick_Parms Parms;
        Parms.PlayerOwner=PlayerOwner;
        ProcessEvent(FindFunctionChecked(ENGINE_StopWeaponViewKick), &Parms);
    }
    inline void __fastcall eventNU_WeaponStateImpulse(INT NewImpulse)
    {
        AWeapon_eventNU_WeaponStateImpulse_Parms Parms;
        Parms.NewImpulse=NewImpulse;
        ProcessEvent(FindFunctionChecked(ENGINE_NU_WeaponStateImpulse), &Parms);
    }
    inline BITFIELD __fastcall eventIncompleteReplication()
    {
        AWeapon_eventIncompleteReplication_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_IncompleteReplication), &Parms);
        return Parms.ReturnValue;
    }
    inline void __fastcall eventDrawCrosshairHUD(class UCanvas* C, FLOAT CenterScale)
    {
        AWeapon_eventDrawCrosshairHUD_Parms Parms;
        Parms.C=C;
        Parms.CenterScale=CenterScale;
        ProcessEvent(FindFunctionChecked(ENGINE_DrawCrosshairHUD), &Parms);
    }
    inline INT __fastcall eventGetCrosshairIndex()
    {
        AWeapon_eventGetCrosshairIndex_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_GetCrosshairIndex), &Parms);
        return Parms.ReturnValue;
    }
    inline BITFIELD __fastcall eventCanDrawCrosshair()
    {
        AWeapon_eventCanDrawCrosshair_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_CanDrawCrosshair), &Parms);
        return Parms.ReturnValue;
    }
    inline void __fastcall eventApplyAIScale(class APawn* Other)
    {
        AWeapon_eventApplyAIScale_Parms Parms;
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_ApplyAIScale), &Parms);
    }
    inline void __fastcall eventGiveToAI(class APawn* receiver)
    {
        AWeapon_eventGiveToAI_Parms Parms;
        Parms.receiver=receiver;
        ProcessEvent(FindFunctionChecked(ENGINE_GiveToAI), &Parms);
    }
    inline void __fastcall eventUnhideWeapon()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_UnhideWeapon), NULL);
    }
    DECLARE_CLASS(AWeapon,AActivatableInventory,0,Engine)

    // properties that must be constructed special for AWeapon:
    //       * MuzzleFlashActors

};
// Class Weapon exported:
//   Properties size: 296 bytes (2804 total)


//***************************************************************************//
/*	\class AGameModulePersistantData
*/
//***************************************************************************//

class ENGINE_API AGameModulePersistantData : public AInventory
{
public:
    DECLARE_CLASS(AGameModulePersistantData,AInventory,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AGameModulePersistantData)
};
// Class GameModulePersistantData exported:
//   Properties size: 0 bytes (2460 total)


//***************************************************************************//
/*	\class AProjectile
*/
//***************************************************************************//

class ENGINE_API AProjectile : public AInteractiveActor
{
public:
    BITFIELD bMatchInstigatorScale:1 GCC_PACK(4);
    BITFIELD bDamageDirectly:1;
    BITFIELD bDoMaterialEffects:1;
    BITFIELD bExplodeOnDamage:1;
    BITFIELD bBreakGlass:1;
    BITFIELD bWaterEnterSlowdown:1;
    BITFIELD bWaterExitSpeedup:1;
    BITFIELD bExplodeOnWaterTouch:1;
    BITFIELD bWaterSplash:1;
    BITFIELD bSkipVisibilityTests:1;
    BITFIELD bCanTouchInstigator:1;
    BITFIELD bExploded:1;
    BITFIELD bWaterLogged:1;
    BITFIELD AITargetable:1;
    BITFIELD bHasDeferredExplosion:1;
    BITFIELD bIgnoreSizeChangingPawn:1;
    FLOAT SafetyTimer GCC_PACK(4);
    FLOAT Speed;
    FLOAT MinSpeed;
    FLOAT MaxSpeed;
    FLOAT AccelerationScaler;
    FLOAT Damage;
    FLOAT DamageRadius;
    FLOAT DamageFalloffStart;
    class UClass* DamageClass;
    FLOAT DamageRadiusDrawscaleExponent;
    INT NumBounces;
    FName ImpactSoundName;
    FLOAT ImpactSoundSpeed;
    FLOAT ShakeScalar;
    dnArray<FSViewShakeInfo> ShakeInfo;
    dnArray<FSRumbleInfo> RumbleInfo;
    FLOAT WaterSplashStrength;
    FLOAT WaterSplashRadius;
    class UClass* TouchWaterClass;
    FLOAT WaterScaler;
    FLOAT ExploWallOut;
    FLOAT ExplosionOffset;
    class UClass* ExplosionSplashClass;
    class UClass* ExplosionDecal;
    class UClass* ExplosionClass;
    class UClass* UnderwaterExplosionClass;
    class UClass* ExplosionLight;
    FName ExplosionSoundName;
    dnArray<FName> WillNotHarmClasses;
    BITFIELD bDestroyOnVolumeTouch:1 GCC_PACK(4);
    FLOAT MPDrawscaleSpeedExponent GCC_PACK(4);
    FLOAT SpawnTime;
    INT NumWallHits;
    FVector InitialLocation;
    FLOAT DeferredExplosionTimer;
    FLOAT DeferredExplosionTimerVariance;
    FVector DeferredExplosionHitLocation;
    FVector DeferredExplosionHitNormal;
    class AActor* DeferredExplosionHitActor;
    BYTE MuzzleFireIndex;
    DECLARE_CLASS(AProjectile,AInteractiveActor,0,Engine)

    // properties that must be constructed special for AProjectile:
    //       * ShakeInfo
    //       * RumbleInfo
    //       * WillNotHarmClasses

};
// Class Projectile exported:
//   Properties size: 212 bytes (2632 total)


//***************************************************************************//
/*	\class AdnKingOfTheHill_MarkerBase
*/
//***************************************************************************//

class ENGINE_API AdnKingOfTheHill_MarkerBase : public AInteractiveActor
{
public:
    FVector OriginalLocation;
    INT FOV;
    INT MaxTraceDistance;
    FLOAT MaxViewDistance;
    FLOAT FadeOutStart;
    BITFIELD bProjectBSP:1 GCC_PACK(4);
    BITFIELD bProjectMesh:1;
    BITFIELD bProjectStaticMesh:1;
    BITFIELD bProjectActor:1;
    BITFIELD bProjectPawn:1;
    BITFIELD bProjectOwner:1;
    BITFIELD bLevelStatic:1;
    BITFIELD bProjectNonStatic:1;
    BITFIELD bClipBSP:1;
    BITFIELD bClipStaticMesh:1;
    BITFIELD bProjectOnUnlit:1;
    BITFIELD bBackFaceCull:1;
    BITFIELD FlipX:1;
    BITFIELD FlipY:1;
    BITFIELD bIsDecal:1;
    BITFIELD bDestroyOnTrigger:1;
    FLOAT ProjectorScaleX GCC_PACK(4);
    FLOAT ProjectorScaleY;
    FLOAT MinSpawnDistance;
    FLOAT OverrideNearPlaneDist;
    FLOAT ProjectorOpacity;
    FName TurnOnTag;
    FName TurnOffTag;
    FLOAT CylinderDrawScale;
    FVector CylinderOffset;
    BITFIELD bInit:1 GCC_PACK(4);
    BITFIELD bActive:1;
    INT currentLocIndex GCC_PACK(4);
    BITFIELD bKeyFrameLoopSet:1 GCC_PACK(4);
    BITFIELD bInitial:1;
    BITFIELD bHasBeenUsed:1;
    INT Fresh GCC_PACK(4);
    INT LastProjectorState;
    INT nInit;
    DECLARE_FUNCTION(execCopyToProjector);
    DECLARE_CLASS(AdnKingOfTheHill_MarkerBase,AInteractiveActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AdnKingOfTheHill_MarkerBase)
};
// Class dnKingOfTheHill_MarkerBase exported:
//   Properties size: 100 bytes (2520 total)


//***************************************************************************//
/*	\class APickup
*/
//***************************************************************************//


struct APickup_eventFinishPickup_Parms
{
    class APawn* Other;
};
class ENGINE_API APickup : public AInteractiveActor
{
public:
    class UClass* InventoryType;
    FLOAT RespawnTime;
    BITFIELD bInitialized:1 GCC_PACK(4);
    BITFIELD bAllowTouchPickup:1;
    BITFIELD bAllowUsePickup:1;
    INT AmmoCharge GCC_PACK(4);
    FSSoundInfo RespawnSoundInfo;
    class APawn* PickupNotifyPawn;
    class ARespawnMarker* RespawnMarkerActor;
    class UClass* RespawnMarkerClass;
    FLOAT ShowRespawnMarkerTime;
    DECLARE_FUNCTION(execAttemptPickup);
    DECLARE_FUNCTION(execDoPickup);
    inline void __fastcall eventFinishPickup(class APawn* Other)
    {
        APickup_eventFinishPickup_Parms Parms;
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_FinishPickup), &Parms);
    }
    DECLARE_CLASS(APickup,AInteractiveActor,0,Engine)

    // properties that must be constructed special for APickup:
    //       * RespawnSoundInfo

};
// Class Pickup exported:
//   Properties size: 204 bytes (2624 total)


//***************************************************************************//
/*	\class AWeaponPickup
*/
//***************************************************************************//

class ENGINE_API AWeaponPickup : public APickup
{
public:
    BITFIELD bWeaponStay:1 GCC_PACK(4);
    BITFIELD bWeaponDropped:1;
    FStringNoInit ItemName GCC_PACK(4);
    DECLARE_CLASS(AWeaponPickup,APickup,0,Engine)
};
// Class WeaponPickup exported:
//   Properties size: 16 bytes (2640 total)


//***************************************************************************//
/*	\class ADecoration
*/
//***************************************************************************//


struct ADecoration_eventShouldDrawCrosshair_Parms
{
    BITFIELD ReturnValue;
};

struct ADecoration_eventIsVehicleSpace_Parms
{
    BITFIELD ReturnValue;
};

struct ADecoration_eventGetIKActor_Parms
{
    FName LimbID;
    class AActor* ReturnValue;
};

struct ADecoration_eventUsableSomething_AIShouldIgnoreUser_Parms
{
    BITFIELD ReturnValue;
};

struct ADecoration_eventUsableSomethingGetOverrideFOV_Parms
{
    FLOAT ReturnValue;
};

struct ADecoration_eventUsableSomethingOverrideFOV_Parms
{
    BITFIELD ReturnValue;
};

struct ADecoration_eventUsableSomethingInterpolatingOut_Parms
{
    BITFIELD ReturnValue;
};

struct ADecoration_eventUsableSomethingUsesHomePose_Parms
{
    BITFIELD ReturnValue;
};

struct ADecoration_eventPostUserTick_Parms
{
    FLOAT DeltaTime;
};

struct ADecoration_eventQueryInteractKeyInfoState_Parms
{
    class AHUD* HUD;
};

struct ADecoration_eventDetachPawn_Parms
{
    BITFIELD bForceDetach;
};

struct ADecoration_eventGetInternalControlRemapper_Parms
{
    class AControlRemapperEx* ReturnValue;
};
class ENGINE_API ADecoration : public AInteractiveActor
{
public:
    BITFIELD bEnemy:1 GCC_PACK(4);
    BITFIELD bIgnoreAimAssist:1;
    inline BITFIELD __fastcall eventShouldDrawCrosshair()
    {
        ADecoration_eventShouldDrawCrosshair_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_ShouldDrawCrosshair), &Parms);
        return Parms.ReturnValue;
    }
    inline BITFIELD __fastcall eventIsVehicleSpace()
    {
        ADecoration_eventIsVehicleSpace_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_IsVehicleSpace), &Parms);
        return Parms.ReturnValue;
    }
    inline class AActor* __fastcall eventGetIKActor(FName LimbID)
    {
        ADecoration_eventGetIKActor_Parms Parms;
        Parms.ReturnValue=0;
        Parms.LimbID=LimbID;
        ProcessEvent(FindFunctionChecked(ENGINE_GetIKActor), &Parms);
        return Parms.ReturnValue;
    }
    inline BITFIELD __fastcall eventUsableSomething_AIShouldIgnoreUser()
    {
        ADecoration_eventUsableSomething_AIShouldIgnoreUser_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_UsableSomething_AIShouldIgnoreUser), &Parms);
        return Parms.ReturnValue;
    }
    inline FLOAT __fastcall eventUsableSomethingGetOverrideFOV()
    {
        ADecoration_eventUsableSomethingGetOverrideFOV_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_UsableSomethingGetOverrideFOV), &Parms);
        return Parms.ReturnValue;
    }
    inline BITFIELD __fastcall eventUsableSomethingOverrideFOV()
    {
        ADecoration_eventUsableSomethingOverrideFOV_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_UsableSomethingOverrideFOV), &Parms);
        return Parms.ReturnValue;
    }
    inline BITFIELD __fastcall eventUsableSomethingInterpolatingOut()
    {
        ADecoration_eventUsableSomethingInterpolatingOut_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_UsableSomethingInterpolatingOut), &Parms);
        return Parms.ReturnValue;
    }
    inline BITFIELD __fastcall eventUsableSomethingUsesHomePose()
    {
        ADecoration_eventUsableSomethingUsesHomePose_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_UsableSomethingUsesHomePose), &Parms);
        return Parms.ReturnValue;
    }
    inline void __fastcall eventPostUserAnimTick()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_PostUserAnimTick), NULL);
    }
    inline void __fastcall eventPostUserTick(FLOAT DeltaTime)
    {
        ADecoration_eventPostUserTick_Parms Parms;
        Parms.DeltaTime=DeltaTime;
        ProcessEvent(FindFunctionChecked(ENGINE_PostUserTick), &Parms);
    }
    inline void __fastcall eventQueryInteractKeyInfoState(class AHUD* HUD)
    {
        ADecoration_eventQueryInteractKeyInfoState_Parms Parms;
        Parms.HUD=HUD;
        ProcessEvent(FindFunctionChecked(ENGINE_QueryInteractKeyInfoState), &Parms);
    }
    inline void __fastcall eventDetachPawn(BITFIELD bForceDetach)
    {
        ADecoration_eventDetachPawn_Parms Parms;
        Parms.bForceDetach=bForceDetach;
        ProcessEvent(FindFunctionChecked(ENGINE_DetachPawn), &Parms);
    }
    inline class AControlRemapperEx* __fastcall eventGetInternalControlRemapper()
    {
        ADecoration_eventGetInternalControlRemapper_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_GetInternalControlRemapper), &Parms);
        return Parms.ReturnValue;
    }
    DECLARE_CLASS(ADecoration,AInteractiveActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ADecoration)
};
// Class Decoration exported:
//   Properties size: 4 bytes (2424 total)


//***************************************************************************//
/*	\class ADoorExtras
*/
//***************************************************************************//

class ENGINE_API ADoorExtras : public ADecoration
{
public:
    BITFIELD bAnimates:1 GCC_PACK(4);
    FVector LocationOffset GCC_PACK(4);
    FRotator RotationOffset;
    FName OpenSequence;
    FName OpenedSequence;
    FName KickedOpenSequence;
    FName CloseSequence;
    FName ClosedSequence;
    FName LockedSequence;
    class UObject* LeftRenderObject;
    class UObject* RightRenderObject;
    DECLARE_CLASS(ADoorExtras,ADecoration,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ADoorExtras)
};
// Class DoorExtras exported:
//   Properties size: 60 bytes (2484 total)


//***************************************************************************//
/*	\class ADoorMoverEx
*/
//***************************************************************************//

class ENGINE_API ADoorMoverEx : public AInteractiveActor
{
public:
    BITFIELD bDebugDoor:1 GCC_PACK(4);
    BITFIELD bLocked:1;
    BITFIELD bNeverClose:1;
    BITFIELD bUseProximitySensor:1;
    BITFIELD bProximityControlled:1;
    BITFIELD bProximitySenseCorpses:1;
    BITFIELD bProximitySenseVehicles:1;
    BITFIELD bAIProximitySensor:1;
    FLOAT PreOpenDelay GCC_PACK(4);
    FLOAT AutoCloseDelay;
    FLOAT ProximityRadius;
    FLOAT ProximityHeight;
    FVector ProximityOffset;
    FStringNoInit LockedDoorMsg;
    FName FriendDoorTag;
    FName ToggleLockTag;
    FName OpenDoorTag;
    FName CloseDoorTag;
    FName PortalSurfaceTag;
    FName GoPhysicsTag;
    class UDoorVoicePack* VoicePackCustom;
    FColor DoorLockedActorColor;
    FColor DoorUnlockedActorColor;
    dnArray<class UClass*> AIProximityIgnoreClasses;
    FLOAT AIProximityHeight;
    FLOAT AIProximityRadius;
    FName OpeningEvent;
    BITFIELD bOpeningEventOnlyOnce:1 GCC_PACK(4);
    FName FullyOpenedEvent GCC_PACK(4);
    BITFIELD bFullyOpenedEventOnlyOnce:1 GCC_PACK(4);
    FName ClosingEvent GCC_PACK(4);
    BITFIELD bClosingEventOnlyOnce:1 GCC_PACK(4);
    FName FullyClosedEvent GCC_PACK(4);
    BITFIELD bFullyClosedEventOnlyOnce:1 GCC_PACK(4);
    dnArray<FSDoorExtraInfo> DoorExtras GCC_PACK(4);
    BITFIELD bUsesHinge:1 GCC_PACK(4);
    FLOAT AutoCloseTime GCC_PACK(4);
    BYTE DoorState;
    class ADoorHingeEx* Hinge;
    class UClass* ProximitySensorClass;
    class ADoorProximitySensorEx* ProximitySensor;
    dnArray<class ADoorProximitySensorAI*> AIProximitySensors;
    FVector DoorMidpoint;
    class ADoorMoverEx* MasterDoor;
    dnArray<class ADoorMoverEx*> FriendDoors;
    class AActor* OpenInstigator;
    dnArray<class ADoorExtras*> Extras;
    class APlayerPawn* BlockingPlayerPawn;
    DECLARE_FUNCTION(execCalculateExtraOffset);
    DECLARE_FUNCTION(execGetMountingSide);
    DECLARE_FUNCTION(execCalcMidpoint);
    DECLARE_FUNCTION(execCalcSensorLocation);
    DECLARE_CLASS(ADoorMoverEx,AInteractiveActor,0,Engine)

    // properties that must be constructed special for ADoorMoverEx:
    //       * AIProximityIgnoreClasses
    //       * DoorExtras
    //       * AIProximitySensors
    //       * FriendDoors
    //       * Extras

};
// Class DoorMoverEx exported:
//   Properties size: 228 bytes (2648 total)


//***************************************************************************//
/*	\class AParticleCollisionActor
*/
//***************************************************************************//

class ENGINE_API AParticleCollisionActor : public AInteractiveActor
{
public:
    BITFIELD bInUse:1 GCC_PACK(4);
    INT ParticleIndex GCC_PACK(4);
    class ASoftParticleSystem* MyParticleSystem;
    class APawn* CollisionInstigator;
    FLOAT pLifetime;
    FLOAT pLifetimeRemaining;
    inline void __fastcall eventUpdate()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_Update), NULL);
    }
    inline void __fastcall eventUnlocked()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_Unlocked), NULL);
    }
    inline void __fastcall eventLocked()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_Locked), NULL);
    }
    DECLARE_CLASS(AParticleCollisionActor,AInteractiveActor,0|CLASS_Transient,Engine)
    NO_DEFAULT_CONSTRUCTOR(AParticleCollisionActor)
};
// Class ParticleCollisionActor exported:
//   Properties size: 24 bytes (2444 total)


//***************************************************************************//
/*	\class ABreakableGlass
*/
//***************************************************************************//


struct ABreakableGlass_eventClientBreakGlass_Parms
{
    FVector Location;
    BITFIELD DirForce;
    FLOAT DirForceScale;
};
class ENGINE_API ABreakableGlass : public AInteractiveActor
{
public:
    FSSoundInfo GlassBreakSound;
    FSSoundInfo GlassShatterSound;
    FName GlassBreakSoundName;
    FName GlassShatterSoundName;
    FLOAT ParticleSize;
    INT InitialBreakCount;
    FLOAT FallPerSecond1;
    FLOAT FallPerSecond2;
    FLOAT TotalBreakPercent1;
    FLOAT TotalBreakPercent2;
    FLOAT BounceScale;
    FLOAT RotateScale;
    FLOAT ParticleLife;
    FLOAT UShift;
    FLOAT VShift;
    FLOAT UScale;
    FLOAT VScale;
    BITFIELD bGlassRespawn:1 GCC_PACK(4);
    FLOAT GlassRespawnTime GCC_PACK(4);
    INT UnBrokenGridSizeW;
    INT UnBrokenGridSizeH;
    FLOAT ParticlesToStayPercent;
    BITFIELD bRandomTextureRotation:1 GCC_PACK(4);
    FColor GlassAmbientColor GCC_PACK(4);
    FColor GlassAmbientCrackedColor;
    FColor GlassAmbientShatteredColor;
    INT GlassMaxLights;
    FLOAT MinimumPhysicsBreakEnergy;
    FLOAT BrokenConstraintStrength;
    BITFIELD bAlignTextureOnBreak:1 GCC_PACK(4);
    FLOAT BulgeOnBreakAmount GCC_PACK(4);
    FLOAT MaxBrokenGridDistortion;
    BITFIELD bUnBreakable:1 GCC_PACK(4);
    BITFIELD bClearMirrorRenderTargetOnShatter:1;
    BITFIELD bShattered:1;
    BITFIELD bStaticEdgePieces:1;
    INT GlassVersion GCC_PACK(4);
    INT GlassParticles;
    INT NumGlassParticles;
    INT CurGlassParticle;
    INT NumUpdatedParticles;
    INT GlassBreakCount;
    FLOAT GlassTime;
    INT GlassPrimitive;
    INT UserData;
    INT ParticleDimensionX;
    INT ParticleDimensionY;
    DECLARE_FUNCTION(execRecalculateRenderBox);
    DECLARE_FUNCTION(execIsDone);
    DECLARE_FUNCTION(execIsShattered);
    DECLARE_FUNCTION(execShatterGlass);
    DECLARE_FUNCTION(execDoRespawn);
    DECLARE_FUNCTION(execInternalTick);
    DECLARE_FUNCTION(execGetParticleBox);
    DECLARE_FUNCTION(execBreakGlassXY);
    DECLARE_FUNCTION(execBreakGlassDir);
    DECLARE_FUNCTION(execBreakGlass);
    inline void __fastcall eventGlassRespawned()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_GlassRespawned), NULL);
    }
    inline void __fastcall eventGlassShattered()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_GlassShattered), NULL);
    }
    inline void __fastcall eventGlassCracked()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_GlassCracked), NULL);
    }
    inline void __fastcall eventClientShatterGlass()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_ClientShatterGlass), NULL);
    }
    inline void __fastcall eventClientBreakGlass(FVector Location, BITFIELD DirForce, FLOAT DirForceScale)
    {
        ABreakableGlass_eventClientBreakGlass_Parms Parms;
        Parms.Location=Location;
        Parms.DirForce=DirForce;
        Parms.DirForceScale=DirForceScale;
        ProcessEvent(FindFunctionChecked(ENGINE_ClientBreakGlass), &Parms);
    }
    DECLARE_CLASS(ABreakableGlass,AInteractiveActor,0,Engine)

    // properties that must be constructed special for ABreakableGlass:
    //       * GlassBreakSound
    //       * GlassShatterSound

};
// Class BreakableGlass exported:
//   Properties size: 512 bytes (2932 total)


//***************************************************************************//
/*	\class AAmmoCasing
*/
//***************************************************************************//

class ENGINE_API AAmmoCasing : public ARenderActor
{
public:
    INT Bounces;
    DECLARE_FUNCTION(execNativeHitWall);
    DECLARE_CLASS(AAmmoCasing,ARenderActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AAmmoCasing)
};
// Class AmmoCasing exported:
//   Properties size: 4 bytes (1672 total)


//***************************************************************************//
/*	\class ALightEx
*/
//***************************************************************************//

class ENGINE_API ALightEx : public ARenderActor
{
public:
    BYTE LightStyle;
    FLOAT LightRadius;
    FLOAT LightIntensity;
    FVector LightRadius3D;
    FColor LightColor;
    FName LightShadowSourceTag;
    class AActor* LightShadowSource;
    BITFIELD bRelativeShadowSource:1 GCC_PACK(4);
    FVector LightLastShadowCastLocation GCC_PACK(4);
    BYTE LightStyleSave;
    FLOAT ShadowOpacity;
    BITFIELD bSpotLight:1 GCC_PACK(4);
    BITFIELD bLightShaft:1;
    BITFIELD bLightShaftShadows:1;
    BITFIELD bUseCookieTexture:1;
    class UCubemap* LightCubeMap GCC_PACK(4);
    BITFIELD bUseSpecularCubemap:1 GCC_PACK(4);
    class UCubemap* SpecularCubeMap GCC_PACK(4);
    FVector SpecularCubeIntensity;
    FVector LightCubeScale;
    FLOAT LightFOV;
    FLOAT LightAspectW;
    FLOAT LightAspectH;
    class UTexture* SpotLightTexture;
    class UTexture* LightShaftTexture;
    class UTexture* CookieTexture;
    FLOAT LightShaftStart;
    FLOAT LightShaftEndScale;
    FLOAT LightShaftBrightness;
    INT MaxLightShaftSlices;
    FLOAT SliceSpacing;
    FLOAT ShaftEdgeFadeDist;
    FLOAT ShaftPanXSpeed;
    FLOAT ShaftPanYSpeed;
    BYTE AttenuationMode;
    class UTexture* AttenuationMap;
    BYTE FogType;
    BYTE FogMode;
    FLOAT FogDist;
    FLOAT FogHeight;
    FLOAT DirShadowMapDist;
    BITFIELD bCastStencilShadows:1 GCC_PACK(4);
    BITFIELD bStaticShadows:1;
    BITFIELD bDecalLight:1;
    BITFIELD bAmbientLight:1;
    BITFIELD bDirectionalLight:1;
    BITFIELD bSkipVisibilityUpdate:1;
    BYTE LightPeriod GCC_PACK(4);
    BYTE LightPhase;
    FStringNoInit LightString;
    FStringNoInit LightStringRed;
    FStringNoInit LightStringGreen;
    FStringNoInit LightStringBlue;
    BITFIELD bLightStringLoop:1 GCC_PACK(4);
    FLOAT fFlickerMinBrightness GCC_PACK(4);
    FLOAT fFlickerMaxBrightness;
    FLOAT fFlickerStaticMinTime;
    FLOAT fFlickerStaticMaxTime;
    BYTE RespectLightingTags;
    BYTE LightFlickerString;
    FName LightAmbientSoundName;
    FLOAT LightAmbientSoundMinScale;
    FLOAT LightAmbientSoundMaxScale;
    INT InternalData;
    FStringNoInit LightScaleString;
    FLOAT LightStringStartTime;
    FLOAT LightScaleStringStartTime;
    FLOAT fNextFlickerTime;
    FLOAT fLastBrightness;
    FLOAT fFlickerTypeChangeTime;
    FLOAT fCurFlickerScale;
    FLOAT fLastFlickerScale;
    FLOAT fFlickerInterval;
    FVector FinalColorScale;
    class UTexture* SlaveSprite;
    BYTE LightFlickerType;
    DECLARE_FUNCTION(execGetCurrentColor);
    DECLARE_FUNCTION(execMarkDirty);
    DECLARE_CLASS(ALightEx,ARenderActor,0,Engine)
};
// Class LightEx exported:
//   Properties size: 340 bytes (2008 total)


//***************************************************************************//
/*	\class ATriggerLightEx
*/
//***************************************************************************//

class ENGINE_API ATriggerLightEx : public ALightEx
{
public:
    BITFIELD bInitiallyOn:1 GCC_PACK(4);
    BYTE eToggleOnStyle GCC_PACK(4);
    BYTE eToggleOffStyle;
    BYTE eForceOffToggleStyle;
    BYTE eForceOffStyle;
    FLOAT fStateChangeTime;
    FStringNoInit strToggleOnString;
    FStringNoInit strToggleOffString;
    FStringNoInit strForcedOffString;
    FColor ForcedOffLightColor;
    FLOAT fMinIntensityChangeTime;
    FLOAT fMaxIntensityChangeTime;
    FName TurnOnTag;
    FName TurnOffTag;
    FColor TurnOffColor;
    BYTE TurnOffStyle;
    FName strForceOffTag;
    FLOAT fForceOffTransitionTime;
    FLOAT fForceOffTime;
    FColor OriginalColor;
    BYTE OriginalStyle;
    BYTE LightState;
    FLOAT StateTimeElapsed;
    FLOAT NextIntensityChangeTime;
    BITFIELD bForcedOff:1 GCC_PACK(4);
    FVector StartStateColor GCC_PACK(4);
    FVector EndStateColor;
    FLOAT ForceOffTimeElapsed;
    BYTE DefaultTickStyle;
    inline void __fastcall eventSetInitialLightState()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_SetInitialLightState), NULL);
    }
    DECLARE_CLASS(ATriggerLightEx,ALightEx,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ATriggerLightEx)
};
// Class TriggerLightEx exported:
//   Properties size: 140 bytes (2148 total)


//***************************************************************************//
/*	\class AKConstraint
*/
//***************************************************************************//


struct AKConstraint_eventConstraintDisabled_Parms
{
    BITFIELD bConstraintWasBroken;
};
class ENGINE_API AKConstraint : public ARenderActor
{
public:
    class AKarmaActor* KConstraintActor1;
    class AKarmaActor* KConstraintActor2;
    FName KConstraintActor1Tag;
    FName KConstraintActor2Tag;
    FName KConstraintActor1Bone;
    FName KConstraintActor2Bone;
    BITFIELD bKDisableCollision:1 GCC_PACK(4);
    BITFIELD bDebugConstraintStress:1;
    BITFIELD bBreakOnExplosionDamage:1;
    BITFIELD bOnlyBreakOne:1;
    FLOAT BreakOnDamageChance GCC_PACK(4);
    FLOAT KForceDisableThreshold;
    FName BreakEvent;
    FSSoundInfo BreakSoundInfo;
    DECLARE_FUNCTION(execSetBreakThreshold);
    DECLARE_FUNCTION(execConstraintSupportsBreaking);
    DECLARE_FUNCTION(execBreakConstraint);
    DECLARE_FUNCTION(execSetKDisableCollision);
    inline void __fastcall eventConstraintDisabled(BITFIELD bConstraintWasBroken)
    {
        AKConstraint_eventConstraintDisabled_Parms Parms;
        Parms.bConstraintWasBroken=bConstraintWasBroken;
        ProcessEvent(FindFunctionChecked(ENGINE_ConstraintDisabled), &Parms);
    }
    DECLARE_CLASS(AKConstraint,ARenderActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR_START(AKConstraint)
    NO_DEFAULT_CONSTRUCTOR_INITLAST(BreakSoundInfo)
};
// Class KConstraint exported:
//   Properties size: 212 bytes (1880 total)


//***************************************************************************//
/*	\class AKPulley
*/
//***************************************************************************//

class ENGINE_API AKPulley : public AKConstraint
{
public:
    BITFIELD bUseSecondaryAxis:1 GCC_PACK(4);
    FRotator SecondaryAxis GCC_PACK(4);
    FLOAT PulleyRatio;
    DECLARE_FUNCTION(execSetPulleyRatio);
    DECLARE_FUNCTION(execSetSecondaryAxisState);
    DECLARE_CLASS(AKPulley,AKConstraint,0,Engine)
};
// Class KPulley exported:
//   Properties size: 20 bytes (1900 total)


//***************************************************************************//
/*	\class AKLinearAngularPulley
*/
//***************************************************************************//

class ENGINE_API AKLinearAngularPulley : public AKPulley
{
public:
    DECLARE_CLASS(AKLinearAngularPulley,AKPulley,0,Engine)
};
// Class KLinearAngularPulley exported:
//   Properties size: 0 bytes (1900 total)


//***************************************************************************//
/*	\class AKAngularPulley
*/
//***************************************************************************//

class ENGINE_API AKAngularPulley : public AKPulley
{
public:
    DECLARE_CLASS(AKAngularPulley,AKPulley,0,Engine)
};
// Class KAngularPulley exported:
//   Properties size: 0 bytes (1900 total)


//***************************************************************************//
/*	\class AKLinearPulley
*/
//***************************************************************************//

class ENGINE_API AKLinearPulley : public AKPulley
{
public:
    FVector KConstraintActor1Offset;
    FVector KConstraintActor2Offset;
    DECLARE_CLASS(AKLinearPulley,AKPulley,0,Engine)
};
// Class KLinearPulley exported:
//   Properties size: 24 bytes (1924 total)


//***************************************************************************//
/*	\class AKAffector
*/
//***************************************************************************//

class ENGINE_API AKAffector : public AKConstraint
{
public:
    BITFIELD bStartAffectorActive:1 GCC_PACK(4);
    BITFIELD bWakeOnAffectorChange:1;
    DECLARE_CLASS(AKAffector,AKConstraint,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AKAffector)
};
// Class KAffector exported:
//   Properties size: 4 bytes (1884 total)


//***************************************************************************//
/*	\class AKSpringDamper
*/
//***************************************************************************//

class ENGINE_API AKSpringDamper : public AKAffector
{
public:
    BYTE SimulationMode;
    FLOAT K;
    FLOAT D;
    DECLARE_FUNCTION(execSetSpringD);
    DECLARE_FUNCTION(execSetSpringK);
    DECLARE_FUNCTION(execSetSpringSimulationMode);
    DECLARE_CLASS(AKSpringDamper,AKAffector,0,Engine)
};
// Class KSpringDamper exported:
//   Properties size: 12 bytes (1896 total)


//***************************************************************************//
/*	\class AKAngularSpringDamper
*/
//***************************************************************************//

class ENGINE_API AKAngularSpringDamper : public AKSpringDamper
{
public:
    INT BreakAngle;
    BITFIELD bUseSecondaryAxis:1 GCC_PACK(4);
    FRotator SecondaryAxis GCC_PACK(4);
    DECLARE_FUNCTION(execSetSecondaryAxisState);
    DECLARE_FUNCTION(execSetBreakAngle);
    DECLARE_CLASS(AKAngularSpringDamper,AKSpringDamper,0,Engine)
};
// Class KAngularSpringDamper exported:
//   Properties size: 20 bytes (1916 total)


//***************************************************************************//
/*	\class AKLinearSpringDamper
*/
//***************************************************************************//

class ENGINE_API AKLinearSpringDamper : public AKSpringDamper
{
public:
    FLOAT Length;
    FLOAT BreakLength;
    BITFIELD KConstraintActor1UseConstraintPoint:1 GCC_PACK(4);
    BITFIELD KConstraintActor2UseConstraintPoint:1;
    DECLARE_FUNCTION(execSetConstraintActor2UseConstraintPoint);
    DECLARE_FUNCTION(execSetConstraintActor1UseConstraintPoint);
    DECLARE_FUNCTION(execSetBreakLength);
    DECLARE_FUNCTION(execSetRestLength);
    DECLARE_CLASS(AKLinearSpringDamper,AKSpringDamper,0,Engine)
};
// Class KLinearSpringDamper exported:
//   Properties size: 12 bytes (1908 total)


//***************************************************************************//
/*	\class AKAngularJointLimit
*/
//***************************************************************************//

class ENGINE_API AKAngularJointLimit : public AKAffector
{
public:
    INT MaximumAngle;
    BITFIELD bUseSecondaryAxis:1 GCC_PACK(4);
    FRotator SecondaryAxis GCC_PACK(4);
    DECLARE_FUNCTION(execSetSecondaryAxisState);
    DECLARE_FUNCTION(execSetMaximumAngle);
    DECLARE_CLASS(AKAngularJointLimit,AKAffector,0,Engine)
};
// Class KAngularJointLimit exported:
//   Properties size: 20 bytes (1904 total)


//***************************************************************************//
/*	\class AKLinearJointLimit
*/
//***************************************************************************//

class ENGINE_API AKLinearJointLimit : public AKAffector
{
public:
    BYTE AxisMode;
    FLOAT MinimumDistance;
    FLOAT MaximumDistance;
    DECLARE_FUNCTION(execSetDistanceRange);
    DECLARE_FUNCTION(execSetAxisMode);
    DECLARE_CLASS(AKLinearJointLimit,AKAffector,0,Engine)
};
// Class KLinearJointLimit exported:
//   Properties size: 12 bytes (1896 total)


//***************************************************************************//
/*	\class AKAngularMotorAffector
*/
//***************************************************************************//

class ENGINE_API AKAngularMotorAffector : public AKAffector
{
public:
    FLOAT DesiredAngularVelocity;
    FLOAT MaximumTorque;
    DECLARE_FUNCTION(execSetMaximumTorque);
    DECLARE_FUNCTION(execSetDesiredAngularVelocity);
    DECLARE_CLASS(AKAngularMotorAffector,AKAffector,0,Engine)
};
// Class KAngularMotorAffector exported:
//   Properties size: 8 bytes (1892 total)


//***************************************************************************//
/*	\class AKLinearMotorAffector
*/
//***************************************************************************//

class ENGINE_API AKLinearMotorAffector : public AKAffector
{
public:
    BYTE MotorAxisMode;
    FLOAT DesiredVelocity;
    FLOAT MaximumForce;
    DECLARE_FUNCTION(execSetMaximumForce);
    DECLARE_FUNCTION(execSetDesiredVelocity);
    DECLARE_FUNCTION(execSetMotorAxisMode);
    DECLARE_CLASS(AKLinearMotorAffector,AKAffector,0,Engine)
};
// Class KLinearMotorAffector exported:
//   Properties size: 12 bytes (1896 total)


//***************************************************************************//
/*	\class AKSliding
*/
//***************************************************************************//

class ENGINE_API AKSliding : public AKConstraint
{
public:
    DECLARE_CLASS(AKSliding,AKConstraint,0,Engine)
};
// Class KSliding exported:
//   Properties size: 0 bytes (1880 total)


//***************************************************************************//
/*	\class AKLinear
*/
//***************************************************************************//

class ENGINE_API AKLinear : public AKConstraint
{
public:
    DECLARE_CLASS(AKLinear,AKConstraint,0,Engine)
};
// Class KLinear exported:
//   Properties size: 0 bytes (1880 total)


//***************************************************************************//
/*	\class AKFixedOrientation
*/
//***************************************************************************//

class ENGINE_API AKFixedOrientation : public AKConstraint
{
public:
    DECLARE_CLASS(AKFixedOrientation,AKConstraint,0,Engine)
};
// Class KFixedOrientation exported:
//   Properties size: 0 bytes (1880 total)


//***************************************************************************//
/*	\class AKFixed
*/
//***************************************************************************//

class ENGINE_API AKFixed : public AKConstraint
{
public:
    DECLARE_CLASS(AKFixed,AKConstraint,0,Engine)
};
// Class KFixed exported:
//   Properties size: 0 bytes (1880 total)


//***************************************************************************//
/*	\class AKHinge
*/
//***************************************************************************//

class ENGINE_API AKHinge : public AKConstraint
{
public:
    FSSoundInfo CreakSoundInfo;
    FSCreakInfo CreakInfo;
    DECLARE_CLASS(AKHinge,AKConstraint,0,Engine)

    // properties that must be constructed special for AKHinge:
    //       * CreakSoundInfo

};
// Class KHinge exported:
//   Properties size: 208 bytes (2088 total)


//***************************************************************************//
/*	\class AKBSJoint
*/
//***************************************************************************//

class ENGINE_API AKBSJoint : public AKConstraint
{
public:
    DECLARE_CLASS(AKBSJoint,AKConstraint,0,Engine)
};
// Class KBSJoint exported:
//   Properties size: 0 bytes (1880 total)


//***************************************************************************//
/*	\class ABuildSprite
*/
//***************************************************************************//

class ENGINE_API ABuildSprite : public ARenderActor
{
public:
    DECLARE_CLASS(ABuildSprite,ARenderActor,0,Engine)
};
// Class BuildSprite exported:
//   Properties size: 0 bytes (1668 total)


//***************************************************************************//
/*	\class APatchActor
*/
//***************************************************************************//

class ENGINE_API APatchActor : public ARenderActor
{
public:
    BYTE DefaultPrimitiveMode;
    BYTE DefaultSizeX;
    BYTE DefaultSizeY;
    BITFIELD DefaultCaps:1 GCC_PACK(4);
    BITFIELD bTerrainPatch:1;
    class UPatchData* PatchData GCC_PACK(4);
    class UPatchRenderData* PatchRenderData;
    DECLARE_CLASS(APatchActor,ARenderActor,0,Engine)
};
// Class PatchActor exported:
//   Properties size: 16 bytes (1684 total)


//***************************************************************************//
/*	\class AGeoWater
*/
//***************************************************************************//

class ENGINE_API AGeoWater : public ARenderActor
{
public:
    INT GridSizeX;
    INT GridSizeY;
    FLOAT TextureScaleU;
    FLOAT TextureScaleV;
    FLOAT WaterDepth;
    FLOAT DisturbWaterStrengthScale;
    FLOAT WaterDamping;
    FLOAT WaterSpeed;
    FLOAT WaterScrollYSpeed;
    FLOAT UpdateRate;
    BITFIELD bAllowLOD:1 GCC_PACK(4);
    BITFIELD bLineCheckAgainstVolume:1;
    BITFIELD bDontClampEdges:1;
    FLOAT EdgeDeltaMin GCC_PACK(4);
    FLOAT EdgeDeltaMax;
    FLOAT VertexDeltaMin;
    FLOAT VertexDeltaMax;
    INT MinTreeDepth;
    INT MaxTreeDepth;
    FLOAT TessellationSensitivity;
    FVector WaterAmbientLight;
    FLOAT RandomNoiseTime;
    FLOAT RandomNoiseStrength;
    FLOAT RandomNoiseRadius;
    BYTE PhysicsCollisionType;
    FLOAT PhysicsDepth;
    FLOAT PhysicsHeight;
    FLOAT PhysicsDensity;
    FLOAT PhysicsDrag;
    dnArray<FName> OnlyAffectTagged;
    INT WaterVersion;
    WaterInternalData* InternalData;
    DECLARE_FUNCTION(execDetachOscillator);
    DECLARE_FUNCTION(execAttachOscillator);
    DECLARE_FUNCTION(execInternalTick);
    DECLARE_FUNCTION(execSampleHeight);
    DECLARE_FUNCTION(execSplashWater);
    DECLARE_CLASS(AGeoWater,ARenderActor,0,Engine)

    // properties that must be constructed special for AGeoWater:
    //       * OnlyAffectTagged

};
// Class GeoWater exported:
//   Properties size: 136 bytes (1804 total)


//***************************************************************************//
/*	\class AKSensor
*/
//***************************************************************************//


struct AKSensor_eventEndSenseObject_Parms
{
    class AKarmaActor* Actor;
};

struct AKSensor_eventBeginSenseObject_Parms
{
    class AKarmaActor* Actor;
};
class ENGINE_API AKSensor : public AKarmaActor
{
public:
    FName OnlySenseTagged;
    dnArray<class UClass*> OnlySenseClasses;
    FName SensorEnableTag;
    FName SensorDisableTag;
    FName BeginSenseEvent;
    FName EndSenseEvent;
    DECLARE_FUNCTION(execGetSensedActors);
    DECLARE_FUNCTION(execGetFirstSensedPawn);
    DECLARE_FUNCTION(execRemoveSensableClass);
    DECLARE_FUNCTION(execAddSensableClass);
    inline void __fastcall eventEndSenseObject(class AKarmaActor* Actor)
    {
        AKSensor_eventEndSenseObject_Parms Parms;
        Parms.Actor=Actor;
        ProcessEvent(FindFunctionChecked(ENGINE_EndSenseObject), &Parms);
    }
    inline void __fastcall eventBeginSenseObject(class AKarmaActor* Actor)
    {
        AKSensor_eventBeginSenseObject_Parms Parms;
        Parms.Actor=Actor;
        ProcessEvent(FindFunctionChecked(ENGINE_BeginSenseObject), &Parms);
    }
    DECLARE_CLASS(AKSensor,AKarmaActor,0,Engine)

    // properties that must be constructed special for AKSensor:
    //       * OnlySenseClasses

};
// Class KSensor exported:
//   Properties size: 32 bytes (1508 total)


//***************************************************************************//
/*	\class AKConvexSensor
*/
//***************************************************************************//

class ENGINE_API AKConvexSensor : public AKSensor
{
public:
    class UStaticMesh* ConvexSource;
    DECLARE_CLASS(AKConvexSensor,AKSensor,0,Engine)
};
// Class KConvexSensor exported:
//   Properties size: 4 bytes (1512 total)


//***************************************************************************//
/*	\class AKSphereSensor
*/
//***************************************************************************//

class ENGINE_API AKSphereSensor : public AKSensor
{
public:
    FLOAT SphereSensorRadius;
    DECLARE_FUNCTION(execSetSensorRadius);
    DECLARE_CLASS(AKSphereSensor,AKSensor,0,Engine)
};
// Class KSphereSensor exported:
//   Properties size: 4 bytes (1512 total)


//***************************************************************************//
/*	\class AKBoxSensor
*/
//***************************************************************************//

class ENGINE_API AKBoxSensor : public AKSensor
{
public:
    FVector BoxSensorSize;
    DECLARE_FUNCTION(execSetSensorSize);
    DECLARE_CLASS(AKBoxSensor,AKSensor,0,Engine)
};
// Class KBoxSensor exported:
//   Properties size: 12 bytes (1520 total)


//***************************************************************************//
/*	\class AKLineSensor
*/
//***************************************************************************//

class ENGINE_API AKLineSensor : public AKSensor
{
public:
    FLOAT LineSensorLength;
    DECLARE_FUNCTION(execSetSensorLength);
    DECLARE_CLASS(AKLineSensor,AKSensor,0,Engine)
};
// Class KLineSensor exported:
//   Properties size: 4 bytes (1512 total)


//***************************************************************************//
/*	\class ANAVStats
*/
//***************************************************************************//

class ENGINE_API ANAVStats : public AActor
{
public:
    dnArray<FSNAVInfo> PathStats;
    DECLARE_CLASS(ANAVStats,AActor,0|CLASS_Transient,Engine)
    NO_DEFAULT_CONSTRUCTOR_START(ANAVStats)
    NO_DEFAULT_CONSTRUCTOR_INITLAST(PathStats)
};
// Class NAVStats exported:
//   Properties size: 12 bytes (1200 total)


//***************************************************************************//
/*	\class AInfoActor
*/
//***************************************************************************//

class ENGINE_API AInfoActor : public AActor
{
public:
    DECLARE_CLASS(AInfoActor,AActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AInfoActor)
};
// Class InfoActor exported:
//   Properties size: 0 bytes (1188 total)


//***************************************************************************//
/*	\class AInfo
*/
//***************************************************************************//

class ENGINE_API AInfo : public AInfoActor
{
public:
    DECLARE_CLASS(AInfo,AInfoActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AInfo)
};
// Class Info exported:
//   Properties size: 0 bytes (1188 total)


//***************************************************************************//
/*	\class AInternetInfo
*/
//***************************************************************************//

class ENGINE_API AInternetInfo : public AInfo
{
public:
    DECLARE_CLASS(AInternetInfo,AInfo,0|CLASS_Transient,Engine)
    NO_DEFAULT_CONSTRUCTOR(AInternetInfo)
};
// Class InternetInfo exported:
//   Properties size: 0 bytes (1188 total)


//***************************************************************************//
/*	\class AInternetLink
*/
//***************************************************************************//


struct AInternetLink_eventResolved_Parms
{
    FIpAddr Addr;
};
class ENGINE_API AInternetLink : public AInternetInfo
{
public:
    BYTE LinkMode;
    BYTE ReceiveMode;
    INT Socket;
    INT Port;
    INT RemoteSocket;
    INT PrivateResolveInfo;
    INT DataPending;
    DECLARE_FUNCTION(execGetLocalIP);
    DECLARE_FUNCTION(execValidate);
    DECLARE_FUNCTION(execStringToIpAddr);
    DECLARE_FUNCTION(execIpAddrToString);
    DECLARE_FUNCTION(execGetLastError);
    DECLARE_FUNCTION(execResolve);
    DECLARE_FUNCTION(execParseURL);
    DECLARE_FUNCTION(execIsDataPending);
    inline void __fastcall eventResolveFailed()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_ResolveFailed), NULL);
    }
    inline void __fastcall eventResolved(FIpAddr Addr)
    {
        AInternetLink_eventResolved_Parms Parms;
        Parms.Addr=Addr;
        ProcessEvent(FindFunctionChecked(ENGINE_Resolved), &Parms);
    }
    DECLARE_CLASS(AInternetLink,AInternetInfo,0|CLASS_Transient,Engine)
    NO_DEFAULT_CONSTRUCTOR(AInternetLink)
};
// Class InternetLink exported:
//   Properties size: 24 bytes (1212 total)


//***************************************************************************//
/*	\class AUdpLink
*/
//***************************************************************************//


struct AUdpLink_eventReceivedBinary_Parms
{
    FIpAddr Addr;
    INT Count;
    BYTE B[255];
};

struct AUdpLink_eventReceivedLine_Parms
{
    FIpAddr Addr;
    FString Line;
};

struct AUdpLink_eventReceivedText_Parms
{
    FIpAddr Addr;
    FString Text;
};
class ENGINE_API AUdpLink : public AInternetLink
{
public:
    INT BroadcastAddr;
    DECLARE_FUNCTION(execReadBinary);
    DECLARE_FUNCTION(execReadText);
    DECLARE_FUNCTION(execSendBinary);
    DECLARE_FUNCTION(execSendText);
    DECLARE_FUNCTION(execBindPort);
    inline void __fastcall eventReceivedBinary(FIpAddr Addr, INT Count, BYTE* B)
    {
        AUdpLink_eventReceivedBinary_Parms Parms;
        Parms.Addr=Addr;
        Parms.Count=Count;
        appMemcpy(Parms.B,B,sizeof(Parms.B));
        ProcessEvent(FindFunctionChecked(ENGINE_ReceivedBinary), &Parms);
    }
    inline void __fastcall eventReceivedLine(FIpAddr Addr, const FString& Line)
    {
        AUdpLink_eventReceivedLine_Parms Parms;
        Parms.Addr=Addr;
        Parms.Line=Line;
        ProcessEvent(FindFunctionChecked(ENGINE_ReceivedLine), &Parms);
    }
    inline void __fastcall eventReceivedText(FIpAddr Addr, const FString& Text)
    {
        AUdpLink_eventReceivedText_Parms Parms;
        Parms.Addr=Addr;
        Parms.Text=Text;
        ProcessEvent(FindFunctionChecked(ENGINE_ReceivedText), &Parms);
    }
    DECLARE_CLASS(AUdpLink,AInternetLink,0|CLASS_Transient,Engine)
    NO_DEFAULT_CONSTRUCTOR(AUdpLink)
};
// Class UdpLink exported:
//   Properties size: 4 bytes (1216 total)


//***************************************************************************//
/*	\class AXboxLiveQuery
*/
//***************************************************************************//

class ENGINE_API AXboxLiveQuery : public AUdpLink
{
public:
    BITFIELD bRanked:1 GCC_PACK(4);
    DECLARE_FUNCTION(execGetSearchResultCount);
    DECLARE_FUNCTION(execIsSearching);
    DECLARE_FUNCTION(execJoinSearchResult);
    DECLARE_FUNCTION(execSearch);
    DECLARE_CLASS(AXboxLiveQuery,AUdpLink,0|CLASS_Transient,Engine)
    NO_DEFAULT_CONSTRUCTOR(AXboxLiveQuery)
};
// Class XboxLiveQuery exported:
//   Properties size: 4 bytes (1220 total)


//***************************************************************************//
/*	\class AUdpSystemLinkQuery
*/
//***************************************************************************//

class ENGINE_API AUdpSystemLinkQuery : public AUdpLink
{
public:
    INT Nonce;
    INT ServerBeaconPort;
    dnArray<FSystemLinkGame> GameList;
    DECLARE_FUNCTION(execBindToSystemLinkGame);
    DECLARE_FUNCTION(execServerReceived);
    DECLARE_CLASS(AUdpSystemLinkQuery,AUdpLink,0|CLASS_Transient,Engine)
    NO_DEFAULT_CONSTRUCTOR_START(AUdpSystemLinkQuery)
    NO_DEFAULT_CONSTRUCTOR_INITLAST(GameList)
};
// Class UdpSystemLinkQuery exported:
//   Properties size: 20 bytes (1236 total)


//***************************************************************************//
/*	\class AUdpBeaconSystemLink
*/
//***************************************************************************//

class ENGINE_API AUdpBeaconSystemLink : public AUdpLink
{
public:
    INT ServerBeaconPort;
    DECLARE_FUNCTION(execBroadcastBeacon);
    DECLARE_CLASS(AUdpBeaconSystemLink,AUdpLink,0|CLASS_Transient,Engine)
    NO_DEFAULT_CONSTRUCTOR(AUdpBeaconSystemLink)
};
// Class UdpBeaconSystemLink exported:
//   Properties size: 4 bytes (1220 total)


//***************************************************************************//
/*	\class ATcpLink
*/
//***************************************************************************//


struct ATcpLink_eventReceivedBinary_Parms
{
    INT Count;
    BYTE B[255];
};

struct ATcpLink_eventReceivedLine_Parms
{
    FString Line;
};

struct ATcpLink_eventReceivedText_Parms
{
    FString Text;
};
class ENGINE_API ATcpLink : public AInternetLink
{
public:
    BYTE LinkState;
    FIpAddr RemoteAddr;
    class UClass* AcceptClass;
    dnArray<BYTE> SendFIFO;
    DECLARE_FUNCTION(execReadBinary);
    DECLARE_FUNCTION(execReadText);
    DECLARE_FUNCTION(execSendBinary);
    DECLARE_FUNCTION(execSendText);
    DECLARE_FUNCTION(execIsConnected);
    DECLARE_FUNCTION(execClose);
    DECLARE_FUNCTION(execOpen);
    DECLARE_FUNCTION(execListen);
    DECLARE_FUNCTION(execBindPort);
    inline void __fastcall eventReceivedBinary(INT Count, BYTE* B)
    {
        ATcpLink_eventReceivedBinary_Parms Parms;
        Parms.Count=Count;
        appMemcpy(Parms.B,B,sizeof(Parms.B));
        ProcessEvent(FindFunctionChecked(ENGINE_ReceivedBinary), &Parms);
    }
    inline void __fastcall eventReceivedLine(const FString& Line)
    {
        ATcpLink_eventReceivedLine_Parms Parms;
        Parms.Line=Line;
        ProcessEvent(FindFunctionChecked(ENGINE_ReceivedLine), &Parms);
    }
    inline void __fastcall eventReceivedText(const FString& Text)
    {
        ATcpLink_eventReceivedText_Parms Parms;
        Parms.Text=Text;
        ProcessEvent(FindFunctionChecked(ENGINE_ReceivedText), &Parms);
    }
    inline void __fastcall eventClosed()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_Closed), NULL);
    }
    inline void __fastcall eventOpened()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_Opened), NULL);
    }
    inline void __fastcall eventAccepted()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_Accepted), NULL);
    }
    DECLARE_CLASS(ATcpLink,AInternetLink,0|CLASS_Transient,Engine)
    NO_DEFAULT_CONSTRUCTOR_START(ATcpLink)
    NO_DEFAULT_CONSTRUCTOR_INITLAST(SendFIFO)
};
// Class TcpLink exported:
//   Properties size: 28 bytes (1240 total)


//***************************************************************************//
/*	\class ASavedMove
*/
//***************************************************************************//


struct ASavedMove_eventCallServerMove_Parms
{
    class APlayerPawn* P;
};
class ENGINE_API ASavedMove : public AInfo
{
public:
    class ASavedMove* NextMove;
    class ASavedMove* PreviousMove;
    FLOAT Timestamp;
    FLOAT DeltaTime;
    FRotator StartViewRotation;
    FVector endLocation;
    BITFIELD bForward:1 GCC_PACK(4);
    BITFIELD bBackward:1;
    BITFIELD bStrafeLeft:1;
    BITFIELD bStrafeRight:1;
    BITFIELD bDuck:1;
    BITFIELD bJump:1;
    BITFIELD bFire:1;
    BITFIELD bFireServer:1;
    BITFIELD bMelee:1;
    BITFIELD bUse:1;
    BITFIELD bWasDuck:1;
    BITFIELD bWasJump:1;
    BITFIELD bWasFire:1;
    BITFIELD bWasFireServer:1;
    BITFIELD bWasMelee:1;
    BITFIELD bWasUse:1;
    BITFIELD bAdjustStepHeight:1;
    BITFIELD bToggleCrouch:1;
    BITFIELD bCrouchOn:1;
    BITFIELD bIsFiringBulletThisFrame:1;
    FVector WeaponTraceStartOffset GCC_PACK(4);
    FLOAT aForward;
    FLOAT aStrafe;
    BYTE Physics;
    BITFIELD bJumpInProgress:1 GCC_PACK(4);
    BITFIELD bIsJumpPadLaunching:1;
    BITFIELD bIsInAirFromJumpPad:1;
    BITFIELD bIsSubmerged:1;
    FLOAT DrawScale GCC_PACK(4);
    BYTE PostureState;
    FLOAT CollisionRadius;
    FLOAT CollisionHeight;
    FVector StartVelocity;
    BITFIELD StoredPlayerbForward:1 GCC_PACK(4);
    BITFIELD StoredPlayerbBackward:1;
    BITFIELD StoredPlayerbStrafeLeft:1;
    BITFIELD StoredPlayerbStrafeRight:1;
    BITFIELD StoredPlayerbJump:1;
    BITFIELD StoredPlayerbDuck:1;
    BITFIELD StoredPlayerbFire:1;
    BITFIELD StoredPlayerbFireServer:1;
    BITFIELD StoredPlayerbMelee:1;
    BITFIELD StoredPlayerbUse:1;
    BITFIELD StoredPlayerbWasJump:1;
    BITFIELD StoredPlayerbWasDuck:1;
    BITFIELD StoredPlayerbWasFire:1;
    BITFIELD StoredPlayerbWasFireServer:1;
    BITFIELD StoredPlayerbWasMelee:1;
    BITFIELD StoredPlayerbWasUse:1;
    BITFIELD StoredPlayerbAdjustStepHeight:1;
    BITFIELD StoredPlayerbToggleCrouch:1;
    BITFIELD StoredPlayerbCrouchOn:1;
    FLOAT StoredPlayer_aForward GCC_PACK(4);
    FLOAT StoredPlayer_aStrafe;
    FRotator StoredPlayerViewRotation;
    BYTE StoredPlayerPhysics;
    BITFIELD StoredPlayerbJumpInProgress:1 GCC_PACK(4);
    BITFIELD StoredPlayerbIsJumpPadLaunching:1;
    BITFIELD StoredPlayerbIsInAirFromJumpPad:1;
    BITFIELD StoredPlayerbIsSubmerged:1;
    FLOAT StoredPlayerDrawScale GCC_PACK(4);
    BYTE StoredPlayerPostureState;
    FLOAT StoredPlayerCollisionRadius;
    FLOAT StoredPlayerCollisionHeight;
    inline void __fastcall eventCallServerMove(class APlayerPawn* P)
    {
        ASavedMove_eventCallServerMove_Parms Parms;
        Parms.P=P;
        ProcessEvent(FindFunctionChecked(ENGINE_CallServerMove), &Parms);
    }
    DECLARE_CLASS(ASavedMove,AInfo,0,Engine)
};
// Class SavedMove exported:
//   Properties size: 148 bytes (1336 total)


//***************************************************************************//
/*	\class AMapRefKeeper
*/
//***************************************************************************//

class ENGINE_API AMapRefKeeper : public AInfo
{
public:
    dnArray<class UObject*> RefArray;
    DECLARE_CLASS(AMapRefKeeper,AInfo,0,Engine)
    NO_DEFAULT_CONSTRUCTOR_START(AMapRefKeeper)
    NO_DEFAULT_CONSTRUCTOR_INITLAST(RefArray)
};
// Class MapRefKeeper exported:
//   Properties size: 12 bytes (1200 total)


//***************************************************************************//
/*	\class AMultiplayerInfo
*/
//***************************************************************************//

class ENGINE_API AMultiplayerInfo : public AInfo
{
public:
    BITFIELD bSpawnShrunk:1 GCC_PACK(4);
    FLOAT StartingEgo GCC_PACK(4);
    FLOAT StartingHealth;
    FLOAT MovementSpeed;
    FLOAT SprintSpeed;
    FLOAT JumpSpeed;
    BITFIELD bUseInventoryOverride:1 GCC_PACK(4);
    dnArray<class UClass*> InventoryOverride GCC_PACK(4);
    FLOAT WeaponStayTime;
    dnArray<class UClass*> Mutators;
    dnArray<FString> ConsoleCommands;
    DECLARE_CLASS(AMultiplayerInfo,AInfo,0,Engine)
    NO_DEFAULT_CONSTRUCTOR_START(AMultiplayerInfo)
    NO_DEFAULT_CONSTRUCTOR_INIT(InventoryOverride)
    NO_DEFAULT_CONSTRUCTOR_INIT(Mutators)
    NO_DEFAULT_CONSTRUCTOR_INITLAST(ConsoleCommands)
};
// Class MultiplayerInfo exported:
//   Properties size: 68 bytes (1256 total)


//***************************************************************************//
/*	\class AMapInfo
*/
//***************************************************************************//

class ENGINE_API AMapInfo : public AInfo
{
public:
    dnArray<FSCampaignInfo> CampaignList;
    DECLARE_CLASS(AMapInfo,AInfo,0|CLASS_Config,Engine)
    NO_DEFAULT_CONSTRUCTOR_START(AMapInfo)
    NO_DEFAULT_CONSTRUCTOR_INITLAST(CampaignList)
};
// Class MapInfo exported:
//   Properties size: 12 bytes (1200 total)


//***************************************************************************//
/*	\class AMPMapInfo
*/
//***************************************************************************//


struct AMPMapInfo_eventGetMapPackageSwap_Parms
{
    FString GameType;
    FString inMapName;
    FString SwappedPackage;
};

struct AMPMapInfo_eventGetOptionsForGameType_Parms
{
    FString GameType;
    FAvailableGameTypes out_AvailableGameTypes;
    BITFIELD ReturnValue;
};

struct AMPMapInfo_eventGetMapsForGameType_Parms
{
    FString GameType;
    dnArray<FAvailableMaps> mapnames;
};
class ENGINE_API AMPMapInfo : public AInfo
{
public:
    dnArray<FPlayListEntry> Playlist;
    dnArray<FAvailableMaps> MapList;
    dnArray<FAvailableGameTypes> GameTypes;
    dnArray<FAvailableMutators> MutatorTypes;
    inline void __fastcall eventGetMapPackageSwap(const FString& GameType, const FString& inMapName, FString& SwappedPackage)
    {
        AMPMapInfo_eventGetMapPackageSwap_Parms Parms;
        Parms.GameType=GameType;
        Parms.inMapName=inMapName;
        Parms.SwappedPackage=SwappedPackage;
        ProcessEvent(FindFunctionChecked(ENGINE_GetMapPackageSwap), &Parms);
        SwappedPackage=Parms.SwappedPackage;
    }
    inline BITFIELD __fastcall eventGetOptionsForGameType(const FString& GameType, FAvailableGameTypes& out_AvailableGameTypes)
    {
        AMPMapInfo_eventGetOptionsForGameType_Parms Parms;
        Parms.ReturnValue=0;
        Parms.GameType=GameType;
        Parms.out_AvailableGameTypes=out_AvailableGameTypes;
        ProcessEvent(FindFunctionChecked(ENGINE_GetOptionsForGameType), &Parms);
        out_AvailableGameTypes=Parms.out_AvailableGameTypes;
        return Parms.ReturnValue;
    }
    inline void __fastcall eventGetMapsForGameType(const FString& GameType, dnArray<FAvailableMaps>& mapnames)
    {
        AMPMapInfo_eventGetMapsForGameType_Parms Parms;
        Parms.GameType=GameType;
        Parms.mapnames=mapnames;
        ProcessEvent(FindFunctionChecked(ENGINE_GetMapsForGameType), &Parms);
        mapnames=Parms.mapnames;
    }
    DECLARE_CLASS(AMPMapInfo,AInfo,0|CLASS_Config,Engine)
    NO_DEFAULT_CONSTRUCTOR_START(AMPMapInfo)
    NO_DEFAULT_CONSTRUCTOR_INIT(Playlist)
    NO_DEFAULT_CONSTRUCTOR_INIT(MapList)
    NO_DEFAULT_CONSTRUCTOR_INIT(GameTypes)
    NO_DEFAULT_CONSTRUCTOR_INITLAST(MutatorTypes)
};
// Class MPMapInfo exported:
//   Properties size: 48 bytes (1236 total)


//***************************************************************************//
/*	\class AMapLocationsDM
*/
//***************************************************************************//

class ENGINE_API AMapLocationsDM : public AInfo
{
public:
    FMapInfoDataDM Maps[128];
    DECLARE_CLASS(AMapLocationsDM,AInfo,0|CLASS_Transient,Engine)
    NO_DEFAULT_CONSTRUCTOR(AMapLocationsDM)
};
// Class MapLocationsDM exported:
//   Properties size: 5120 bytes (6308 total)


//***************************************************************************//
/*	\class AMapLocations
*/
//***************************************************************************//

class ENGINE_API AMapLocations : public AInfo
{
public:
    INT NumMaps;
    FMapInfoData Maps[128];
    FLOAT ScrollSpeed;
    DECLARE_CLASS(AMapLocations,AInfo,0|CLASS_Transient,Engine)
    NO_DEFAULT_CONSTRUCTOR(AMapLocations)
};
// Class MapLocations exported:
//   Properties size: 6664 bytes (7852 total)


//***************************************************************************//
/*	\class AMutator
*/
//***************************************************************************//


struct AMutator_eventPostRender_Parms
{
    class UCanvas* Canvas;
};
class ENGINE_API AMutator : public AInfo
{
public:
    class AMutator* NextMutator;
    FStringNoInit MutatorName;
    DECLARE_FUNCTION(execAllowPickup);
    inline void __fastcall eventPostRender(class UCanvas* Canvas)
    {
        AMutator_eventPostRender_Parms Parms;
        Parms.Canvas=Canvas;
        ProcessEvent(FindFunctionChecked(ENGINE_PostRender), &Parms);
    }
    DECLARE_CLASS(AMutator,AInfo,0,Engine)
};
// Class Mutator exported:
//   Properties size: 16 bytes (1204 total)


//***************************************************************************//
/*	\class ADlcInfo
*/
//***************************************************************************//

class ENGINE_API ADlcInfo : public AInfo
{
public:
    dnArray<FDlcPackageInfo> DlcPackages;
    dnArray<BYTE> PreorderGroups;
    BITFIELD bPreorderUnlockDLC:1 GCC_PACK(4);
    dnArray<FString> PrecacheObjs GCC_PACK(4);
    DECLARE_CLASS(ADlcInfo,AInfo,0|CLASS_Config,Engine)

    // properties that must be constructed special for ADlcInfo:
    //       * DlcPackages
    //       * PreorderGroups
    //       * PrecacheObjs

};
// Class DlcInfo exported:
//   Properties size: 40 bytes (1228 total)


//***************************************************************************//
/*	\class AReplicationInfo
*/
//***************************************************************************//

class ENGINE_API AReplicationInfo : public AInfo
{
public:
    DECLARE_CLASS(AReplicationInfo,AInfo,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AReplicationInfo)
};
// Class ReplicationInfo exported:
//   Properties size: 0 bytes (1188 total)


//***************************************************************************//
/*	\class AGameReplicationInfo
*/
//***************************************************************************//


struct AGameReplicationInfo_eventGetRemainingRoundTime_Parms
{
    INT ReturnValue;
};

struct AGameReplicationInfo_eventIsPreMatch_Parms
{
    BITFIELD ReturnValue;
};
class ENGINE_API AGameReplicationInfo : public AReplicationInfo
{
public:
    FStringNoInit GameName;
    FStringNoInit GameClass;
    FStringNoInit RulesVoteType;
    BITFIELD bTeamGame:1 GCC_PACK(4);
    BITFIELD bDeathmatchGame:1;
    BITFIELD bStopCountDown:1;
    BITFIELD bMeshAccurateHits:1;
    BITFIELD bPlayDeathSequence:1;
    BITFIELD bShowScoresAfterDeath:1;
    BITFIELD bShowScoresAfterGame:1;
    FLOAT LastReplicatedElapsedTime GCC_PACK(4);
    FLOAT ElapsedTime;
    FLOAT SyncElapsedTime;
    BITFIELD bDidSyncElapsedTime:1 GCC_PACK(4);
    BITFIELD bDidInitialTimeSync:1;
    FLOAT RoundEndTime GCC_PACK(4);
    FLOAT MatchEndTime;
    INT NumPlayers;
    INT NumSpectators;
    INT RemainingVoteTime;
    INT VoteYes;
    INT VoteNo;
    INT DmgStrIndex;
    BITFIELD bWaitingForPlayers:1 GCC_PACK(4);
    BITFIELD bPreGame:1;
    BITFIELD bGameStartBufferComplete:1;
    FStringNoInit ServerName GCC_PACK(4);
    FStringNoInit AdminName;
    FStringNoInit AdminEmail;
    INT GameRegion;
    FStringNoInit MOTDLine1;
    FStringNoInit MOTDLine2;
    FStringNoInit MOTDLine3;
    FStringNoInit MOTDLine4;
    FStringNoInit GameEndedComments;
    FStringNoInit VoteMessage[4];
    FStringNoInit DebugDamageStrings[32];
    dnArray<class APlayerReplicationInfo*> PRIArray;
    BITFIELD bPrivateMatch:1 GCC_PACK(4);
    FLOAT CountDown GCC_PACK(4);
    FLOAT LastCountDown;
    FLOAT ShowWinnerSeconds;
    inline INT __fastcall eventGetRemainingRoundTime()
    {
        AGameReplicationInfo_eventGetRemainingRoundTime_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_GetRemainingRoundTime), &Parms);
        return Parms.ReturnValue;
    }
    inline BITFIELD __fastcall eventIsPreMatch()
    {
        AGameReplicationInfo_eventIsPreMatch_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_IsPreMatch), &Parms);
        return Parms.ReturnValue;
    }
    DECLARE_CLASS(AGameReplicationInfo,AReplicationInfo,0|CLASS_Config|CLASS_NativeReplication,Engine)
    NO_DEFAULT_CONSTRUCTOR_START(AGameReplicationInfo)
    NO_DEFAULT_CONSTRUCTOR_INITLAST(PRIArray)
};
// Class GameReplicationInfo exported:
//   Properties size: 652 bytes (1840 total)


//***************************************************************************//
/*	\class APlayerReplicationInfo
*/
//***************************************************************************//


struct APlayerReplicationInfo_eventIsActiveInGame_Parms
{
    BITFIELD ReturnValue;
};
class ENGINE_API APlayerReplicationInfo : public AReplicationInfo
{
public:
    FStringNoInit PlayerName;
    FStringNoInit PlayerTitle;
    FStringNoInit OldName;
    INT PlayerID;
    INT RoomMemberID;
    FStringNoInit TeamName;
    BYTE Team;
    INT TeamID;
    INT Score;
    INT Deaths;
    INT Kills;
    INT RoundKills;
    INT NumLives;
    INT Credits;
    class UClass* PlayerVoicePack;
    INT Ping;
    BYTE PacketLoss;
    BYTE Gender;
    BITFIELD bOnlySpectator:1 GCC_PACK(4);
    BITFIELD bIsABot:1;
    BITFIELD bAdmin:1;
    BITFIELD bHasBomb:1;
    BITFIELD bSquelch:1;
    BITFIELD bDead:1;
    class UTexture* Icon GCC_PACK(4);
    class AZoneInfo* PlayerZone;
    class Alocationid* PlayerLocation;
    BYTE Frags[32];
    class UClass* FragTypes[32];
    BYTE GameState;
    BITFIELD bUsingPrivateSlot:1 GCC_PACK(4);
    BITFIELD bArbRegistered:1;
    INT XUIDUpper GCC_PACK(4);
    INT XUIDLower;
    INT StartTime;
    INT TimeAcc;
    INT DukeLevel;
    BITFIELD bTeamGame:1 GCC_PACK(4);
    BITFIELD bPlayerLeft:1;
    DECLARE_FUNCTION(execIsSpectating);
    inline BITFIELD __fastcall eventIsActiveInGame()
    {
        APlayerReplicationInfo_eventIsActiveInGame_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_IsActiveInGame), &Parms);
        return Parms.ReturnValue;
    }
    DECLARE_CLASS(APlayerReplicationInfo,AReplicationInfo,0|CLASS_NativeReplication,Engine)
    NO_DEFAULT_CONSTRUCTOR(APlayerReplicationInfo)
};
// Class PlayerReplicationInfo exported:
//   Properties size: 308 bytes (1496 total)


//***************************************************************************//
/*	\class AZoneInfo
*/
//***************************************************************************//


struct AZoneInfo_eventActorLeaving_Parms
{
    class AActor* Other;
};

struct AZoneInfo_eventActorEntered_Parms
{
    class AActor* Other;
};
class ENGINE_API AZoneInfo : public AInfo
{
public:
    BITFIELD bKillZone:1 GCC_PACK(4);
    BITFIELD bNeutralZone:1;
    BITFIELD bBombDetectorZone:1;
    BITFIELD bZonePhysicsCollision:1;
    BITFIELD bHasDistanceFog:1;
    BITFIELD bHasGlobalHeightFog:1;
    BITFIELD bAmbientZone:1;
    BITFIELD bHasDOF:1;
    BITFIELD Scene_UseToneMapping:1;
    BITFIELD bSuffocatePawns:1;
    BITFIELD bZoneMusicAllowReverb:1;
    BITFIELD bReverbZone:1;
    BITFIELD bUseExtendedReverb:1;
    FName ZonePlayerEvent GCC_PACK(4);
    FName ZonePlayerExitEvent;
    FStringNoInit ZoneName;
    FName ZoneTag;
    INT MaxCorpses;
    FLOAT DefaultVisibilityRadius;
    FLOAT AmbientLightScale;
    FSDistanceFog DistanceFog;
    FSGlobalHeightFog GlobalHeightFog;
    FLOAT DistanceFogFadeTime;
    dnArray<class UCubemap*> ZoneCubemaps;
    class UCubemap* ZoneSpecularCubemap;
    class UMaterialEx* ZoneOverrideMaterial;
    FSScaleModifier DOFBlurAmount;
    FSScaleModifier DOFFocalDist;
    FSScaleModifier DOFFocalRangeMin;
    FSScaleModifier DOFFocalRangeMax;
    FSSceneInfo Scene;
    FName SkyZoneTag;
    FName GeoWaterTag;
    BYTE ZoneFlotsamEffect;
    FRotator ZoneFlotsamRotation;
    FName SuffocationEnabledTag;
    FName SuffocationDisabledTag;
    FStringNoInit ZoneMusic;
    FLOAT ZoneMusicVolume;
    FLOAT ZoneMusicCrossfadeTime;
    FName ZoneMusicMixerGroup;
    BYTE ReverbPreset;
    FLOAT ReverbTime;
    FLOAT ReverbPreDelay;
    FLOAT ReverbDamping;
    FLOAT ReverbDryLevel;
    FLOAT ReverbWetLevel;
    class ASkyZoneInfo* SkyZone;
    class Alocationid* locationid;
    INT ZonePlayerCount;
    class AGeoWater* GeoWaterActor;
    dnArray<class ACorpse*> Corpses;
    DECLARE_FUNCTION(execZoneActors);
    inline void __fastcall eventActorLeaving(class AActor* Other)
    {
        AZoneInfo_eventActorLeaving_Parms Parms;
        if(IsProbing(NAME_ActorLeaving)) {
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_ActorLeaving), &Parms);
        }
    }
    inline void __fastcall eventActorEntered(class AActor* Other)
    {
        AZoneInfo_eventActorEntered_Parms Parms;
        if(IsProbing(NAME_ActorEntered)) {
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_ActorEntered), &Parms);
        }
    }
    DECLARE_CLASS(AZoneInfo,AInfo,0|CLASS_NativeReplication,Engine)
    NO_DEFAULT_CONSTRUCTOR_START(AZoneInfo)
    NO_DEFAULT_CONSTRUCTOR_INIT(ZoneCubemaps)
    NO_DEFAULT_CONSTRUCTOR_INITLAST(Corpses)
};
// Class ZoneInfo exported:
//   Properties size: 548 bytes (1736 total)


//***************************************************************************//
/*	\class AWarpZoneInfo
*/
//***************************************************************************//

class ENGINE_API AWarpZoneInfo : public AZoneInfo
{
public:
    FStringNoInit OtherSideURL;
    FName ThisTag;
    BITFIELD bNoTeleFrag:1 GCC_PACK(4);
    INT iWarpZone GCC_PACK(4);
    FCoords WarpCoords;
    class AWarpZoneInfo* OtherSideActor;
    class UObject* OtherSideLevel;
    FStringNoInit Destinations[8];
    INT numDestinations;
    DECLARE_FUNCTION(execUnWarp);
    DECLARE_FUNCTION(execWarp);
    inline void __fastcall eventForceGenerate()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_ForceGenerate), NULL);
    }
    inline void __fastcall eventGenerate()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_Generate), NULL);
    }
    DECLARE_CLASS(AWarpZoneInfo,AZoneInfo,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AWarpZoneInfo)
};
// Class WarpZoneInfo exported:
//   Properties size: 180 bytes (1916 total)


//***************************************************************************//
/*	\class ASkyZoneInfo
*/
//***************************************************************************//

class ENGINE_API ASkyZoneInfo : public AZoneInfo
{
public:
    FLOAT UnlitHDRScale;
    DECLARE_CLASS(ASkyZoneInfo,AZoneInfo,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ASkyZoneInfo)
};
// Class SkyZoneInfo exported:
//   Properties size: 4 bytes (1740 total)


//***************************************************************************//
/*	\class ALevelInfo
*/
//***************************************************************************//


struct ALevelInfo_eventScheduleTraceFireHit_Parms
{
    class ACorpseBase* Corpse;
    class AActor* SourceActor;
    class UClass* TraceDamageType;
    FVector SourceTraceOrigin;
    FVector HitLocation;
    FVector HitNormal;
    FName HitBoneName;
    BITFIELD bExtentTrace;
    INT Delay;
};

struct ALevelInfo_eventAISoundAllowed_Parms
{
    BYTE SoundType;
    BITFIELD ReturnValue;
};

struct ALevelInfo_eventFinishingMoveAllowed_Parms
{
    BITFIELD ReturnValue;
};

struct ALevelInfo_eventDoTick_Parms
{
    FLOAT Delta;
};

struct ALevelInfo_eventServerTravel_Parms
{
    FString URL;
    BITFIELD bItems;
};

struct ALevelInfo_eventAcceptLevelTransitionInfo_Parms
{
    FSLevelTransitionInfo TransitionInfo;
};

struct ALevelInfo_eventGenerateLevelTransitionInfo_Parms
{
    FSLevelTransitionInfo TransitionInfo;
};
class ENGINE_API ALevelInfo : public AZoneInfo
{
public:
    class ULevel* XLevel;
    FLOAT TimeDilation;
    INT LevelTickStamp;
    FLOAT TimeSeconds;
    FLOAT TimeDeltaSeconds;
    FLOAT GameTimeSeconds;
    FLOAT TotalGameTimeSeconds;
    FLOAT SessionSeconds;
    FLOAT TotalTimeSeconds;
    INT Year;
    INT Month;
    INT Day;
    INT DayOfWeek;
    INT Hour;
    INT Minute;
    INT Second;
    INT Millisecond;
    FStringNoInit Title;
    FStringNoInit MapFileName;
    FStringNoInit Author;
    FStringNoInit IdealPlayerCount;
    INT RecommendedEnemies;
    INT RecommendedTeammates;
    FStringNoInit LocationName;
    FStringNoInit LevelEnterText;
    FStringNoInit LocalizedPkg;
    FName DefaultGroupName;
    FStringNoInit Pauser;
    class ULevelSummary* Summary;
    FStringNoInit VisibleGroups;
    FStringNoInit PatchLayerGroup;
    class USmackerTexture* LevelEnterSmacker;
    FLOAT LevelEnterSmackerWarmup;
    BITFIELD bActiveBinkEndCredits:1 GCC_PACK(4);
    BITFIELD bActiveBinkSkippable:1;
    class UBinkTexture* ActiveBink GCC_PACK(4);
    FLOAT ActiveBinkAlpha;
    FLOAT ActiveBinkAlphaFadeRate;
    FName ActiveBinkCompleteEvent;
    class UMaterialEx* FilmGrainMaterial;
    class UMaterialEx* BlackWhiteMaterial;
    class UMaterialEx* MenuBackgroundMaterial;
    BITFIELD InstaGib:1 GCC_PACK(4);
    BITFIELD BlackWhiteRender:1;
    BITFIELD MirroredRender:1;
    FLOAT GameSpeedModifier GCC_PACK(4);
    FLOAT HeadScaleModifier;
    BITFIELD ClassicFreezeRay:1 GCC_PACK(4);
    BITFIELD bLonePlayer:1;
    BITFIELD bBegunPlay:1;
    BITFIELD bPlayersOnly:1;
    BITFIELD bDropDetail:1;
    BITFIELD bAggressiveLOD:1;
    BITFIELD bStartup:1;
    BITFIELD bNoCheating:1;
    BITFIELD bAllowFOV:1;
    BITFIELD bPawnFacialNoise:1;
    BITFIELD bPlayerCanSwim:1;
    INT MaxTexStreamMegs GCC_PACK(4);
    FLOAT ShadowCullDistance;
    FLOAT DirectionalShadowBias;
    FLOAT DirectionalShadowBiasPS3;
    FLOAT DirectionalShadowBias360;
    BITFIELD bAllowStencilShadows:1 GCC_PACK(4);
    dnArray<class AActor*> CheckpointTravelActors GCC_PACK(4);
    FLOAT LevelMaxX;
    FLOAT LevelMaxY;
    FLOAT LevelMaxZ;
    FLOAT LevelMinX;
    FLOAT LevelMinY;
    FLOAT LevelMinZ;
    dnArray<FSLevelInfoAIPathInfo> AdditionalAIPathInfos;
    class ANAVStats* LevelNAVStats;
    dnArray<FSAIPathInfo> WarnNAVSize;
    FSPathPerfInfo PathPerf;
    dnArray<FSAIGateInfo> GlobalAIGates;
    dnArray<class AInteractiveActor*> TKObjects;
    class AActor* PrimaryHoloActor;
    FLOAT BerzerkerGrappleGlobalIntervalMin;
    FLOAT BerzerkerGrappleGate;
    BITFIELD bPausedFromTaskSwitch:1 GCC_PACK(4);
    BITFIELD bPaused:1;
    BITFIELD bScreenshotMode:1;
    FVector ScreenshotModeLocation GCC_PACK(4);
    FRotator ScreenshotModeRotation;
    BITFIELD bPausedThisFrame:1 GCC_PACK(4);
    BITFIELD bErrorCheckActorLocations:1;
    BITFIELD bErrorCheckNetworkInfo:1;
    FLOAT Brightness GCC_PACK(4);
    class UTexture* Screenshot;
    class UTexture* DefaultTexture;
    class UMaterialEx* DefaultMaterial;
    class UStaticMesh* DefaultStaticMesh;
    class UMesh* DefaultMesh;
    INT HubStackLevel;
    INT NodeDecalLimit;
    FLOAT DecalDistanceScale;
    FLOAT AutoDOFMaxFocalDistance;
    dnArray<class AMenuCamera*> MenuCameras;
    dnArray<class AMenuCamera*> UsedMenuCameras;
    FLOAT ExitLevelFadeTime;
    FName PlayerDiedEvent;
    FName FilmGrainOnTag;
    FName FilmGrainOffTag;
    dnArray<class UMaterialExInstance*> MaterialInstances;
    INT EventDatabase;
    FLOAT DisableSkipBinkTimer;
    FStringNoInit ESCText;
    FStringNoInit toSkipText;
    FStringNoInit preToSkipText;
    BYTE LevelAction;
    INT LevelLoadState;
    INT NumSaves;
    INT NumLoads;
    BITFIELD bSameLevelLoad:1 GCC_PACK(4);
    BYTE NetMode GCC_PACK(4);
    FStringNoInit ComputerName;
    FStringNoInit EngineVersion;
    FStringNoInit MinNetVersion;
    FStringNoInit EngineBuildDate;
    FStringNoInit UserName;
    class UClass* DefaultGameType;
    class UClass* OverridePlayerClass;
    class AGameInfo* Game;
    class AGameReplicationInfo* GRI;
    BITFIELD bSavedGame:1 GCC_PACK(4);
    class APawn* PawnList GCC_PACK(4);
    class APlayerPawn* LocalPlayerPawn;
    dnArray<class ADecoration*> EnemyDecorations;
    FStringNoInit NextURL;
    BITFIELD bNextItems:1 GCC_PACK(4);
    FLOAT NextSwitchCountdown GCC_PACK(4);
    FStringNoInit PhysicsEffectsDatabaseClass;
    class UPhysicsEffectsDatabase* PhysicsEffectsDatabase;
    BYTE ProximityDetector;
    BYTE PhysicsQuality;
    FLOAT KStartupPhysicsTime;
    BITFIELD bDoneStartupPhysics:1 GCC_PACK(4);
    BITFIELD bNoKarma:1;
    class AActor* AmbientLightDirActor GCC_PACK(4);
    FLOAT DukeVisionIntensity;
    dnArray<class ARenderActor*> DukeVisionInterferenceActors;
    INT BombDetectorRadius;
    INT ActiveEditorPath;
    INT NumPaths;
    class ANavigationPoint* NavigationPointList;
    dnArray<class UClass*> SpawnBlockClasses;
    dnArray<FSAISoundInfo> AISoundInfo;
    dnArray<FSAITeamDialogInfo> AITeamDialogInfo;
    FLOAT FinishingMoveGate;
    FLOAT FinishingMoveInterval;
    INT MinAITicksPerFrame;
    FLOAT MaxPercentageAITicksPerFrame;
    FLOAT MaxAITickMSecPerFrame;
    INT MaxAITargetVisiblitychecksPerFrame;
    INT MaxAlertSoundsPerFrame;
    FLOAT AISoundGate;
    FLOAT AISoundInterval;
    INT NumAIExecTicksAllowed;
    INT NumAITargetEvalsAllowed;
    INT NumAILookEvalsAllowed;
    INT NumActiveAI;
    INT NumAGotoXEvalPerFrame;
    FLOAT AIEvalGateTime;
    FLOAT AIEvalGateTimeDynamicPathing;
    INT DebugNumActiveAILastFrame;
    INT DebugNumAIExecTicksAllowedLastFrame;
    INT DebugNumAIExecTicksAllowed;
    INT DebugNumAIExecTicksLastFrame;
    INT DebugNumAITargetEvalsLastFrame;
    INT DebugNumAILookEvalsLastFrame;
    FSSoundVolumePrefabEntry VolumePrefabs[9];
    FSSoundVolumePrefabEntry VolumePrefabTable[9];
    FSReverbPreset ReverbPresets[10];
    dnArray<FSAudioMixerAutoDuckRule> MixerAutoDuckRules;
    FLOAT CorpseCleanupPeriod;
    FLOAT CorpseLimbCleanupPeriod;
    FLOAT GibCleanupPeriod;
    FLOAT AmmoCasingCleanupPeriod;
    FLOAT ArmorCleanupPeriod;
    INT MaxCorpses;
    INT MaxCorpseLimbs;
    INT MaxGibs;
    INT MaxAmmoCasings;
    INT MaxPipeBombsAndTripMines;
    INT MaxPipeBombsAndTripMinesMP;
    INT MaxDestructibleArmor;
    dnArray<FDelayedHurtRadius> delayedRadiusDamage;
    dnArray<FDelayedTraceFireDamage> delayedTraceFireHitDamage;
    FLOAT NextCorpseCleanupTime;
    FLOAT NextCorpseLimbCleanupTime;
    FLOAT NextGibCleanupTime;
    FLOAT NextAmmoCasingCleanupTime;
    FLOAT NextArmorCleanupTime;
    dnArray<FSCleanupActorEntry> Corpses;
    dnArray<FSCleanupActorEntry> CorpseLimbs;
    dnArray<FSCleanupActorEntry> Gibs;
    dnArray<FSCleanupActorEntry> AmmoCasings;
    dnArray<FSCleanupActorEntry> PipeBombsAndTripMines;
    dnArray<FSCleanupActorEntry> DestructibleArmor;
    dnArray<FOverridePlayerClassMapping> OverridePlayerTypes;
    DECLARE_FUNCTION(execIsFullScreen);
    DECLARE_FUNCTION(execMirrorModeEnabled);
    DECLARE_FUNCTION(execNoteGameResumed);
    DECLARE_FUNCTION(execNoteGamePaused);
    DECLARE_FUNCTION(execGetLocalPlayerPawn);
    DECLARE_FUNCTION(execCheckAndUpdateAIGate);
    DECLARE_FUNCTION(execUpdateAIGate);
    DECLARE_FUNCTION(execCheckAIGate);
    DECLARE_FUNCTION(execPerformTeamDialog);
    DECLARE_FUNCTION(execPerformStandaloneSimulation);
    DECLARE_FUNCTION(execSetLevelEventFunctionHook);
    DECLARE_FUNCTION(execRegisterLevelEvent);
    DECLARE_FUNCTION(execWarmupPhysics);
    DECLARE_FUNCTION(execGetAddressURL);
    DECLARE_FUNCTION(execGetLocalURL);
    DECLARE_FUNCTION(execXboxShowGamerCard);
    DECLARE_FUNCTION(execXboxEndMatch);
    DECLARE_FUNCTION(execXboxStartMatch);
    DECLARE_FUNCTION(execCheckOverridePlayerClass);
    inline void __fastcall eventScheduleTraceFireHit(class ACorpseBase* Corpse, class AActor* SourceActor, class UClass* TraceDamageType, FVector SourceTraceOrigin, FVector HitLocation, FVector HitNormal, FName HitBoneName, BITFIELD bExtentTrace, INT Delay)
    {
        ALevelInfo_eventScheduleTraceFireHit_Parms Parms;
        Parms.Corpse=Corpse;
        Parms.SourceActor=SourceActor;
        Parms.TraceDamageType=TraceDamageType;
        Parms.SourceTraceOrigin=SourceTraceOrigin;
        Parms.HitLocation=HitLocation;
        Parms.HitNormal=HitNormal;
        Parms.HitBoneName=HitBoneName;
        Parms.bExtentTrace=bExtentTrace;
        Parms.Delay=Delay;
        ProcessEvent(FindFunctionChecked(ENGINE_ScheduleTraceFireHit), &Parms);
    }
    inline void __fastcall eventCalcMaxAITicksPerFrame()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_CalcMaxAITicksPerFrame), NULL);
    }
    inline BITFIELD __fastcall eventAISoundAllowed(BYTE SoundType)
    {
        ALevelInfo_eventAISoundAllowed_Parms Parms;
        Parms.ReturnValue=0;
        Parms.SoundType=SoundType;
        ProcessEvent(FindFunctionChecked(ENGINE_AISoundAllowed), &Parms);
        return Parms.ReturnValue;
    }
    inline void __fastcall eventNotifyFinishingMove()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_NotifyFinishingMove), NULL);
    }
    inline BITFIELD __fastcall eventFinishingMoveAllowed()
    {
        ALevelInfo_eventFinishingMoveAllowed_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_FinishingMoveAllowed), &Parms);
        return Parms.ReturnValue;
    }
    inline void __fastcall eventDoTick(FLOAT Delta)
    {
        ALevelInfo_eventDoTick_Parms Parms;
        Parms.Delta=Delta;
        ProcessEvent(FindFunctionChecked(ENGINE_DoTick), &Parms);
    }
    inline void __fastcall eventFinishedLoading()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_FinishedLoading), NULL);
    }
    inline void __fastcall eventServerTravel(const FString& URL, BITFIELD bItems)
    {
        ALevelInfo_eventServerTravel_Parms Parms;
        Parms.URL=URL;
        Parms.bItems=bItems;
        ProcessEvent(FindFunctionChecked(ENGINE_ServerTravel), &Parms);
    }
    inline void __fastcall eventServerNextMap()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_ServerNextMap), NULL);
    }
    inline void __fastcall eventAcceptLevelTransitionInfo(FSLevelTransitionInfo TransitionInfo)
    {
        ALevelInfo_eventAcceptLevelTransitionInfo_Parms Parms;
        Parms.TransitionInfo=TransitionInfo;
        ProcessEvent(FindFunctionChecked(ENGINE_AcceptLevelTransitionInfo), &Parms);
    }
    inline void __fastcall eventGenerateLevelTransitionInfo(FSLevelTransitionInfo& TransitionInfo)
    {
        ALevelInfo_eventGenerateLevelTransitionInfo_Parms Parms;
        Parms.TransitionInfo=TransitionInfo;
        ProcessEvent(FindFunctionChecked(ENGINE_GenerateLevelTransitionInfo), &Parms);
        TransitionInfo=Parms.TransitionInfo;
    }
    DECLARE_CLASS(ALevelInfo,AZoneInfo,0|CLASS_Config,Engine)

    // properties that must be constructed special for ALevelInfo:
    //       * CheckpointTravelActors
    //       * AdditionalAIPathInfos
    //       * WarnNAVSize
    //       * GlobalAIGates
    //       * TKObjects
    //       * MenuCameras
    //       * UsedMenuCameras
    //       * MaterialInstances
    //       * EnemyDecorations
    //       * DukeVisionInterferenceActors
    //       * SpawnBlockClasses
    //       * AISoundInfo
    //       * AITeamDialogInfo
    //       * MixerAutoDuckRules
    //       * delayedRadiusDamage
    //       * delayedTraceFireHitDamage
    //       * Corpses
    //       * CorpseLimbs
    //       * Gibs
    //       * AmmoCasings
    //       * PipeBombsAndTripMines
    //       * DestructibleArmor
    //       * OverridePlayerTypes

};
// Class LevelInfo exported:
//   Properties size: 1436 bytes (3172 total)


//***************************************************************************//
/*	\class AGameInfo
*/
//***************************************************************************//


struct AGameInfo_eventGetOverridePlayerClass_Parms
{
    INT InTeam;
    class UClass* ReturnValue;
};

struct AGameInfo_eventLoginNewClass_Parms
{
    class APlayerPawn* OldPlayer;
    class UClass* SpawnClass;
    FString Error;
    class APlayerPawn* ReturnValue;
};

struct AGameInfo_eventNativeEndGame_Parms
{
    FString Reason;
};

struct AGameInfo_eventAcceptInventory_Parms
{
    class APawn* Other;
};

struct AGameInfo_eventPostLogin_Parms
{
    class APlayerPawn* NewPlayer;
};

struct AGameInfo_eventLogin_Parms
{
    FString Portal;
    FString Options;
    FString Error;
    class UClass* SpawnClass;
    class APlayerPawn* ReturnValue;
};

struct AGameInfo_eventPreLogin_Parms
{
    FString Options;
    FString address;
    FString Error;
    FString FailCode;
};

struct AGameInfo_eventGetBeaconText_Parms
{
    FString ReturnValue;
};

struct AGameInfo_eventInitGame_Parms
{
    FString Options;
    FString Error;
};

struct AGameInfo_eventSetDifficulty_Parms
{
    FString Options;
};
class ENGINE_API AGameInfo : public AInfo
{
public:
    INT MaxPlayers;
    INT NumPlayers;
    INT NumVotingPlayers;
    INT CurrentID;
    BYTE Difficulty;
    BITFIELD bMuteSpectators:1 GCC_PACK(4);
    BITFIELD bRestartLevel:1;
    BITFIELD bPauseable:1;
    BITFIELD bWeaponsStay:1;
    BITFIELD bLowGore:1;
    BITFIELD bCanChangeSkin:1;
    BITFIELD bTeamGame:1;
    BITFIELD bScoreTeamKills:1;
    BITFIELD bShowScoresAfterDeath:1;
    BITFIELD bShowScoresAfterGame:1;
    BITFIELD bShowScoresAfterRound:1;
    BITFIELD bNoCheating:1;
    BITFIELD bAllowFOV:1;
    BITFIELD bDeathMatch:1;
    BITFIELD bGameEnded:1;
    BITFIELD bRoundEnded:1;
    BITFIELD bCanViewOthers:1;
    BITFIELD bPlayDeathSequence:1;
    BITFIELD bPlayStartLevelSequence:1;
    BITFIELD bRespawnMarkers:1;
    BITFIELD bMeshAccurateHits:1;
    FLOAT AutoAim GCC_PACK(4);
    FLOAT GameSpeed;
    FLOAT StartTime;
    FLOAT PlayerRespawnDelay;
    FLOAT SuicideRespawnPenalty;
    class UClass* DefaultPlayerClass;
    dnArray<class UClass*> DefaultInventory;
    INT MaxSpectators;
    INT NumSpectators;
    INT NumBots;
    class UClass* ScoreboardType;
    FStringNoInit RulesMenuType;
    FStringNoInit GameOptionsMenuType;
    FStringNoInit BotMenuType;
    FStringNoInit MapMenuType;
    FStringNoInit MutatorMenuType;
    FStringNoInit ServerMenuType;
    FStringNoInit RespawnMarkerType;
    FStringNoInit RulesVoteType;
    class UClass* HUDType;
    class UClass* MapListType;
    FStringNoInit MapPrefix;
    FStringNoInit BeaconName;
    INT SentText;
    FStringNoInit DefaultPlayerName;
    FStringNoInit LeftMessage;
    FStringNoInit IdleMessage;
    FStringNoInit FailedSpawnMessage;
    FStringNoInit FailedPlaceMessage;
    FStringNoInit FailedTeamMessage;
    FStringNoInit NameChangedMessage;
    FStringNoInit EnteredMessage;
    FStringNoInit EnteredSpectatorMessage;
    FStringNoInit GameName;
    FStringNoInit ShortGameName;
    FStringNoInit MaxedOutMessage;
    FStringNoInit WrongPassword;
    FStringNoInit NeedPassword;
    FStringNoInit IPBanned;
    FStringNoInit IPPolicies[50];
    FStringNoInit ServerLogName;
    class UClass* DeathMessageClass;
    class UClass* DMMessageClass;
    class UClass* MutatorClass;
    class AMutator* BaseMutator;
    BITFIELD bStartMatch:1 GCC_PACK(4);
    FStringNoInit AdminPassword GCC_PACK(4);
    FStringNoInit GamePassword;
    BITFIELD bCanChangeClass:1 GCC_PACK(4);
    BITFIELD bSearchBodies:1;
    BITFIELD bLeaveWeaponOnCorpse:1;
    BITFIELD bOverridePlayerClass:1;
    BITFIELD bOverridePlayerMesh:1;
    BITFIELD bAutoDuckJump:1;
    BITFIELD bValidateSkins:1;
    BITFIELD bValidateMesh:1;
    BITFIELD bDeadTalkAsSpectator:1;
    BITFIELD bDoHitSounds:1;
    FLOAT DestroyCorpseTime GCC_PACK(4);
    BITFIELD bAllowVoting:1 GCC_PACK(4);
    FStringNoInit VoteCmd GCC_PACK(4);
    FStringNoInit VoteArgs[4];
    FLOAT VoteTime;
    FLOAT VoteTimeSeconds;
    FStringNoInit MaxVoteMessage;
    FStringNoInit VoteInProgressMessage;
    FStringNoInit VoteNotAllowedMessage;
    class UClass* GameReplicationInfoClass;
    class AGameReplicationInfo* GameReplicationInfo;
    class UClass* OverridePlayerClass;
    class APlayerStart* SinglePlayerStart;
    FName ForcedPlayerTag;
    class AMultiplayerInfo* MPInfo;
    DECLARE_FUNCTION(execParseKillMessage);
    DECLARE_FUNCTION(execGameAllowPickup);
    DECLARE_FUNCTION(execGiveInventoryTo);
    DECLARE_FUNCTION(execAddFakeNetBot);
    DECLARE_FUNCTION(execGetNetworkNumber);
    DECLARE_FUNCTION(execDecodeString);
    DECLARE_FUNCTION(execEncodeString);
    DECLARE_FUNCTION(execUpdateURL);
    inline void __fastcall eventStartMatch()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_StartMatch), NULL);
    }
    inline class UClass* __fastcall eventGetOverridePlayerClass(INT InTeam)
    {
        AGameInfo_eventGetOverridePlayerClass_Parms Parms;
        Parms.ReturnValue=0;
        Parms.InTeam=InTeam;
        ProcessEvent(FindFunctionChecked(ENGINE_GetOverridePlayerClass), &Parms);
        return Parms.ReturnValue;
    }
    inline class APlayerPawn* __fastcall eventLoginNewClass(class APlayerPawn* OldPlayer, class UClass* SpawnClass, FString& Error)
    {
        AGameInfo_eventLoginNewClass_Parms Parms;
        Parms.ReturnValue=0;
        Parms.OldPlayer=OldPlayer;
        Parms.SpawnClass=SpawnClass;
        Parms.Error=Error;
        ProcessEvent(FindFunctionChecked(ENGINE_LoginNewClass), &Parms);
        Error=Parms.Error;
        return Parms.ReturnValue;
    }
    inline void __fastcall eventNativeEndGame(const FString& Reason)
    {
        AGameInfo_eventNativeEndGame_Parms Parms;
        Parms.Reason=Reason;
        ProcessEvent(FindFunctionChecked(ENGINE_NativeEndGame), &Parms);
    }
    inline void __fastcall eventAcceptInventory(class APawn* Other)
    {
        AGameInfo_eventAcceptInventory_Parms Parms;
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_AcceptInventory), &Parms);
    }
    inline void __fastcall eventPostLogin(class APlayerPawn* NewPlayer)
    {
        AGameInfo_eventPostLogin_Parms Parms;
        Parms.NewPlayer=NewPlayer;
        ProcessEvent(FindFunctionChecked(ENGINE_PostLogin), &Parms);
    }
    inline class APlayerPawn* __fastcall eventLogin(const FString& Portal, const FString& Options, FString& Error, class UClass* SpawnClass)
    {
        AGameInfo_eventLogin_Parms Parms;
        Parms.ReturnValue=0;
        Parms.Portal=Portal;
        Parms.Options=Options;
        Parms.Error=Error;
        Parms.SpawnClass=SpawnClass;
        ProcessEvent(FindFunctionChecked(ENGINE_Login), &Parms);
        Error=Parms.Error;
        return Parms.ReturnValue;
    }
    inline void __fastcall eventPreLogin(const FString& Options, const FString& address, FString& Error, FString& FailCode)
    {
        AGameInfo_eventPreLogin_Parms Parms;
        Parms.Options=Options;
        Parms.address=address;
        Parms.Error=Error;
        Parms.FailCode=FailCode;
        ProcessEvent(FindFunctionChecked(ENGINE_PreLogin), &Parms);
        Error=Parms.Error;
        FailCode=Parms.FailCode;
    }
    inline FString __fastcall eventGetBeaconText()
    {
        AGameInfo_eventGetBeaconText_Parms Parms;
        ProcessEvent(FindFunctionChecked(ENGINE_GetBeaconText), &Parms);
        return Parms.ReturnValue;
    }
    inline void __fastcall eventInitGame(const FString& Options, FString& Error)
    {
        AGameInfo_eventInitGame_Parms Parms;
        Parms.Options=Options;
        Parms.Error=Error;
        ProcessEvent(FindFunctionChecked(ENGINE_InitGame), &Parms);
        Error=Parms.Error;
    }
    inline void __fastcall eventSetDifficulty(const FString& Options)
    {
        AGameInfo_eventSetDifficulty_Parms Parms;
        Parms.Options=Options;
        ProcessEvent(FindFunctionChecked(ENGINE_SetDifficulty), &Parms);
    }
    DECLARE_CLASS(AGameInfo,AInfo,0|CLASS_Config,Engine)

    // properties that must be constructed special for AGameInfo:
    //       * DefaultInventory

};
// Class GameInfo exported:
//   Properties size: 1184 bytes (2372 total)


//***************************************************************************//
/*	\class AGameModule
*/
//***************************************************************************//


struct AGameModule_eventNotifyButtonPadChange_Parms
{
    BYTE Button;
    BYTE NewState;
};

struct AGameModule_eventNotifyDirectionalPadChange_Parms
{
    BYTE Dir;
    BYTE NewState;
};
class ENGINE_API AGameModule : public AInfo
{
public:
    BYTE DirectionalPadStates[4];
    BYTE ButtonPadStates[4];
    class UClass* PersistantDataClass;
    class AGameModulePersistantData* PersistantData;
    FName ButtonAMnemonic;
    FName ButtonBMnemonic;
    FName ButtonXMnemonic;
    FName ButtonYMnemonic;
    inline void __fastcall eventPadReleased_Y()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_PadReleased_Y), NULL);
    }
    inline void __fastcall eventPadReleased_X()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_PadReleased_X), NULL);
    }
    inline void __fastcall eventPadReleased_B()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_PadReleased_B), NULL);
    }
    inline void __fastcall eventPadReleased_A()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_PadReleased_A), NULL);
    }
    inline void __fastcall eventPadPressed_Y()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_PadPressed_Y), NULL);
    }
    inline void __fastcall eventPadPressed_X()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_PadPressed_X), NULL);
    }
    inline void __fastcall eventPadPressed_B()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_PadPressed_B), NULL);
    }
    inline void __fastcall eventPadPressed_A()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_PadPressed_A), NULL);
    }
    inline void __fastcall eventPadReleased_Right()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_PadReleased_Right), NULL);
    }
    inline void __fastcall eventPadReleased_Left()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_PadReleased_Left), NULL);
    }
    inline void __fastcall eventPadReleased_Down()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_PadReleased_Down), NULL);
    }
    inline void __fastcall eventPadReleased_Up()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_PadReleased_Up), NULL);
    }
    inline void __fastcall eventPadPressed_Right()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_PadPressed_Right), NULL);
    }
    inline void __fastcall eventPadPressed_Left()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_PadPressed_Left), NULL);
    }
    inline void __fastcall eventPadPressed_Down()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_PadPressed_Down), NULL);
    }
    inline void __fastcall eventPadPressed_Up()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_PadPressed_Up), NULL);
    }
    inline void __fastcall eventNotifyButtonPadChange(BYTE Button, BYTE NewState)
    {
        AGameModule_eventNotifyButtonPadChange_Parms Parms;
        Parms.Button=Button;
        Parms.NewState=NewState;
        ProcessEvent(FindFunctionChecked(ENGINE_NotifyButtonPadChange), &Parms);
    }
    inline void __fastcall eventNotifyDirectionalPadChange(BYTE Dir, BYTE NewState)
    {
        AGameModule_eventNotifyDirectionalPadChange_Parms Parms;
        Parms.Dir=Dir;
        Parms.NewState=NewState;
        ProcessEvent(FindFunctionChecked(ENGINE_NotifyDirectionalPadChange), &Parms);
    }
    DECLARE_CLASS(AGameModule,AInfo,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AGameModule)
};
// Class GameModule exported:
//   Properties size: 32 bytes (1220 total)


//***************************************************************************//
/*	\class AHUDItem
*/
//***************************************************************************//

class ENGINE_API AHUDItem : public AInfo
{
public:
    DECLARE_CLASS(AHUDItem,AInfo,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AHUDItem)
};
// Class HUDItem exported:
//   Properties size: 0 bytes (1188 total)


//***************************************************************************//
/*	\class AChallengeInfo
*/
//***************************************************************************//


struct AChallengeInfo_eventCodeUnlockedPreorderGroup_Parms
{
    BYTE in_POG;
    FString out_Title;
    FString out_Description;
};
class ENGINE_API AChallengeInfo : public AInfo
{
public:
    dnArray<FChallengeInfoStruct> ChallengesArray;
    INT NoDLCChallengeArraySize;
    INT PlainShirtId;
    INT NoHadId;
    INT DefaultGlassesId;
    INT WhiteColourId;
    INT NoTitleID;
    INT EndofDefaultUnlocks;
    BITFIELD bInit:1 GCC_PACK(4);
    dnArray<FPreorderGroupStruct> PreorderGroups GCC_PACK(4);
    INT DeveloperGroupIdx;
    dnArray<FTitleValues> PlayerTitles;
    dnArray<FLevelingStatXPValues> LevelingInfo;
    dnArray<INT> XPToLevel;
    DECLARE_FUNCTION(execUnlockPreorderGroup);
    DECLARE_FUNCTION(execUnlockPreorderBonuses);
    DECLARE_FUNCTION(execUnlockPreorderGroupIncludesDBP);
    DECLARE_FUNCTION(execTryBonusCode);
    DECLARE_FUNCTION(execIsEnterBonusCodeMenuItemEnabled);
    DECLARE_FUNCTION(execGetChallengeIdxFromID);
    DECLARE_FUNCTION(execStaticInit);
    inline void __fastcall eventCodeUnlockedPreorderGroup(BYTE in_POG, FString& out_Title, FString& out_Description)
    {
        AChallengeInfo_eventCodeUnlockedPreorderGroup_Parms Parms;
        Parms.in_POG=in_POG;
        Parms.out_Title=out_Title;
        Parms.out_Description=out_Description;
        ProcessEvent(FindFunctionChecked(ENGINE_CodeUnlockedPreorderGroup), &Parms);
        out_Title=Parms.out_Title;
        out_Description=Parms.out_Description;
    }
    DECLARE_CLASS(AChallengeInfo,AInfo,0|CLASS_Config,Engine)

    // properties that must be constructed special for AChallengeInfo:
    //       * ChallengesArray
    //       * PreorderGroups
    //       * PlayerTitles
    //       * LevelingInfo
    //       * XPToLevel

};
// Class ChallengeInfo exported:
//   Properties size: 96 bytes (1284 total)


//***************************************************************************//
/*	\class AMenuCamera
*/
//***************************************************************************//

class ENGINE_API AMenuCamera : public AInfoActor
{
public:
    FLOAT DOF_BlurAmount;
    FLOAT DOF_FocalDist;
    FLOAT DOF_FocalRangeMin;
    FLOAT DOF_FocalRangeMax;
    FLOAT FovAngle;
    DECLARE_CLASS(AMenuCamera,AInfoActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AMenuCamera)
};
// Class MenuCamera exported:
//   Properties size: 20 bytes (1208 total)


//***************************************************************************//
/*	\class ATriggers
*/
//***************************************************************************//

class ENGINE_API ATriggers : public AInfoActor
{
public:
    DECLARE_CLASS(ATriggers,AInfoActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ATriggers)
};
// Class Triggers exported:
//   Properties size: 0 bytes (1188 total)


//***************************************************************************//
/*	\class ATriggerHint
*/
//***************************************************************************//

class ENGINE_API ATriggerHint : public ATriggers
{
public:
    FStringNoInit Message;
    FLOAT MaxDisplayTime;
    class UClass* InventoryClass;
    dnArray<BYTE> SpecialKeys;
    dnArray<INT> SpecialKeysPressed;
    FName ForceHintOnEvent;
    FName ForceHintOffEvent;
    FName HintCompleteEvent;
    FLOAT TimeLeft;
    DECLARE_FUNCTION(execTickHint);
    DECLARE_CLASS(ATriggerHint,ATriggers,0,Engine)

    // properties that must be constructed special for ATriggerHint:
    //       * SpecialKeys
    //       * SpecialKeysPressed

};
// Class TriggerHint exported:
//   Properties size: 60 bytes (1248 total)


//***************************************************************************//
/*	\class ABranchingTrigger
*/
//***************************************************************************//

class ENGINE_API ABranchingTrigger : public ATriggers
{
public:
    FName FailedEvent;
    DECLARE_CLASS(ABranchingTrigger,ATriggers,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ABranchingTrigger)
};
// Class BranchingTrigger exported:
//   Properties size: 4 bytes (1192 total)


//***************************************************************************//
/*	\class ADispatcher
*/
//***************************************************************************//

class ENGINE_API ADispatcher : public ATriggers
{
public:
    dnArray<FName> OutEvents;
    dnArray<FLOAT> OutDelays;
    FName ResetTag;
    BITFIELD bLoop:1 GCC_PACK(4);
    BITFIELD bInterruptable:1;
    BITFIELD bTriggerOnlyOnce:1;
    INT Index GCC_PACK(4);
    BITFIELD bDispatching:1 GCC_PACK(4);
    BITFIELD bPreparing:1;
    BITFIELD bTriggeredOnce:1;
    BYTE DefaultTickStyle GCC_PACK(4);
    BITFIELD bPauseDispatch:1 GCC_PACK(4);
    FName PauseDispatchingTag GCC_PACK(4);
    FName UnPauseDispatchingTag;
    DECLARE_CLASS(ADispatcher,ATriggers,0,Engine)

    // properties that must be constructed special for ADispatcher:
    //       * OutEvents
    //       * OutDelays

};
// Class Dispatcher exported:
//   Properties size: 56 bytes (1244 total)


//***************************************************************************//
/*	\class ATrigger
*/
//***************************************************************************//

class ENGINE_API ATrigger : public ATriggers
{
public:
    BITFIELD bForceInstigator:1 GCC_PACK(4);
    BITFIELD bDebug:1;
    class APawn* DukeInstigator GCC_PACK(4);
    BYTE TriggerType;
    BYTE TriggerShrunkType;
    FName LookUseTags[16];
    FName LookUseEvents[16];
    FName EnableTag;
    FName DisableTag;
    class AActor* LookUseTriggered[16];
    FStringNoInit Message;
    BITFIELD bTriggerOnceOnly:1 GCC_PACK(4);
    BITFIELD bUnTriggerOnceOnly:1;
    BITFIELD bTriggered:1;
    BITFIELD bUnTriggered:1;
    BITFIELD bInitiallyActive:1;
    class UClass* ClassProximityType GCC_PACK(4);
    class UClass* ClassProximityType2;
    FName TagEventProximity;
    FLOAT RepeatTriggerTime;
    FLOAT ReTriggerDelay;
    FLOAT ReUnTriggerDelay;
    FLOAT AllowTriggerTime;
    FLOAT AllowUnTriggerTime;
    FLOAT DamageThreshold;
    FName UntriggerEvent;
    BITFIELD bTriggerWhenCrouched:1 GCC_PACK(4);
    class UClass* TriggerWhenClassCarried GCC_PACK(4);
    BITFIELD DestroyCarriedActor:1 GCC_PACK(4);
    class AActor* TriggerActor GCC_PACK(4);
    class AActor* TriggerActor2;
    BITFIELD PlayerTriggered:1 GCC_PACK(4);
    BITFIELD ValidTouch:1;
    INT Touches GCC_PACK(4);
    DECLARE_CLASS(ATrigger,ATriggers,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ATrigger)
};
// Class Trigger exported:
//   Properties size: 296 bytes (1484 total)


//***************************************************************************//
/*	\class AControlRemapperEx
*/
//***************************************************************************//

class ENGINE_API AControlRemapperEx : public AInfoActor
{
public:
    BYTE CoreType;
    FSControlAction Actions[12];
    BYTE DisabledTickStyle;
    dnArray<FSAlternateActorMapping> MotionMappings;
    dnArray<FSControlRemapperInternalEvent> EventEvents;
    dnArray<BYTE> DisabledKeyTypes;
    dnArray<class AActor*> InputForwardActors;
    dnArray<class AActor*> NotificationActors;
    BITFIELD bDisableCrosshairHUD:1 GCC_PACK(4);
    BITFIELD bCanModifyExitRotation:1;
    class AActor* PlayerMountForceActor GCC_PACK(4);
    FName PlayerMountParentTag;
    FSMountPrefab PlayerLockPrefab;
    FLOAT InterpolationCurrentTime;
    class AActor* InterpForceActor;
    FVector InterpLocation;
    FRotator InterpRotation;
    FRotator InterpViewRotation;
    class AActor* InterpRelevantActor;
    FName InterpolationRelevantActorTag;
    FSControlMapperInterpolationInfo InterpolationInInfo;
    FSControlMapperInterpolationInfo InterpolationOutAlphaInfo;
    FSControlMapperInterpolationInfo InterpolationOutBetaInfo;
    BYTE CurrentRemapperState;
    class APlayerPawn* CurrentPlayer;
    class APawn* CurrentPawn;
    BYTE CurrentPawnPhysics;
    BITFIELD bFreeRoamLowerWeapon:1 GCC_PACK(4);
    BITFIELD bUseHomePose:1;
    BITFIELD bAttachReady_WeaponDown:1;
    BITFIELD bCanOffsetView:1;
    FRotator ViewOffset GCC_PACK(4);
    FRotator MinViewOffset;
    FRotator MaxViewOffset;
    inline void __fastcall eventFinalizeState()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_FinalizeState), NULL);
    }
    DECLARE_CLASS(AControlRemapperEx,AInfoActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR_START(AControlRemapperEx)
    NO_DEFAULT_CONSTRUCTOR_INIT(MotionMappings)
    NO_DEFAULT_CONSTRUCTOR_INIT(EventEvents)
    NO_DEFAULT_CONSTRUCTOR_INIT(DisabledKeyTypes)
    NO_DEFAULT_CONSTRUCTOR_INIT(InputForwardActors)
    NO_DEFAULT_CONSTRUCTOR_INITLAST(NotificationActors)
};
// Class ControlRemapperEx exported:
//   Properties size: 544 bytes (1732 total)


//***************************************************************************//
/*	\class ANavigationPoint
*/
//***************************************************************************//

class ENGINE_API ANavigationPoint : public AInfoActor
{
public:
    DECLARE_CLASS(ANavigationPoint,AInfoActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ANavigationPoint)
};
// Class NavigationPoint exported:
//   Properties size: 0 bytes (1188 total)


//***************************************************************************//
/*	\class APlayerStart
*/
//***************************************************************************//


struct APlayerStart_eventGetSpawnLocationWithOverride_Parms
{
    FVector ReturnValue;
};

struct APlayerStart_eventGetSpawnLocation_Parms
{
    FVector ReturnValue;
};
class ENGINE_API APlayerStart : public ANavigationPoint
{
public:
    BYTE TeamNumber;
    BITFIELD bSinglePlayerStart:1 GCC_PACK(4);
    BITFIELD bEnabled:1;
    BITFIELD bCaptureTheFlag:1;
    BITFIELD bKingOfTheHill:1;
    BITFIELD bDeathMatch:1;
    BITFIELD bTeamDeathMatch:1;
    BITFIELD bInitial:1;
    BITFIELD bSpawnShrunk:1;
    FVector PositionalOverride GCC_PACK(4);
    inline FVector __fastcall eventGetSpawnLocationWithOverride()
    {
        APlayerStart_eventGetSpawnLocationWithOverride_Parms Parms;
        Parms.ReturnValue.Init();
        ProcessEvent(FindFunctionChecked(ENGINE_GetSpawnLocationWithOverride), &Parms);
        return Parms.ReturnValue;
    }
    inline FVector __fastcall eventGetSpawnLocation()
    {
        APlayerStart_eventGetSpawnLocation_Parms Parms;
        Parms.ReturnValue.Init();
        ProcessEvent(FindFunctionChecked(ENGINE_GetSpawnLocation), &Parms);
        return Parms.ReturnValue;
    }
    DECLARE_CLASS(APlayerStart,ANavigationPoint,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(APlayerStart)
};
// Class PlayerStart exported:
//   Properties size: 20 bytes (1208 total)


//***************************************************************************//
/*	\class ATeleporter
*/
//***************************************************************************//

class ENGINE_API ATeleporter : public ANavigationPoint
{
public:
    FStringNoInit URL;
    BITFIELD bChangesVelocity:1 GCC_PACK(4);
    BITFIELD bChangesYaw:1;
    BITFIELD bReversesX:1;
    BITFIELD bReversesY:1;
    BITFIELD bReversesZ:1;
    BITFIELD bEnabled:1;
    BITFIELD MusicChange:1;
    BITFIELD SmoothTransition:1;
    BITFIELD bTeleportRadiusActors:1;
    FStringNoInit MusicFilename GCC_PACK(4);
    FLOAT TeleportRadius;
    FVector TargetVelocity;
    BITFIELD bVehicleTransition:1 GCC_PACK(4);
    FName SourceVehicleTag GCC_PACK(4);
    FName DestinationVehicleTag;
    class AActor* TriggerActor;
    class AActor* TriggerActor2;
    FLOAT LastFired;
    DECLARE_CLASS(ATeleporter,ANavigationPoint,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ATeleporter)
};
// Class Teleporter exported:
//   Properties size: 68 bytes (1256 total)


//***************************************************************************//
/*	\class AKeypoint
*/
//***************************************************************************//

class ENGINE_API AKeypoint : public AInfoActor
{
public:
    DECLARE_CLASS(AKeypoint,AInfoActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AKeypoint)
};
// Class Keypoint exported:
//   Properties size: 0 bytes (1188 total)


//***************************************************************************//
/*	\class Alocationid
*/
//***************************************************************************//

class ENGINE_API Alocationid : public AKeypoint
{
public:
    FStringNoInit LocationName;
    FLOAT Radius;
    class Alocationid* NextLocation;
    DECLARE_CLASS(Alocationid,AKeypoint,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(Alocationid)
};
// Class locationid exported:
//   Properties size: 20 bytes (1208 total)


//***************************************************************************//
/*	\class AInterpolationPoint
*/
//***************************************************************************//


struct AInterpolationPoint_eventBuildPath_Parms
{
    INT bWalkTree;
};
class ENGINE_API AInterpolationPoint : public AKeypoint
{
public:
    BITFIELD bSkipNextPath:1 GCC_PACK(4);
    BITFIELD InterpolateRotation:1;
    BITFIELD bTriggerImmediately:1;
    BITFIELD bRebuildPathEachUse:1;
    BITFIELD bDebugPathing:1;
    BITFIELD bUseTangentRotation:1;
    BITFIELD bBlendRateModifier:1;
    BITFIELD bAllowWinding:1;
    BITFIELD bPerformAutoRoll:1;
    BITFIELD bInterpVarianceInUse:1;
    BITFIELD bHasInterpVariance:1;
    FLOAT RateModifier GCC_PACK(4);
    FLOAT GameSpeedModifier;
    FName TriggerEvent;
    FVector LocationVariance;
    FRotator RotationVariance;
    BYTE MotionType;
    BYTE RateType;
    FLOAT RateModifierBlendBegin;
    FLOAT RateModifierBlendEnd;
    FColor PathColor;
    INT AutoRollMaxRoll;
    FLOAT AutoRollRate;
    FName RebuildPathTag;
    INT Tesselations;
    FVector InterpLocation;
    FRotator InterpRotation;
    class AInterpolationPoint* Prev;
    class AInterpolationPoint* Next;
    class AInterpolationPoint* CloneParent;
    FLOAT ArcLength[100];
    DECLARE_FUNCTION(execComputeArcLength);
    inline void __fastcall eventBuildPath(INT bWalkTree)
    {
        AInterpolationPoint_eventBuildPath_Parms Parms;
        Parms.bWalkTree=bWalkTree;
        ProcessEvent(FindFunctionChecked(ENGINE_BuildPath), &Parms);
    }
    DECLARE_CLASS(AInterpolationPoint,AKeypoint,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AInterpolationPoint)
};
// Class InterpolationPoint exported:
//   Properties size: 508 bytes (1696 total)


//***************************************************************************//
/*	\class APolyMarker
*/
//***************************************************************************//

class ENGINE_API APolyMarker : public AKeypoint
{
public:
    DECLARE_CLASS(APolyMarker,AKeypoint,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(APolyMarker)
};
// Class PolyMarker exported:
//   Properties size: 0 bytes (1188 total)


//***************************************************************************//
/*	\class AClipMarker
*/
//***************************************************************************//

class ENGINE_API AClipMarker : public AKeypoint
{
public:
    DECLARE_CLASS(AClipMarker,AKeypoint,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AClipMarker)
};
// Class ClipMarker exported:
//   Properties size: 0 bytes (1188 total)


//***************************************************************************//
/*	\class AIKSystemInfo
*/
//***************************************************************************//

class ENGINE_API AIKSystemInfo : public AInfoActor
{
public:
    dnArray<FSIKEvent> IKEvents;
    DECLARE_CLASS(AIKSystemInfo,AInfoActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR_START(AIKSystemInfo)
    NO_DEFAULT_CONSTRUCTOR_INITLAST(IKEvents)
};
// Class IKSystemInfo exported:
//   Properties size: 12 bytes (1200 total)


//***************************************************************************//
/*	\class AIKSystemInfo_InteractiveDecoration
*/
//***************************************************************************//

class ENGINE_API AIKSystemInfo_InteractiveDecoration : public AIKSystemInfo
{
public:
    dnArray<FSIKHierarchyLink> IKHierarchy;
    FName LimbID;
    DECLARE_CLASS(AIKSystemInfo_InteractiveDecoration,AIKSystemInfo,0,Engine)
    NO_DEFAULT_CONSTRUCTOR_START(AIKSystemInfo_InteractiveDecoration)
    NO_DEFAULT_CONSTRUCTOR_INITLAST(IKHierarchy)
};
// Class IKSystemInfo_InteractiveDecoration exported:
//   Properties size: 16 bytes (1216 total)


//***************************************************************************//
/*	\class AIKSystemInfo_Walker
*/
//***************************************************************************//

class ENGINE_API AIKSystemInfo_Walker : public AIKSystemInfo
{
public:
    FLOAT FootRadius;
    FLOAT FloorHeightOfs;
    FLOAT OverExtendedOfs;
    FLOAT PlantedOfs;
    FLOAT TraceMaxOfs;
    FLOAT TraceMinOfs;
    FLOAT MaxZOffsetABS;
    DECLARE_CLASS(AIKSystemInfo_Walker,AIKSystemInfo,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AIKSystemInfo_Walker)
};
// Class IKSystemInfo_Walker exported:
//   Properties size: 28 bytes (1228 total)


//***************************************************************************//
/*	\class AIKSystemInfo_Inventory
*/
//***************************************************************************//

class ENGINE_API AIKSystemInfo_Inventory : public AIKSystemInfo
{
public:
    dnArray<FSIKHierarchyLink> IKHierarchy;
    FStringNoInit MountBoneName;
    DECLARE_CLASS(AIKSystemInfo_Inventory,AIKSystemInfo,0,Engine)
    NO_DEFAULT_CONSTRUCTOR_START(AIKSystemInfo_Inventory)
    NO_DEFAULT_CONSTRUCTOR_INITLAST(IKHierarchy)
};
// Class IKSystemInfo_Inventory exported:
//   Properties size: 24 bytes (1224 total)


//***************************************************************************//
/*	\class AStickyNote
*/
//***************************************************************************//

class ENGINE_API AStickyNote : public AInfoActor
{
public:
    BITFIELD bSelfDestruct:1 GCC_PACK(4);
    BITFIELD bDisplayNotes:1;
    BITFIELD bDisplayNotesInEditor:1;
    dnArray<FString> Notes GCC_PACK(4);
    BITFIELD bDrawBoundingBox:1 GCC_PACK(4);
    class UMaterialEx* NoteBackground GCC_PACK(4);
    dnArray<FName> Pointers;
    FColor NoteColor;
    FLOAT VisibilityRadius;
    DECLARE_CLASS(AStickyNote,AInfoActor,0,Engine)

    // properties that must be constructed special for AStickyNote:
    //       * Notes
    //       * Pointers

};
// Class StickyNote exported:
//   Properties size: 44 bytes (1232 total)


//***************************************************************************//
/*	\class AParticleEffector
*/
//***************************************************************************//

class ENGINE_API AParticleEffector : public AInfoActor
{
public:
    BYTE m_eEffectorType;
    FLOAT m_fRadius;
    FLOAT m_fAge;
    FLOAT m_fAccelSpeed;
    FVector m_vAccelDir;
    BITFIELD m_bAccelOutwards:1 GCC_PACK(4);
    FVector m_vPlaneDir GCC_PACK(4);
    BITFIELD m_bTwoSided:1 GCC_PACK(4);
    FLOAT m_fElasticity GCC_PACK(4);
    FLOAT m_fLifeTime;
    INT m_pEffector;
    DECLARE_FUNCTION(execCreateEffector);
    DECLARE_FUNCTION(execUpdate);
    DECLARE_FUNCTION(execEffectorDetach);
    DECLARE_FUNCTION(execEffectorAttach);
    DECLARE_CLASS(AParticleEffector,AInfoActor,0,Engine)
};
// Class ParticleEffector exported:
//   Properties size: 60 bytes (1248 total)


//***************************************************************************//
/*	\class AHUDEffects
*/
//***************************************************************************//


struct AHUDEffects_eventExecuteEffect_Parms
{
    FLOAT Scale;
};
class ENGINE_API AHUDEffects : public AInfoActor
{
public:
    inline void __fastcall eventExecuteEffect(FLOAT Scale)
    {
        AHUDEffects_eventExecuteEffect_Parms Parms;
        Parms.Scale=Scale;
        ProcessEvent(FindFunctionChecked(ENGINE_ExecuteEffect), &Parms);
    }
    DECLARE_CLASS(AHUDEffects,AInfoActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AHUDEffects)
};
// Class HUDEffects exported:
//   Properties size: 0 bytes (1188 total)


//***************************************************************************//
/*	\class AHUD
*/
//***************************************************************************//


struct AHUD_eventSetHUDEffectByIndex_Parms
{
    INT Index;
    FSHUDEffect HE;
};

struct AHUD_eventGetHUDEffectByIndex_Parms
{
    INT Index;
    FSHUDEffect out_Effect;
};

struct AHUD_eventFindHUDEffectIndex_Parms
{
    FName EffectName;
    INT LowestIndex;
    INT ReturnValue;
};

struct AHUD_eventGetLongKeyName_Parms
{
    INT SK;
    FString ReturnValue;
};

struct AHUD_eventPreRender_Parms
{
    class UCanvas* Canvas;
};
class ENGINE_API AHUD : public AInfoActor
{
public:
    INT DefaultResX;
    INT DefaultResY;
    BITFIELD bHideCrosshair:1 GCC_PACK(4);
    FStringNoInit HUDConfigWindowType GCC_PACK(4);
    class APlayerPawn* PlayerOwner;
    FLOAT HUDScaleX;
    FLOAT HUDScaleY;
    FLOAT CenterXL;
    FLOAT CenterYL;
    FLOAT CenterScale;
    FLOAT TTFontScale;
    FLOAT DefaultDirectionalCircleRadius;
    class UClass* IconTable;
    INT currentInventoryCategory;
    INT currentInventoryItem;
    FLOAT InventoryGoAwayDelay;
    FLOAT InventoryFadeOutTime;
    BITFIELD bIsDrawingUsePhrase:1 GCC_PACK(4);
    FColor WhiteColor GCC_PACK(4);
    FColor RedColor;
    FColor LightGreenColor;
    FColor DarkGreenColor;
    FColor GreenColor;
    FColor CyanColor;
    FColor UnitColor;
    FColor BlueColor;
    FColor GoldColor;
    FColor PurpleColor;
    FColor TurqColor;
    FColor GrayColor;
    FColor FaceColor;
    FColor LightBlueColor;
    FColor DarkBlueColor;
    FColor BlackColor;
    FColor OrangeColor;
    FColor MainHUDColor;
    FColor DisabledInventoryIconColor;
    FColor ActiveInventoryTextColor;
    INT BroadcastLogLineMax;
    FStringNoInit ShortKeyName[259];
    FStringNoInit LongKeyname[259];
    FLOAT DisplayMessagePreButtonPadding;
    FLOAT DisplayMessagePostButtonPadding;
    FLOAT DisplayMessageGamepadPreButtonPadding;
    FLOAT DisplayMessageGamepadPostButtonPadding;
    FLOAT DisplayMessageButtonYAdjust;
    FLOAT DisplayMessageGamepadButtonYAdjust;
    FLOAT DisplayMessageButtonXL;
    FLOAT DisplayMessageButtonYL;
    FLOAT DisplayMessageGamepadButtonSize;
    FHUDDisplayMessage HUDMessages[11];
    FStringNoInit TouchingWeaponMessage;
    FStringNoInit TouchingWeaponMessage_MP;
    dnArray<FSHUDDebugTreeItem> DebugTreeItems;
    INT DebugTreeIndex;
    INT DebugTreeUseIndex;
    FLOAT DebugTreeBGSizeX;
    FLOAT DebugTreeBGSizeY;
    dnArray<FSScreenFlash> ScreenFlashes;
    dnArray<FHUDScrollingMessage> ScrollingMessages;
    dnArray<FSHUDDirectionalIndicator> DirectionalIndicators;
    class UMaterialEx* HintButtonMaterial;
    class ATriggerHint* ActiveHint;
    class UMaterialEx* XboxButtonIcons[26];
    class UMaterialEx* PS3ButtonIcons[26];
    DECLARE_FUNCTION(execSetKeyInfoState);
    DECLARE_FUNCTION(execDrawTileOnDirectionalCircle);
    DECLARE_FUNCTION(execTickDirectionalIndicators);
    DECLARE_FUNCTION(execAddDirectionalIndicator);
    DECLARE_FUNCTION(execHUDDrawStretchedTextureSegment);
    DECLARE_FUNCTION(execTickScreenFlashes);
    DECLARE_FUNCTION(execRemoveScreenFlash);
    DECLARE_FUNCTION(execAddScreenFlash);
    DECLARE_FUNCTION(execAddHudEffect);
    DECLARE_FUNCTION(execTickDisplayMessages);
    DECLARE_FUNCTION(execGetGamepadButtonImageForShortKeyName);
    DECLARE_FUNCTION(execGetSpecialKeyString);
    DECLARE_FUNCTION(execFindFirstPCBinding);
    DECLARE_FUNCTION(execFindFirstGamepadBinding);
    DECLARE_FUNCTION(execPostRender);
    inline void __fastcall eventActivateHUD()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_ActivateHUD), NULL);
    }
    inline void __fastcall eventSetHUDEffectByIndex(INT Index, FSHUDEffect HE)
    {
        AHUD_eventSetHUDEffectByIndex_Parms Parms;
        Parms.Index=Index;
        Parms.HE=HE;
        ProcessEvent(FindFunctionChecked(ENGINE_SetHUDEffectByIndex), &Parms);
    }
    inline void __fastcall eventGetHUDEffectByIndex(INT Index, FSHUDEffect& out_Effect)
    {
        AHUD_eventGetHUDEffectByIndex_Parms Parms;
        Parms.Index=Index;
        Parms.out_Effect=out_Effect;
        ProcessEvent(FindFunctionChecked(ENGINE_GetHUDEffectByIndex), &Parms);
        out_Effect=Parms.out_Effect;
    }
    inline INT __fastcall eventFindHUDEffectIndex(FName EffectName, INT LowestIndex)
    {
        AHUD_eventFindHUDEffectIndex_Parms Parms;
        Parms.ReturnValue=0;
        Parms.EffectName=EffectName;
        Parms.LowestIndex=LowestIndex;
        ProcessEvent(FindFunctionChecked(ENGINE_FindHUDEffectIndex), &Parms);
        return Parms.ReturnValue;
    }
    inline FString __fastcall eventGetLongKeyName(INT SK)
    {
        AHUD_eventGetLongKeyName_Parms Parms;
        Parms.SK=SK;
        ProcessEvent(FindFunctionChecked(ENGINE_GetLongKeyName), &Parms);
        return Parms.ReturnValue;
    }
    inline void __fastcall eventPreRender(class UCanvas* Canvas)
    {
        AHUD_eventPreRender_Parms Parms;
        Parms.Canvas=Canvas;
        ProcessEvent(FindFunctionChecked(ENGINE_PreRender), &Parms);
    }
    DECLARE_CLASS(AHUD,AInfoActor,0,Engine)

    // properties that must be constructed special for AHUD:
    //       * DebugTreeItems
    //       * ScreenFlashes
    //       * ScrollingMessages
    //       * DirectionalIndicators

};
// Class HUD exported:
//   Properties size: 7644 bytes (8832 total)


//***************************************************************************//
/*	\class AGeoWaterOscillator
*/
//***************************************************************************//

class ENGINE_API AGeoWaterOscillator : public AInfoActor
{
public:
    FLOAT Frequency;
    BYTE Phase;
    FLOAT Strength;
    FLOAT RandomStrength;
    FLOAT Radius;
    BITFIELD bEnabled:1 GCC_PACK(4);
    BITFIELD bPulseOnTrigger:1;
    BITFIELD bForceHeight:1;
    BITFIELD bStationary:1;
    class AGeoWater* Water GCC_PACK(4);
    FLOAT OscTime;
    INT SineSide;
    FLOAT StrengthToUse;
    DECLARE_CLASS(AGeoWaterOscillator,AInfoActor,0,Engine)
};
// Class GeoWaterOscillator exported:
//   Properties size: 40 bytes (1228 total)


//***************************************************************************//
/*	\class AGeoWaterOscillatorRing
*/
//***************************************************************************//

class ENGINE_API AGeoWaterOscillatorRing : public AGeoWaterOscillator
{
public:
    FLOAT RadiusInner;
    FLOAT RadiusOuter;
    FLOAT RadiusPeak;
    FLOAT RadiusPeakOuter;
    FLOAT HeightPeak;
    FLOAT HeightInternal;
    DECLARE_CLASS(AGeoWaterOscillatorRing,AGeoWaterOscillator,0,Engine)
};
// Class GeoWaterOscillatorRing exported:
//   Properties size: 24 bytes (1252 total)


//***************************************************************************//
/*	\class AAIInfo
*/
//***************************************************************************//

class ENGINE_API AAIInfo : public AInfoActor
{
public:
    dnArray<FSAIInfoAction> ActionList;
    DECLARE_CLASS(AAIInfo,AInfoActor,0,Engine)

    // properties that must be constructed special for AAIInfo:
    //       * ActionList

};
// Class AIInfo exported:
//   Properties size: 12 bytes (1200 total)


//***************************************************************************//
/*	\class AActionPoint
*/
//***************************************************************************//


struct AActionPoint_eventGetTeleportToLocation_Parms
{
    class AActor* DestActor;
    FLOAT APOffset;
    FVector ReturnValue;
};

struct AActionPoint_eventUnlockActionPoint_Parms
{
    BITFIELD Immediate;
};

struct AActionPoint_eventLockActionPoint_Parms
{
    class AActor* NewUser;
    BITFIELD ReturnValue;
};

struct AActionPoint_eventCheckLock_Parms
{
    class AActor* NewUser;
    class AActionPoint* CurrentAP;
    BITFIELD ReturnValue;
};
class ENGINE_API AActionPoint : public AInfoActor
{
public:
    dnArray<class UAction*> Actions;
    dnArray<class UAction*> SecondaryActions;
    dnArray<class UClass*> RestrictedClasses;
    dnArray<FName> RestrictedTags;
    INT MinUses;
    INT MaxUses;
    FLOAT LockOutPeriod;
    FName DestroyTag;
    BITFIELD bSafeReload:1 GCC_PACK(4);
    BITFIELD ShrunkActionPoint:1;
    BITFIELD bCheckShrunk:1;
    FLOAT ClearRadius GCC_PACK(4);
    FName ActionPointGroup;
    BITFIELD bCanVault:1 GCC_PACK(4);
    BITFIELD bCanTeleport:1;
    BITFIELD bFlyer:1;
    BITFIELD bJumpPoint:1;
    BYTE CoverType GCC_PACK(4);
    BITFIELD bDrawEditorSelected:1 GCC_PACK(4);
    class AActor* User GCC_PACK(4);
    class AActor* NeighborUser;
    INT NumUses;
    FLOAT LockOutGate;
    class UAction* CurAction;
    INT DeathCount;
    FLOAT DeathTime;
    BITFIELD bLocked:1 GCC_PACK(4);
    FRotator StartingRotation GCC_PACK(4);
    FLOAT ActionGate;
    dnArray<INT> dnNavAreas;
    INT dnNavIndex;
    INT MinAngleToTarget;
    INT MaxAngleToTarget;
    FLOAT MaxJumpDistance;
    BITFIELD bDebugJump:1 GCC_PACK(4);
    dnArray<FSActionPointNeighborInfo> CloseActionPoints GCC_PACK(4);
    dnArray<FSActionPointNeighborInfo> FlankActionPoints;
    dnArray<FSActionPointNeighborInfo> RetreatActionPoints;
    dnArray<FSActionPointNeighborInfo> AdvanceActionPoints;
    dnArray<FSActionPointNeighborInfo> LateralActionPoints;
    dnArray<FSActionPointNeighborInfo> UnknownActionPoints;
    dnArray<FSActionPointNeighborInfo> WalkToActionPoints;
    dnArray<FSActionPointNeighborInfo> FlyToActionPoints;
    dnArray<FSActionPointNeighborInfo> VaultToActionPoints;
    dnArray<FSActionPointNeighborInfo> TeleportActionPoints;
    dnArray<FSActionPointJumpInfo> DefaultJumpToInfo;
    DECLARE_FUNCTION(execIsLockedBy);
    DECLARE_FUNCTION(execIsCompletelyCompromised);
    DECLARE_FUNCTION(execNative_InitActionPoint);
    inline FVector __fastcall eventGetTeleportToLocation(class AActor* DestActor, FLOAT APOffset)
    {
        AActionPoint_eventGetTeleportToLocation_Parms Parms;
        Parms.ReturnValue.Init();
        Parms.DestActor=DestActor;
        Parms.APOffset=APOffset;
        ProcessEvent(FindFunctionChecked(ENGINE_GetTeleportToLocation), &Parms);
        return Parms.ReturnValue;
    }
    inline void __fastcall eventUnlockActionPoint(BITFIELD Immediate)
    {
        AActionPoint_eventUnlockActionPoint_Parms Parms;
        Parms.Immediate=Immediate;
        ProcessEvent(FindFunctionChecked(ENGINE_UnlockActionPoint), &Parms);
    }
    inline BITFIELD __fastcall eventLockActionPoint(class AActor* NewUser)
    {
        AActionPoint_eventLockActionPoint_Parms Parms;
        Parms.ReturnValue=0;
        Parms.NewUser=NewUser;
        ProcessEvent(FindFunctionChecked(ENGINE_LockActionPoint), &Parms);
        return Parms.ReturnValue;
    }
    inline BITFIELD __fastcall eventCheckLock(class AActor* NewUser, class AActionPoint* CurrentAP)
    {
        AActionPoint_eventCheckLock_Parms Parms;
        Parms.ReturnValue=0;
        Parms.NewUser=NewUser;
        Parms.CurrentAP=CurrentAP;
        ProcessEvent(FindFunctionChecked(ENGINE_CheckLock), &Parms);
        return Parms.ReturnValue;
    }
    DECLARE_CLASS(AActionPoint,AInfoActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR_START(AActionPoint)
    NO_DEFAULT_CONSTRUCTOR_INIT(Actions)
    NO_DEFAULT_CONSTRUCTOR_INIT(SecondaryActions)
    NO_DEFAULT_CONSTRUCTOR_INIT(RestrictedClasses)
    NO_DEFAULT_CONSTRUCTOR_INIT(RestrictedTags)
    NO_DEFAULT_CONSTRUCTOR_INIT(dnNavAreas)
    NO_DEFAULT_CONSTRUCTOR_INIT(CloseActionPoints)
    NO_DEFAULT_CONSTRUCTOR_INIT(FlankActionPoints)
    NO_DEFAULT_CONSTRUCTOR_INIT(RetreatActionPoints)
    NO_DEFAULT_CONSTRUCTOR_INIT(AdvanceActionPoints)
    NO_DEFAULT_CONSTRUCTOR_INIT(LateralActionPoints)
    NO_DEFAULT_CONSTRUCTOR_INIT(UnknownActionPoints)
    NO_DEFAULT_CONSTRUCTOR_INIT(WalkToActionPoints)
    NO_DEFAULT_CONSTRUCTOR_INIT(FlyToActionPoints)
    NO_DEFAULT_CONSTRUCTOR_INIT(VaultToActionPoints)
    NO_DEFAULT_CONSTRUCTOR_INIT(TeleportActionPoints)
    NO_DEFAULT_CONSTRUCTOR_INITLAST(DefaultJumpToInfo)
};
// Class ActionPoint exported:
//   Properties size: 300 bytes (1488 total)


//***************************************************************************//
/*	\class Adeleteme
*/
//***************************************************************************//

class ENGINE_API Adeleteme : public AActor
{
public:
    DECLARE_CLASS(Adeleteme,AActor,0,Engine)
};
// Class deleteme exported:
//   Properties size: 0 bytes (1188 total)


//***************************************************************************//
/*	\class AdnVisualizationController
*/
//***************************************************************************//

class ENGINE_API AdnVisualizationController : public AActor
{
public:
    class AActor* StreamSource;
    BITFIELD bSoundSource:1 GCC_PACK(4);
    BYTE SourceSoundSlot GCC_PACK(4);
    dnArray<FSVisEffect> Effects;
    FName EnableTag;
    FName DisableTag;
    FLOAT VisDataScale;
    FStringNoInit ColorTablePath;
    class UColorTable* ColorTable;
    DECLARE_FUNCTION(execSetColorTable);
    DECLARE_CLASS(AdnVisualizationController,AActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR_START(AdnVisualizationController)
    NO_DEFAULT_CONSTRUCTOR_INITLAST(Effects)
};
// Class dnVisualizationController exported:
//   Properties size: 52 bytes (1240 total)


//***************************************************************************//
/*	\class ADoorHingeEx
*/
//***************************************************************************//

class ENGINE_API ADoorHingeEx : public AActor
{
public:
    DECLARE_CLASS(ADoorHingeEx,AActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ADoorHingeEx)
};
// Class DoorHingeEx exported:
//   Properties size: 0 bytes (1188 total)


//***************************************************************************//
/*	\class AAIFaction
*/
//***************************************************************************//

class ENGINE_API AAIFaction : public AActor
{
public:
    DECLARE_CLASS(AAIFaction,AActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AAIFaction)
};
// Class AIFaction exported:
//   Properties size: 0 bytes (1188 total)


//***************************************************************************//
/*	\class ULCDHelper
*/
//***************************************************************************//


struct ULCDHelper_eventHasDiscoveredEgoAward_Parms
{
    INT AwardID;
    BITFIELD ReturnValue;
};
class ENGINE_API ULCDHelper : public UObject
{
public:
    dnArray<FSChapterEntry> Chapters;
    dnArray<FString> SPMapNames;
    FStringNoInit EgoString;
    FStringNoInit DigsUnlockString;
    FStringNoInit ChangeRoomUnlockString;
    FStringNoInit HeadString;
    FStringNoInit FaceString;
    FStringNoInit ShirtString;
    FStringNoInit TitleString;
    FStringNoInit PlayersString;
    FStringNoInit LevelString;
    FStringNoInit ScoreString;
    FStringNoInit PingString;
    FStringNoInit KillsString;
    FStringNoInit DeathsString;
    FStringNoInit KDRatioString;
    FStringNoInit CachedServerName;
    INT CachedLevel;
    INT CachedScore;
    INT CachedPing;
    INT CachedKills;
    INT CachedDeaths;
    INT CachedNumPlayers;
    FLOAT CachedXPPercent;
    INT CachedXPCurrent;
    INT CachedXPNeeded;
    FLOAT NextMPTickUpdate;
    FLOAT MPTickUpdateRateSeconds;
    FStringNoInit PieceOfCakeDifficultyString;
    FStringNoInit LetsRockDifficultyString;
    FStringNoInit ComeGetSomeDifficultyString;
    FStringNoInit DamnImGoodDifficultyString;
    DECLARE_FUNCTION(execChangeRoomSetUnlocks);
    DECLARE_FUNCTION(execDigsSetUnlocks);
    DECLARE_FUNCTION(execMPSetMap);
    DECLARE_FUNCTION(execSPUse4Weapons);
    DECLARE_FUNCTION(execSPClassicFreezeRay);
    DECLARE_FUNCTION(execSPHeadScale);
    DECLARE_FUNCTION(execSPGameSpeed);
    DECLARE_FUNCTION(execSPGrayscaleMode);
    DECLARE_FUNCTION(execSPMirrorMode);
    DECLARE_FUNCTION(execSPSetInstaGib);
    DECLARE_FUNCTION(execSPSetInfiniteAmmo);
    DECLARE_FUNCTION(execSPSetGodMode);
    DECLARE_FUNCTION(execSPSetCheat);
    DECLARE_FUNCTION(execSPSetEgoAwardsForLevel);
    DECLARE_FUNCTION(execSPSetEgo);
    DECLARE_FUNCTION(execSPSetMap);
    DECLARE_FUNCTION(execNotifyLoading);
    DECLARE_FUNCTION(execAddMPMapName);
    inline BITFIELD __fastcall eventHasDiscoveredEgoAward(INT AwardID)
    {
        ULCDHelper_eventHasDiscoveredEgoAward_Parms Parms;
        Parms.ReturnValue=0;
        Parms.AwardID=AwardID;
        ProcessEvent(FindFunctionChecked(ENGINE_HasDiscoveredEgoAward), &Parms);
        return Parms.ReturnValue;
    }
    DECLARE_CLASS(ULCDHelper,UObject,0,Engine)

    // properties that must be constructed special for ULCDHelper:
    //       * Chapters
    //       * SPMapNames

};
// Class LCDHelper exported:
//   Properties size: 296 bytes (336 total)


//***************************************************************************//
/*	\class UGearboxEngineGlobals
*/
//***************************************************************************//

class ENGINE_API UGearboxEngineGlobals : public UObject
{
public:
    FLOAT TimeBetweenAssaultCaptainRockets;
    INT MaxAssaultCaptainRocketsPerFrame;
    FLOAT TimeBetweenExitWounds;
    INT MaxExitWoundsPerFrame;
    INT FrameIndex;
    FLOAT LastAssaultCaptainRocketTime;
    INT AssaultCaptainRocketsThisFrame;
    FLOAT LastExitWoundTime;
    INT ExitWoundsThisFrame;
    dnArray<FDeferredPickupStruct> DeferredPickups;
    dnArray<class AKarmaActor*> DeferredMeqonSynchronizes;
    dnArray<FDeferredGibCallbackStruct> DeferredCallbackGibs;
    dnArray<FDeferredPhysicsStruct> DeferredSetPhysicsActors;
    DECLARE_FUNCTION(execRequestDeferredGibCallback);
    DECLARE_FUNCTION(execRequestDeferredWeaponPickup);
    DECLARE_FUNCTION(execCanDoExitWoundNow);
    DECLARE_FUNCTION(execAssaultCaptainCanFireRealShotNow);
    DECLARE_CLASS(UGearboxEngineGlobals,UObject,0,Engine)

    // properties that must be constructed special for UGearboxEngineGlobals:
    //       * DeferredPickups
    //       * DeferredMeqonSynchronizes
    //       * DeferredCallbackGibs
    //       * DeferredSetPhysicsActors

};
// Class GearboxEngineGlobals exported:
//   Properties size: 84 bytes (124 total)


//***************************************************************************//
/*	\class UPendingLevel
*/
//***************************************************************************//

class ENGINE_API UPendingLevel : public UObject
{
public:
    DECLARE_CLASS(UPendingLevel,UObject,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UPendingLevel)
};
// Class PendingLevel exported:
//   Properties size: 132 bytes (172 total)


//***************************************************************************//
/*	\class UNetPendingLevel
*/
//***************************************************************************//

class ENGINE_API UNetPendingLevel : public UPendingLevel
{
public:
    DECLARE_CLASS(UNetPendingLevel,UPendingLevel,0|CLASS_Transient,Engine)
    NO_DEFAULT_CONSTRUCTOR(UNetPendingLevel)
};
// Class NetPendingLevel exported:
//   Properties size: 0 bytes (172 total)


//***************************************************************************//
/*	\class UAgentPendingLevel
*/
//***************************************************************************//

class ENGINE_API UAgentPendingLevel : public UNetPendingLevel
{
public:
    DECLARE_CLASS(UAgentPendingLevel,UNetPendingLevel,0|CLASS_Transient,Engine)
    NO_DEFAULT_CONSTRUCTOR(UAgentPendingLevel)
};
// Class AgentPendingLevel exported:
//   Properties size: 4 bytes (176 total)


//***************************************************************************//
/*	\class UDemoPlayPendingLevel
*/
//***************************************************************************//

class ENGINE_API UDemoPlayPendingLevel : public UPendingLevel
{
public:
    DECLARE_CLASS(UDemoPlayPendingLevel,UPendingLevel,0|CLASS_Transient,Engine)
    NO_DEFAULT_CONSTRUCTOR(UDemoPlayPendingLevel)
};
// Class DemoPlayPendingLevel exported:
//   Properties size: 0 bytes (172 total)


//***************************************************************************//
/*	\class UNetConnection
*/
//***************************************************************************//

class ENGINE_API UNetConnection : public UPlayer
{
public:
    DECLARE_CLASS(UNetConnection,UPlayer,0|CLASS_Transient|CLASS_Config,Engine)
    NO_DEFAULT_CONSTRUCTOR(UNetConnection)
};
// Class NetConnection exported:
//   Properties size: 15944 bytes (16032 total)


//***************************************************************************//
/*	\class UAgentConnection
*/
//***************************************************************************//

class ENGINE_API UAgentConnection : public UNetConnection
{
public:
    DECLARE_CLASS(UAgentConnection,UNetConnection,0|CLASS_Transient|CLASS_Config,Engine)
    NO_DEFAULT_CONSTRUCTOR(UAgentConnection)
};
// Class AgentConnection exported:
//   Properties size: 12 bytes (16044 total)


//***************************************************************************//
/*	\class UTcpipConnection
*/
//***************************************************************************//

class ENGINE_API UTcpipConnection : public UNetConnection
{
public:
    DECLARE_CLASS(UTcpipConnection,UNetConnection,0|CLASS_Transient|CLASS_Config,Engine)
    NO_DEFAULT_CONSTRUCTOR(UTcpipConnection)
};
// Class TcpipConnection exported:
//   Properties size: 36 bytes (16068 total)


//***************************************************************************//
/*	\class UDemoRecConnection
*/
//***************************************************************************//

class ENGINE_API UDemoRecConnection : public UNetConnection
{
public:
    DECLARE_CLASS(UDemoRecConnection,UNetConnection,0|CLASS_Transient|CLASS_Config,Engine)
    NO_DEFAULT_CONSTRUCTOR(UDemoRecConnection)
};
// Class DemoRecConnection exported:
//   Properties size: 0 bytes (16032 total)


//***************************************************************************//
/*	\class UViewport
*/
//***************************************************************************//

class ENGINE_API UViewport : public UPlayer
{
public:
    DECLARE_CLASS(UViewport,UPlayer,0|CLASS_Transient|CLASS_Config,Engine)
    NO_DEFAULT_CONSTRUCTOR(UViewport)
};
// Class Viewport exported:
//   Properties size: 220 bytes (308 total)


//***************************************************************************//
/*	\class UWindowsViewport
*/
//***************************************************************************//

class ENGINE_API UWindowsViewport : public UViewport
{
public:
    DECLARE_CLASS(UWindowsViewport,UViewport,0|CLASS_Transient|CLASS_Config,Engine)
    NO_DEFAULT_CONSTRUCTOR(UWindowsViewport)
};
// Class WindowsViewport exported:
//   Properties size: 576 bytes (884 total)


//***************************************************************************//
/*	\class UOnlineAgentListener
*/
//***************************************************************************//


struct UOnlineAgentListener_eventOnChatMessageReceived_Parms
{
    FString msg;
    FString senderName;
};

struct UOnlineAgentListener_eventOnLeaderboardRefreshed_Parms
{
    BYTE LBUpdateState;
};

struct UOnlineAgentListener_eventOnPostBeginPlay_Parms
{
    class APlayerPawn* NewPlayer;
};

struct UOnlineAgentListener_eventOnPostLogin_Parms
{
    class APlayerPawn* NewPlayer;
};

struct UOnlineAgentListener_eventOnTick_Parms
{
    FLOAT DeltaTime;
};

struct UOnlineAgentListener_eventOnNewDLCCheckComplete_Parms
{
    BITFIELD in_bNewDLCAvailable;
};

struct UOnlineAgentListener_eventOnVirtualKeyboardClosed_Parms
{
    BITFIELD in_bCanceled;
    FString in_EnteredString;
};

struct UOnlineAgentListener_eventOnJoinRoomFailed_Parms
{
    INT in_Reason;
};

struct UOnlineAgentListener_eventOnLeaderboardError_Parms
{
    INT ErrorCode;
};

struct UOnlineAgentListener_eventOnShutdown_Parms
{
    INT ErrorCode;
};

struct UOnlineAgentListener_eventOnStartLoading_Parms
{
    FString in_MapName;
    FString in_GameModeName;
};

struct UOnlineAgentListener_eventOnPlayerLeave_Parms
{
    INT in_PlayerId;
};

struct UOnlineAgentListener_eventOnPlayerJoin_Parms
{
    INT in_PlayerId;
};

struct UOnlineAgentListener_eventOnJoinRoom_Parms
{
    BITFIELD in_bIsHost;
};
class ENGINE_API UOnlineAgentListener : public UObject
{
public:
    FScriptDelegate __OnEndGame__Delegate;
    FScriptDelegate __OnLeaveRoom__Delegate;
    FScriptDelegate __OnJoinRoom__Delegate;
    FScriptDelegate __OnPlayerJoin__Delegate;
    FScriptDelegate __OnPlayerLeave__Delegate;
    FScriptDelegate __OnStartLoading__Delegate;
    FScriptDelegate __OnShutdown__Delegate;
    FScriptDelegate __OnLeaderboardError__Delegate;
    FScriptDelegate __OnInviteAccepted__Delegate;
    FScriptDelegate __OnJoinRoomFailed__Delegate;
    FScriptDelegate __OnStopWaitingForResponse__Delegate;
    FScriptDelegate __OnVirtualKeyboardClosed__Delegate;
    FScriptDelegate __OnNewDLCCheckComplete__Delegate;
    FScriptDelegate __OnDLCRescanComplete__Delegate;
    FScriptDelegate __OnNewDLCInstalled__Delegate;
    FScriptDelegate __OnTick__Delegate;
    FScriptDelegate __OnPostLogin__Delegate;
    FScriptDelegate __OnPostBeginPlay__Delegate;
    FScriptDelegate __OnLeaderboardRefreshed__Delegate;
    FScriptDelegate __OnServerBrowserClosed__Delegate;
    FScriptDelegate __OnChatMessageReceived__Delegate;
    inline void delegateOnChatMessageReceived(const FString& msg, const FString& senderName)
    {
        UOnlineAgentListener_eventOnChatMessageReceived_Parms Parms;
        Parms.msg=msg;
        Parms.senderName=senderName;
        ProcessDelegate(ENGINE_OnChatMessageReceived, &__OnChatMessageReceived__Delegate, &Parms);
    }
    inline void delegateOnServerBrowserClosed()
    {
        ProcessDelegate(ENGINE_OnServerBrowserClosed, &__OnServerBrowserClosed__Delegate, NULL);
    }
    inline void delegateOnLeaderboardRefreshed(BYTE LBUpdateState)
    {
        UOnlineAgentListener_eventOnLeaderboardRefreshed_Parms Parms;
        Parms.LBUpdateState=LBUpdateState;
        ProcessDelegate(ENGINE_OnLeaderboardRefreshed, &__OnLeaderboardRefreshed__Delegate, &Parms);
    }
    inline void delegateOnPostBeginPlay(class APlayerPawn* NewPlayer)
    {
        UOnlineAgentListener_eventOnPostBeginPlay_Parms Parms;
        Parms.NewPlayer=NewPlayer;
        ProcessDelegate(ENGINE_OnPostBeginPlay, &__OnPostBeginPlay__Delegate, &Parms);
    }
    inline void delegateOnPostLogin(class APlayerPawn* NewPlayer)
    {
        UOnlineAgentListener_eventOnPostLogin_Parms Parms;
        Parms.NewPlayer=NewPlayer;
        ProcessDelegate(ENGINE_OnPostLogin, &__OnPostLogin__Delegate, &Parms);
    }
    inline void delegateOnTick(FLOAT DeltaTime)
    {
        UOnlineAgentListener_eventOnTick_Parms Parms;
        Parms.DeltaTime=DeltaTime;
        ProcessDelegate(ENGINE_OnTick, &__OnTick__Delegate, &Parms);
    }
    inline void delegateOnNewDLCInstalled()
    {
        ProcessDelegate(ENGINE_OnNewDLCInstalled, &__OnNewDLCInstalled__Delegate, NULL);
    }
    inline void delegateOnDLCRescanComplete()
    {
        ProcessDelegate(ENGINE_OnDLCRescanComplete, &__OnDLCRescanComplete__Delegate, NULL);
    }
    inline void delegateOnNewDLCCheckComplete(BITFIELD in_bNewDLCAvailable)
    {
        UOnlineAgentListener_eventOnNewDLCCheckComplete_Parms Parms;
        Parms.in_bNewDLCAvailable=in_bNewDLCAvailable;
        ProcessDelegate(ENGINE_OnNewDLCCheckComplete, &__OnNewDLCCheckComplete__Delegate, &Parms);
    }
    inline void delegateOnVirtualKeyboardClosed(BITFIELD in_bCanceled, const FString& in_EnteredString)
    {
        UOnlineAgentListener_eventOnVirtualKeyboardClosed_Parms Parms;
        Parms.in_bCanceled=in_bCanceled;
        Parms.in_EnteredString=in_EnteredString;
        ProcessDelegate(ENGINE_OnVirtualKeyboardClosed, &__OnVirtualKeyboardClosed__Delegate, &Parms);
    }
    inline void delegateOnStopWaitingForResponse()
    {
        ProcessDelegate(ENGINE_OnStopWaitingForResponse, &__OnStopWaitingForResponse__Delegate, NULL);
    }
    inline void delegateOnJoinRoomFailed(INT in_Reason)
    {
        UOnlineAgentListener_eventOnJoinRoomFailed_Parms Parms;
        Parms.in_Reason=in_Reason;
        ProcessDelegate(ENGINE_OnJoinRoomFailed, &__OnJoinRoomFailed__Delegate, &Parms);
    }
    inline void delegateOnInviteAccepted()
    {
        ProcessDelegate(ENGINE_OnInviteAccepted, &__OnInviteAccepted__Delegate, NULL);
    }
    inline void delegateOnLeaderboardError(INT ErrorCode)
    {
        UOnlineAgentListener_eventOnLeaderboardError_Parms Parms;
        Parms.ErrorCode=ErrorCode;
        ProcessDelegate(ENGINE_OnLeaderboardError, &__OnLeaderboardError__Delegate, &Parms);
    }
    inline void delegateOnShutdown(INT ErrorCode)
    {
        UOnlineAgentListener_eventOnShutdown_Parms Parms;
        Parms.ErrorCode=ErrorCode;
        ProcessDelegate(ENGINE_OnShutdown, &__OnShutdown__Delegate, &Parms);
    }
    inline void delegateOnStartLoading(const FString& in_MapName, const FString& in_GameModeName)
    {
        UOnlineAgentListener_eventOnStartLoading_Parms Parms;
        Parms.in_MapName=in_MapName;
        Parms.in_GameModeName=in_GameModeName;
        ProcessDelegate(ENGINE_OnStartLoading, &__OnStartLoading__Delegate, &Parms);
    }
    inline void delegateOnPlayerLeave(INT in_PlayerId)
    {
        UOnlineAgentListener_eventOnPlayerLeave_Parms Parms;
        Parms.in_PlayerId=in_PlayerId;
        ProcessDelegate(ENGINE_OnPlayerLeave, &__OnPlayerLeave__Delegate, &Parms);
    }
    inline void delegateOnPlayerJoin(INT in_PlayerId)
    {
        UOnlineAgentListener_eventOnPlayerJoin_Parms Parms;
        Parms.in_PlayerId=in_PlayerId;
        ProcessDelegate(ENGINE_OnPlayerJoin, &__OnPlayerJoin__Delegate, &Parms);
    }
    inline void delegateOnJoinRoom(BITFIELD in_bIsHost)
    {
        UOnlineAgentListener_eventOnJoinRoom_Parms Parms;
        Parms.in_bIsHost=in_bIsHost;
        ProcessDelegate(ENGINE_OnJoinRoom, &__OnJoinRoom__Delegate, &Parms);
    }
    inline void delegateOnLeaveRoom()
    {
        ProcessDelegate(ENGINE_OnLeaveRoom, &__OnLeaveRoom__Delegate, NULL);
    }
    inline void delegateOnEndGame()
    {
        ProcessDelegate(ENGINE_OnEndGame, &__OnEndGame__Delegate, NULL);
    }
    DECLARE_CLASS(UOnlineAgentListener,UObject,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UOnlineAgentListener)
};
// Class OnlineAgentListener exported:
//   Properties size: 168 bytes (208 total)


//***************************************************************************//
/*	\class UOnlineAgentNetDriverListener
*/
//***************************************************************************//

class ENGINE_API UOnlineAgentNetDriverListener : public UOnlineAgentListener
{
public:
    DECLARE_CLASS(UOnlineAgentNetDriverListener,UOnlineAgentListener,0|CLASS_Transient|CLASS_Config,Engine)
    NO_DEFAULT_CONSTRUCTOR(UOnlineAgentNetDriverListener)
};
// Class OnlineAgentNetDriverListener exported:
//   Properties size: 4 bytes (212 total)


//***************************************************************************//
/*	\class USteamDedicatedListener
*/
//***************************************************************************//

class ENGINE_API USteamDedicatedListener : public UOnlineAgentListener
{
public:
    class UOnlineAgent* agent;
    DECLARE_FUNCTION(execOnDLCScanComplete);
    DECLARE_FUNCTION(execBuildServerURL);
    DECLARE_FUNCTION(execStopServer);
    DECLARE_CLASS(USteamDedicatedListener,UOnlineAgentListener,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(USteamDedicatedListener)
};
// Class SteamDedicatedListener exported:
//   Properties size: 4 bytes (212 total)


//***************************************************************************//
/*	\class UOnlineAgentQualityControl
*/
//***************************************************************************//

class ENGINE_API UOnlineAgentQualityControl : public UOnlineAgentListener
{
public:
    DECLARE_FUNCTION(execOnPostBeginPlay);
    DECLARE_FUNCTION(execOnTick);
    DECLARE_FUNCTION(execOnStartLoading);
    DECLARE_FUNCTION(execOnEndGame);
    DECLARE_FUNCTION(execOnPlayerLeave);
    DECLARE_FUNCTION(execOnPlayerJoin);
    DECLARE_CLASS(UOnlineAgentQualityControl,UOnlineAgentListener,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UOnlineAgentQualityControl)
};
// Class OnlineAgentQualityControl exported:
//   Properties size: 0 bytes (208 total)


//***************************************************************************//
/*	\class UPS3RichPresenceData
*/
//***************************************************************************//

class ENGINE_API UPS3RichPresenceData : public UObject
{
public:
    FStringNoInit SPLevel0;
    FStringNoInit SPLevel1;
    FStringNoInit SPLevel2;
    FStringNoInit SPLevel3;
    FStringNoInit SPLevel4;
    FStringNoInit SPLevel5;
    FStringNoInit SPLevel6;
    FStringNoInit SPLevel7;
    FStringNoInit SPLevel8;
    FStringNoInit SPLevel9;
    FStringNoInit SPLevel10;
    FStringNoInit SPLevel11;
    FStringNoInit SPLevel12;
    FStringNoInit SPLevel13;
    FStringNoInit SPLevel14;
    FStringNoInit SPLevel15;
    FStringNoInit SPLevel16;
    FStringNoInit SPLevel17;
    FStringNoInit SPLevel18;
    FStringNoInit SPLevel19;
    FStringNoInit SPLevel20;
    FStringNoInit SPLevel21;
    FStringNoInit SPLevel22;
    FStringNoInit SPLevel23;
    FStringNoInit MPLevel0;
    FStringNoInit MPLevel1;
    FStringNoInit MPLevel2;
    FStringNoInit MPLevel3;
    FStringNoInit MPLevel4;
    FStringNoInit MPLevel5;
    FStringNoInit MPLevel6;
    FStringNoInit MPLevel7;
    FStringNoInit MPLevel8;
    FStringNoInit MPLevel9;
    FStringNoInit MPLevel10;
    FStringNoInit MPGameModeBuckeyeMatch;
    FStringNoInit MPGameModeTeamBuckeyeMatch;
    FStringNoInit MPGameModeCaptureTheBabe;
    FStringNoInit MPGameModeHailToTheKing;
    FStringNoInit PresenceInactive;
    FStringNoInit PresenceBuckeyeMatch;
    FStringNoInit PresenceMenu;
    FStringNoInit PresenceSPGame;
    FStringNoInit PresenceDigs;
    FStringNoInit PresenceDLC;
    DECLARE_CLASS(UPS3RichPresenceData,UObject,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UPS3RichPresenceData)
};
// Class PS3RichPresenceData exported:
//   Properties size: 540 bytes (580 total)


//***************************************************************************//
/*	\class UOnlineServerFactory
*/
//***************************************************************************//

class ENGINE_API UOnlineServerFactory : public UObject
{
public:
    BYTE SearchConstraint;
    BYTE SortState;
    BYTE Status;
    dnArray<FSAgentServerInfo> Servers;
    class UOnlineServerFactory* Factory;
    BITFIELD Dirty:1 GCC_PACK(4);
    INT MaxFavourites GCC_PACK(4);
    dnArray<FOnlineServerBrowserInt64> Favourites;
    DECLARE_FUNCTION(execLoadFavourites);
    DECLARE_FUNCTION(execSaveFavourites);
    DECLARE_FUNCTION(execSetServerFavorite);
    DECLARE_FUNCTION(execConnectTo);
    DECLARE_FUNCTION(execSortServers);
    DECLARE_FUNCTION(execUnlockMutex);
    DECLARE_FUNCTION(execLockMutex);
    DECLARE_FUNCTION(execHasNoErrors);
    DECLARE_FUNCTION(execIsWaitingForResponse);
    DECLARE_FUNCTION(execInterruptQuery);
    DECLARE_FUNCTION(execStartQuery);
    DECLARE_CLASS(UOnlineServerFactory,UObject,0,Engine)
    NO_DEFAULT_CONSTRUCTOR_START(UOnlineServerFactory)
    NO_DEFAULT_CONSTRUCTOR_INIT(Servers)
    NO_DEFAULT_CONSTRUCTOR_INITLAST(Favourites)
};
// Class OnlineServerFactory exported:
//   Properties size: 40 bytes (80 total)


//***************************************************************************//
/*	\class UMesh
*/
//***************************************************************************//

class ENGINE_API UMesh : public UPrimitive
{
public:
    BITFIELD bGoryMesh:1 GCC_PACK(4);
    class UClass* BonePartMapperClass GCC_PACK(4);
    FStringNoInit KSkeletonName;
    FStringNoInit ConfigName;
    DECLARE_CLASS(UMesh,UPrimitive,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UMesh)
};
// Class Mesh exported:
//   Properties size: 76 bytes (144 total)


//***************************************************************************//
/*	\class UDukeMesh
*/
//***************************************************************************//

class ENGINE_API UDukeMesh : public UMesh
{
public:
    DECLARE_CLASS(UDukeMesh,UMesh,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UDukeMesh)
};
// Class DukeMesh exported:
//   Properties size: 0 bytes (144 total)


//***************************************************************************//
/*	\class UStaticMesh
*/
//***************************************************************************//

class ENGINE_API UStaticMesh : public UPrimitive
{
public:
    BITFIELD bGoryStaticMesh:1 GCC_PACK(4);
    BITFIELD DisableCollisionCaching:1;
    BITFIELD UseSimpleShotCollision:1;
    BITFIELD UseSimpleBoxCollision:1;
    BITFIELD UseSimpleLineCollision:1;
    class UMaterialEx* OverrideCollisionTexture GCC_PACK(4);
    DECLARE_CLASS(UStaticMesh,UPrimitive,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UStaticMesh)
};
// Class StaticMesh exported:
//   Properties size: 120 bytes (188 total)


//***************************************************************************//
/*	\class UProjectorPrimitive
*/
//***************************************************************************//

class ENGINE_API UProjectorPrimitive : public UPrimitive
{
public:
    DECLARE_CLASS(UProjectorPrimitive,UPrimitive,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UProjectorPrimitive)
};
// Class ProjectorPrimitive exported:
//   Properties size: 0 bytes (68 total)


//***************************************************************************//
/*	\class UModel
*/
//***************************************************************************//

class ENGINE_API UModel : public UPrimitive
{
public:
    DECLARE_CLASS(UModel,UPrimitive,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UModel)
};
// Class Model exported:
//   Properties size: 256 bytes (324 total)


//***************************************************************************//
/*	\class UConvexVolume
*/
//***************************************************************************//

class ENGINE_API UConvexVolume : public UPrimitive
{
public:
    DECLARE_CLASS(UConvexVolume,UPrimitive,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UConvexVolume)
};
// Class ConvexVolume exported:
//   Properties size: 52 bytes (120 total)


//***************************************************************************//
/*	\class UPatchPrimitive
*/
//***************************************************************************//

class ENGINE_API UPatchPrimitive : public UPrimitive
{
public:
    DECLARE_CLASS(UPatchPrimitive,UPrimitive,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UPatchPrimitive)
};
// Class PatchPrimitive exported:
//   Properties size: 0 bytes (68 total)


//***************************************************************************//
/*	\class ULightExPrimitive
*/
//***************************************************************************//

class ENGINE_API ULightExPrimitive : public UPrimitive
{
public:
    DECLARE_CLASS(ULightExPrimitive,UPrimitive,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ULightExPrimitive)
};
// Class LightExPrimitive exported:
//   Properties size: 0 bytes (68 total)


//***************************************************************************//
/*	\class UParticleSystemPrimitive
*/
//***************************************************************************//

class ENGINE_API UParticleSystemPrimitive : public UPrimitive
{
public:
    DECLARE_CLASS(UParticleSystemPrimitive,UPrimitive,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UParticleSystemPrimitive)
};
// Class ParticleSystemPrimitive exported:
//   Properties size: 0 bytes (68 total)


//***************************************************************************//
/*	\class UWaterPrimitive
*/
//***************************************************************************//

class ENGINE_API UWaterPrimitive : public UPrimitive
{
public:
    DECLARE_CLASS(UWaterPrimitive,UPrimitive,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UWaterPrimitive)
};
// Class WaterPrimitive exported:
//   Properties size: 0 bytes (68 total)


//***************************************************************************//
/*	\class UGlassPrimitive
*/
//***************************************************************************//

class ENGINE_API UGlassPrimitive : public UPrimitive
{
public:
    DECLARE_CLASS(UGlassPrimitive,UPrimitive,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UGlassPrimitive)
};
// Class GlassPrimitive exported:
//   Properties size: 0 bytes (68 total)


//***************************************************************************//
/*	\class USkeletonMgr
*/
//***************************************************************************//

class ENGINE_API USkeletonMgr : public UObject
{
public:
    DECLARE_CLASS(USkeletonMgr,UObject,0|CLASS_Transient,Engine)
    NO_DEFAULT_CONSTRUCTOR(USkeletonMgr)
};
// Class SkeletonMgr exported:
//   Properties size: 0 bytes (40 total)


//***************************************************************************//
/*	\class USkinMeshMgr
*/
//***************************************************************************//

class ENGINE_API USkinMeshMgr : public UObject
{
public:
    DECLARE_CLASS(USkinMeshMgr,UObject,0|CLASS_Transient,Engine)
    NO_DEFAULT_CONSTRUCTOR(USkinMeshMgr)
};
// Class SkinMeshMgr exported:
//   Properties size: 0 bytes (40 total)


//***************************************************************************//
/*	\class UAnimationMgr
*/
//***************************************************************************//

class ENGINE_API UAnimationMgr : public UObject
{
public:
    DECLARE_CLASS(UAnimationMgr,UObject,0|CLASS_Transient,Engine)
    NO_DEFAULT_CONSTRUCTOR(UAnimationMgr)
};
// Class AnimationMgr exported:
//   Properties size: 0 bytes (40 total)


//***************************************************************************//
/*	\class UStaticMeshInstance
*/
//***************************************************************************//

class ENGINE_API UStaticMeshInstance : public UObject
{
public:
    dnArray<class UMaterialEx*> CachedMaterials;
    class UStaticMesh* StaticMesh;
    INT InternalVersion;
    DECLARE_CLASS(UStaticMeshInstance,UObject,0,Engine)
    NO_DEFAULT_CONSTRUCTOR_START(UStaticMeshInstance)
    NO_DEFAULT_CONSTRUCTOR_INITLAST(CachedMaterials)
};
// Class StaticMeshInstance exported:
//   Properties size: 96 bytes (136 total)


//***************************************************************************//
/*	\class UClient
*/
//***************************************************************************//

class ENGINE_API UClient : public UObject
{
public:
    INT HDRMode;
    BITFIELD UseVSync:1 GCC_PACK(4);
    BITFIELD AllowPostEffects:1;
    BITFIELD AllowFilmGrain:1;
    BITFIELD AllowWalkingIK:1;
    BITFIELD AllowFXAA:1;
    BITFIELD AllowFSAA:1;
    BITFIELD PerPixelMotionBlur:1;
    BITFIELD AllowCharacterShadows:1;
    BITFIELD AllowMainPlayerShadows:1;
    BITFIELD AllowStencilShadows:1;
    INT ShadowMapDetail GCC_PACK(4);
    BYTE TextureDetail;
    BITFIELD CaptureMouse:1 GCC_PACK(4);
    FLOAT Brightness GCC_PACK(4);
    INT FullscreenColorBits;
    INT FullscreenRefreshRate;
    INT FullscreenViewportY;
    INT FullscreenViewportX;
    INT WindowedColorBits;
    INT WindowedViewportY;
    INT WindowedViewportX;
    DECLARE_CLASS(UClient,UObject,0|CLASS_Config,Engine)
    NO_DEFAULT_CONSTRUCTOR(UClient)
};
// Class Client exported:
//   Properties size: 176 bytes (216 total)


//***************************************************************************//
/*	\class UWindowsClient
*/
//***************************************************************************//

class ENGINE_API UWindowsClient : public UClient
{
public:
    BITFIELD StartupFullscreen:1 GCC_PACK(4);
    DECLARE_CLASS(UWindowsClient,UClient,0|CLASS_Transient|CLASS_Config,Engine)
    NO_DEFAULT_CONSTRUCTOR(UWindowsClient)
};
// Class WindowsClient exported:
//   Properties size: 496 bytes (712 total)


//***************************************************************************//
/*	\class UWindowManager
*/
//***************************************************************************//

class ENGINE_API UWindowManager : public UObject
{
public:
    DECLARE_CLASS(UWindowManager,UObject,0|CLASS_Transient,Engine)
    NO_DEFAULT_CONSTRUCTOR(UWindowManager)
};
// Class WindowManager exported:
//   Properties size: 4 bytes (44 total)


//***************************************************************************//
/*	\class UPackageMap
*/
//***************************************************************************//

class ENGINE_API UPackageMap : public UObject
{
public:
    DECLARE_CLASS(UPackageMap,UObject,0|CLASS_Transient,Engine)
    NO_DEFAULT_CONSTRUCTOR(UPackageMap)
};
// Class PackageMap exported:
//   Properties size: 72 bytes (112 total)


//***************************************************************************//
/*	\class UPackageMapLevel
*/
//***************************************************************************//

class ENGINE_API UPackageMapLevel : public UPackageMap
{
public:
    DECLARE_CLASS(UPackageMapLevel,UPackageMap,0|CLASS_Transient,Engine)
    NO_DEFAULT_CONSTRUCTOR(UPackageMapLevel)
};
// Class PackageMapLevel exported:
//   Properties size: 4 bytes (116 total)


//***************************************************************************//
/*	\class UChannel
*/
//***************************************************************************//

class ENGINE_API UChannel : public UObject
{
public:
    DECLARE_CLASS(UChannel,UObject,0|CLASS_Transient,Engine)
    NO_DEFAULT_CONSTRUCTOR(UChannel)
};
// Class Channel exported:
//   Properties size: 60 bytes (100 total)


//***************************************************************************//
/*	\class UFileChannel
*/
//***************************************************************************//

class ENGINE_API UFileChannel : public UChannel
{
public:
    DECLARE_CLASS(UFileChannel,UChannel,0|CLASS_Transient,Engine)
    NO_DEFAULT_CONSTRUCTOR(UFileChannel)
};
// Class FileChannel exported:
//   Properties size: 1548 bytes (1648 total)


//***************************************************************************//
/*	\class UActorChannel
*/
//***************************************************************************//

class ENGINE_API UActorChannel : public UChannel
{
public:
    DECLARE_CLASS(UActorChannel,UChannel,0|CLASS_Transient,Engine)
    NO_DEFAULT_CONSTRUCTOR(UActorChannel)
};
// Class ActorChannel exported:
//   Properties size: 88 bytes (188 total)


//***************************************************************************//
/*	\class UControlChannel
*/
//***************************************************************************//

class ENGINE_API UControlChannel : public UChannel
{
public:
    DECLARE_CLASS(UControlChannel,UChannel,0|CLASS_Transient,Engine)
    NO_DEFAULT_CONSTRUCTOR(UControlChannel)
};
// Class ControlChannel exported:
//   Properties size: 4 bytes (104 total)


//***************************************************************************//
/*	\class UZoneCubemap
*/
//***************************************************************************//

class ENGINE_API UZoneCubemap : public UCubemap
{
public:
    INT ZoneCubemapIndex;
    class UCubemap* DefaultCubemap;
    DECLARE_CLASS(UZoneCubemap,UCubemap,0,Engine)
};
// Class ZoneCubemap exported:
//   Properties size: 8 bytes (304 total)


//***************************************************************************//
/*	\class UTextureCanvas
*/
//***************************************************************************//

class ENGINE_API UTextureCanvas : public UProceduralTexture
{
public:
    INT PaletteMap;
    DECLARE_FUNCTION(execSetDynamic);
    DECLARE_FUNCTION(execSetParametric);
    DECLARE_FUNCTION(execForceTick);
    DECLARE_FUNCTION(execTextSize);
    DECLARE_FUNCTION(execDrawTile);
    DECLARE_FUNCTION(execDrawStatic);
    DECLARE_FUNCTION(execDrawClear);
    DECLARE_FUNCTION(execDrawString);
    DECLARE_FUNCTION(execDrawTriangle);
    DECLARE_FUNCTION(execDrawLine);
    DECLARE_FUNCTION(execDrawPixel);
    DECLARE_FUNCTION(execPrecache);
    DECLARE_FUNCTION(execInit);
    DECLARE_CLASS(UTextureCanvas,UProceduralTexture,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UTextureCanvas)
};
// Class TextureCanvas exported:
//   Properties size: 4 bytes (236 total)


//***************************************************************************//
/*	\class UStaticTexture
*/
//***************************************************************************//

class ENGINE_API UStaticTexture : public UTextureCanvas
{
public:
    DECLARE_CLASS(UStaticTexture,UTextureCanvas,0,Engine)
};
// Class StaticTexture exported:
//   Properties size: 0 bytes (236 total)


//***************************************************************************//
/*	\class URenderTarget
*/
//***************************************************************************//

class ENGINE_API URenderTarget : public UBitmap
{
public:
    INT Width;
    INT Height;
    FLOAT NearClipBias;
    INT RenderTargetInterface;
    BITFIELD bNeedsClear:1 GCC_PACK(4);
    BITFIELD bAutoGenScreenCoords:1;
    DECLARE_CLASS(URenderTarget,UBitmap,0,Engine)
};
// Class RenderTarget exported:
//   Properties size: 20 bytes (132 total)


//***************************************************************************//
/*	\class UFrameBuffer
*/
//***************************************************************************//

class ENGINE_API UFrameBuffer : public UBitmap
{
public:
    FLOAT XScale;
    FLOAT YScale;
    FLOAT FOVScale;
    FName FrameBufferGroup;
    BITFIELD bNoAutoUV:1 GCC_PACK(4);
    BITFIELD bAllowDirtyData:1;
    DECLARE_CLASS(UFrameBuffer,UBitmap,0,Engine)
};
// Class FrameBuffer exported:
//   Properties size: 20 bytes (132 total)


//***************************************************************************//
/*	\class UProxyBitmapMaterial
*/
//***************************************************************************//

class ENGINE_API UProxyBitmapMaterial : public UBitmap
{
public:
    DECLARE_CLASS(UProxyBitmapMaterial,UBitmap,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UProxyBitmapMaterial)
};
// Class ProxyBitmapMaterial exported:
//   Properties size: 4 bytes (116 total)


//***************************************************************************//
/*	\class UBinkTexture
*/
//***************************************************************************//

class ENGINE_API UBinkTexture : public URenderedMaterial
{
public:
    BITFIELD bLooping:1 GCC_PACK(4);
    BITFIELD bIOStatus:1;
    BITFIELD bForceSync:1;
    INT SeekFrame GCC_PACK(4);
    INT BinkHandle;
    INT Revision;
    INT CacheId[2];
    INT SyncTime;
    DECLARE_FUNCTION(execOverrideBackgroundMusic);
    DECLARE_FUNCTION(execCloseBink);
    DECLARE_FUNCTION(execOpenBink);
    DECLARE_FUNCTION(execGetLoop);
    DECLARE_FUNCTION(execGetFrameCount);
    DECLARE_FUNCTION(execGetFrame);
    DECLARE_FUNCTION(execIsFinalFrame);
    DECLARE_FUNCTION(execSetVolume);
    DECLARE_FUNCTION(execSetLoop);
    DECLARE_FUNCTION(execSetPause);
    DECLARE_FUNCTION(execSetFrame);
    DECLARE_CLASS(UBinkTexture,URenderedMaterial,0,Engine)
};
// Class BinkTexture exported:
//   Properties size: 28 bytes (92 total)


//***************************************************************************//
/*	\class USmackerTexture
*/
//***************************************************************************//

class ENGINE_API USmackerTexture : public UBinkTexture
{
public:
    FSSmackerState DefaultState;
    INT InternalUpdateTime[2];
    class USmackerTextureInstance* Instance;
    DECLARE_FUNCTION(execGetSmackerTextureInstance);
    DECLARE_CLASS(USmackerTexture,UBinkTexture,0,Engine)
};
// Class SmackerTexture exported:
//   Properties size: 44 bytes (136 total)


//***************************************************************************//
/*	\class UGrayscaleShader
*/
//***************************************************************************//

class ENGINE_API UGrayscaleShader : public URenderedMaterial
{
public:
    class UMaterialEx* Material;
    FColor OutputColor;
    DECLARE_CLASS(UGrayscaleShader,URenderedMaterial,0,Engine)
};
// Class GrayscaleShader exported:
//   Properties size: 8 bytes (72 total)


//***************************************************************************//
/*	\class UBumpCubeEnvMap
*/
//***************************************************************************//

class ENGINE_API UBumpCubeEnvMap : public URenderedMaterial
{
public:
    class UMaterialEx* NormalMap;
    class UTexture* HeightMap;
    FLOAT BumpScale;
    INT NumSmoothPasses;
    BITFIELD bInvertBumps:1 GCC_PACK(4);
    class UMaterialEx* BumpTarget GCC_PACK(4);
    BITFIELD bHighResNormalMap:1 GCC_PACK(4);
    DECLARE_CLASS(UBumpCubeEnvMap,URenderedMaterial,0,Engine)
};
// Class BumpCubeEnvMap exported:
//   Properties size: 28 bytes (92 total)


//***************************************************************************//
/*	\class UBumpWaterReflection
*/
//***************************************************************************//

class ENGINE_API UBumpWaterReflection : public URenderedMaterial
{
public:
    class UMaterialEx* NormalMap;
    class UMaterialEx* HeightMap;
    class UMaterialEx* NormalMap2;
    class UMaterialEx* HeightMap2;
    FLOAT BumpScale;
    INT NumSmoothPasses;
    BITFIELD bHiResNormals:1 GCC_PACK(4);
    BITFIELD bInvertBumps:1;
    class UMaterialEx* BumpTarget GCC_PACK(4);
    FBumpMap SurfaceNormalMap;
    class UMaterialEx* SurfaceSpecMap;
    FLOAT FresnelAlpha1;
    FLOAT FresnelAlpha2;
    FLOAT FresnelExp;
    FLOAT ReflPerturbScale;
    FLOAT RefrPerturbScale;
    FLOAT SpecularPower;
    FLOAT SpecularScale;
    FColor WaterColor;
    FLOAT WaterColorAlpha;
    FLOAT BackGroundNormalStrength;
    BITFIELD bRefract:1 GCC_PACK(4);
    class UMaterialEx* SurfaceMaterial GCC_PACK(4);
    class UMaterialEx* SurfaceAlpha;
    FLOAT WaterEdgeFadeDist;
    BITFIELD bPerPixelLighting:1 GCC_PACK(4);
    FColor EmissiveTint GCC_PACK(4);
    FLOAT BloomScale;
    DECLARE_CLASS(UBumpWaterReflection,URenderedMaterial,0,Engine)
};
// Class BumpWaterReflection exported:
//   Properties size: 124 bytes (188 total)


//***************************************************************************//
/*	\class UFakeBumpMap
*/
//***************************************************************************//

class ENGINE_API UFakeBumpMap : public URenderedMaterial
{
public:
    class UMaterialEx* NormalMap;
    class UMaterialEx* HeightMap;
    FLOAT BumpScale;
    INT NumSmoothPasses;
    BITFIELD bInvertBumps:1 GCC_PACK(4);
    FBumpMap NormalMap2 GCC_PACK(4);
    class UMaterialEx* BumpTarget;
    BITFIELD CA_Filter:1 GCC_PACK(4);
    FLOAT CA_ShiftR GCC_PACK(4);
    FLOAT CA_ShiftG;
    FLOAT CA_ShiftRScale;
    FLOAT CA_ShiftGScale;
    class UMaterialEx* AlphaMap;
    FLOAT EdgeFadeDist;
    DECLARE_CLASS(UFakeBumpMap,URenderedMaterial,0,Engine)
};
// Class FakeBumpMap exported:
//   Properties size: 72 bytes (136 total)


//***************************************************************************//
/*	\class ULayerMaterial
*/
//***************************************************************************//

class ENGINE_API ULayerMaterial : public URenderedMaterial
{
public:
    dnArray<FSMatLayer> Layers;
    BITFIELD bSingleActor:1 GCC_PACK(4);
    FMatrix LayerMatrix GCC_PACK(4);
    INT CurrentLayer;
    FLOAT PaintGrid;
    FLOAT AlphaUScale;
    FLOAT AlphaVScale;
    FLOAT AlphaUShift;
    FLOAT AlphaVShift;
    INT TempActor;
    BITFIELD bTerrainPatch:1 GCC_PACK(4);
    INT Version GCC_PACK(4);
    DECLARE_CLASS(ULayerMaterial,URenderedMaterial,0,Engine)

    // properties that must be constructed special for ULayerMaterial:
    //       * Layers

};
// Class LayerMaterial exported:
//   Properties size: 116 bytes (180 total)


//***************************************************************************//
/*	\class UMaterialWorkspace
*/
//***************************************************************************//

class ENGINE_API UMaterialWorkspace : public URenderedMaterial
{
public:
    dnArray<FSMaterialInfo> Materials;
    INT SelectedMaterial;
    INT SelectedButton;
    INT MouseButtons;
    FLOAT MouseX;
    FLOAT MouseY;
    DECLARE_CLASS(UMaterialWorkspace,URenderedMaterial,0,Engine)

    // properties that must be constructed special for UMaterialWorkspace:
    //       * Materials

};
// Class MaterialWorkspace exported:
//   Properties size: 32 bytes (96 total)


//***************************************************************************//
/*	\class UBumpShader
*/
//***************************************************************************//

class ENGINE_API UBumpShader : public URenderedMaterial
{
public:
    class UMaterialEx* DiffuseMap;
    class UMaterialEx* EmissiveMap;
    class UTexture* ParallaxMap;
    FLOAT ParallaxScale;
    class UMaterialEx* NormalMap;
    class UTexture* HeightMap;
    FLOAT BumpScale;
    INT NumSmoothPasses;
    BITFIELD bInvertBumps:1 GCC_PACK(4);
    INT DiffuseStream GCC_PACK(4);
    INT NormalMapStream;
    INT EmissiveStream;
    class UTexture* SpecularMap;
    FLOAT SpecularScale;
    FColor EmissiveBloomTint;
    FLOAT RT_SpecularExp;
    FLOAT RT_SpecularScale;
    class UBumpShader* DetailBumpShader;
    class UMaterialEx* DetailAlpha;
    FLOAT DetailScaleX;
    FLOAT DetailScaleY;
    FLOAT DetailShiftX;
    FLOAT DetailShiftY;
    BITFIELD bRimLightEnabled:1 GCC_PACK(4);
    BITFIELD bRimLightUseAlpha:1;
    class UMaterialEx* RimLightAlphaMap GCC_PACK(4);
    class UMaterialEx* RimLightColorMap;
    FColor RimLightColor;
    FLOAT RimLightIntensity;
    FLOAT RimLightPower;
    FLOAT RimLightFalloff;
    DECLARE_CLASS(UBumpShader,URenderedMaterial,0,Engine)
};
// Class BumpShader exported:
//   Properties size: 120 bytes (184 total)


//***************************************************************************//
/*	\class UConstantMaterial
*/
//***************************************************************************//

class ENGINE_API UConstantMaterial : public URenderedMaterial
{
public:
    DECLARE_CLASS(UConstantMaterial,URenderedMaterial,0,Engine)
};
// Class ConstantMaterial exported:
//   Properties size: 0 bytes (64 total)


//***************************************************************************//
/*	\class UActorColor
*/
//***************************************************************************//

class ENGINE_API UActorColor : public UConstantMaterial
{
public:
    FColor DefaultColor;
    FName id;
    DECLARE_CLASS(UActorColor,UConstantMaterial,0,Engine)
};
// Class ActorColor exported:
//   Properties size: 8 bytes (72 total)


//***************************************************************************//
/*	\class UDistFadeColor
*/
//***************************************************************************//

class ENGINE_API UDistFadeColor : public UConstantMaterial
{
public:
    FLOAT StartDist;
    FLOAT EndDist;
    FColor StartColor;
    FColor EndColor;
    DECLARE_CLASS(UDistFadeColor,UConstantMaterial,0,Engine)
};
// Class DistFadeColor exported:
//   Properties size: 16 bytes (80 total)


//***************************************************************************//
/*	\class UFadeColor
*/
//***************************************************************************//

class ENGINE_API UFadeColor : public UConstantMaterial
{
public:
    FColor Color1;
    FColor Color2;
    FLOAT FadePeriod;
    FLOAT FadePhase;
    BYTE ColorFadeType;
    FStringNoInit FadeString;
    FLOAT NextFlickerTime;
    FLOAT LastPercent;
    DECLARE_CLASS(UFadeColor,UConstantMaterial,0,Engine)
};
// Class FadeColor exported:
//   Properties size: 40 bytes (104 total)


//***************************************************************************//
/*	\class UConstantValue
*/
//***************************************************************************//

class ENGINE_API UConstantValue : public UConstantMaterial
{
public:
    FPlane Value;
    DECLARE_CLASS(UConstantValue,UConstantMaterial,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UConstantValue)
};
// Class ConstantValue exported:
//   Properties size: 16 bytes (80 total)


//***************************************************************************//
/*	\class UConstantColor
*/
//***************************************************************************//

class ENGINE_API UConstantColor : public UConstantMaterial
{
public:
    FColor Color;
    DECLARE_CLASS(UConstantColor,UConstantMaterial,0,Engine)
};
// Class ConstantColor exported:
//   Properties size: 4 bytes (68 total)


//***************************************************************************//
/*	\class UModifier
*/
//***************************************************************************//

class ENGINE_API UModifier : public UMaterialEx
{
public:
    class UMaterialEx* Material;
    DECLARE_CLASS(UModifier,UMaterialEx,0,Engine)
};
// Class Modifier exported:
//   Properties size: 4 bytes (68 total)


//***************************************************************************//
/*	\class UTextureAnimMgr
*/
//***************************************************************************//

class ENGINE_API UTextureAnimMgr : public UModifier
{
public:
    INT AnimControllers;
    DECLARE_CLASS(UTextureAnimMgr,UModifier,0,Engine)
};
// Class TextureAnimMgr exported:
//   Properties size: 4 bytes (72 total)


//***************************************************************************//
/*	\class UTexModifier
*/
//***************************************************************************//

class ENGINE_API UTexModifier : public UModifier
{
public:
    BYTE TexCoordSource;
    BYTE TexCoordCount;
    BITFIELD TexCoordProjected:1 GCC_PACK(4);
    INT MatrixIndex GCC_PACK(4);
    DECLARE_CLASS(UTexModifier,UModifier,0,Engine)
};
// Class TexModifier exported:
//   Properties size: 12 bytes (80 total)


//***************************************************************************//
/*	\class UTexMatrix
*/
//***************************************************************************//

class ENGINE_API UTexMatrix : public UTexModifier
{
public:
    FMatrix Matrix;
    DECLARE_CLASS(UTexMatrix,UTexModifier,0,Engine)
};
// Class TexMatrix exported:
//   Properties size: 64 bytes (144 total)


//***************************************************************************//
/*	\class UTexEnvMap
*/
//***************************************************************************//

class ENGINE_API UTexEnvMap : public UTexModifier
{
public:
    BYTE EnvMapType;
    DECLARE_CLASS(UTexEnvMap,UTexModifier,0,Engine)
};
// Class TexEnvMap exported:
//   Properties size: 4 bytes (84 total)


//***************************************************************************//
/*	\class UTexRotator
*/
//***************************************************************************//

class ENGINE_API UTexRotator : public UTexModifier
{
public:
    FMatrix Matrix;
    BYTE TexRotationType;
    FRotator Rotation;
    FLOAT UOffset;
    FLOAT VOffset;
    FRotator OscillationRate;
    FRotator OscillationAmplitude;
    FRotator OscillationPhase;
    DECLARE_CLASS(UTexRotator,UTexModifier,0,Engine)
};
// Class TexRotator exported:
//   Properties size: 124 bytes (204 total)


//***************************************************************************//
/*	\class UTexScaler
*/
//***************************************************************************//

class ENGINE_API UTexScaler : public UTexModifier
{
public:
    FMatrix Matrix;
    FLOAT UScale;
    FLOAT UScaleOscillationRate;
    FLOAT UScaleOscillationAmplitude;
    FLOAT UScaleOscillationPhase;
    FLOAT VScale;
    FLOAT VScaleOscillationRate;
    FLOAT VScaleOscillationAmplitude;
    FLOAT VScaleOscillationPhase;
    FLOAT UOffset;
    FLOAT VOffset;
    DECLARE_CLASS(UTexScaler,UTexModifier,0,Engine)
};
// Class TexScaler exported:
//   Properties size: 104 bytes (184 total)


//***************************************************************************//
/*	\class UTexPanner
*/
//***************************************************************************//

class ENGINE_API UTexPanner : public UTexModifier
{
public:
    FRotator PanDirection;
    FRotator PanDirectionOscillationRate;
    FRotator PanDirectionOscillationAmplitude;
    FRotator PanDirectionOscillationPhase;
    FLOAT PanRate;
    FLOAT PanRateOscillationRate;
    FLOAT PanRateOscillationAmplitude;
    FLOAT PanRateOscillationPhase;
    FLOAT ShiftX;
    FLOAT ShiftY;
    FVector2D ShiftOscillationRate;
    FVector2D ShiftOscillationAmplitude;
    FVector2D ShiftOscillationPhase;
    FMatrix TexMatrix;
    DECLARE_CLASS(UTexPanner,UTexModifier,0,Engine)
};
// Class TexPanner exported:
//   Properties size: 160 bytes (240 total)


//***************************************************************************//
/*	\class UColorModifier
*/
//***************************************************************************//

class ENGINE_API UColorModifier : public UModifier
{
public:
    FColor Color;
    BITFIELD RenderTwoSided:1 GCC_PACK(4);
    BITFIELD AlphaBlend:1;
    DECLARE_CLASS(UColorModifier,UModifier,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UColorModifier)
};
// Class ColorModifier exported:
//   Properties size: 8 bytes (76 total)


//***************************************************************************//
/*	\class UFinalBlend
*/
//***************************************************************************//

class ENGINE_API UFinalBlend : public UModifier
{
public:
    BYTE FrameBufferBlending;
    BITFIELD ZWrite:1 GCC_PACK(4);
    BITFIELD ZWriteTrans:1;
    BITFIELD ZTest:1;
    BITFIELD Wireframe:1;
    BITFIELD AlphaTest:1;
    BITFIELD TwoSided:1;
    BITFIELD TwoSidedShadow:1;
    BYTE AlphaRef GCC_PACK(4);
    BITFIELD bAllowGenericBlooms:1 GCC_PACK(4);
    FColor GenericBloomTint GCC_PACK(4);
    INT ZBiasAdjust;
    BITFIELD bCastShadow:1 GCC_PACK(4);
    INT AlphaSortGroup GCC_PACK(4);
    FLOAT UnlitHDRScale;
    FLOAT EdgeFadeDist;
    DECLARE_CLASS(UFinalBlend,UModifier,0,Engine)
};
// Class FinalBlend exported:
//   Properties size: 40 bytes (108 total)


//***************************************************************************//
/*	\class UCombiner
*/
//***************************************************************************//

class ENGINE_API UCombiner : public UMaterialEx
{
public:
    BYTE CombineOperation;
    BYTE AlphaOperation;
    class UMaterialEx* Material1;
    class UMaterialEx* Material2;
    class UMaterialEx* Material3;
    DECLARE_CLASS(UCombiner,UMaterialEx,0,Engine)
};
// Class Combiner exported:
//   Properties size: 16 bytes (80 total)


//***************************************************************************//
/*	\class UParticleMaterial
*/
//***************************************************************************//

class ENGINE_API UParticleMaterial : public UMaterialEx
{
public:
    DECLARE_CLASS(UParticleMaterial,UMaterialEx,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UParticleMaterial)
};
// Class ParticleMaterial exported:
//   Properties size: 32 bytes (96 total)


//***************************************************************************//
/*	\class UFogMaterial
*/
//***************************************************************************//

class ENGINE_API UFogMaterial : public UMaterialEx
{
public:
    DECLARE_CLASS(UFogMaterial,UMaterialEx,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UFogMaterial)
};
// Class FogMaterial exported:
//   Properties size: 44 bytes (108 total)


//***************************************************************************//
/*	\class UMiscMaterial
*/
//***************************************************************************//

class ENGINE_API UMiscMaterial : public UMaterialEx
{
public:
    DECLARE_CLASS(UMiscMaterial,UMaterialEx,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UMiscMaterial)
};
// Class MiscMaterial exported:
//   Properties size: 364 bytes (428 total)


//***************************************************************************//
/*	\class ULipSyncInfo
*/
//***************************************************************************//

class ENGINE_API ULipSyncInfo : public UObject
{
public:
    FName NeutralPose;
    dnArray<FSLipSyncPhoneRegion> PhoneRegions;
    DECLARE_CLASS(ULipSyncInfo,UObject,0,Engine)
    NO_DEFAULT_CONSTRUCTOR_START(ULipSyncInfo)
    NO_DEFAULT_CONSTRUCTOR_INITLAST(PhoneRegions)
};
// Class LipSyncInfo exported:
//   Properties size: 16 bytes (56 total)


//***************************************************************************//
/*	\class ULevelBase
*/
//***************************************************************************//

class ENGINE_API ULevelBase : public UObject
{
public:
    DECLARE_CLASS(ULevelBase,UObject,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ULevelBase)
};
// Class LevelBase exported:
//   Properties size: 104 bytes (144 total)


//***************************************************************************//
/*	\class ULevel
*/
//***************************************************************************//

class ENGINE_API ULevel : public ULevelBase
{
public:
    DECLARE_CLASS(ULevel,ULevelBase,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ULevel)
};
// Class Level exported:
//   Properties size: 28156 bytes (28300 total)


//***************************************************************************//
/*	\class UPolys
*/
//***************************************************************************//

class ENGINE_API UPolys : public UObject
{
public:
    DECLARE_CLASS(UPolys,UObject,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UPolys)
};
// Class Polys exported:
//   Properties size: 16 bytes (56 total)


//***************************************************************************//
/*	\class UFont
*/
//***************************************************************************//

class ENGINE_API UFont : public UObject
{
public:
    DECLARE_CLASS(UFont,UObject,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UFont)
};
// Class Font exported:
//   Properties size: 20 bytes (60 total)


//***************************************************************************//
/*	\class UFontTrueType
*/
//***************************************************************************//

class ENGINE_API UFontTrueType : public UFont
{
public:
    DECLARE_CLASS(UFontTrueType,UFont,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UFontTrueType)
};
// Class FontTrueType exported:
//   Properties size: 64 bytes (124 total)


//***************************************************************************//
/*	\class UGlobalTempObjects
*/
//***************************************************************************//

class ENGINE_API UGlobalTempObjects : public UObject
{
public:
    DECLARE_CLASS(UGlobalTempObjects,UObject,0|CLASS_Transient,Engine)
    NO_DEFAULT_CONSTRUCTOR(UGlobalTempObjects)
};
// Class GlobalTempObjects exported:
//   Properties size: 48 bytes (88 total)


//***************************************************************************//
/*	\class UMusic
*/
//***************************************************************************//

class ENGINE_API UMusic : public UObject
{
public:
    DECLARE_CLASS(UMusic,UObject,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UMusic)
};
// Class Music exported:
//   Properties size: 36 bytes (76 total)


//***************************************************************************//
/*	\class USound
*/
//***************************************************************************//

class ENGINE_API USound : public UObject
{
public:
    DECLARE_CLASS(USound,UObject,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(USound)
};
// Class Sound exported:
//   Properties size: 104 bytes (144 total)


//***************************************************************************//
/*	\class UVoiceSound
*/
//***************************************************************************//

class ENGINE_API UVoiceSound : public USound
{
public:
    DECLARE_CLASS(UVoiceSound,USound,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UVoiceSound)
};
// Class VoiceSound exported:
//   Properties size: 4100 bytes (4244 total)


//***************************************************************************//
/*	\class UDamageType
*/
//***************************************************************************//


struct UDamageType_eventPerformAdditionalDamageEffect_Parms
{
    class AActor* ShootActor;
    FLOAT ShootActorRelativeDrawscale;
    class AActor* HitActor;
    FVector HitLocation;
    FVector HitNormal;
    class UClass* HitMaterial;
};

struct UDamageType_eventShouldSpawnDamageEffectDecal_Parms
{
    class UClass* HitMaterial;
    class AActor* ShootActor;
    class AActor* HitActor;
    BITFIELD ReturnValue;
};
class ENGINE_API UDamageType : public UObject
{
public:
    FStringNoInit DamageName;
    FStringNoInit DeathMessage;
    FStringNoInit SuicideDeathMessage;
    BITFIELD bScoreHit:1 GCC_PACK(4);
    FLOAT MomentumTransfer GCC_PACK(4);
    BITFIELD bRestartVibrations:1 GCC_PACK(4);
    dnArray<FSViewShakeInfo> DamageVibrations GCC_PACK(4);
    dnArray<FSRumbleInfo> DamageRumbles;
    FStringNoInit Icon;
    FStringNoInit WeaponSpreeMessageType;
    FStringNoInit WeaponSpreePhrase;
    FStringNoInit WeaponSpreeSound;
    BITFIELD bIgnoreDrawScale:1 GCC_PACK(4);
    BITFIELD bIgnoreDifficultyDamageScaling:1;
    FLOAT PlayerDamageScale GCC_PACK(4);
    FLOAT SelfDamageScale;
    FLOAT FrameDamageLerp;
    FLOAT BodyPartDamageScaleLerp;
    FLOAT DeathMomentumScale;
    FLOAT DeathLiftScale;
    FSSoundInfo DamageSound;
    FSScreenFlash DamageScreenFlash;
    FLOAT DamageScreenFlashScaleDenominator;
    FColor DamageScreenFlashColorMin;
    FColor DamageScreenFlashColorMax;
    FLOAT DamageScreenFlashTimeMin;
    FLOAT DamageScreenFlashTimeMax;
    FLOAT DamageScreenFlashTimeMidScale;
    class UMaterialEx* DamageIndicatorIcon;
    FColor DamageIndicatorColor;
    FLOAT DamageIndicatorLifetime;
    FLOAT DamageIndicatorRadius;
    FLOAT BlurDamageThreshold;
    FLOAT MotionBlurDamageThreshold;
    BITFIELD bIgnoreUseHitEffectOverrides:1 GCC_PACK(4);
    dnArray<FSDamageCategoryEffectMapping> MaterialEffectMappings GCC_PACK(4);
    FSDamageCategoryEffect DefaultDamageCategoryEffect;
    FLOAT NearMissChance;
    FLOAT NearMissMaxDistSq;
    class UClass* NearMissClass;
    FLOAT DamageScaleMap[20];
    BITFIELD DoesApplyViewkick:1 GCC_PACK(4);
    FLOAT SteroidsImpulseMultiplier GCC_PACK(4);
    FLOAT SteroidsMeleeZImpulse;
    FLOAT SteroidsDamageMultiplier;
    BITFIELD bIgnoreShrunkDamageScaling:1 GCC_PACK(4);
    BITFIELD bIsTraceDamageType:1;
    BITFIELD bShowIndicatorOnZeroDamage:1;
    inline void __fastcall eventPerformAdditionalDamageEffect(class AActor* ShootActor, FLOAT ShootActorRelativeDrawscale, class AActor* HitActor, FVector HitLocation, FVector HitNormal, class UClass* HitMaterial)
    {
        UDamageType_eventPerformAdditionalDamageEffect_Parms Parms;
        Parms.ShootActor=ShootActor;
        Parms.ShootActorRelativeDrawscale=ShootActorRelativeDrawscale;
        Parms.HitActor=HitActor;
        Parms.HitLocation=HitLocation;
        Parms.HitNormal=HitNormal;
        Parms.HitMaterial=HitMaterial;
        ProcessEvent(FindFunctionChecked(ENGINE_PerformAdditionalDamageEffect), &Parms);
    }
    inline BITFIELD __fastcall eventShouldSpawnDamageEffectDecal(class UClass* HitMaterial, class AActor* ShootActor, class AActor* HitActor)
    {
        UDamageType_eventShouldSpawnDamageEffectDecal_Parms Parms;
        Parms.ReturnValue=0;
        Parms.HitMaterial=HitMaterial;
        Parms.ShootActor=ShootActor;
        Parms.HitActor=HitActor;
        ProcessEvent(FindFunctionChecked(ENGINE_ShouldSpawnDamageEffectDecal), &Parms);
        return Parms.ReturnValue;
    }
    DECLARE_CLASS(UDamageType,UObject,0,Engine)
    NO_DEFAULT_CONSTRUCTOR_START(UDamageType)
    NO_DEFAULT_CONSTRUCTOR_INIT(DamageVibrations)
    NO_DEFAULT_CONSTRUCTOR_INIT(DamageRumbles)
    NO_DEFAULT_CONSTRUCTOR_INIT(DamageSound)
    NO_DEFAULT_CONSTRUCTOR_INIT(MaterialEffectMappings)
    NO_DEFAULT_CONSTRUCTOR_INITLAST(DefaultDamageCategoryEffect)
};
// Class DamageType exported:
//   Properties size: 756 bytes (796 total)


//***************************************************************************//
/*	\class UTraceDamageType
*/
//***************************************************************************//

class ENGINE_API UTraceDamageType : public UDamageType
{
public:
    BITFIELD bCanCauseExpandDeath:1 GCC_PACK(4);
    DECLARE_CLASS(UTraceDamageType,UDamageType,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UTraceDamageType)
};
// Class TraceDamageType exported:
//   Properties size: 4 bytes (800 total)


//***************************************************************************//
/*	\class UNearMissEffect
*/
//***************************************************************************//

class ENGINE_API UNearMissEffect : public UObject
{
public:
    FSSoundInfo NearMissSoundInfo;
    DECLARE_CLASS(UNearMissEffect,UObject,0,Engine)
    NO_DEFAULT_CONSTRUCTOR_START(UNearMissEffect)
    NO_DEFAULT_CONSTRUCTOR_INITLAST(NearMissSoundInfo)
};
// Class NearMissEffect exported:
//   Properties size: 172 bytes (212 total)


//***************************************************************************//
/*	\class UMaterial
*/
//***************************************************************************//

class ENGINE_API UMaterial : public UObject
{
public:
    FLOAT FootprintTypeOverrideTime;
    BYTE FootprintTypeOverride;
    FSFootstepCategoryEffect FootstepCategoryEffect[8];
    FSLandedCategoryEffect LandedCategoryEffect[8];
    class UClass* PhysicsMaterial;
    BITFIELD bIgnoreVolumeDamageEffect:1 GCC_PACK(4);
    BITFIELD bAllowMeleePassthrough:1;
    FLOAT Friction GCC_PACK(4);
    FLOAT Restitution;
    INT InternalMaterialLevelData;
    INT InternalMaterialMaterial;
    FLOAT PenetrateDistance;
    DECLARE_CLASS(UMaterial,UObject,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UMaterial)
};
// Class Material exported:
//   Properties size: 3140 bytes (3180 total)


//***************************************************************************//
/*	\class ULevelSummary
*/
//***************************************************************************//

class ENGINE_API ULevelSummary : public UObject
{
public:
    FStringNoInit Title;
    FStringNoInit Author;
    FStringNoInit IdealPlayerCount;
    INT RecommendedEnemies;
    INT RecommendedTeammates;
    FStringNoInit LevelEnterText;
    DECLARE_CLASS(ULevelSummary,UObject,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ULevelSummary)
};
// Class LevelSummary exported:
//   Properties size: 56 bytes (96 total)


//***************************************************************************//
/*	\class UCharacterVoicePack
*/
//***************************************************************************//

class ENGINE_API UCharacterVoicePack : public UObject
{
public:
    dnArray<FSCharacterSoundInfo> CharacterSounds;
    FSSoundInfo NoSound;
    DECLARE_CLASS(UCharacterVoicePack,UObject,0,Engine)

    // properties that must be constructed special for UCharacterVoicePack:
    //       * CharacterSounds
    //       * NoSound

};
// Class CharacterVoicePack exported:
//   Properties size: 184 bytes (224 total)


//***************************************************************************//
/*	\class UAction
*/
//***************************************************************************//

class ENGINE_API UAction : public UObject
{
public:
    DECLARE_CLASS(UAction,UObject,0,Engine)
};
// Class Action exported:
//   Properties size: 0 bytes (40 total)


//***************************************************************************//
/*	\class UKMeshProps
*/
//***************************************************************************//

class ENGINE_API UKMeshProps : public UObject
{
public:
    DECLARE_CLASS(UKMeshProps,UObject,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UKMeshProps)
};
// Class KMeshProps exported:
//   Properties size: 52 bytes (92 total)


//***************************************************************************//
/*	\class UPhysicsAction
*/
//***************************************************************************//

class ENGINE_API UPhysicsAction : public UObject
{
public:
    DECLARE_CLASS(UPhysicsAction,UObject,0,Engine)
};
// Class PhysicsAction exported:
//   Properties size: 0 bytes (40 total)


//***************************************************************************//
/*	\class UStandardPhysicsAction
*/
//***************************************************************************//

class ENGINE_API UStandardPhysicsAction : public UPhysicsAction
{
public:
    DECLARE_CLASS(UStandardPhysicsAction,UPhysicsAction,0,Engine)
};
// Class StandardPhysicsAction exported:
//   Properties size: 0 bytes (40 total)


//***************************************************************************//
/*	\class UPhysicsAction_Clamp
*/
//***************************************************************************//

class ENGINE_API UPhysicsAction_Clamp : public UPhysicsAction
{
public:
    BITFIELD bClampX:1 GCC_PACK(4);
    BITFIELD bClampY:1;
    BITFIELD bClampZ:1;
    FVector MinLocation GCC_PACK(4);
    FVector MaxLocation;
    class AActor* LocationClampActor;
    DECLARE_CLASS(UPhysicsAction_Clamp,UPhysicsAction,0,Engine)
};
// Class PhysicsAction_Clamp exported:
//   Properties size: 32 bytes (72 total)


//***************************************************************************//
/*	\class UPhysicsAction_DrunkTargeting
*/
//***************************************************************************//

class ENGINE_API UPhysicsAction_DrunkTargeting : public UPhysicsAction
{
public:
    class AActor* TargetActor;
    DECLARE_CLASS(UPhysicsAction_DrunkTargeting,UPhysicsAction,0,Engine)
};
// Class PhysicsAction_DrunkTargeting exported:
//   Properties size: 4 bytes (44 total)


//***************************************************************************//
/*	\class UPhysicsAction_PathConstraint
*/
//***************************************************************************//

class ENGINE_API UPhysicsAction_PathConstraint : public UPhysicsAction
{
public:
    BITFIELD bEnabled:1 GCC_PACK(4);
    class AInterpolationPoint* InterpolationPoint GCC_PACK(4);
    FLOAT PathFriction;
    FName BoneName;
    FLOAT PathAlpha;
    FVector VelocityForAlignment;
    DECLARE_CLASS(UPhysicsAction_PathConstraint,UPhysicsAction,0,Engine)
};
// Class PhysicsAction_PathConstraint exported:
//   Properties size: 32 bytes (72 total)


//***************************************************************************//
/*	\class UPhysicsAction_JetPropulsion
*/
//***************************************************************************//

class ENGINE_API UPhysicsAction_JetPropulsion : public UPhysicsAction
{
public:
    dnArray<FSJetPropulsionInfo> JetInfos;
    DECLARE_CLASS(UPhysicsAction_JetPropulsion,UPhysicsAction,0,Engine)

    // properties that must be constructed special for UPhysicsAction_JetPropulsion:
    //       * JetInfos

};
// Class PhysicsAction_JetPropulsion exported:
//   Properties size: 12 bytes (52 total)


//***************************************************************************//
/*	\class UPhysicsAction_VelocityClamp
*/
//***************************************************************************//

class ENGINE_API UPhysicsAction_VelocityClamp : public UPhysicsAction
{
public:
    FVector MaxVelocity;
    DECLARE_CLASS(UPhysicsAction_VelocityClamp,UPhysicsAction,0,Engine)
};
// Class PhysicsAction_VelocityClamp exported:
//   Properties size: 12 bytes (52 total)


//***************************************************************************//
/*	\class UPhysicsAction_Acceleration
*/
//***************************************************************************//

class ENGINE_API UPhysicsAction_Acceleration : public UPhysicsAction
{
public:
    FVector LinearAccel;
    FVector AngularAccel;
    DECLARE_CLASS(UPhysicsAction_Acceleration,UPhysicsAction,0,Engine)
};
// Class PhysicsAction_Acceleration exported:
//   Properties size: 24 bytes (64 total)


//***************************************************************************//
/*	\class UPhysicsAction_ConstAccel
*/
//***************************************************************************//

class ENGINE_API UPhysicsAction_ConstAccel : public UPhysicsAction
{
public:
    BITFIELD ConstLinearAccel:1 GCC_PACK(4);
    BITFIELD ConstAngularAccel:1;
    BITFIELD bRelativeLinear:1;
    BITFIELD bRelativeAngular:1;
    FVector LinearAccel GCC_PACK(4);
    FVector AngularAccel;
    DECLARE_CLASS(UPhysicsAction_ConstAccel,UPhysicsAction,0,Engine)
};
// Class PhysicsAction_ConstAccel exported:
//   Properties size: 28 bytes (68 total)


//***************************************************************************//
/*	\class UPhysicsAction_ConstVel
*/
//***************************************************************************//

class ENGINE_API UPhysicsAction_ConstVel : public UPhysicsAction
{
public:
    BITFIELD ConstLinearVel:1 GCC_PACK(4);
    BITFIELD ConstAngularVel:1;
    FVector LinearVel GCC_PACK(4);
    FVector AngularVel;
    DECLARE_CLASS(UPhysicsAction_ConstVel,UPhysicsAction,0,Engine)
};
// Class PhysicsAction_ConstVel exported:
//   Properties size: 28 bytes (68 total)


//***************************************************************************//
/*	\class UPhysicsAction_ConstLinearVel
*/
//***************************************************************************//

class ENGINE_API UPhysicsAction_ConstLinearVel : public UPhysicsAction
{
public:
    INT MyConstraints[3];
    FVector ConstraintAxis[3];
    FLOAT DesiredSpeed;
    FLOAT Strength;
    DECLARE_CLASS(UPhysicsAction_ConstLinearVel,UPhysicsAction,0,Engine)
};
// Class PhysicsAction_ConstLinearVel exported:
//   Properties size: 56 bytes (96 total)


//***************************************************************************//
/*	\class UPhysicsAction_VelocityLock
*/
//***************************************************************************//

class ENGINE_API UPhysicsAction_VelocityLock : public UPhysicsAction
{
public:
    BITFIELD bLockPitch:1 GCC_PACK(4);
    BITFIELD bLockYaw:1;
    BITFIELD bLockRoll:1;
    BITFIELD bLockX:1;
    BITFIELD bLockY:1;
    BITFIELD bLockZ:1;
    DECLARE_CLASS(UPhysicsAction_VelocityLock,UPhysicsAction,0,Engine)
};
// Class PhysicsAction_VelocityLock exported:
//   Properties size: 4 bytes (44 total)


//***************************************************************************//
/*	\class UPhysicsAction_Frisbee
*/
//***************************************************************************//

class ENGINE_API UPhysicsAction_Frisbee : public UPhysicsAction
{
public:
    FVector CenterOfMassOffset;
    FLOAT LiftCoeffecient;
    DECLARE_CLASS(UPhysicsAction_Frisbee,UPhysicsAction,0,Engine)
};
// Class PhysicsAction_Frisbee exported:
//   Properties size: 16 bytes (56 total)


//***************************************************************************//
/*	\class UPhysicsAction_Lift
*/
//***************************************************************************//

class ENGINE_API UPhysicsAction_Lift : public UPhysicsAction
{
public:
    FVector CenterOfMassOffset;
    FRotator ForwardRotationOffset;
    FLOAT LiftCoeffecient;
    FLOAT ForwardLinearDrag;
    FLOAT LinearDrag;
    FLOAT AngularDrag;
    DECLARE_CLASS(UPhysicsAction_Lift,UPhysicsAction,0,Engine)
};
// Class PhysicsAction_Lift exported:
//   Properties size: 40 bytes (80 total)


//***************************************************************************//
/*	\class UMaterialExInstance
*/
//***************************************************************************//

class ENGINE_API UMaterialExInstance : public UObject
{
public:
    class UMaterialEx* Material;
    DECLARE_CLASS(UMaterialExInstance,UObject,0,Engine)
};
// Class MaterialExInstance exported:
//   Properties size: 4 bytes (44 total)


//***************************************************************************//
/*	\class USmackerTextureInstance
*/
//***************************************************************************//

class ENGINE_API USmackerTextureInstance : public UMaterialExInstance
{
public:
    FSSmackerState State;
    BITFIELD bDefaultInstance:1 GCC_PACK(4);
    BITFIELD bFilenameDirty:1;
    BITFIELD bAudioDirty:1;
    INT SavedNewFrame GCC_PACK(4);
    DECLARE_FUNCTION(execGetFrameCount);
    DECLARE_FUNCTION(execSetPause);
    DECLARE_FUNCTION(execSetVolume);
    DECLARE_FUNCTION(execSetFrame);
    DECLARE_FUNCTION(execSetFilename);
    DECLARE_CLASS(USmackerTextureInstance,UMaterialExInstance,0,Engine)
};
// Class SmackerTextureInstance exported:
//   Properties size: 40 bytes (84 total)


//***************************************************************************//
/*	\class UPrecacheIndex
*/
//***************************************************************************//

class ENGINE_API UPrecacheIndex : public UObject
{
public:
    dnArray<class UStaticMesh*> StaticMeshes;
    dnArray<class UMesh*> Meshes;
    dnArray<class UTexture*> Textures;
    dnArray<FAttenuationMapInfo> AttenuationMaps;
    dnArray<FBumpMapInfo> BumpMaps;
    dnArray<class UCubemap*> CubeMaps;
    dnArray<class USound*> Sounds;
    dnArray<FString> Music;
    dnArray<class UClass*> DamageTypes;
    dnArray<class UClass*> MaterialClasses;
    dnArray<BYTE> FootstepCategories;
    class ULevel* Level;
    BITFIELD bIsMP:1 GCC_PACK(4);
    BITFIELD bPlayerCanBeShrunk:1;
    FStringNoInit MapName GCC_PACK(4);
    dnArray<class UClass*> ActorClasses;
    dnArray<class UMaterialEx*> Materials;
    dnArray<FName> PawnAnimations;
    dnArray<FAnimationControllerInfo> AnimationControllers;
    dnArray<FString> AnimationResources;
    dnArray<class UClass*> WeaponClasses;
    dnArray<class UObject*> ProcessedObjects;
    class UClass* CorpseClass;
    dnArray<FSMapInfo> MapInfo;
    DECLARE_FUNCTION(execLogWarning);
    DECLARE_FUNCTION(execMapHasCoverType);
    DECLARE_FUNCTION(execWeaponClassIsUsableByPlayer);
    DECLARE_FUNCTION(execWeaponIsUsableByPlayer);
    DECLARE_FUNCTION(execRegisterAnimation);
    DECLARE_FUNCTION(execRegisterAnimationControllerEntry);
    DECLARE_FUNCTION(execRegisterAnimationController);
    DECLARE_FUNCTION(execRegisterPawnAnimation);
    DECLARE_FUNCTION(execRegisterMaterialClass);
    DECLARE_FUNCTION(execRegisterDamageType);
    DECLARE_FUNCTION(execRegisterMusic);
    DECLARE_FUNCTION(execRegisterVoicePackEntry);
    DECLARE_FUNCTION(execRegisterSoundInfo);
    DECLARE_FUNCTION(execRegisterAmbientSoundInfo);
    DECLARE_FUNCTION(execRegisterSound);
    DECLARE_FUNCTION(execRegisterCubeMap);
    DECLARE_FUNCTION(execRegisterBumpMap);
    DECLARE_FUNCTION(execRegisterAttenuationMap);
    DECLARE_FUNCTION(execRegisterTexture);
    DECLARE_FUNCTION(execRegisterMaterialEx);
    DECLARE_FUNCTION(execRegisterMountedActorPrefab);
    DECLARE_FUNCTION(execRegisterRenderObject);
    DECLARE_FUNCTION(execRegisterActorClass);
    DECLARE_CLASS(UPrecacheIndex,UObject,0,Engine)
    NO_DEFAULT_CONSTRUCTOR_START(UPrecacheIndex)
    NO_DEFAULT_CONSTRUCTOR_INIT(StaticMeshes)
    NO_DEFAULT_CONSTRUCTOR_INIT(Meshes)
    NO_DEFAULT_CONSTRUCTOR_INIT(Textures)
    NO_DEFAULT_CONSTRUCTOR_INIT(AttenuationMaps)
    NO_DEFAULT_CONSTRUCTOR_INIT(BumpMaps)
    NO_DEFAULT_CONSTRUCTOR_INIT(CubeMaps)
    NO_DEFAULT_CONSTRUCTOR_INIT(Sounds)
    NO_DEFAULT_CONSTRUCTOR_INIT(Music)
    NO_DEFAULT_CONSTRUCTOR_INIT(DamageTypes)
    NO_DEFAULT_CONSTRUCTOR_INIT(MaterialClasses)
    NO_DEFAULT_CONSTRUCTOR_INIT(FootstepCategories)
    NO_DEFAULT_CONSTRUCTOR_INIT(ActorClasses)
    NO_DEFAULT_CONSTRUCTOR_INIT(Materials)
    NO_DEFAULT_CONSTRUCTOR_INIT(PawnAnimations)
    NO_DEFAULT_CONSTRUCTOR_INIT(AnimationControllers)
    NO_DEFAULT_CONSTRUCTOR_INIT(AnimationResources)
    NO_DEFAULT_CONSTRUCTOR_INIT(WeaponClasses)
    NO_DEFAULT_CONSTRUCTOR_INIT(ProcessedObjects)
    NO_DEFAULT_CONSTRUCTOR_INITLAST(MapInfo)
};
// Class PrecacheIndex exported:
//   Properties size: 252 bytes (292 total)


//***************************************************************************//
/*	\class UPhysicsMaterial
*/
//***************************************************************************//

class ENGINE_API UPhysicsMaterial : public UObject
{
public:
    INT InternalMaterialID;
    FLOAT Hardness;
    class UClass* ImpactDamageType;
    DECLARE_CLASS(UPhysicsMaterial,UObject,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UPhysicsMaterial)
};
// Class PhysicsMaterial exported:
//   Properties size: 12 bytes (52 total)


//***************************************************************************//
/*	\class UDefaultPhysicsMaterial
*/
//***************************************************************************//

class ENGINE_API UDefaultPhysicsMaterial : public UPhysicsMaterial
{
public:
    DECLARE_CLASS(UDefaultPhysicsMaterial,UPhysicsMaterial,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UDefaultPhysicsMaterial)
};
// Class DefaultPhysicsMaterial exported:
//   Properties size: 0 bytes (52 total)


//***************************************************************************//
/*	\class UPhysicsEffectsDatabase
*/
//***************************************************************************//

class ENGINE_API UPhysicsEffectsDatabase : public UObject
{
public:
    dnArray<FSPhysicsEffectUserEntry> Entries;
    dnArray<FSWhyOhWhyDoesUCCSuckSoMuch> Database;
    dnArray<class UClass*> MaterialLookup;
    DECLARE_FUNCTION(execPlayPhysicsImpactSound);
    DECLARE_CLASS(UPhysicsEffectsDatabase,UObject,0,Engine)

    // properties that must be constructed special for UPhysicsEffectsDatabase:
    //       * Entries
    //       * Database
    //       * MaterialLookup

};
// Class PhysicsEffectsDatabase exported:
//   Properties size: 36 bytes (76 total)


//***************************************************************************//
/*	\class UPatchRenderData
*/
//***************************************************************************//

class ENGINE_API UPatchRenderData : public UObject
{
public:
    dnArray<FSFoliageDef> FoliageDefs;
    dnArray<INT> FoliageSectors;
    DECLARE_CLASS(UPatchRenderData,UObject,0,Engine)

    // properties that must be constructed special for UPatchRenderData:
    //       * FoliageDefs
    //       * FoliageSectors

};
// Class PatchRenderData exported:
//   Properties size: 24 bytes (64 total)


//***************************************************************************//
/*	\class UPatchData
*/
//***************************************************************************//

class ENGINE_API UPatchData : public UObject
{
public:
    BYTE TerrainLOD;
    BYTE TerrainEditGrid;
    FLOAT MaxError;
    FLOAT MaxEdgeLength;
    FLOAT MaxErrorPhysicsScale;
    FLOAT MaxEdgeLengthPhysicsScale;
    dnArray<FSPatchSurface> Surfaces;
    dnArray<FVector> Vertices;
    FBox BBox;
    class UStaticMesh* StaticMesh;
    INT NumSelected;
    BITFIELD bStaticMeshDirty:1 GCC_PACK(4);
    BITFIELD bBoxDirty:1;
    BITFIELD bRealtimeFoliagePainting:1;
    BITFIELD bFoliageRandomSize:1;
    dnArray<FSFoliageDef> FoliageDefs GCC_PACK(4);
    INT CurrentFoliage;
    FColor CurrentFoliageColor1;
    FColor CurrentFoliageColor2;
    BYTE CurrentFoliagePaintMode;
    BITFIELD bTerrainPatch:1 GCC_PACK(4);
    BITFIELD bForcePatchContinuity:1;
    INT UserData GCC_PACK(4);
    DECLARE_CLASS(UPatchData,UObject,0,Engine)

    // properties that must be constructed special for UPatchData:
    //       * Surfaces
    //       * Vertices
    //       * FoliageDefs

};
// Class PatchData exported:
//   Properties size: 120 bytes (160 total)


//***************************************************************************//
/*	\class UMovementBoneTracker
*/
//***************************************************************************//

class ENGINE_API UMovementBoneTracker : public UObject
{
public:
    DECLARE_CLASS(UMovementBoneTracker,UObject,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UMovementBoneTracker)
};
// Class MovementBoneTracker exported:
//   Properties size: 0 bytes (40 total)


//***************************************************************************//
/*	\class UWeaponConfig
*/
//***************************************************************************//

class ENGINE_API UWeaponConfig : public UObject
{
public:
    class UClass* FreezeDamageType;
    class UClass* AmmoClass;
    INT AmmoExpenditure;
    INT AdditionalPickupAmmoMin;
    INT AdditionalPickupAmmoRnd;
    INT ReloadCount;
    INT ReloadClipAmmo;
    FLOAT MaxTraceDistance;
    BITFIELD bReduceMaxTraceDistanceWhenShrunk:1 GCC_PACK(4);
    INT MaxTracePenetrationCount GCC_PACK(4);
    FLOAT MaxPenetrationDistance;
    class UClass* TraceDamageType;
    FSTraceFlags TraceFlags;
    class UClass* TracerBeamSystemClass;
    FLOAT TracerBeamChance;
    class UClass* TracerBubblesClass;
    FLOAT HorizShotError;
    FLOAT VertShotError;
    FLOAT ZoomErrorPct;
    BITFIELD bUseShrunkShotError:1 GCC_PACK(4);
    FLOAT ShrunkHorizShotError GCC_PACK(4);
    FLOAT ShrunkVertShotError;
    class UClass* ProjectileClass;
    BITFIELD bFireProjFromMuzzle:1 GCC_PACK(4);
    BITFIELD bCheatMuzzleBlockage:1;
    BITFIELD bSkipProjectileFindSpot:1;
    INT NumProjectiles GCC_PACK(4);
    INT NumCenteredProjectiles;
    class UClass* ImpactProjectileClass;
    dnArray<FSViewShakeInfo> ViewKicks;
    dnArray<FSRumbleInfo> RumbleKicks;
    dnArray<FSMuzzleInfo> MuzzleInfo;
    class UClass* MuzzleLightClass;
    FName MuzzleLightBoneName;
    FStringNoInit MuzzleShellClassName;
    BITFIELD bMuzzleShellEjectionOwnerVelIndependent:1 GCC_PACK(4);
    FLOAT MeleeMovementSpeedScale GCC_PACK(4);
    INT NumMeleeAttacks;
    FLOAT MeleeTraceDistance;
    FLOAT MeleeTraceDistanceShrunk;
    FVector MeleeHitExtent;
    FLOAT MeleeHitDamageBase;
    FLOAT MeleeHitDamageVariance;
    class UClass* MeleeDamageType;
    BITFIELD bHasFireStart:1 GCC_PACK(4);
    BITFIELD bHasLoopingFire:1;
    BITFIELD bHasFireStop:1;
    BITFIELD bHasUnFire:1;
    BITFIELD bHasReloadStart:1;
    BITFIELD bHasLoopingReload:1;
    BITFIELD bHasReloadStop:1;
    BITFIELD bFireInterruptFiring:1;
    BITFIELD bMeleeInterruptFiring:1;
    BITFIELD bMeleeInterruptReloading:1;
    BITFIELD bReloadInterruptFiring:1;
    BITFIELD bForceResetFireStart:1;
    BITFIELD bForceResetFire:1;
    BITFIELD bForceResetFireStop:1;
    BITFIELD bNeedWeaponHUD:1;
    BITFIELD bDrawCrosshair:1;
    FLOAT AmmoWarnPCT GCC_PACK(4);
    BITFIELD bFlashHUDOnActivate:1 GCC_PACK(4);
    BITFIELD bHUDAmmoActivateOnReload:1;
    BITFIELD AIFakeReload:1;
    BITFIELD bStandardWeaponSwitch:1;
    FLOAT LockoutFireTime GCC_PACK(4);
    FLOAT WeaponHeatAttackRate;
    FLOAT WeaponHeatDecayRate;
    FLOAT ZoomAmount;
    FName DoneActivatingStateTransition;
    FName WeaponAnimName;
    FLOAT HitWaterStrength;
    FLOAT HitWaterRadius;
    BITFIELD bDebugShotTraces:1 GCC_PACK(4);
    FColor DebugColor GCC_PACK(4);
    FLOAT DebugShotTracesTime;
    DECLARE_CLASS(UWeaponConfig,UObject,0,Engine)
    NO_DEFAULT_CONSTRUCTOR_START(UWeaponConfig)
    NO_DEFAULT_CONSTRUCTOR_INIT(ViewKicks)
    NO_DEFAULT_CONSTRUCTOR_INIT(RumbleKicks)
    NO_DEFAULT_CONSTRUCTOR_INITLAST(MuzzleInfo)
};
// Class WeaponConfig exported:
//   Properties size: 264 bytes (304 total)


//***************************************************************************//
/*	\class UColorTable
*/
//***************************************************************************//

class ENGINE_API UColorTable : public UObject
{
public:
    dnArray<FSColorTablePoint> ColorPoints;
    dnArray<FSColorTableTriangle> ColorTriangles;
    FRange XRange;
    FRange YRange;
    DECLARE_FUNCTION(execGetColorForPosition);
    DECLARE_CLASS(UColorTable,UObject,0,Engine)

    // properties that must be constructed special for UColorTable:
    //       * ColorPoints
    //       * ColorTriangles

};
// Class ColorTable exported:
//   Properties size: 40 bytes (80 total)


//***************************************************************************//
/*	\class UAnimationControllerEx
*/
//***************************************************************************//


struct UAnimationControllerEx_eventEnumerateRawAnimationSequences_Parms
{
    dnArray<FSAnimationEnumeration> References;
    class UClass* Controller;
    class UMesh* Mesh;
};
class ENGINE_API UAnimationControllerEx : public UObject
{
public:
    BITFIELD bDebugAnimationController:1 GCC_PACK(4);
    BITFIELD bEnableRecentAnimCache:1;
    class ARenderActor* RenderOwner GCC_PACK(4);
    class UAnimationControllerEx* ControllerServer;
    dnArray<FSAnimationFadeBlendInternal> ActiveBlends;
    dnArray<FSAnimationBlockBlend> ChannelBlockActiveBlends;
    INT AnimationHash;
    INT AnimationPairHash;
    INT AnimationGridHash;
    dnArray<FSAnimControllerChannel> AnimChannels;
    dnArray<FSAnimChannelBlock> AnimChannelBlocks;
    dnArray<FSAnimationInfo> Animations;
    dnArray<FSAnimationBlock> AnimationBlocks;
    dnArray<FSAnimationBlendPair> AnimationBlendPairs;
    dnArray<FSAnimationGrid> AnimationGrids;
    dnArray<INT> _AnimIndexCache;
    dnArray<INT> _AnimChannelCache;
    dnArray<INT> _AnimRefIdCache;
    dnArray<INT> CrossfadeGroups;
    FLOAT AnimRateScale;
    INT FrameCounter;
    DECLARE_FUNCTION(execGetCachedPrimaryRefId);
    DECLARE_FUNCTION(execGetCachedAnimRefIds);
    DECLARE_FUNCTION(execGetCachedAnimSequences);
    DECLARE_FUNCTION(execGetCachedAnimChannel);
    DECLARE_FUNCTION(execGetCachedAnimSequence);
    DECLARE_FUNCTION(execGetNumberOfCachedAnimSequences);
    DECLARE_FUNCTION(execUpdateChannelTime);
    DECLARE_FUNCTION(execUpdateChannelBlendAlpha);
    DECLARE_FUNCTION(execUpdateGlobalAnimRateScale);
    DECLARE_FUNCTION(execAnimationFinished);
    DECLARE_FUNCTION(execGetAnimTimeByIndex);
    DECLARE_FUNCTION(execGetAnimTimeByName);
    DECLARE_FUNCTION(execGetMeshSequenceName);
    DECLARE_FUNCTION(execGetPrimaryChannelIndex);
    DECLARE_FUNCTION(execFindAnimChannelBlockIndexForName);
    DECLARE_FUNCTION(execFindAnimChannelIndexForName);
    DECLARE_FUNCTION(execFindAnimBlockIndexForName);
    DECLARE_FUNCTION(execFindAnimPairIndexForName);
    DECLARE_FUNCTION(execFindAnimGridIndexForName);
    DECLARE_FUNCTION(execFindAnimIndexForName);
    DECLARE_FUNCTION(execSetChannelBlockMasterAlpha);
    DECLARE_FUNCTION(execBlendChannelBlock);
    DECLARE_FUNCTION(execGetChannelBlockBlendTarget);
    DECLARE_FUNCTION(execGetChannelBlockBlend);
    DECLARE_FUNCTION(execEmptyAnimChannels_ByBlock);
    DECLARE_FUNCTION(execEmptyAnimChannels_OnlyGroup);
    DECLARE_FUNCTION(execEmptyAnimChannels_AllButGroup);
    DECLARE_FUNCTION(execEmptyAnimChannel);
    DECLARE_FUNCTION(execSetChannelEventState);
    DECLARE_FUNCTION(execSetChannelGridState);
    DECLARE_FUNCTION(execSetAnimGridState);
    DECLARE_FUNCTION(execSetAnimPairState);
    DECLARE_FUNCTION(execSetAnimState);
    DECLARE_FUNCTION(execResetServer);
    DECLARE_FUNCTION(execFlushHashes);
    DECLARE_FUNCTION(execInitAnimationControllerEx);
    inline void __fastcall eventEnumerateRawAnimationSequences(dnArray<FSAnimationEnumeration>& References, class UClass* Controller, class UMesh* Mesh)
    {
        UAnimationControllerEx_eventEnumerateRawAnimationSequences_Parms Parms;
        Parms.References=References;
        Parms.Controller=Controller;
        Parms.Mesh=Mesh;
        ProcessEvent(FindFunctionChecked(ENGINE_EnumerateRawAnimationSequences), &Parms);
        References=Parms.References;
    }
    DECLARE_CLASS(UAnimationControllerEx,UObject,0,Engine)
    NO_DEFAULT_CONSTRUCTOR_START(UAnimationControllerEx)
    NO_DEFAULT_CONSTRUCTOR_INIT(ActiveBlends)
    NO_DEFAULT_CONSTRUCTOR_INIT(ChannelBlockActiveBlends)
    NO_DEFAULT_CONSTRUCTOR_INIT(AnimChannels)
    NO_DEFAULT_CONSTRUCTOR_INIT(AnimChannelBlocks)
    NO_DEFAULT_CONSTRUCTOR_INIT(Animations)
    NO_DEFAULT_CONSTRUCTOR_INIT(AnimationBlocks)
    NO_DEFAULT_CONSTRUCTOR_INIT(AnimationBlendPairs)
    NO_DEFAULT_CONSTRUCTOR_INIT(AnimationGrids)
    NO_DEFAULT_CONSTRUCTOR_INIT(_AnimIndexCache)
    NO_DEFAULT_CONSTRUCTOR_INIT(_AnimChannelCache)
    NO_DEFAULT_CONSTRUCTOR_INIT(_AnimRefIdCache)
    NO_DEFAULT_CONSTRUCTOR_INITLAST(CrossfadeGroups)
};
// Class AnimationControllerEx exported:
//   Properties size: 176 bytes (216 total)


//***************************************************************************//
/*	\class UMotionPrefab
*/
//***************************************************************************//

class ENGINE_API UMotionPrefab : public UObject
{
public:
    BITFIELD bNoMotion:1 GCC_PACK(4);
    BITFIELD bUseDamageInfo:1;
    BITFIELD bUseParentVelocity:1;
    BITFIELD bUseParentRotationRate:1;
    BYTE VelocityRelativeType GCC_PACK(4);
    FVector Velocity;
    FVector VelocityVariance;
    FRotator RotationRate;
    FRotator RotationRateVariance;
    DECLARE_CLASS(UMotionPrefab,UObject,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UMotionPrefab)
};
// Class MotionPrefab exported:
//   Properties size: 56 bytes (96 total)


//***************************************************************************//
/*	\class UHUDIconTable
*/
//***************************************************************************//

class ENGINE_API UHUDIconTable : public UObject
{
public:
    dnArray<FSHUDPickupEventIcon> PickupEventIcons;
    dnArray<FSHUDAmmoClipIcon> AmmoClipIcons;
    dnArray<FSHUDAmmoClipIcon> AmmoClipSpentIcons;
    DECLARE_CLASS(UHUDIconTable,UObject,0,Engine)
    NO_DEFAULT_CONSTRUCTOR_START(UHUDIconTable)
    NO_DEFAULT_CONSTRUCTOR_INIT(PickupEventIcons)
    NO_DEFAULT_CONSTRUCTOR_INIT(AmmoClipIcons)
    NO_DEFAULT_CONSTRUCTOR_INITLAST(AmmoClipSpentIcons)
};
// Class HUDIconTable exported:
//   Properties size: 36 bytes (76 total)


//***************************************************************************//
/*	\class UChallengeObject
*/
//***************************************************************************//


struct UChallengeObject_eventGetDefaultStatus_Parms
{
    BYTE ReturnValue;
};

struct UChallengeObject_eventCheckChallenge_Parms
{
    class AInfo* PP;
    BITFIELD ReturnValue;
};

struct UChallengeObject_eventSetChallIdx_Parms
{
    INT Idx;
};
class ENGINE_API UChallengeObject : public UObject
{
public:
    dnArray<INT> ChallDependencies;
    INT ChallIdx;
    FStringNoInit ExtraOptions;
    BYTE DefaultState;
    BITFIELD bHasDefaultStatus:1 GCC_PACK(4);
    FStringNoInit ChallName GCC_PACK(4);
    FStringNoInit Description;
    FStringNoInit HelpText;
    INT CheckU;
    INT CheckV;
    INT CheckW;
    INT CheckH;
    INT OpenCheckU;
    INT OpenCheckV;
    FLOAT CheckX;
    FLOAT CheckY;
    FLOAT CheckWidth;
    FLOAT YOffset;
    BITFIELD bComplete:1 GCC_PACK(4);
    inline BYTE __fastcall eventGetDefaultStatus()
    {
        UChallengeObject_eventGetDefaultStatus_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_GetDefaultStatus), &Parms);
        return Parms.ReturnValue;
    }
    inline BITFIELD __fastcall eventCheckChallenge(class AInfo* PP)
    {
        UChallengeObject_eventCheckChallenge_Parms Parms;
        Parms.ReturnValue=0;
        Parms.PP=PP;
        ProcessEvent(FindFunctionChecked(ENGINE_CheckChallenge), &Parms);
        return Parms.ReturnValue;
    }
    inline void __fastcall eventSetChallIdx(INT Idx)
    {
        UChallengeObject_eventSetChallIdx_Parms Parms;
        Parms.Idx=Idx;
        ProcessEvent(FindFunctionChecked(ENGINE_SetChallIdx), &Parms);
    }
    DECLARE_CLASS(UChallengeObject,UObject,0,Engine)
    NO_DEFAULT_CONSTRUCTOR_START(UChallengeObject)
    NO_DEFAULT_CONSTRUCTOR_INITLAST(ChallDependencies)
};
// Class ChallengeObject exported:
//   Properties size: 116 bytes (156 total)


//***************************************************************************//
/*	\class UField
*/
//***************************************************************************//

class ENGINE_API UField : public UObject
{
public:
    DECLARE_CLASS(UField,UObject,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UField)
};
// Class Field exported:
//   Properties size: 16 bytes (56 total)


//***************************************************************************//
/*	\class UProperty
*/
//***************************************************************************//

class ENGINE_API UProperty : public UField
{
public:
    DECLARE_CLASS(UProperty,UField,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UProperty)
};
// Class Property exported:
//   Properties size: 64 bytes (120 total)


//***************************************************************************//
/*	\class UStructProperty
*/
//***************************************************************************//

class ENGINE_API UStructProperty : public UProperty
{
public:
    DECLARE_CLASS(UStructProperty,UProperty,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UStructProperty)
};
// Class StructProperty exported:
//   Properties size: 8 bytes (128 total)


//***************************************************************************//
/*	\class UArrayProperty
*/
//***************************************************************************//

class ENGINE_API UArrayProperty : public UProperty
{
public:
    DECLARE_CLASS(UArrayProperty,UProperty,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UArrayProperty)
};
// Class ArrayProperty exported:
//   Properties size: 4 bytes (124 total)


//***************************************************************************//
/*	\class UStrProperty
*/
//***************************************************************************//

class ENGINE_API UStrProperty : public UProperty
{
public:
    DECLARE_CLASS(UStrProperty,UProperty,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UStrProperty)
};
// Class StrProperty exported:
//   Properties size: 0 bytes (120 total)


//***************************************************************************//
/*	\class UNameProperty
*/
//***************************************************************************//

class ENGINE_API UNameProperty : public UProperty
{
public:
    DECLARE_CLASS(UNameProperty,UProperty,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UNameProperty)
};
// Class NameProperty exported:
//   Properties size: 16 bytes (136 total)


//***************************************************************************//
/*	\class UObjectProperty
*/
//***************************************************************************//

class ENGINE_API UObjectProperty : public UProperty
{
public:
    DECLARE_CLASS(UObjectProperty,UProperty,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UObjectProperty)
};
// Class ObjectProperty exported:
//   Properties size: 4 bytes (124 total)


//***************************************************************************//
/*	\class UClassProperty
*/
//***************************************************************************//

class ENGINE_API UClassProperty : public UObjectProperty
{
public:
    DECLARE_CLASS(UClassProperty,UObjectProperty,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UClassProperty)
};
// Class ClassProperty exported:
//   Properties size: 4 bytes (128 total)


//***************************************************************************//
/*	\class UFloatProperty
*/
//***************************************************************************//

class ENGINE_API UFloatProperty : public UProperty
{
public:
    DECLARE_CLASS(UFloatProperty,UProperty,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UFloatProperty)
};
// Class FloatProperty exported:
//   Properties size: 0 bytes (120 total)


//***************************************************************************//
/*	\class UBoolProperty
*/
//***************************************************************************//

class ENGINE_API UBoolProperty : public UProperty
{
public:
    DECLARE_CLASS(UBoolProperty,UProperty,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UBoolProperty)
};
// Class BoolProperty exported:
//   Properties size: 4 bytes (124 total)


//***************************************************************************//
/*	\class UDelegateProperty
*/
//***************************************************************************//

class ENGINE_API UDelegateProperty : public UProperty
{
public:
    DECLARE_CLASS(UDelegateProperty,UProperty,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UDelegateProperty)
};
// Class DelegateProperty exported:
//   Properties size: 4 bytes (124 total)


//***************************************************************************//
/*	\class UPointerProperty
*/
//***************************************************************************//

class ENGINE_API UPointerProperty : public UProperty
{
public:
    DECLARE_CLASS(UPointerProperty,UProperty,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UPointerProperty)
};
// Class PointerProperty exported:
//   Properties size: 4 bytes (124 total)


//***************************************************************************//
/*	\class UIntProperty
*/
//***************************************************************************//

class ENGINE_API UIntProperty : public UProperty
{
public:
    DECLARE_CLASS(UIntProperty,UProperty,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UIntProperty)
};
// Class IntProperty exported:
//   Properties size: 0 bytes (120 total)


//***************************************************************************//
/*	\class UByteProperty
*/
//***************************************************************************//

class ENGINE_API UByteProperty : public UProperty
{
public:
    DECLARE_CLASS(UByteProperty,UProperty,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UByteProperty)
};
// Class ByteProperty exported:
//   Properties size: 4 bytes (124 total)


//***************************************************************************//
/*	\class UEnum
*/
//***************************************************************************//

class ENGINE_API UEnum : public UField
{
public:
    DECLARE_CLASS(UEnum,UField,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UEnum)
};
// Class Enum exported:
//   Properties size: 16 bytes (72 total)


//***************************************************************************//
/*	\class UConst
*/
//***************************************************************************//

class ENGINE_API UConst : public UField
{
public:
    DECLARE_CLASS(UConst,UField,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UConst)
};
// Class Const exported:
//   Properties size: 16 bytes (72 total)


//***************************************************************************//
/*	\class UStruct
*/
//***************************************************************************//

class ENGINE_API UStruct : public UField
{
public:
    DECLARE_CLASS(UStruct,UField,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UStruct)
};
// Class Struct exported:
//   Properties size: 80 bytes (136 total)


//***************************************************************************//
/*	\class UFunction
*/
//***************************************************************************//

class ENGINE_API UFunction : public UStruct
{
public:
    DECLARE_CLASS(UFunction,UStruct,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UFunction)
};
// Class Function exported:
//   Properties size: 56 bytes (192 total)


//***************************************************************************//
/*	\class UState
*/
//***************************************************************************//

class ENGINE_API UState : public UStruct
{
public:
    DECLARE_CLASS(UState,UStruct,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UState)
};
// Class State exported:
//   Properties size: 1048 bytes (1184 total)


//***************************************************************************//
/*	\class UClass
*/
//***************************************************************************//

class ENGINE_API UClass : public UState
{
public:
    DECLARE_CLASS(UClass,UState,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UClass)
};
// Class Class exported:
//   Properties size: 160 bytes (1344 total)


//***************************************************************************//
/*	\class ULanguage
*/
//***************************************************************************//

class ENGINE_API ULanguage : public UObject
{
public:
    DECLARE_CLASS(ULanguage,UObject,0|CLASS_Transient,Engine)
    NO_DEFAULT_CONSTRUCTOR(ULanguage)
};
// Class Language exported:
//   Properties size: 4 bytes (44 total)


//***************************************************************************//
/*	\class UPackage
*/
//***************************************************************************//

class ENGINE_API UPackage : public UObject
{
public:
    DECLARE_CLASS(UPackage,UObject,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UPackage)
};
// Class Package exported:
//   Properties size: 16 bytes (56 total)


//***************************************************************************//
/*	\class ULinker
*/
//***************************************************************************//

class ENGINE_API ULinker : public UObject
{
public:
    DECLARE_CLASS(ULinker,UObject,0|CLASS_Transient,Engine)
    NO_DEFAULT_CONSTRUCTOR(ULinker)
};
// Class Linker exported:
//   Properties size: 140 bytes (180 total)


//***************************************************************************//
/*	\class ULinkerSave
*/
//***************************************************************************//

class ENGINE_API ULinkerSave : public ULinker
{
public:
    DECLARE_CLASS(ULinkerSave,ULinker,0|CLASS_Transient,Engine)
    NO_DEFAULT_CONSTRUCTOR(ULinkerSave)
};
// Class LinkerSave exported:
//   Properties size: 52 bytes (232 total)


//***************************************************************************//
/*	\class ULinkerLoad
*/
//***************************************************************************//

class ENGINE_API ULinkerLoad : public ULinker
{
public:
    DECLARE_CLASS(ULinkerLoad,ULinker,0|CLASS_Transient,Engine)
    NO_DEFAULT_CONSTRUCTOR(ULinkerLoad)
};
// Class LinkerLoad exported:
//   Properties size: 1072 bytes (1252 total)


//***************************************************************************//
/*	\class UTextBuffer
*/
//***************************************************************************//

class ENGINE_API UTextBuffer : public UObject
{
public:
    DECLARE_CLASS(UTextBuffer,UObject,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UTextBuffer)
};
// Class TextBuffer exported:
//   Properties size: 24 bytes (64 total)

#endif

AUTOGENERATE_FUNCTION(UObject,418,execGetCountryCode);
AUTOGENERATE_FUNCTION(UObject,417,execObjectDeferredDestroy);
AUTOGENERATE_FUNCTION(UObject,416,execObjectDestroy);
AUTOGENERATE_FUNCTION(UObject,415,execIsDemo);
AUTOGENERATE_FUNCTION(UObject,414,execIsConsole);
AUTOGENERATE_FUNCTION(UObject,413,execQuitPS3Game);
AUTOGENERATE_FUNCTION(UObject,412,execEnoughRoom_TD);
AUTOGENERATE_FUNCTION(UObject,411,execEnoughRoom_SD);
AUTOGENERATE_FUNCTION(UObject,410,execEnoughRoom_GD);
AUTOGENERATE_FUNCTION(UObject,409,execGetInstallPct);
AUTOGENERATE_FUNCTION(UObject,408,execInstallIsCompleted);
AUTOGENERATE_FUNCTION(UObject,407,execInstallPS3Data);
AUTOGENERATE_FUNCTION(UObject,406,execIsPS3InstallNeeded);
AUTOGENERATE_FUNCTION(UObject,405,execGetLCDHelper);
AUTOGENERATE_FUNCTION(UObject,404,execGetGearboxEngineGlobals);
AUTOGENERATE_FUNCTION(UObject,403,execObjectIsDestroyed);
AUTOGENERATE_FUNCTION(UObject,402,execIsPS3);
AUTOGENERATE_FUNCTION(UObject,401,execIsXbox);
AUTOGENERATE_FUNCTION(UObject,400,execIsNotFinal);
AUTOGENERATE_FUNCTION(UObject,399,execGetStateName);
AUTOGENERATE_FUNCTION(UObject,398,execIsInState);
AUTOGENERATE_FUNCTION(UObject,397,execGotoState);
AUTOGENERATE_FUNCTION(UObject,396,execSplitObjectPath);
AUTOGENERATE_FUNCTION(UObject,395,execUnrealToMeters);
AUTOGENERATE_FUNCTION(UObject,394,execUnrealToFeetInches);
AUTOGENERATE_FUNCTION(UObject,393,execUnrealToInches);
AUTOGENERATE_FUNCTION(UObject,392,execGetWorldMax);
AUTOGENERATE_FUNCTION(UObject,391,execGetFilenameForDirectory);
AUTOGENERATE_FUNCTION(UObject,390,execGetFileCountForDirectory);
AUTOGENERATE_FUNCTION(UObject,389,execFormatClockTime);
AUTOGENERATE_FUNCTION(UObject,388,execUnclock);
AUTOGENERATE_FUNCTION(UObject,387,execClock);
AUTOGENERATE_FUNCTION(UObject,386,execUnclockStat);
AUTOGENERATE_FUNCTION(UObject,385,execClockStat);
AUTOGENERATE_FUNCTION(UObject,384,execSetConfigColor);
AUTOGENERATE_FUNCTION(UObject,383,execSetConfigBool);
AUTOGENERATE_FUNCTION(UObject,382,execSetConfigString);
AUTOGENERATE_FUNCTION(UObject,381,execSetConfigFloat);
AUTOGENERATE_FUNCTION(UObject,380,execSetConfigInt);
AUTOGENERATE_FUNCTION(UObject,379,execGetConfigColor);
AUTOGENERATE_FUNCTION(UObject,378,execGetConfigBool);
AUTOGENERATE_FUNCTION(UObject,377,execGetConfigString);
AUTOGENERATE_FUNCTION(UObject,376,execGetConfigFloat);
AUTOGENERATE_FUNCTION(UObject,375,execGetConfigInt);
AUTOGENERATE_FUNCTION(UObject,374,execLogStackTrace);
AUTOGENERATE_FUNCTION(UObject,373,execResetConfigByName);
AUTOGENERATE_FUNCTION(UObject,372,execResetConfig);
AUTOGENERATE_FUNCTION(UObject,371,execStaticSaveVideoConfig);
AUTOGENERATE_FUNCTION(UObject,370,execStaticSaveAudioConfig);
AUTOGENERATE_FUNCTION(UObject,369,execStaticSaveConfig);
AUTOGENERATE_FUNCTION(UObject,368,execSaveConfig);
AUTOGENERATE_FUNCTION(UObject,367,execSaveConfigFile);
AUTOGENERATE_FUNCTION(UObject,366,execDynamicLoadObject);
AUTOGENERATE_FUNCTION(UObject,365,execGetEnum);
AUTOGENERATE_FUNCTION(UObject,364,execSetPropertyText);
AUTOGENERATE_FUNCTION(UObject,363,execGetPropertyText);
AUTOGENERATE_FUNCTION(UObject,362,execDisable);
AUTOGENERATE_FUNCTION(UObject,361,execEnable);
AUTOGENERATE_FUNCTION(UObject,360,execCallingFunction);
AUTOGENERATE_FUNCTION(UObject,359,execClassForName);
AUTOGENERATE_FUNCTION(UObject,358,execIsA);
AUTOGENERATE_FUNCTION(UObject,357,execClassIsChildOf);
AUTOGENERATE_FUNCTION(UObject,356,execLocalize);
AUTOGENERATE_FUNCTION(UObject,355,execLog);
AUTOGENERATE_FUNCTION(UObject,354,execcheck);
AUTOGENERATE_FUNCTION(UObject,353,execHandleColorModifier);
AUTOGENERATE_FUNCTION(UObject,352,execHandleStringModifier);
AUTOGENERATE_FUNCTION(UObject,351,execHandleNameModifier);
AUTOGENERATE_FUNCTION(UObject,350,execHandleRotModifier);
AUTOGENERATE_FUNCTION(UObject,349,execHandleVectModifier);
AUTOGENERATE_FUNCTION(UObject,348,execHandleFloatModifier);
AUTOGENERATE_FUNCTION(UObject,347,execHandleIntModifier);
AUTOGENERATE_FUNCTION(UObject,346,execHandleBitModifier);
AUTOGENERATE_FUNCTION(UObject,345,execEvaluateCompare);
AUTOGENERATE_FUNCTION(UObject,344,execCompositeNames);
AUTOGENERATE_FUNCTION(UObject,343,execNameForString);
AUTOGENERATE_FUNCTION(UObject,342,execNotEqual_NameName);
AUTOGENERATE_FUNCTION(UObject,341,execEqualEqual_NameName);
AUTOGENERATE_FUNCTION(UObject,340,execNotEqual_ObjectObject);
AUTOGENERATE_FUNCTION(UObject,339,execEqualEqual_ObjectObject);
AUTOGENERATE_FUNCTION(UObject,338,execCLerp);
AUTOGENERATE_FUNCTION(UObject,337,execNotEqual_ColorColor);
AUTOGENERATE_FUNCTION(UObject,336,execEqualEqual_ColorColor);
AUTOGENERATE_FUNCTION(UObject,335,execAdd_ColorColor);
AUTOGENERATE_FUNCTION(UObject,334,execSubtract_ColorColor);
AUTOGENERATE_FUNCTION(UObject,333,execDivide_ColorFloat);
AUTOGENERATE_FUNCTION(UObject,332,execMultiply_ColorFloat);
AUTOGENERATE_FUNCTION(UObject,331,execMultiply_FloatColor);
AUTOGENERATE_FUNCTION(UObject,330,execGenerateColorFromChar);
AUTOGENERATE_FUNCTION(UObject,329,execFormatTimeString);
AUTOGENERATE_FUNCTION(UObject,328,execFormatString);
AUTOGENERATE_FUNCTION(UObject,327,execStripWhitespace);
AUTOGENERATE_FUNCTION(UObject,326,execJoinStringArray);
AUTOGENERATE_FUNCTION(UObject,325,execSplit);
AUTOGENERATE_FUNCTION(UObject,324,execDivide);
AUTOGENERATE_FUNCTION(UObject,323,execStrGetChar);
AUTOGENERATE_FUNCTION(UObject,322,execAsc);
AUTOGENERATE_FUNCTION(UObject,321,execChr);
AUTOGENERATE_FUNCTION(UObject,320,execLower);
AUTOGENERATE_FUNCTION(UObject,319,execCaps);
AUTOGENERATE_FUNCTION(UObject,318,execRight);
AUTOGENERATE_FUNCTION(UObject,317,execLeft);
AUTOGENERATE_FUNCTION(UObject,316,execMid);
AUTOGENERATE_FUNCTION(UObject,315,execInStr);
AUTOGENERATE_FUNCTION(UObject,314,execLen);
AUTOGENERATE_FUNCTION(UObject,313,execSubtractEqual_StrStr);
AUTOGENERATE_FUNCTION(UObject,312,execAtEqual_StrStr);
AUTOGENERATE_FUNCTION(UObject,311,execConcatEqual_StrStr);
AUTOGENERATE_FUNCTION(UObject,310,execComplementEqual_StrStr);
AUTOGENERATE_FUNCTION(UObject,309,execNotEqual_StrStr);
AUTOGENERATE_FUNCTION(UObject,308,execEqualEqual_StrStr);
AUTOGENERATE_FUNCTION(UObject,307,execGreaterEqual_StrStr);
AUTOGENERATE_FUNCTION(UObject,306,execLessEqual_StrStr);
AUTOGENERATE_FUNCTION(UObject,305,execGreater_StrStr);
AUTOGENERATE_FUNCTION(UObject,304,execLess_StrStr);
AUTOGENERATE_FUNCTION(UObject,303,execAt_StrStr);
AUTOGENERATE_FUNCTION(UObject,302,execConcat_StrStr);
AUTOGENERATE_FUNCTION(UObject,301,execCylinderLineSegmentIntersection);
AUTOGENERATE_FUNCTION(UObject,300,execQuatFromAxes);
AUTOGENERATE_FUNCTION(UObject,299,execQuatGetRight);
AUTOGENERATE_FUNCTION(UObject,298,execQuatGetUp);
AUTOGENERATE_FUNCTION(UObject,297,execQuatGetForward);
AUTOGENERATE_FUNCTION(UObject,296,execQuatGetAxes);
AUTOGENERATE_FUNCTION(UObject,295,execQuatRotateRotator);
AUTOGENERATE_FUNCTION(UObject,294,execQuatToRotator);
AUTOGENERATE_FUNCTION(UObject,293,execQuatFromRotator);
AUTOGENERATE_FUNCTION(UObject,292,execQuatFromAxisAndAngle);
AUTOGENERATE_FUNCTION(UObject,291,execQuatFindBetween);
AUTOGENERATE_FUNCTION(UObject,290,execQuatRotateVector);
AUTOGENERATE_FUNCTION(UObject,289,execQuatInvert);
AUTOGENERATE_FUNCTION(UObject,288,execQuatProduct);
AUTOGENERATE_FUNCTION(UObject,287,execSlerp);
AUTOGENERATE_FUNCTION(UObject,286,execFixedTurnDelta);
AUTOGENERATE_FUNCTION(UObject,285,execFixedTurn);
AUTOGENERATE_FUNCTION(UObject,284,execRVar);
AUTOGENERATE_FUNCTION(UObject,283,execNormalize);
AUTOGENERATE_FUNCTION(UObject,282,execOrthoRotation);
AUTOGENERATE_FUNCTION(UObject,281,execRotRand);
AUTOGENERATE_FUNCTION(UObject,280,execGetUnAxes);
AUTOGENERATE_FUNCTION(UObject,279,execGetAxes);
AUTOGENERATE_FUNCTION(UObject,278,execSubtractEqual_RotatorRotator);
AUTOGENERATE_FUNCTION(UObject,277,execAddEqual_RotatorRotator);
AUTOGENERATE_FUNCTION(UObject,276,execSubtract_RotatorRotator);
AUTOGENERATE_FUNCTION(UObject,275,execAdd_RotatorRotator);
AUTOGENERATE_FUNCTION(UObject,274,execDivideEqual_RotatorFloat);
AUTOGENERATE_FUNCTION(UObject,273,execMultiplyEqual_RotatorFloat);
AUTOGENERATE_FUNCTION(UObject,272,execNotEqual_RotatorRotator);
AUTOGENERATE_FUNCTION(UObject,271,execEqualEqual_RotatorRotator);
AUTOGENERATE_FUNCTION(UObject,270,execLessLess_RotatorRotator);
AUTOGENERATE_FUNCTION(UObject,269,execGreaterGreater_RotatorRotator);
AUTOGENERATE_FUNCTION(UObject,268,execDivide_RotatorFloat);
AUTOGENERATE_FUNCTION(UObject,267,execMultiply_FloatRotator);
AUTOGENERATE_FUNCTION(UObject,266,execMultiply_RotatorFloat);
AUTOGENERATE_FUNCTION(UObject,265,execRot);
AUTOGENERATE_FUNCTION(UObject,264,execGetClosestPointToSegment);
AUTOGENERATE_FUNCTION(UObject,263,execTransformVectorByRot);
AUTOGENERATE_FUNCTION(UObject,262,execRotateAroundAxis);
AUTOGENERATE_FUNCTION(UObject,261,execVMax);
AUTOGENERATE_FUNCTION(UObject,260,execVMin);
AUTOGENERATE_FUNCTION(UObject,259,execVHermiteInterp);
AUTOGENERATE_FUNCTION(UObject,258,execVLerp);
AUTOGENERATE_FUNCTION(UObject,257,execMirrorVectorByNormal);
AUTOGENERATE_FUNCTION(UObject,256,execVVar);
AUTOGENERATE_FUNCTION(UObject,255,execVRand);
AUTOGENERATE_FUNCTION(UObject,254,execInvert);
AUTOGENERATE_FUNCTION(UObject,253,execNormal);
AUTOGENERATE_FUNCTION(UObject,252,execVSizeSquared);
AUTOGENERATE_FUNCTION(UObject,251,execVSize);
AUTOGENERATE_FUNCTION(UObject,250,execSubtractEqual_VectorVector);
AUTOGENERATE_FUNCTION(UObject,249,execAddEqual_VectorVector);
AUTOGENERATE_FUNCTION(UObject,248,execDivideEqual_VectorFloat);
AUTOGENERATE_FUNCTION(UObject,247,execMultiplyEqual_VectorVector);
AUTOGENERATE_FUNCTION(UObject,246,execMultiplyEqual_VectorFloat);
AUTOGENERATE_FUNCTION(UObject,245,execCross_VectorVector);
AUTOGENERATE_FUNCTION(UObject,244,execDot_VectorVector);
AUTOGENERATE_FUNCTION(UObject,243,execNotEqual_VectorVector);
AUTOGENERATE_FUNCTION(UObject,242,execEqualEqual_VectorVector);
AUTOGENERATE_FUNCTION(UObject,241,execGreaterGreater_VectorRotator);
AUTOGENERATE_FUNCTION(UObject,240,execLessLess_VectorRotator);
AUTOGENERATE_FUNCTION(UObject,239,execSubtract_VectorVector);
AUTOGENERATE_FUNCTION(UObject,238,execAdd_VectorVector);
AUTOGENERATE_FUNCTION(UObject,237,execDivide_VectorFloat);
AUTOGENERATE_FUNCTION(UObject,236,execMultiply_VectorVector);
AUTOGENERATE_FUNCTION(UObject,235,execMultiply_FloatVector);
AUTOGENERATE_FUNCTION(UObject,234,execMultiply_VectorFloat);
AUTOGENERATE_FUNCTION(UObject,233,execSubtract_PreVector);
AUTOGENERATE_FUNCTION(UObject,232,execVect);
AUTOGENERATE_FUNCTION(UObject,231,execAsin);
AUTOGENERATE_FUNCTION(UObject,230,execPow);
AUTOGENERATE_FUNCTION(UObject,229,execSmerp);
AUTOGENERATE_FUNCTION(UObject,228,execLerp);
AUTOGENERATE_FUNCTION(UObject,227,execFClamp);
AUTOGENERATE_FUNCTION(UObject,226,execFVar);
AUTOGENERATE_FUNCTION(UObject,225,execFMax);
AUTOGENERATE_FUNCTION(UObject,224,execFMin);
AUTOGENERATE_FUNCTION(UObject,223,execRandRange);
AUTOGENERATE_FUNCTION(UObject,222,execFRand);
AUTOGENERATE_FUNCTION(UObject,221,execSquare);
AUTOGENERATE_FUNCTION(UObject,220,execSqrt);
AUTOGENERATE_FUNCTION(UObject,219,execLoge);
AUTOGENERATE_FUNCTION(UObject,218,execExp);
AUTOGENERATE_FUNCTION(UObject,217,execAtan2);
AUTOGENERATE_FUNCTION(UObject,216,execAtan);
AUTOGENERATE_FUNCTION(UObject,215,execTan);
AUTOGENERATE_FUNCTION(UObject,214,execAcos);
AUTOGENERATE_FUNCTION(UObject,213,execCos);
AUTOGENERATE_FUNCTION(UObject,212,execSin);
AUTOGENERATE_FUNCTION(UObject,211,execAbs);
AUTOGENERATE_FUNCTION(UObject,210,execSubtractEqual_FloatFloat);
AUTOGENERATE_FUNCTION(UObject,209,execAddEqual_FloatFloat);
AUTOGENERATE_FUNCTION(UObject,208,execDivideEqual_FloatFloat);
AUTOGENERATE_FUNCTION(UObject,207,execMultiplyEqual_FloatFloat);
AUTOGENERATE_FUNCTION(UObject,206,execNotEqual_FloatFloat);
AUTOGENERATE_FUNCTION(UObject,205,execComplementEqual_FloatFloat);
AUTOGENERATE_FUNCTION(UObject,204,execEqualEqual_FloatFloat);
AUTOGENERATE_FUNCTION(UObject,203,execGreaterEqual_FloatFloat);
AUTOGENERATE_FUNCTION(UObject,202,execLessEqual_FloatFloat);
AUTOGENERATE_FUNCTION(UObject,201,execGreater_FloatFloat);
AUTOGENERATE_FUNCTION(UObject,200,execLess_FloatFloat);
AUTOGENERATE_FUNCTION(UObject,199,execSubtract_FloatFloat);
AUTOGENERATE_FUNCTION(UObject,198,execAdd_FloatFloat);
AUTOGENERATE_FUNCTION(UObject,197,execPercent_FloatFloat);
AUTOGENERATE_FUNCTION(UObject,196,execDivide_FloatFloat);
AUTOGENERATE_FUNCTION(UObject,195,execMultiply_FloatFloat);
AUTOGENERATE_FUNCTION(UObject,194,execSubtract_PreFloat);
AUTOGENERATE_FUNCTION(UObject,193,execCeil);
AUTOGENERATE_FUNCTION(UObject,192,execRound);
AUTOGENERATE_FUNCTION(UObject,191,execClamp);
AUTOGENERATE_FUNCTION(UObject,190,execIVar);
AUTOGENERATE_FUNCTION(UObject,189,execMax);
AUTOGENERATE_FUNCTION(UObject,188,execMin);
AUTOGENERATE_FUNCTION(UObject,187,execRand);
AUTOGENERATE_FUNCTION(UObject,186,execSeed);
AUTOGENERATE_FUNCTION(UObject,185,execSubtractSubtract_Int);
AUTOGENERATE_FUNCTION(UObject,184,execAddAdd_Int);
AUTOGENERATE_FUNCTION(UObject,183,execSubtractSubtract_PreInt);
AUTOGENERATE_FUNCTION(UObject,182,execAddAdd_PreInt);
AUTOGENERATE_FUNCTION(UObject,181,execSubtractEqual_IntInt);
AUTOGENERATE_FUNCTION(UObject,180,execAddEqual_IntInt);
AUTOGENERATE_FUNCTION(UObject,179,execDivideEqual_IntFloat);
AUTOGENERATE_FUNCTION(UObject,178,execMultiplyEqual_IntFloat);
AUTOGENERATE_FUNCTION(UObject,177,execOr_IntInt);
AUTOGENERATE_FUNCTION(UObject,176,execXor_IntInt);
AUTOGENERATE_FUNCTION(UObject,175,execAnd_IntInt);
AUTOGENERATE_FUNCTION(UObject,174,execNotEqual_IntInt);
AUTOGENERATE_FUNCTION(UObject,173,execEqualEqual_IntInt);
AUTOGENERATE_FUNCTION(UObject,172,execGreaterEqual_IntInt);
AUTOGENERATE_FUNCTION(UObject,171,execLessEqual_IntInt);
AUTOGENERATE_FUNCTION(UObject,170,execGreater_IntInt);
AUTOGENERATE_FUNCTION(UObject,169,execLess_IntInt);
AUTOGENERATE_FUNCTION(UObject,168,execGreaterGreater_IntInt);
AUTOGENERATE_FUNCTION(UObject,167,execLessLess_IntInt);
AUTOGENERATE_FUNCTION(UObject,166,execSubtract_IntInt);
AUTOGENERATE_FUNCTION(UObject,165,execAdd_IntInt);
AUTOGENERATE_FUNCTION(UObject,164,execPercent_IntInt);
AUTOGENERATE_FUNCTION(UObject,163,execDivide_IntInt);
AUTOGENERATE_FUNCTION(UObject,162,execMultiply_IntInt);
AUTOGENERATE_FUNCTION(UObject,161,execSubtract_PreInt);
AUTOGENERATE_FUNCTION(UObject,160,execComplement_PreInt);
AUTOGENERATE_FUNCTION(UObject,159,execBVar);
AUTOGENERATE_FUNCTION(UObject,158,execSubtractSubtract_Byte);
AUTOGENERATE_FUNCTION(UObject,157,execAddAdd_Byte);
AUTOGENERATE_FUNCTION(UObject,156,execSubtractSubtract_PreByte);
AUTOGENERATE_FUNCTION(UObject,155,execAddAdd_PreByte);
AUTOGENERATE_FUNCTION(UObject,154,execSubtractEqual_ByteByte);
AUTOGENERATE_FUNCTION(UObject,153,execAddEqual_ByteByte);
AUTOGENERATE_FUNCTION(UObject,152,execDivideEqual_ByteByte);
AUTOGENERATE_FUNCTION(UObject,151,execMultiplyEqual_ByteByte);
AUTOGENERATE_FUNCTION(UObject,150,execOrOr_BoolBool);
AUTOGENERATE_FUNCTION(UObject,149,execXorXor_BoolBool);
AUTOGENERATE_FUNCTION(UObject,148,execAndAnd_BoolBool);
AUTOGENERATE_FUNCTION(UObject,147,execNotEqual_BoolBool);
AUTOGENERATE_FUNCTION(UObject,146,execEqualEqual_BoolBool);
AUTOGENERATE_FUNCTION(UObject,145,execNot_PreBool);
AUTOGENERATE_FUNCTION(UCommandlet,-1,execMain);
AUTOGENERATE_FUNCTION(UEngine,504,execGetMetagameDataSubsystem);
AUTOGENERATE_FUNCTION(UEngine,503,execGetOnlineSubsystem);
AUTOGENERATE_FUNCTION(ARenderActor,845,execRegisterIKClass);
AUTOGENERATE_FUNCTION(ARenderActor,844,execEnableIKSystem);
AUTOGENERATE_FUNCTION(ARenderActor,843,execProcessSpawnActorPoolOnDestroyed);
AUTOGENERATE_FUNCTION(ARenderActor,842,execForceAnimTick);
AUTOGENERATE_FUNCTION(ARenderActor,841,execGetAnimationMotion);
AUTOGENERATE_FUNCTION(ARenderActor,840,execAllAnims);
AUTOGENERATE_FUNCTION(ARenderActor,839,execMeshEvent);
AUTOGENERATE_FUNCTION(ARenderActor,838,execGetRenderBoundingBox);
AUTOGENERATE_FUNCTION(ARenderActor,837,execSpawnMountPrefabActor);
AUTOGENERATE_FUNCTION(ARenderActor,836,execProcessSpawnActorPrefab);
AUTOGENERATE_FUNCTION(ARenderActor,835,execApplyMotionPrefab);
AUTOGENERATE_FUNCTION(ARenderActor,834,execSpawnMotionPrefab);
AUTOGENERATE_FUNCTION(ARenderActor,833,execSkinMeshOptimization);
AUTOGENERATE_FUNCTION(ARenderActor,832,execSetHealth);
AUTOGENERATE_FUNCTION(AKarmaActor,-1,execImportNetworkRigidBodyState);
AUTOGENERATE_FUNCTION(AKarmaActor,-1,execTraceFireHit);
AUTOGENERATE_FUNCTION(AKarmaActor,831,execKGetSensors);
AUTOGENERATE_FUNCTION(AKarmaActor,830,execKGetInteractingActors);
AUTOGENERATE_FUNCTION(AKarmaActor,829,execKGetCollidingActors);
AUTOGENERATE_FUNCTION(AKarmaActor,828,execKSetJointsFrozenPercent);
AUTOGENERATE_FUNCTION(AKarmaActor,827,execKRemoveAboveNamed);
AUTOGENERATE_FUNCTION(AKarmaActor,826,execKRemoveBelowNamed);
AUTOGENERATE_FUNCTION(AKarmaActor,825,execKRemovePhysicsAction);
AUTOGENERATE_FUNCTION(AKarmaActor,824,execKFindPhysicsAction);
AUTOGENERATE_FUNCTION(AKarmaActor,823,execKUndisableCollisionBetween);
AUTOGENERATE_FUNCTION(AKarmaActor,822,execKDisableCollisionBetween);
AUTOGENERATE_FUNCTION(AKarmaActor,821,execKAddTorque);
AUTOGENERATE_FUNCTION(AKarmaActor,820,execKAddImpulse);
AUTOGENERATE_FUNCTION(AKarmaActor,819,execKAddForce);
AUTOGENERATE_FUNCTION(AKarmaActor,818,execKSleep);
AUTOGENERATE_FUNCTION(AKarmaActor,817,execKWake);
AUTOGENERATE_FUNCTION(AKarmaActor,816,execSetPhysicsEntityGroup);
AUTOGENERATE_FUNCTION(AKarmaActor,815,execSetPhysicsTimeScale);
AUTOGENERATE_FUNCTION(AKarmaActor,814,execSetEnableDisableThreshold);
AUTOGENERATE_FUNCTION(AKarmaActor,813,execSetMagneticProperties);
AUTOGENERATE_FUNCTION(AKarmaActor,812,execSetDynamicInteractionClassification);
AUTOGENERATE_FUNCTION(AKarmaActor,811,execSetStaticInteractionClassification);
AUTOGENERATE_FUNCTION(AKarmaActor,810,execSetKMaterialProperties);
AUTOGENERATE_FUNCTION(AKarmaActor,809,execSetKRestitution);
AUTOGENERATE_FUNCTION(AKarmaActor,808,execSetKFriction);
AUTOGENERATE_FUNCTION(AKarmaActor,807,execGetConstraint);
AUTOGENERATE_FUNCTION(AKarmaActor,806,execGetConstraintCount);
AUTOGENERATE_FUNCTION(AKarmaActor,805,execStopPersistantPhysicsEffects);
AUTOGENERATE_FUNCTION(AKarmaActor,804,execKHurtRadiusActivity);
AUTOGENERATE_FUNCTION(AKarmaActor,803,execSetPhysicsPose);
AUTOGENERATE_FUNCTION(AKarmaActor,802,execKPushGeneratedSimpleState);
AUTOGENERATE_FUNCTION(AKarmaActor,801,execKPopState);
AUTOGENERATE_FUNCTION(AKarmaActor,800,execKPushState);
AUTOGENERATE_FUNCTION(AKarmaActor,799,execKGetRotationVector);
AUTOGENERATE_FUNCTION(AKarmaActor,798,execKGetLinearVelocityAtPoint);
AUTOGENERATE_FUNCTION(AKarmaActor,797,execKGetAngularAcceleration);
AUTOGENERATE_FUNCTION(AKarmaActor,796,execKGetLinearAcceleration);
AUTOGENERATE_FUNCTION(AKarmaActor,795,execKGetAngularVelocity);
AUTOGENERATE_FUNCTION(AKarmaActor,794,execKGetLinearVelocity);
AUTOGENERATE_FUNCTION(AKarmaActor,793,execKSetAngularAcceleration);
AUTOGENERATE_FUNCTION(AKarmaActor,792,execKSetLinearAcceleration);
AUTOGENERATE_FUNCTION(AKarmaActor,791,execKSetAngularVelocity);
AUTOGENERATE_FUNCTION(AKarmaActor,790,execKSetLinearVelocity);
AUTOGENERATE_FUNCTION(AActor,-1,execNU_Location);
AUTOGENERATE_FUNCTION(AActor,-1,execBSPSurfaceIsValidForMineAttachment);
AUTOGENERATE_FUNCTION(AActor,789,execGetSaveGameMapName);
AUTOGENERATE_FUNCTION(AActor,788,execFastSavesEnabled);
AUTOGENERATE_FUNCTION(AActor,787,execSaveGameExistsEx);
AUTOGENERATE_FUNCTION(AActor,786,execSaveGameExists);
AUTOGENERATE_FUNCTION(AActor,785,execGetSavedGameLongInfo);
AUTOGENERATE_FUNCTION(AActor,784,execGetSavedGameInfo);
AUTOGENERATE_FUNCTION(AActor,783,execGetNumSavedGames);
AUTOGENERATE_FUNCTION(AActor,782,execDeleteSavedGame);
AUTOGENERATE_FUNCTION(AActor,781,execSaveGame);
AUTOGENERATE_FUNCTION(AActor,780,execLoadGame);
AUTOGENERATE_FUNCTION(AActor,779,execSendMailMessage);
AUTOGENERATE_FUNCTION(AActor,778,execScreenShotIsValid);
AUTOGENERATE_FUNCTION(AActor,777,execScreenshot);
AUTOGENERATE_FUNCTION(AActor,776,execGetNextPlayerProfile);
AUTOGENERATE_FUNCTION(AActor,775,execDestroyPlayerProfile);
AUTOGENERATE_FUNCTION(AActor,774,execCreatePlayerProfile);
AUTOGENERATE_FUNCTION(AActor,773,execSwitchToPlayerProfile);
AUTOGENERATE_FUNCTION(AActor,772,execProfileSwitchNeedsReLaunch);
AUTOGENERATE_FUNCTION(AActor,771,execGetCurrentPlayerProfile);
AUTOGENERATE_FUNCTION(AActor,770,execGetMeshList);
AUTOGENERATE_FUNCTION(AActor,769,execGetSkinList);
AUTOGENERATE_FUNCTION(AActor,768,execGetNextMDSMapList);
AUTOGENERATE_FUNCTION(AActor,767,execGetNextMDSMap);
AUTOGENERATE_FUNCTION(AActor,766,execGetNextClass);
AUTOGENERATE_FUNCTION(AActor,765,execGetNextThing);
AUTOGENERATE_FUNCTION(AActor,764,execGetNextIntDesc);
AUTOGENERATE_FUNCTION(AActor,763,execGetNextInt);
AUTOGENERATE_FUNCTION(AActor,762,execGetURLMap);
AUTOGENERATE_FUNCTION(AActor,761,execGetNextSkin);
AUTOGENERATE_FUNCTION(AActor,760,execGetMapName);
AUTOGENERATE_FUNCTION(AActor,759,execNewColor);
AUTOGENERATE_FUNCTION(AActor,758,execRotateVectorAroundAxis);
AUTOGENERATE_FUNCTION(AActor,757,execEvalTimeCurve);
AUTOGENERATE_FUNCTION(AActor,756,execEvalTimeRampUnsafe);
AUTOGENERATE_FUNCTION(AActor,755,execEvalTimeRamp);
AUTOGENERATE_FUNCTION(AActor,754,execVisibleCollidingActors);
AUTOGENERATE_FUNCTION(AActor,753,execMountedActorListActors);
AUTOGENERATE_FUNCTION(AActor,752,execVisibleActors);
AUTOGENERATE_FUNCTION(AActor,751,execRadiusActors);
AUTOGENERATE_FUNCTION(AActor,750,execTraceActors);
AUTOGENERATE_FUNCTION(AActor,749,execTouchingActors);
AUTOGENERATE_FUNCTION(AActor,748,execChildActors);
AUTOGENERATE_FUNCTION(AActor,747,execAllActors);
AUTOGENERATE_FUNCTION(AActor,746,execAllProperties);
AUTOGENERATE_FUNCTION(AActor,745,execMarkDirtyRenderFlags);
AUTOGENERATE_FUNCTION(AActor,744,execCopyDisplaySkinsToActorSkins);
AUTOGENERATE_FUNCTION(AActor,743,execGetNumberOfMaterials);
AUTOGENERATE_FUNCTION(AActor,742,execGetRenderObjectDefaultTexture);
AUTOGENERATE_FUNCTION(AActor,741,execSetRenderObjectTexture);
AUTOGENERATE_FUNCTION(AActor,740,execGetRenderObjectTexture);
AUTOGENERATE_FUNCTION(AActor,739,execSetPortalSurfaceState);
AUTOGENERATE_FUNCTION(AActor,-1,execIsIntersecting);
AUTOGENERATE_FUNCTION(AActor,738,execGetLightBrightness);
AUTOGENERATE_FUNCTION(AActor,737,execGetLightColor);
AUTOGENERATE_FUNCTION(AActor,736,execTraceEx);
AUTOGENERATE_FUNCTION(AActor,735,execTrace);
AUTOGENERATE_FUNCTION(AActor,734,execFastTrace);
AUTOGENERATE_FUNCTION(AActor,733,execEncompasses);
AUTOGENERATE_FUNCTION(AActor,732,execFindNearWaterPoint);
AUTOGENERATE_FUNCTION(AActor,731,execTraceWaterPoint);
AUTOGENERATE_FUNCTION(AActor,730,execIsInWaterRegion);
AUTOGENERATE_FUNCTION(AActor,729,execGetPointRegion);
AUTOGENERATE_FUNCTION(AActor,728,execGetPointPhysicsVolume);
AUTOGENERATE_FUNCTION(AActor,727,execPushOutCheck);
AUTOGENERATE_FUNCTION(AActor,726,execPointCheck);
AUTOGENERATE_FUNCTION(AActor,725,execActorClassPointCheck);
AUTOGENERATE_FUNCTION(AActor,724,execPlayerCanSeeMe);
AUTOGENERATE_FUNCTION(AActor,723,execZoneIsVisible);
AUTOGENERATE_FUNCTION(AActor,722,execGetCameraViewInfo);
AUTOGENERATE_FUNCTION(AActor,721,execGlobalTrigger);
AUTOGENERATE_FUNCTION(AActor,720,execGetSpecialEventParms);
AUTOGENERATE_FUNCTION(AActor,719,execUnregisterSpecialEvent);
AUTOGENERATE_FUNCTION(AActor,718,execRegisterSpecialEvent);
AUTOGENERATE_FUNCTION(AActor,717,execGetSequence);
AUTOGENERATE_FUNCTION(AActor,716,execFreezeAnimations);
AUTOGENERATE_FUNCTION(AActor,715,execGetAnimMovement);
AUTOGENERATE_FUNCTION(AActor,714,execSetGlobalAnimRate);
AUTOGENERATE_FUNCTION(AActor,713,execSetAnimRate);
AUTOGENERATE_FUNCTION(AActor,712,execSetAnimFrame);
AUTOGENERATE_FUNCTION(AActor,711,execClearAnimGroup);
AUTOGENERATE_FUNCTION(AActor,710,execClearAnim);
AUTOGENERATE_FUNCTION(AActor,709,execClearAnimAll);
AUTOGENERATE_FUNCTION(AActor,708,execHasAnim);
AUTOGENERATE_FUNCTION(AActor,707,execFinishAnim);
AUTOGENERATE_FUNCTION(AActor,706,execGetAnimGroup);
AUTOGENERATE_FUNCTION(AActor,705,execSetAnimGroup);
AUTOGENERATE_FUNCTION(AActor,704,execIsAnimating);
AUTOGENERATE_FUNCTION(AActor,703,execPlayAnimEx);
AUTOGENERATE_FUNCTION(AActor,-1,execOnDetachFromPinball);
AUTOGENERATE_FUNCTION(AActor,-1,execOnAttachToPinball);
AUTOGENERATE_FUNCTION(AActor,702,execSetAmbientMusic);
AUTOGENERATE_FUNCTION(AActor,701,execSetAmbientSound);
AUTOGENERATE_FUNCTION(AActor,-1,execScaleSoundVolume);
AUTOGENERATE_FUNCTION(AActor,-1,execScaleSoundPitch);
AUTOGENERATE_FUNCTION(AActor,-1,execScaleSoundRadius);
AUTOGENERATE_FUNCTION(AActor,-1,execFindAndStopSound);
AUTOGENERATE_FUNCTION(AActor,-1,execFindAndFadeSound);
AUTOGENERATE_FUNCTION(AActor,-1,execFindAndPlaySound);
AUTOGENERATE_FUNCTION(AActor,-1,execFindSoundIndex);
AUTOGENERATE_FUNCTION(AActor,-1,execPlayAmbientSoundInfo);
AUTOGENERATE_FUNCTION(AActor,-1,execGetSoundInfoDuration);
AUTOGENERATE_FUNCTION(AActor,-1,execStopSoundInfo);
AUTOGENERATE_FUNCTION(AActor,-1,execFadeSoundInfo);
AUTOGENERATE_FUNCTION(AActor,-1,execPlaySoundInfo);
AUTOGENERATE_FUNCTION(AActor,700,execOverrideMixerGroupVolume);
AUTOGENERATE_FUNCTION(AActor,699,execMusicPlay);
AUTOGENERATE_FUNCTION(AActor,698,execFadeSound);
AUTOGENERATE_FUNCTION(AActor,697,execPlaySound);
AUTOGENERATE_FUNCTION(AActor,696,execStopAllMySounds);
AUTOGENERATE_FUNCTION(AActor,695,execStopSound);
AUTOGENERATE_FUNCTION(AActor,694,execSetSlotVisFalloffRate);
AUTOGENERATE_FUNCTION(AActor,693,execSetSlotPitch);
AUTOGENERATE_FUNCTION(AActor,692,execSetSlotVolume);
AUTOGENERATE_FUNCTION(AActor,691,execSetGlobalVolume);
AUTOGENERATE_FUNCTION(AActor,690,execGetSlotVisData);
AUTOGENERATE_FUNCTION(AActor,689,execGetSlotLoopAlpha);
AUTOGENERATE_FUNCTION(AActor,688,execGetSlotPitch);
AUTOGENERATE_FUNCTION(AActor,687,execGetSlotVolume);
AUTOGENERATE_FUNCTION(AActor,686,execGetSoundDuration);
AUTOGENERATE_FUNCTION(AActor,685,execGetGlobalVolume);
AUTOGENERATE_FUNCTION(AActor,684,execIsSoundPlayingOnSlot);
AUTOGENERATE_FUNCTION(AActor,683,execGetVisibilityPoint);
AUTOGENERATE_FUNCTION(AActor,682,execMarkers_ClearAll);
AUTOGENERATE_FUNCTION(AActor,681,execMarkers_AddText);
AUTOGENERATE_FUNCTION(AActor,680,execMarkers_AddSprite);
AUTOGENERATE_FUNCTION(AActor,679,execMarkers_AddIcon);
AUTOGENERATE_FUNCTION(AActor,678,execMarkers_AddCross);
AUTOGENERATE_FUNCTION(AActor,677,execMarkers_AddBounds);
AUTOGENERATE_FUNCTION(AActor,676,execMarkers_AddLine);
AUTOGENERATE_FUNCTION(AActor,675,execMarkers_AddCylinder);
AUTOGENERATE_FUNCTION(AActor,674,execMarkers_AddCircle);
AUTOGENERATE_FUNCTION(AActor,673,execMarkers_AddArrow);
AUTOGENERATE_FUNCTION(AActor,672,execMarkers_AddDiamond);
AUTOGENERATE_FUNCTION(AActor,671,execMarkers_AddPoint);
AUTOGENERATE_FUNCTION(AActor,670,execFinishInterpolation);
AUTOGENERATE_FUNCTION(AActor,-1,execVehicleDriverCanPickupItem);
AUTOGENERATE_FUNCTION(AActor,669,execVehicleGetDriver);
AUTOGENERATE_FUNCTION(AActor,668,execCalcProjVelocity);
AUTOGENERATE_FUNCTION(AActor,667,execCreateDesiredRotation_Roll);
AUTOGENERATE_FUNCTION(AActor,666,execCreateDesiredRotation_Yaw);
AUTOGENERATE_FUNCTION(AActor,665,execCreateDesiredRotation_Pitch);
AUTOGENERATE_FUNCTION(AActor,664,execClientCreateDesiredRotation);
AUTOGENERATE_FUNCTION(AActor,663,execCreateDesiredRotation);
AUTOGENERATE_FUNCTION(AActor,662,execDisableDesiredRotation_Roll);
AUTOGENERATE_FUNCTION(AActor,661,execDisableDesiredRotation_Yaw);
AUTOGENERATE_FUNCTION(AActor,660,execDisableDesiredRotation_Pitch);
AUTOGENERATE_FUNCTION(AActor,659,execDisableDesiredRotation);
AUTOGENERATE_FUNCTION(AActor,658,execSetDesiredRotation_Roll);
AUTOGENERATE_FUNCTION(AActor,657,execSetDesiredRotation_Yaw);
AUTOGENERATE_FUNCTION(AActor,656,execSetDesiredRotation_Pitch);
AUTOGENERATE_FUNCTION(AActor,655,execSetDesiredRotation);
AUTOGENERATE_FUNCTION(AActor,654,execDisableFixedRotationRate);
AUTOGENERATE_FUNCTION(AActor,653,execSetFixedRotationRate);
AUTOGENERATE_FUNCTION(AActor,652,execSetRotation);
AUTOGENERATE_FUNCTION(AActor,651,execClientCreateDesiredLocationEx);
AUTOGENERATE_FUNCTION(AActor,650,execCreateDesiredLocationEx);
AUTOGENERATE_FUNCTION(AActor,649,execCreateDesiredLocation);
AUTOGENERATE_FUNCTION(AActor,648,execDisableDesiredLocation);
AUTOGENERATE_FUNCTION(AActor,647,execSetDesiredLocationPoints);
AUTOGENERATE_FUNCTION(AActor,646,execSetDesiredLocation);
AUTOGENERATE_FUNCTION(AActor,645,execSetLocation);
AUTOGENERATE_FUNCTION(AActor,644,execMoveActor);
AUTOGENERATE_FUNCTION(AActor,643,execDropToFloor);
AUTOGENERATE_FUNCTION(AActor,642,execSetPhysics);
AUTOGENERATE_FUNCTION(AActor,641,execSetOwner);
AUTOGENERATE_FUNCTION(AActor,640,execGetGravity);
AUTOGENERATE_FUNCTION(AActor,639,execSetMass);
AUTOGENERATE_FUNCTION(AActor,638,execWorldExtentCheck);
AUTOGENERATE_FUNCTION(AActor,637,execFindBlockingActors);
AUTOGENERATE_FUNCTION(AActor,636,execFindSpot);
AUTOGENERATE_FUNCTION(AActor,635,execAttachToActor);
AUTOGENERATE_FUNCTION(AActor,634,execAttachToActorTagged);
AUTOGENERATE_FUNCTION(AActor,633,execAttachToActorMountPrefab);
AUTOGENERATE_FUNCTION(AActor,632,execGenerateMountPrefabLocation);
AUTOGENERATE_FUNCTION(AActor,631,execDetachFromMountParent);
AUTOGENERATE_FUNCTION(AActor,630,execForceMountUpdate);
AUTOGENERATE_FUNCTION(AActor,629,execIsMountedTo);
AUTOGENERATE_FUNCTION(AActor,628,execGetMountLocation);
AUTOGENERATE_FUNCTION(AActor,627,execHandleInitialMountParent);
AUTOGENERATE_FUNCTION(AActor,626,execGetCollisionBounds);
AUTOGENERATE_FUNCTION(AActor,625,execShouldTouch);
AUTOGENERATE_FUNCTION(AActor,624,execEmptyTouchClasses);
AUTOGENERATE_FUNCTION(AActor,623,execRemoveTouchClass);
AUTOGENERATE_FUNCTION(AActor,622,execAddTouchClass);
AUTOGENERATE_FUNCTION(AActor,621,execSetCollision);
AUTOGENERATE_FUNCTION(AActor,620,execSetCollisionSize);
AUTOGENERATE_FUNCTION(AActor,-1,execStaticAttachDecal);
AUTOGENERATE_FUNCTION(AActor,619,execSpawnAmmoCasing);
AUTOGENERATE_FUNCTION(AActor,-1,execPerformTraceFireEffects);
AUTOGENERATE_FUNCTION(AActor,-1,execTraceFireHit);
AUTOGENERATE_FUNCTION(AActor,-1,execTraceFireMaterialHit);
AUTOGENERATE_FUNCTION(AActor,618,execTraceActor);
AUTOGENERATE_FUNCTION(AActor,617,execPerformDamageCategoryEffectEx);
AUTOGENERATE_FUNCTION(AActor,616,execTraceFire);
AUTOGENERATE_FUNCTION(AActor,615,execSpawn);
AUTOGENERATE_FUNCTION(AActor,614,execDestroy);
AUTOGENERATE_FUNCTION(AActor,613,execCallFunction);
AUTOGENERATE_FUNCTION(AActor,612,execGetTickFrameStamp);
AUTOGENERATE_FUNCTION(AActor,611,execFinishSlottedSound);
AUTOGENERATE_FUNCTION(AActor,610,execSleep);
AUTOGENERATE_FUNCTION(AActor,609,execCopyTimers);
AUTOGENERATE_FUNCTION(AActor,608,execEndCallbackTimer_Always);
AUTOGENERATE_FUNCTION(AActor,607,execSetCallbackTimer_Always);
AUTOGENERATE_FUNCTION(AActor,606,execEndCallbackTimer);
AUTOGENERATE_FUNCTION(AActor,605,execSetCallbackTimer);
AUTOGENERATE_FUNCTION(AActor,604,execGetOverlayEffectAlpha);
AUTOGENERATE_FUNCTION(AActor,603,execGetActorColor);
AUTOGENERATE_FUNCTION(AActor,602,execSetActorColorEx);
AUTOGENERATE_FUNCTION(AActor,601,execSetActorColor);
AUTOGENERATE_FUNCTION(AActor,600,execRemoveActorColor);
AUTOGENERATE_FUNCTION(AActor,599,execGetZoneLastRenderTime);
AUTOGENERATE_FUNCTION(AActor,598,execSetPostPivot);
AUTOGENERATE_FUNCTION(AActor,597,execSetPrePivot);
AUTOGENERATE_FUNCTION(AActor,596,execGetRenderObject);
AUTOGENERATE_FUNCTION(AActor,595,execSetRenderObject);
AUTOGENERATE_FUNCTION(AActor,594,execCalculateDrawScaleDifference);
AUTOGENERATE_FUNCTION(AActor,593,execSetDrawscaleEx);
AUTOGENERATE_FUNCTION(AActor,592,execSetDrawscale3D);
AUTOGENERATE_FUNCTION(AActor,591,execSetDrawscale);
AUTOGENERATE_FUNCTION(AActor,590,execSetHidden);
AUTOGENERATE_FUNCTION(AActor,589,execFadeActorColor);
AUTOGENERATE_FUNCTION(AActor,588,execClearActorColorFade);
AUTOGENERATE_FUNCTION(AActor,587,execGetScaleModifierTime);
AUTOGENERATE_FUNCTION(AActor,586,execGetScaleModifierTarget);
AUTOGENERATE_FUNCTION(AActor,585,execGetScaleModifier);
AUTOGENERATE_FUNCTION(AActor,584,execHasScaleModifier);
AUTOGENERATE_FUNCTION(AActor,583,execClearScaleModifier);
AUTOGENERATE_FUNCTION(AActor,582,execClearScaleModifierGroup);
AUTOGENERATE_FUNCTION(AActor,581,execCalcScaleModifier);
AUTOGENERATE_FUNCTION(AActor,580,execUpdateScaleModifier);
AUTOGENERATE_FUNCTION(AActor,579,execResetScaleModifier);
AUTOGENERATE_FUNCTION(AActor,578,execSetScaleModifierEx);
AUTOGENERATE_FUNCTION(AActor,577,execSetScaleModifier);
AUTOGENERATE_FUNCTION(AActor,576,execGetAnimationStart);
AUTOGENERATE_FUNCTION(AActor,575,execDrawWorldDebugPoint);
AUTOGENERATE_FUNCTION(AActor,574,execGetBonePartMapper);
AUTOGENERATE_FUNCTION(AActor,573,execGetLimbCapInfo);
AUTOGENERATE_FUNCTION(AActor,572,execGetLimbDestroyedEffect);
AUTOGENERATE_FUNCTION(AActor,571,execGetDestroyableBoneForBone);
AUTOGENERATE_FUNCTION(AActor,570,execGetBodyPartForBone);
AUTOGENERATE_FUNCTION(AActor,569,execGetStaticMeshInstance);
AUTOGENERATE_FUNCTION(AActor,568,execGetMeshInstance);
AUTOGENERATE_FUNCTION(AActor,567,execSetTag);
AUTOGENERATE_FUNCTION(AActor,566,execConsoleCommand);
AUTOGENERATE_FUNCTION(AActor,565,execShowStack);
AUTOGENERATE_FUNCTION(AActor,564,execDebugBreak);
AUTOGENERATE_FUNCTION(AActor,563,execError);
AUTOGENERATE_FUNCTION(AActor,562,execIsMyDigs);
AUTOGENERATE_FUNCTION(AActor,561,execIsMP);
AUTOGENERATE_FUNCTION(AActor,560,execGetEntryLevel);
AUTOGENERATE_FUNCTION(AActor,-1,execSentinelAddEvent);
AUTOGENERATE_FUNCTION(ULCDHelper,-1,execChangeRoomSetUnlocks);
AUTOGENERATE_FUNCTION(ULCDHelper,-1,execDigsSetUnlocks);
AUTOGENERATE_FUNCTION(ULCDHelper,-1,execMPSetMap);
AUTOGENERATE_FUNCTION(ULCDHelper,-1,execSPUse4Weapons);
AUTOGENERATE_FUNCTION(ULCDHelper,-1,execSPClassicFreezeRay);
AUTOGENERATE_FUNCTION(ULCDHelper,-1,execSPHeadScale);
AUTOGENERATE_FUNCTION(ULCDHelper,-1,execSPGameSpeed);
AUTOGENERATE_FUNCTION(ULCDHelper,-1,execSPGrayscaleMode);
AUTOGENERATE_FUNCTION(ULCDHelper,-1,execSPMirrorMode);
AUTOGENERATE_FUNCTION(ULCDHelper,-1,execSPSetInstaGib);
AUTOGENERATE_FUNCTION(ULCDHelper,-1,execSPSetInfiniteAmmo);
AUTOGENERATE_FUNCTION(ULCDHelper,-1,execSPSetGodMode);
AUTOGENERATE_FUNCTION(ULCDHelper,-1,execSPSetCheat);
AUTOGENERATE_FUNCTION(ULCDHelper,-1,execSPSetEgoAwardsForLevel);
AUTOGENERATE_FUNCTION(ULCDHelper,-1,execSPSetEgo);
AUTOGENERATE_FUNCTION(ULCDHelper,-1,execSPSetMap);
AUTOGENERATE_FUNCTION(ULCDHelper,-1,execNotifyLoading);
AUTOGENERATE_FUNCTION(ULCDHelper,-1,execAddMPMapName);
AUTOGENERATE_FUNCTION(UGearboxEngineGlobals,-1,execRequestDeferredGibCallback);
AUTOGENERATE_FUNCTION(UGearboxEngineGlobals,-1,execRequestDeferredWeaponPickup);
AUTOGENERATE_FUNCTION(UGearboxEngineGlobals,-1,execCanDoExitWoundNow);
AUTOGENERATE_FUNCTION(UGearboxEngineGlobals,-1,execAssaultCaptainCanFireRealShotNow);
AUTOGENERATE_FUNCTION(UPlayer,508,execClearInput);
AUTOGENERATE_FUNCTION(UPlayer,507,execHasFocus);
AUTOGENERATE_FUNCTION(UOnlineServerFactory,522,execLoadFavourites);
AUTOGENERATE_FUNCTION(UOnlineServerFactory,521,execSaveFavourites);
AUTOGENERATE_FUNCTION(UOnlineServerFactory,520,execSetServerFavorite);
AUTOGENERATE_FUNCTION(UOnlineServerFactory,519,execConnectTo);
AUTOGENERATE_FUNCTION(UOnlineServerFactory,518,execSortServers);
AUTOGENERATE_FUNCTION(UOnlineServerFactory,517,execUnlockMutex);
AUTOGENERATE_FUNCTION(UOnlineServerFactory,516,execLockMutex);
AUTOGENERATE_FUNCTION(UOnlineServerFactory,515,execHasNoErrors);
AUTOGENERATE_FUNCTION(UOnlineServerFactory,514,execIsWaitingForResponse);
AUTOGENERATE_FUNCTION(UOnlineServerFactory,513,execInterruptQuery);
AUTOGENERATE_FUNCTION(UOnlineServerFactory,512,execStartQuery);
AUTOGENERATE_FUNCTION(UOnlineAgent,502,execIsDLCInstalled);
AUTOGENERATE_FUNCTION(UOnlineAgent,501,execCheckForNewDLC);
AUTOGENERATE_FUNCTION(UOnlineAgent,500,execGetInstalledDlcMask);
AUTOGENERATE_FUNCTION(UOnlineAgent,499,execGetNewDlcNames);
AUTOGENERATE_FUNCTION(UOnlineAgent,498,execHasInstalledNewDlc);
AUTOGENERATE_FUNCTION(UOnlineAgent,497,execGetCorruptDLCNames);
AUTOGENERATE_FUNCTION(UOnlineAgent,496,execIsDLCCorrupt);
AUTOGENERATE_FUNCTION(UOnlineAgent,495,execIsPrivateMatch);
AUTOGENERATE_FUNCTION(UOnlineAgent,494,execIsActive);
AUTOGENERATE_FUNCTION(UOnlineAgent,493,execBreakpoint);
AUTOGENERATE_FUNCTION(UOnlineAgent,492,execStopAsyncLeaderboardOperations);
AUTOGENERATE_FUNCTION(UOnlineAgent,491,execCancel);
AUTOGENERATE_FUNCTION(UOnlineAgent,490,execProcessDedicatedServerTravel);
AUTOGENERATE_FUNCTION(UOnlineAgent,489,execStartWaitingForResponse);
AUTOGENERATE_FUNCTION(UOnlineAgent,488,execIsWaitingForResponse);
AUTOGENERATE_FUNCTION(UOnlineAgent,487,execStopVoIPRecording);
AUTOGENERATE_FUNCTION(UOnlineAgent,486,execStartVoIPRecording);
AUTOGENERATE_FUNCTION(UOnlineAgent,485,execSetReliableVoIP);
AUTOGENERATE_FUNCTION(UOnlineAgent,484,execIsVoipTeamOnly);
AUTOGENERATE_FUNCTION(UOnlineAgent,483,execSetTeamGame);
AUTOGENERATE_FUNCTION(UOnlineAgent,482,execAddVoIPPlayer);
AUTOGENERATE_FUNCTION(UOnlineAgent,481,execGetLocalizedGameTypeForId);
AUTOGENERATE_FUNCTION(UOnlineAgent,480,execSubmitScoreToLeaderboard);
AUTOGENERATE_FUNCTION(UOnlineAgent,479,execRefreshLeaderboard);
AUTOGENERATE_FUNCTION(UOnlineAgent,478,execShowPartyUI);
AUTOGENERATE_FUNCTION(UOnlineAgent,477,execIsInMainMenu);
AUTOGENERATE_FUNCTION(UOnlineAgent,476,execGetChatPermission);
AUTOGENERATE_FUNCTION(UOnlineAgent,475,execGetOnlinePermission);
AUTOGENERATE_FUNCTION(UOnlineAgent,474,execHasOnlinePermission);
AUTOGENERATE_FUNCTION(UOnlineAgent,473,execIsSignedIn);
AUTOGENERATE_FUNCTION(UOnlineAgent,472,execLogin);
AUTOGENERATE_FUNCTION(UOnlineAgent,471,execIsLoggedIn);
AUTOGENERATE_FUNCTION(UOnlineAgent,470,execJoinLobby);
AUTOGENERATE_FUNCTION(UOnlineAgent,469,execCheckInvites);
AUTOGENERATE_FUNCTION(UOnlineAgent,468,execHasInvite);
AUTOGENERATE_FUNCTION(UOnlineAgent,467,execGetDefaultPlayerName);
AUTOGENERATE_FUNCTION(UOnlineAgent,466,execShowStore);
AUTOGENERATE_FUNCTION(UOnlineAgent,465,execGetPlayerProfileTexture);
AUTOGENERATE_FUNCTION(UOnlineAgent,464,execShowVirtualKeyboard);
AUTOGENERATE_FUNCTION(UOnlineAgent,463,execTranslateJoinFailReason);
AUTOGENERATE_FUNCTION(UOnlineAgent,462,execTranslateShutdownReason);
AUTOGENERATE_FUNCTION(UOnlineAgent,461,execShowGamercardFromAccountID);
AUTOGENERATE_FUNCTION(UOnlineAgent,460,execShowGamercardFromUid);
AUTOGENERATE_FUNCTION(UOnlineAgent,459,execShowGamercardByName);
AUTOGENERATE_FUNCTION(UOnlineAgent,458,execShowGamerCard);
AUTOGENERATE_FUNCTION(UOnlineAgent,457,execGetCountdownTime);
AUTOGENERATE_FUNCTION(UOnlineAgent,456,execShouldShowCountdownTimer);
AUTOGENERATE_FUNCTION(UOnlineAgent,455,execGetTravelURL);
AUTOGENERATE_FUNCTION(UOnlineAgent,454,execPlaylistHasNextMap);
AUTOGENERATE_FUNCTION(UOnlineAgent,453,execSendChatMessage);
AUTOGENERATE_FUNCTION(UOnlineAgent,452,execIsHost);
AUTOGENERATE_FUNCTION(UOnlineAgent,451,execIsInGame);
AUTOGENERATE_FUNCTION(UOnlineAgent,450,execLoadNextMap);
AUTOGENERATE_FUNCTION(UOnlineAgent,449,execDisconnectUnreal);
AUTOGENERATE_FUNCTION(UOnlineAgent,448,execIsInParty);
AUTOGENERATE_FUNCTION(UOnlineAgent,447,execShowSystemInviteUI);
AUTOGENERATE_FUNCTION(UOnlineAgent,446,execGetGameMaxPlayers);
AUTOGENERATE_FUNCTION(UOnlineAgent,445,execGetHostPingFor);
AUTOGENERATE_FUNCTION(UOnlineAgent,444,execGetLocalAgentPlayer);
AUTOGENERATE_FUNCTION(UOnlineAgent,443,execGetAgentPlayers);
AUTOGENERATE_FUNCTION(UOnlineAgent,442,execGetAgentPlayerAccountId);
AUTOGENERATE_FUNCTION(UOnlineAgent,441,execGetPlayerVoIPState);
AUTOGENERATE_FUNCTION(UOnlineAgent,440,execIsPlayerMuted);
AUTOGENERATE_FUNCTION(UOnlineAgent,439,execMutePlayer);
AUTOGENERATE_FUNCTION(UOnlineAgent,438,execRequestChangeTeam);
AUTOGENERATE_FUNCTION(UOnlineAgent,437,execKickPlayer);
AUTOGENERATE_FUNCTION(UOnlineAgent,436,execGetLevel);
AUTOGENERATE_FUNCTION(UOnlineAgent,435,execSaveLevel);
AUTOGENERATE_FUNCTION(UOnlineAgent,434,execReadyUp);
AUTOGENERATE_FUNCTION(UOnlineAgent,433,execEndRound);
AUTOGENERATE_FUNCTION(UOnlineAgent,432,execEndGame);
AUTOGENERATE_FUNCTION(UOnlineAgent,431,execStartRound);
AUTOGENERATE_FUNCTION(UOnlineAgent,430,execStartGame);
AUTOGENERATE_FUNCTION(UOnlineAgent,429,execLeaveGame);
AUTOGENERATE_FUNCTION(UOnlineAgent,428,execJoinGame);
AUTOGENERATE_FUNCTION(UOnlineAgent,427,execOnPostBeginPlay);
AUTOGENERATE_FUNCTION(UOnlineAgent,426,execOnPostLogin);
AUTOGENERATE_FUNCTION(UOnlineAgent,425,execGetSearchGame);
AUTOGENERATE_FUNCTION(UOnlineAgent,424,execGetSearchGameCount);
AUTOGENERATE_FUNCTION(UOnlineAgent,423,execSearchGames);
AUTOGENERATE_FUNCTION(UOnlineAgent,422,execCreateGame);
AUTOGENERATE_FUNCTION(UOnlineAgent,421,execQuickMatch);
AUTOGENERATE_FUNCTION(UOnlineAgent,420,execUnregisterListener);
AUTOGENERATE_FUNCTION(UOnlineAgent,419,execRegisterListener);
AUTOGENERATE_FUNCTION(USteamDedicatedListener,511,execOnDLCScanComplete);
AUTOGENERATE_FUNCTION(USteamDedicatedListener,510,execBuildServerURL);
AUTOGENERATE_FUNCTION(USteamDedicatedListener,509,execStopServer);
AUTOGENERATE_FUNCTION(UMeshInstance,559,execResetTimeWitholding);
AUTOGENERATE_FUNCTION(UMeshInstance,558,execGetBounds);
AUTOGENERATE_FUNCTION(UMeshInstance,557,execSetChannelEndFlags);
AUTOGENERATE_FUNCTION(UMeshInstance,556,execClearAnimEarlyEnds);
AUTOGENERATE_FUNCTION(UMeshInstance,555,execClearAnimEnds);
AUTOGENERATE_FUNCTION(UMeshInstance,554,execGetSequence);
AUTOGENERATE_FUNCTION(UMeshInstance,553,execGetAnimTime);
AUTOGENERATE_FUNCTION(UMeshInstance,552,execGetAnimChanInfo);
AUTOGENERATE_FUNCTION(UMeshInstance,551,execAnimEventEnable);
AUTOGENERATE_FUNCTION(UMeshInstance,550,execAnimUpdateTime);
AUTOGENERATE_FUNCTION(UMeshInstance,549,execAnimUpdateBlend);
AUTOGENERATE_FUNCTION(UMeshInstance,548,execAnimUpdateGrid);
AUTOGENERATE_FUNCTION(UMeshInstance,547,execAnimUpdateRate);
AUTOGENERATE_FUNCTION(UMeshInstance,546,execFreezeAnimations);
AUTOGENERATE_FUNCTION(UMeshInstance,545,execIsAnyAnimating);
AUTOGENERATE_FUNCTION(UMeshInstance,544,execIsAnimating);
AUTOGENERATE_FUNCTION(UMeshInstance,543,execSwapChannel);
AUTOGENERATE_FUNCTION(UMeshInstance,542,execCreateAnimGroup);
AUTOGENERATE_FUNCTION(UMeshInstance,541,execCopyBoneInfo);
AUTOGENERATE_FUNCTION(UMeshInstance,540,execBoneGetNearest);
AUTOGENERATE_FUNCTION(UMeshInstance,539,execBoneSetScale);
AUTOGENERATE_FUNCTION(UMeshInstance,538,execBoneSetRotate);
AUTOGENERATE_FUNCTION(UMeshInstance,537,execBoneSetTranslate);
AUTOGENERATE_FUNCTION(UMeshInstance,536,execBoneGetLastFrameTranslate);
AUTOGENERATE_FUNCTION(UMeshInstance,535,execBoneGetScale);
AUTOGENERATE_FUNCTION(UMeshInstance,534,execBoneGetRotate);
AUTOGENERATE_FUNCTION(UMeshInstance,533,execBoneGetTranslate);
AUTOGENERATE_FUNCTION(UMeshInstance,532,execMakeReferencePose);
AUTOGENERATE_FUNCTION(UMeshInstance,531,execAimBoneAtPoint);
AUTOGENERATE_FUNCTION(UMeshInstance,530,execRotateBoneAroundAxis);
AUTOGENERATE_FUNCTION(UMeshInstance,529,execBoneSupportsPhysics);
AUTOGENERATE_FUNCTION(UMeshInstance,528,execBoneGetChildName);
AUTOGENERATE_FUNCTION(UMeshInstance,527,execBoneGetChildCount);
AUTOGENERATE_FUNCTION(UMeshInstance,526,execBoneGetParentName);
AUTOGENERATE_FUNCTION(UMeshInstance,525,execBoneExists);
AUTOGENERATE_FUNCTION(UMeshInstance,524,execGetBoneName);
AUTOGENERATE_FUNCTION(UMeshInstance,523,execGetBoneCount);
AUTOGENERATE_FUNCTION(ANavVolume,846,execSetState);
AUTOGENERATE_FUNCTION(AXboxLiveQuery,-1,execGetSearchResultCount);
AUTOGENERATE_FUNCTION(AXboxLiveQuery,-1,execIsSearching);
AUTOGENERATE_FUNCTION(AXboxLiveQuery,-1,execJoinSearchResult);
AUTOGENERATE_FUNCTION(AXboxLiveQuery,-1,execSearch);
AUTOGENERATE_FUNCTION(AUdpLink,1139,execReadBinary);
AUTOGENERATE_FUNCTION(AUdpLink,1138,execReadText);
AUTOGENERATE_FUNCTION(AUdpLink,1137,execSendBinary);
AUTOGENERATE_FUNCTION(AUdpLink,1136,execSendText);
AUTOGENERATE_FUNCTION(AUdpLink,1135,execBindPort);
AUTOGENERATE_FUNCTION(AInternetLink,1134,execGetLocalIP);
AUTOGENERATE_FUNCTION(AInternetLink,1133,execValidate);
AUTOGENERATE_FUNCTION(AInternetLink,1132,execStringToIpAddr);
AUTOGENERATE_FUNCTION(AInternetLink,1131,execIpAddrToString);
AUTOGENERATE_FUNCTION(AInternetLink,1130,execGetLastError);
AUTOGENERATE_FUNCTION(AInternetLink,1129,execResolve);
AUTOGENERATE_FUNCTION(AInternetLink,1128,execParseURL);
AUTOGENERATE_FUNCTION(AInternetLink,1127,execIsDataPending);
AUTOGENERATE_FUNCTION(AUdpSystemLinkQuery,-1,execBindToSystemLinkGame);
AUTOGENERATE_FUNCTION(AUdpSystemLinkQuery,-1,execServerReceived);
AUTOGENERATE_FUNCTION(AUdpBeaconSystemLink,-1,execBroadcastBeacon);
AUTOGENERATE_FUNCTION(ATcpLink,1148,execReadBinary);
AUTOGENERATE_FUNCTION(ATcpLink,1147,execReadText);
AUTOGENERATE_FUNCTION(ATcpLink,1146,execSendBinary);
AUTOGENERATE_FUNCTION(ATcpLink,1145,execSendText);
AUTOGENERATE_FUNCTION(ATcpLink,1144,execIsConnected);
AUTOGENERATE_FUNCTION(ATcpLink,1143,execClose);
AUTOGENERATE_FUNCTION(ATcpLink,1142,execOpen);
AUTOGENERATE_FUNCTION(ATcpLink,1141,execListen);
AUTOGENERATE_FUNCTION(ATcpLink,1140,execBindPort);
AUTOGENERATE_FUNCTION(UOnlineAgentQualityControl,-1,execOnPostBeginPlay);
AUTOGENERATE_FUNCTION(UOnlineAgentQualityControl,-1,execOnTick);
AUTOGENERATE_FUNCTION(UOnlineAgentQualityControl,-1,execOnStartLoading);
AUTOGENERATE_FUNCTION(UOnlineAgentQualityControl,-1,execOnEndGame);
AUTOGENERATE_FUNCTION(UOnlineAgentQualityControl,-1,execOnPlayerLeave);
AUTOGENERATE_FUNCTION(UOnlineAgentQualityControl,-1,execOnPlayerJoin);
AUTOGENERATE_FUNCTION(UTexture,1197,execUnloadTexture);
AUTOGENERATE_FUNCTION(UTexture,1196,execLoadTexture);
AUTOGENERATE_FUNCTION(UTexture,1195,execGetPixel);
AUTOGENERATE_FUNCTION(UTexture,1194,execCollisionCheck);
AUTOGENERATE_FUNCTION(UMaterialEx,-1,execDuplicate);
AUTOGENERATE_FUNCTION(UMaterialEx,-1,execSetPropertyByIndex);
AUTOGENERATE_FUNCTION(UMaterialEx,-1,execGetPropertyByIndex);
AUTOGENERATE_FUNCTION(UMaterialEx,1193,execIsMasking);
AUTOGENERATE_FUNCTION(UMaterialEx,1192,execGetVSize);
AUTOGENERATE_FUNCTION(UMaterialEx,1191,execGetUSize);
AUTOGENERATE_FUNCTION(AProjector,856,execUpdateMatrix);
AUTOGENERATE_FUNCTION(AProjector,855,execTurnOff);
AUTOGENERATE_FUNCTION(AProjector,854,execGetLastRenderTime);
AUTOGENERATE_FUNCTION(AProjector,853,execDetachActor);
AUTOGENERATE_FUNCTION(AProjector,852,execAttachActor);
AUTOGENERATE_FUNCTION(AProjector,851,execAbandonProjector);
AUTOGENERATE_FUNCTION(AProjector,850,execDetachProjector);
AUTOGENERATE_FUNCTION(AProjector,849,execAttachProjector);
AUTOGENERATE_FUNCTION(APlayerPawn,-1,execDecompressAnalog);
AUTOGENERATE_FUNCTION(APlayerPawn,-1,execCompressAnalog);
AUTOGENERATE_FUNCTION(APlayerPawn,-1,execRealCompressedServerMove);
AUTOGENERATE_FUNCTION(APlayerPawn,-1,execCompressedServerMove);
AUTOGENERATE_FUNCTION(APlayerPawn,1025,execClientAckGoodMove);
AUTOGENERATE_FUNCTION(APlayerPawn,1024,execClientAdjustPosition);
AUTOGENERATE_FUNCTION(APlayerPawn,1023,execClearSavedMoveList);
AUTOGENERATE_FUNCTION(APlayerPawn,-1,execPhysicsEndOfFrameHelper_SetPostureState);
AUTOGENERATE_FUNCTION(APlayerPawn,-1,execCalculatePhysics_Base3DMotion);
AUTOGENERATE_FUNCTION(APlayerPawn,-1,execCalculatePhysics_Base2DMotion);
AUTOGENERATE_FUNCTION(APlayerPawn,-1,execGetWeaponTraceVars);
AUTOGENERATE_FUNCTION(APlayerPawn,-1,execHandleServerMeleeUp);
AUTOGENERATE_FUNCTION(APlayerPawn,-1,execHandleServerMeleeDown);
AUTOGENERATE_FUNCTION(APlayerPawn,-1,execHandleServerFireUp);
AUTOGENERATE_FUNCTION(APlayerPawn,-1,execHandleServerFireDown);
AUTOGENERATE_FUNCTION(APlayerPawn,-1,execNativeSetNewPostureState);
AUTOGENERATE_FUNCTION(APlayerPawn,-1,execGetPlayerNetworkAddress);
AUTOGENERATE_FUNCTION(APlayerPawn,-1,execrNativeClientFindAndPlaySound);
AUTOGENERATE_FUNCTION(APlayerPawn,-1,execCanDuck);
AUTOGENERATE_FUNCTION(APlayerPawn,-1,execCanTransitionToPostureState);
AUTOGENERATE_FUNCTION(APlayerPawn,-1,execHandlePlayerMovePrePhysics);
AUTOGENERATE_FUNCTION(APlayerPawn,-1,execPlayerMove);
AUTOGENERATE_FUNCTION(APlayerPawn,-1,execFindBestWeapon);
AUTOGENERATE_FUNCTION(APlayerPawn,-1,execCanGrabActor);
AUTOGENERATE_FUNCTION(APlayerPawn,1022,execTickDistanceFog);
AUTOGENERATE_FUNCTION(APlayerPawn,1021,execTickDistanceFogOverride);
AUTOGENERATE_FUNCTION(APlayerPawn,1020,execEndDistanceFogOverride);
AUTOGENERATE_FUNCTION(APlayerPawn,1019,execSetDistanceFogOverride);
AUTOGENERATE_FUNCTION(APlayerPawn,-1,execForceStopAllRumble);
AUTOGENERATE_FUNCTION(APlayerPawn,1018,execAddRumble);
AUTOGENERATE_FUNCTION(APlayerPawn,1017,execAddViewShake);
AUTOGENERATE_FUNCTION(APlayerPawn,1016,execStopAllShakes);
AUTOGENERATE_FUNCTION(APlayerPawn,1015,execStopShake);
AUTOGENERATE_FUNCTION(APlayerPawn,1014,execHasShake);
AUTOGENERATE_FUNCTION(APlayerPawn,-1,execPlayerCalcView_MPDead);
AUTOGENERATE_FUNCTION(APlayerPawn,-1,execPlayerCalcView_Behind);
AUTOGENERATE_FUNCTION(APlayerPawn,-1,execPlayerCalcView);
AUTOGENERATE_FUNCTION(APlayerPawn,-1,execPostureStateExChange_Ladder);
AUTOGENERATE_FUNCTION(APlayerPawn,-1,execPostureStateExChange_Mounted);
AUTOGENERATE_FUNCTION(APlayerPawn,-1,execPostureStateExChange_Jetpack);
AUTOGENERATE_FUNCTION(APlayerPawn,-1,execPostureStateExChange_Swimming);
AUTOGENERATE_FUNCTION(APlayerPawn,-1,execPostureStateExChange_InAir);
AUTOGENERATE_FUNCTION(APlayerPawn,-1,execPostureStateExChange_Crouching);
AUTOGENERATE_FUNCTION(APlayerPawn,-1,execPostureStateExChange_Standing);
AUTOGENERATE_FUNCTION(APlayerPawn,-1,execPostureStateExLeaving_Ladder);
AUTOGENERATE_FUNCTION(APlayerPawn,-1,execPostureStateExLeaving_Mounted);
AUTOGENERATE_FUNCTION(APlayerPawn,-1,execPostureStateExLeaving_Jetpack);
AUTOGENERATE_FUNCTION(APlayerPawn,-1,execPostureStateExLeaving_Swimming);
AUTOGENERATE_FUNCTION(APlayerPawn,-1,execPostureStateExLeaving_InAir);
AUTOGENERATE_FUNCTION(APlayerPawn,-1,execPostureStateExLeaving_Crouching);
AUTOGENERATE_FUNCTION(APlayerPawn,-1,execPostureStateExLeaving_Standing);
AUTOGENERATE_FUNCTION(APlayerPawn,-1,execPostureStateExLeaving_Unknown);
AUTOGENERATE_FUNCTION(APlayerPawn,1013,execUpdateMovementState);
AUTOGENERATE_FUNCTION(APlayerPawn,1012,execFindAnimationControllerForPostureState);
AUTOGENERATE_FUNCTION(APlayerPawn,1011,execTickKick);
AUTOGENERATE_FUNCTION(APlayerPawn,-1,execUpdateAdditionalAnimationState);
AUTOGENERATE_FUNCTION(APlayerPawn,1010,execGetLookAnimGrid);
AUTOGENERATE_FUNCTION(APlayerPawn,1009,execApplyBodyTwist);
AUTOGENERATE_FUNCTION(APlayerPawn,-1,execRemoveListener);
AUTOGENERATE_FUNCTION(APlayerPawn,-1,execAddListener);
AUTOGENERATE_FUNCTION(APlayerPawn,-1,execRecordShotByType);
AUTOGENERATE_FUNCTION(APlayerPawn,-1,execSentinelWriteShots);
AUTOGENERATE_FUNCTION(APlayerPawn,-1,execAddMoveToFreeList);
AUTOGENERATE_FUNCTION(APlayerPawn,1008,execEnumerate3DAudioProviders);
AUTOGENERATE_FUNCTION(APlayerPawn,1007,execSetSpeakerType);
AUTOGENERATE_FUNCTION(APlayerPawn,1006,execGetSpeakerType);
AUTOGENERATE_FUNCTION(APlayerPawn,1005,execGet3DAudioProvider);
AUTOGENERATE_FUNCTION(APlayerPawn,1004,execShutdown3DAudio);
AUTOGENERATE_FUNCTION(APlayerPawn,1003,execInitialize3DAudio);
AUTOGENERATE_FUNCTION(APlayerPawn,1002,execShouldInputWakePlayerPhysics);
AUTOGENERATE_FUNCTION(APlayerPawn,1001,execCheckViewingEnemy);
AUTOGENERATE_FUNCTION(APlayerPawn,1000,execInputKeyIsGamepadButton);
AUTOGENERATE_FUNCTION(APlayerPawn,999,execIsKeyDown);
AUTOGENERATE_FUNCTION(APlayerPawn,998,execIsUsingMouse);
AUTOGENERATE_FUNCTION(APlayerPawn,997,execSetShouldHavePortLock);
AUTOGENERATE_FUNCTION(APlayerPawn,996,execClearControllerFocus);
AUTOGENERATE_FUNCTION(APlayerPawn,995,execSelectControllerFocus);
AUTOGENERATE_FUNCTION(APlayerPawn,994,execIsUsingGamepad);
AUTOGENERATE_FUNCTION(APlayerPawn,993,execResetKeyboard);
AUTOGENERATE_FUNCTION(APlayerPawn,992,execPauseGameInput);
AUTOGENERATE_FUNCTION(APlayerPawn,991,execIsMenuActive);
AUTOGENERATE_FUNCTION(APlayerPawn,-1,execPasteFromClipboard);
AUTOGENERATE_FUNCTION(APlayerPawn,-1,execCopyToClipboard);
AUTOGENERATE_FUNCTION(APlayerPawn,-1,execHasClientTravel);
AUTOGENERATE_FUNCTION(APlayerPawn,-1,execGetDefaultURL);
AUTOGENERATE_FUNCTION(APlayerPawn,990,execUpdateURL);
AUTOGENERATE_FUNCTION(APlayerPawn,-1,execClientTravel);
AUTOGENERATE_FUNCTION(APlayerPawn,-1,execShouldSaveCheckpoint);
AUTOGENERATE_FUNCTION(APlayerPawn,989,execNative_GetDisplayMode);
AUTOGENERATE_FUNCTION(APlayerPawn,988,execNative_GetNumDisplayModes);
AUTOGENERATE_FUNCTION(APlayerPawn,987,execNative_ShowNavPoints);
AUTOGENERATE_FUNCTION(APlayerPawn,-1,execNativeUpdateLookHitActor);
AUTOGENERATE_FUNCTION(APlayerPawn,986,execNativeTick);
AUTOGENERATE_FUNCTION(APlayerPawn,-1,execGetRoundState);
AUTOGENERATE_FUNCTION(APlayerPawn,-1,execIsEndOfRound);
AUTOGENERATE_FUNCTION(APlayerPawn,-1,execIsRoundInProgress);
AUTOGENERATE_FUNCTION(APlayerPawn,-1,execIsCountdown);
AUTOGENERATE_FUNCTION(APlayerPawn,-1,execIsPreRound);
AUTOGENERATE_FUNCTION(APlayerPawn,-1,execSetNetSpeed);
AUTOGENERATE_FUNCTION(APlayerPawn,985,execCanControlMovement);
AUTOGENERATE_FUNCTION(APlayerPawn,984,execGetSprintSpeedThreshold);
AUTOGENERATE_FUNCTION(APlayerPawn,983,execIsSprinting);
AUTOGENERATE_FUNCTION(APlayerPawn,982,execWantsToSprint);
AUTOGENERATE_FUNCTION(APlayerPawn,981,execCanSprint);
AUTOGENERATE_FUNCTION(APlayerPawn,980,execGetWalkSpeed);
AUTOGENERATE_FUNCTION(APlayerPawn,979,execContinueCampaignInProgress);
AUTOGENERATE_FUNCTION(APlayerPawn,978,execReadyToPlay);
AUTOGENERATE_FUNCTION(APlayerPawn,977,execSetTitleScreen);
AUTOGENERATE_FUNCTION(APlayerPawn,976,execXBoxAwardAchievement);
AUTOGENERATE_FUNCTION(APlayerPawn,975,execXBoxIsSystemUIShowing);
AUTOGENERATE_FUNCTION(APlayerPawn,974,execXBoxSaveProfile);
AUTOGENERATE_FUNCTION(APlayerPawn,973,execXBoxDidUserChange);
AUTOGENERATE_FUNCTION(APlayerPawn,972,execXBoxIsPlayingWithoutSave);
AUTOGENERATE_FUNCTION(APlayerPawn,971,execXBoxHasStorageDevice);
AUTOGENERATE_FUNCTION(APlayerPawn,970,execXBoxIsSignedIn);
AUTOGENERATE_FUNCTION(APawn,969,execCalculatePawnPhysics);
AUTOGENERATE_FUNCTION(APawn,968,execPhysController_CanFit);
AUTOGENERATE_FUNCTION(APawn,967,execPhysController_IsProcessingFinalSubtick);
AUTOGENERATE_FUNCTION(APawn,966,execPhysController_ClearFallingVelocity);
AUTOGENERATE_FUNCTION(APawn,965,execPhysController_UpdateFallingVelocity);
AUTOGENERATE_FUNCTION(APawn,964,execPhysController_GetFallingVelocity);
AUTOGENERATE_FUNCTION(APawn,963,execPhysController_GetGroundFriction);
AUTOGENERATE_FUNCTION(APawn,962,execPhysController_GetGroundNormal);
AUTOGENERATE_FUNCTION(APawn,961,execPhysController_GetGroundDistance);
AUTOGENERATE_FUNCTION(APawn,960,execPhysController_GetGroundBoneName);
AUTOGENERATE_FUNCTION(APawn,959,execPhysController_GetGroundActor);
AUTOGENERATE_FUNCTION(APawn,958,execPhysController_GetGroundContact);
AUTOGENERATE_FUNCTION(APawn,957,execPhysController_GetEndOfFrameCallback);
AUTOGENERATE_FUNCTION(APawn,956,execPhysController_GetDownwardPushScale);
AUTOGENERATE_FUNCTION(APawn,955,execPhysController_GetGravityScale);
AUTOGENERATE_FUNCTION(APawn,954,execPhysController_GetGroundConstraintType);
AUTOGENERATE_FUNCTION(APawn,953,execPhysController_GetGroundConstraintStrength);
AUTOGENERATE_FUNCTION(APawn,952,execPhysController_GetGroundConstraintDirection);
AUTOGENERATE_FUNCTION(APawn,951,execPhysController_GetGroundHeight);
AUTOGENERATE_FUNCTION(APawn,950,execPhysController_GetConstraintGroundType);
AUTOGENERATE_FUNCTION(APawn,949,execPhysController_GetConstraintStrength);
AUTOGENERATE_FUNCTION(APawn,948,execPhysController_GetDesiredVelocity);
AUTOGENERATE_FUNCTION(APawn,947,execPhysController_AddDesiredVelocity);
AUTOGENERATE_FUNCTION(APawn,946,execPhysController_ScaleConstraintStrengthScalar);
AUTOGENERATE_FUNCTION(APawn,945,execPhysController_ScaleDesiredVelocityScalar);
AUTOGENERATE_FUNCTION(APawn,944,execPhysController_ScaleDownwardPushScale);
AUTOGENERATE_FUNCTION(APawn,943,execPhysController_ScaleGravityScale);
AUTOGENERATE_FUNCTION(APawn,942,execPhysController_ScaleGroundConstraintStrength);
AUTOGENERATE_FUNCTION(APawn,941,execPhysController_ScaleGroundHeight);
AUTOGENERATE_FUNCTION(APawn,940,execPhysController_ScaleConstraintStrength);
AUTOGENERATE_FUNCTION(APawn,939,execPhysController_ScaleDesiredVelocity);
AUTOGENERATE_FUNCTION(APawn,938,execPhysController_SetEndOfFrameCallback);
AUTOGENERATE_FUNCTION(APawn,937,execPhysController_SetDownwardPushScale);
AUTOGENERATE_FUNCTION(APawn,936,execPhysController_SetGravityScale);
AUTOGENERATE_FUNCTION(APawn,935,execPhysController_SetGroundConstraintType);
AUTOGENERATE_FUNCTION(APawn,934,execPhysController_SetGroundConstraintStrength);
AUTOGENERATE_FUNCTION(APawn,933,execPhysController_SetGroundConstraintDirection);
AUTOGENERATE_FUNCTION(APawn,932,execPhysController_SetGroundHeight);
AUTOGENERATE_FUNCTION(APawn,931,execPhysController_SetConstraintGroundType);
AUTOGENERATE_FUNCTION(APawn,930,execPhysController_SetConstraintStrength);
AUTOGENERATE_FUNCTION(APawn,929,execPhysController_SetDesiredVelocity);
AUTOGENERATE_FUNCTION(APawn,928,execPhysController_PerformedCast);
AUTOGENERATE_FUNCTION(APawn,927,execPhysController_GetSteepSlopeDot);
AUTOGENERATE_FUNCTION(APawn,926,execPhysController_GetMaximumLength);
AUTOGENERATE_FUNCTION(APawn,925,execPhysController_EnableGroundFinder);
AUTOGENERATE_FUNCTION(APawn,924,execPhysController_SetSteepSlopeDot);
AUTOGENERATE_FUNCTION(APawn,923,execPhysController_SetMaximumLength);
AUTOGENERATE_FUNCTION(APawn,922,execGetFootstepMaterialFast);
AUTOGENERATE_FUNCTION(APawn,-1,execCanGrabActor);
AUTOGENERATE_FUNCTION(APawn,-1,execTraceFireHit);
AUTOGENERATE_FUNCTION(APawn,-1,execIsDead);
AUTOGENERATE_FUNCTION(APawn,-1,execIsSizeChangeActive);
AUTOGENERATE_FUNCTION(APawn,921,execShrinkingActive);
AUTOGENERATE_FUNCTION(APawn,-1,execSetShrinkScale);
AUTOGENERATE_FUNCTION(APawn,920,execFindInventoryByReferenceClass);
AUTOGENERATE_FUNCTION(APawn,919,execFindInventoryByClass);
AUTOGENERATE_FUNCTION(APawn,918,execFindInventoryTypeByName);
AUTOGENERATE_FUNCTION(APawn,917,execFindInventoryType);
AUTOGENERATE_FUNCTION(APawn,916,execRemoveInventory);
AUTOGENERATE_FUNCTION(APawn,915,execAddInventory);
AUTOGENERATE_FUNCTION(APawn,914,execCanDoThings);
AUTOGENERATE_FUNCTION(APawn,913,execGetStoredLocationAdjust);
AUTOGENERATE_FUNCTION(APawn,912,execAdjustLocationRestore);
AUTOGENERATE_FUNCTION(APawn,911,execAdjustLocationAbsolute);
AUTOGENERATE_FUNCTION(APawn,-1,execGetLookDirection);
AUTOGENERATE_FUNCTION(APawn,910,execDialogGateOpen);
AUTOGENERATE_FUNCTION(APawn,909,execWaitForLanding);
AUTOGENERATE_FUNCTION(APawn,908,execGetLockOnPos);
AUTOGENERATE_FUNCTION(APawn,907,execGetBodyPos);
AUTOGENERATE_FUNCTION(APawn,906,execGetEyePos);
AUTOGENERATE_FUNCTION(APawn,905,execStopWaiting);
AUTOGENERATE_FUNCTION(APawn,904,execLineOfSightTo);
AUTOGENERATE_FUNCTION(APawn,903,execGetAimTargetActor);
AUTOGENERATE_FUNCTION(APawn,902,execGetAimTargetLocation);
AUTOGENERATE_FUNCTION(APawn,901,execClearAimTarget);
AUTOGENERATE_FUNCTION(APawn,900,execSetAimTargetPoint);
AUTOGENERATE_FUNCTION(APawn,899,execSetAimTargetActor);
AUTOGENERATE_FUNCTION(APawn,898,execGetLookTargetActor);
AUTOGENERATE_FUNCTION(APawn,897,execGetLookTargetLocation);
AUTOGENERATE_FUNCTION(APawn,896,execClearLookTarget);
AUTOGENERATE_FUNCTION(APawn,895,execSetLookTargetPoint);
AUTOGENERATE_FUNCTION(APawn,894,execSetLookTargetActor);
AUTOGENERATE_FUNCTION(APawn,893,execGetBodyTargetActor);
AUTOGENERATE_FUNCTION(APawn,892,execGetBodyTargetLocation);
AUTOGENERATE_FUNCTION(APawn,891,execClearBodyTarget);
AUTOGENERATE_FUNCTION(APawn,890,execSetBodyTargetPoint);
AUTOGENERATE_FUNCTION(APawn,889,execSetBodyTargetActor);
AUTOGENERATE_FUNCTION(APawn,888,execGetDestinationActor);
AUTOGENERATE_FUNCTION(APawn,887,execGetDestinationLocation);
AUTOGENERATE_FUNCTION(APawn,886,execClearDestination);
AUTOGENERATE_FUNCTION(APawn,885,execSetDestinationPoint);
AUTOGENERATE_FUNCTION(APawn,884,execSetDestinationActor);
AUTOGENERATE_FUNCTION(APawn,883,execClearLatentAction);
AUTOGENERATE_FUNCTION(APawn,882,execFaceTarget);
AUTOGENERATE_FUNCTION(APawn,881,execSlideTo);
AUTOGENERATE_FUNCTION(APawn,880,execTurnToward);
AUTOGENERATE_FUNCTION(APawn,879,execTurnTo);
AUTOGENERATE_FUNCTION(APawn,878,execStrafeFacing);
AUTOGENERATE_FUNCTION(APawn,877,execStrafeTo);
AUTOGENERATE_FUNCTION(APawn,876,execMoveToward);
AUTOGENERATE_FUNCTION(APawn,875,execMoveTo);
AUTOGENERATE_FUNCTION(APawn,874,execFindStairRotation);
AUTOGENERATE_FUNCTION(APawn,873,execGetCameraViewRotation);
AUTOGENERATE_FUNCTION(APawn,872,execGetCameraLocation);
AUTOGENERATE_FUNCTION(APawn,871,execCanBreatheNormally);
AUTOGENERATE_FUNCTION(APawn,-1,execFinishCachedAnims);
AUTOGENERATE_FUNCTION(APawn,-1,execFinishAnims);
AUTOGENERATE_FUNCTION(APawn,-1,execIsSpectating);
AUTOGENERATE_FUNCTION(APawn,-1,execIsLocallyControlled);
AUTOGENERATE_FUNCTION(APawn,870,execRemovePawn);
AUTOGENERATE_FUNCTION(APawn,869,execAddPawn);
AUTOGENERATE_FUNCTION(APawn,868,execChangeCollisionHeightToCrouching);
AUTOGENERATE_FUNCTION(APawn,867,execChangeCollisionHeightToStanding);
AUTOGENERATE_FUNCTION(APawn,866,execChangeCollisionHeightToFull);
AUTOGENERATE_FUNCTION(APawn,865,execSetCollisionInterpolationTarget);
AUTOGENERATE_FUNCTION(APawn,-1,execInterpolateCollisionSize);
AUTOGENERATE_FUNCTION(APawn,864,execPawnSetLocation);
AUTOGENERATE_FUNCTION(APawn,863,execSetMaxStepHeightEx);
AUTOGENERATE_FUNCTION(APawn,862,execSetPhysicsControllerActive);
AUTOGENERATE_FUNCTION(APawn,861,execSetSimplePawnPhysicsCollision);
AUTOGENERATE_FUNCTION(APawn,860,execSetBase);
AUTOGENERATE_FUNCTION(APawn,859,execdnPathSystem_FindPathPointTo);
AUTOGENERATE_FUNCTION(AInteractiveActor,858,execGetTargetedPoint);
AUTOGENERATE_FUNCTION(AInteractiveActor,-1,execCheckUserShrunkUse);
AUTOGENERATE_FUNCTION(AInteractiveActor,-1,execCanBeGrabbedBy);
AUTOGENERATE_FUNCTION(AInteractiveActor,857,execDoExitWound);
AUTOGENERATE_FUNCTION(AInteractiveActor,-1,execSetTelekineticable);
AUTOGENERATE_FUNCTION(UConsole,1229,execIsExchangingData);
AUTOGENERATE_FUNCTION(UConsole,1228,execIsMenuActive);
AUTOGENERATE_FUNCTION(UConsole,-1,execFormatFloat);
AUTOGENERATE_FUNCTION(UConsole,1227,execPS3MsgDialog);
AUTOGENERATE_FUNCTION(UConsole,1226,execSetDialogBoxResult);
AUTOGENERATE_FUNCTION(UConsole,1225,execSetDialogBoxID);
AUTOGENERATE_FUNCTION(UConsole,1224,execPrint);
AUTOGENERATE_FUNCTION(UConsole,1223,execSaveTimeDemo);
AUTOGENERATE_FUNCTION(UConsole,1222,execConsoleCommand);
AUTOGENERATE_FUNCTION(UCanvas,1260,execDo480FontScalingFix);
AUTOGENERATE_FUNCTION(UCanvas,1259,execNeeds480FontScalingFix);
AUTOGENERATE_FUNCTION(UCanvas,1258,execDrawBlurryDesaturation);
AUTOGENERATE_FUNCTION(UCanvas,1257,execDrawBar);
AUTOGENERATE_FUNCTION(UCanvas,1256,execDrawArc);
AUTOGENERATE_FUNCTION(UCanvas,1255,execDrawIcon);
AUTOGENERATE_FUNCTION(UCanvas,1254,execDrawScaledIconClipped);
AUTOGENERATE_FUNCTION(UCanvas,1253,execDrawScaledIcon);
AUTOGENERATE_FUNCTION(UCanvas,1252,execSetClip);
AUTOGENERATE_FUNCTION(UCanvas,1251,execSetOrigin);
AUTOGENERATE_FUNCTION(UCanvas,1250,execSetPos);
AUTOGENERATE_FUNCTION(UCanvas,1249,execFlush);
AUTOGENERATE_FUNCTION(UCanvas,1248,execSetClampMode);
AUTOGENERATE_FUNCTION(UCanvas,1247,execDrawCylinder);
AUTOGENERATE_FUNCTION(UCanvas,1246,execGetRenderBoundingBox);
AUTOGENERATE_FUNCTION(UCanvas,1245,execGetScreenXYNoClip);
AUTOGENERATE_FUNCTION(UCanvas,1244,execGetScreenXY);
AUTOGENERATE_FUNCTION(UCanvas,1243,execGetScreenBounds);
AUTOGENERATE_FUNCTION(UCanvas,1242,execDrawPortal);
AUTOGENERATE_FUNCTION(UCanvas,1241,execDrawColoredLine);
AUTOGENERATE_FUNCTION(UCanvas,1240,execDrawLine);
AUTOGENERATE_FUNCTION(UCanvas,1239,execDrawClippedActor);
AUTOGENERATE_FUNCTION(UCanvas,1238,execTextSize);
AUTOGENERATE_FUNCTION(UCanvas,1237,execDrawTextClipped);
AUTOGENERATE_FUNCTION(UCanvas,1236,execDrawTileClipped);
AUTOGENERATE_FUNCTION(UCanvas,1235,execDrawActor);
AUTOGENERATE_FUNCTION(UCanvas,1234,execDrawTile);
AUTOGENERATE_FUNCTION(UCanvas,1233,execDrawTextDropShadowed);
AUTOGENERATE_FUNCTION(UCanvas,1232,execDrawText);
AUTOGENERATE_FUNCTION(UCanvas,1231,execStrLen);
AUTOGENERATE_FUNCTION(UCanvas,1230,execReset);
AUTOGENERATE_FUNCTION(ACorpseBase,1032,execBoneIsDestroyed);
AUTOGENERATE_FUNCTION(ACorpseBase,1031,execDestroyBoneAndChildren);
AUTOGENERATE_FUNCTION(ACorpseBase,1030,execTraceFireHit);
AUTOGENERATE_FUNCTION(ACorpseBase,-1,execNativeHitWall);
AUTOGENERATE_FUNCTION(ACorpseBase,1029,execDoSplatter);
AUTOGENERATE_FUNCTION(ACorpseBase,1028,execGib);
AUTOGENERATE_FUNCTION(ACorpseBase,1027,execIsFrozen);
AUTOGENERATE_FUNCTION(ACorpseBase,1026,execUpdateFrictionAndJoints);
AUTOGENERATE_FUNCTION(ATriggerHint,1175,execTickHint);
AUTOGENERATE_FUNCTION(AAmmoCasing,-1,execNativeHitWall);
AUTOGENERATE_FUNCTION(ALightEx,1090,execGetCurrentColor);
AUTOGENERATE_FUNCTION(ALightEx,1089,execMarkDirty);
AUTOGENERATE_FUNCTION(AInventory,1069,execGiveTo);
AUTOGENERATE_FUNCTION(AInventory,-1,execPickupSuccess);
AUTOGENERATE_FUNCTION(AInventory,-1,execAttemptPickup);
AUTOGENERATE_FUNCTION(AInventory,-1,execCanPickupClass);
AUTOGENERATE_FUNCTION(AMutator,-1,execAllowPickup);
AUTOGENERATE_FUNCTION(ADecal,-1,execDetachDecal);
AUTOGENERATE_FUNCTION(ADecal,-1,execAttachDecal);
AUTOGENERATE_FUNCTION(APlayerReplicationInfo,-1,execIsSpectating);
AUTOGENERATE_FUNCTION(AWarpZoneInfo,1151,execUnWarp);
AUTOGENERATE_FUNCTION(AWarpZoneInfo,1150,execWarp);
AUTOGENERATE_FUNCTION(AZoneInfo,1149,execZoneActors);
AUTOGENERATE_FUNCTION(AInterpolationPoint,-1,execComputeArcLength);
AUTOGENERATE_FUNCTION(AGameInfo,-1,execParseKillMessage);
AUTOGENERATE_FUNCTION(AGameInfo,-1,execGameAllowPickup);
AUTOGENERATE_FUNCTION(AGameInfo,1167,execGiveInventoryTo);
AUTOGENERATE_FUNCTION(AGameInfo,1166,execAddFakeNetBot);
AUTOGENERATE_FUNCTION(AGameInfo,-1,execGetNetworkNumber);
AUTOGENERATE_FUNCTION(AGameInfo,-1,execDecodeString);
AUTOGENERATE_FUNCTION(AGameInfo,-1,execEncodeString);
AUTOGENERATE_FUNCTION(AGameInfo,-1,execUpdateURL);
AUTOGENERATE_FUNCTION(ALevelInfo,1165,execIsFullScreen);
AUTOGENERATE_FUNCTION(ALevelInfo,1164,execMirrorModeEnabled);
AUTOGENERATE_FUNCTION(ALevelInfo,1163,execNoteGameResumed);
AUTOGENERATE_FUNCTION(ALevelInfo,1162,execNoteGamePaused);
AUTOGENERATE_FUNCTION(ALevelInfo,1161,execGetLocalPlayerPawn);
AUTOGENERATE_FUNCTION(ALevelInfo,1160,execCheckAndUpdateAIGate);
AUTOGENERATE_FUNCTION(ALevelInfo,1159,execUpdateAIGate);
AUTOGENERATE_FUNCTION(ALevelInfo,1158,execCheckAIGate);
AUTOGENERATE_FUNCTION(ALevelInfo,1157,execPerformTeamDialog);
AUTOGENERATE_FUNCTION(ALevelInfo,1156,execPerformStandaloneSimulation);
AUTOGENERATE_FUNCTION(ALevelInfo,1155,execSetLevelEventFunctionHook);
AUTOGENERATE_FUNCTION(ALevelInfo,1154,execRegisterLevelEvent);
AUTOGENERATE_FUNCTION(ALevelInfo,1153,execWarmupPhysics);
AUTOGENERATE_FUNCTION(ALevelInfo,-1,execGetAddressURL);
AUTOGENERATE_FUNCTION(ALevelInfo,-1,execGetLocalURL);
AUTOGENERATE_FUNCTION(ALevelInfo,-1,execXboxShowGamerCard);
AUTOGENERATE_FUNCTION(ALevelInfo,-1,execXboxEndMatch);
AUTOGENERATE_FUNCTION(ALevelInfo,-1,execXboxStartMatch);
AUTOGENERATE_FUNCTION(ALevelInfo,1152,execCheckOverridePlayerClass);
AUTOGENERATE_FUNCTION(UMetagameData,506,execLoadMetagame);
AUTOGENERATE_FUNCTION(UMetagameData,505,execSaveMetagame);
AUTOGENERATE_FUNCTION(AKSensor,1123,execGetSensedActors);
AUTOGENERATE_FUNCTION(AKSensor,1122,execGetFirstSensedPawn);
AUTOGENERATE_FUNCTION(AKSensor,1121,execRemoveSensableClass);
AUTOGENERATE_FUNCTION(AKSensor,1120,execAddSensableClass);
AUTOGENERATE_FUNCTION(AKSphereSensor,1124,execSetSensorRadius);
AUTOGENERATE_FUNCTION(AKBoxSensor,1125,execSetSensorSize);
AUTOGENERATE_FUNCTION(AKLineSensor,1126,execSetSensorLength);
AUTOGENERATE_FUNCTION(AKPulley,1096,execSetPulleyRatio);
AUTOGENERATE_FUNCTION(AKPulley,1095,execSetSecondaryAxisState);
AUTOGENERATE_FUNCTION(AKConstraint,1094,execSetBreakThreshold);
AUTOGENERATE_FUNCTION(AKConstraint,1093,execConstraintSupportsBreaking);
AUTOGENERATE_FUNCTION(AKConstraint,1092,execBreakConstraint);
AUTOGENERATE_FUNCTION(AKConstraint,1091,execSetKDisableCollision);
AUTOGENERATE_FUNCTION(AKAngularSpringDamper,1101,execSetSecondaryAxisState);
AUTOGENERATE_FUNCTION(AKAngularSpringDamper,1100,execSetBreakAngle);
AUTOGENERATE_FUNCTION(AKSpringDamper,1099,execSetSpringD);
AUTOGENERATE_FUNCTION(AKSpringDamper,1098,execSetSpringK);
AUTOGENERATE_FUNCTION(AKSpringDamper,1097,execSetSpringSimulationMode);
AUTOGENERATE_FUNCTION(AKLinearSpringDamper,1105,execSetConstraintActor2UseConstraintPoint);
AUTOGENERATE_FUNCTION(AKLinearSpringDamper,1104,execSetConstraintActor1UseConstraintPoint);
AUTOGENERATE_FUNCTION(AKLinearSpringDamper,1103,execSetBreakLength);
AUTOGENERATE_FUNCTION(AKLinearSpringDamper,1102,execSetRestLength);
AUTOGENERATE_FUNCTION(AKAngularJointLimit,1107,execSetSecondaryAxisState);
AUTOGENERATE_FUNCTION(AKAngularJointLimit,1106,execSetMaximumAngle);
AUTOGENERATE_FUNCTION(AKLinearJointLimit,1109,execSetDistanceRange);
AUTOGENERATE_FUNCTION(AKLinearJointLimit,1108,execSetAxisMode);
AUTOGENERATE_FUNCTION(AKAngularMotorAffector,1111,execSetMaximumTorque);
AUTOGENERATE_FUNCTION(AKAngularMotorAffector,1110,execSetDesiredAngularVelocity);
AUTOGENERATE_FUNCTION(AKLinearMotorAffector,1114,execSetMaximumForce);
AUTOGENERATE_FUNCTION(AKLinearMotorAffector,1113,execSetDesiredVelocity);
AUTOGENERATE_FUNCTION(AKLinearMotorAffector,1112,execSetMotorAxisMode);
AUTOGENERATE_FUNCTION(AdnVisualizationController,1190,execSetColorTable);
AUTOGENERATE_FUNCTION(UTextureCanvas,1210,execSetDynamic);
AUTOGENERATE_FUNCTION(UTextureCanvas,1209,execSetParametric);
AUTOGENERATE_FUNCTION(UTextureCanvas,1208,execForceTick);
AUTOGENERATE_FUNCTION(UTextureCanvas,1207,execTextSize);
AUTOGENERATE_FUNCTION(UTextureCanvas,1206,execDrawTile);
AUTOGENERATE_FUNCTION(UTextureCanvas,1205,execDrawStatic);
AUTOGENERATE_FUNCTION(UTextureCanvas,1204,execDrawClear);
AUTOGENERATE_FUNCTION(UTextureCanvas,1203,execDrawString);
AUTOGENERATE_FUNCTION(UTextureCanvas,1202,execDrawTriangle);
AUTOGENERATE_FUNCTION(UTextureCanvas,1201,execDrawLine);
AUTOGENERATE_FUNCTION(UTextureCanvas,1200,execDrawPixel);
AUTOGENERATE_FUNCTION(UTextureCanvas,1199,execPrecache);
AUTOGENERATE_FUNCTION(UTextureCanvas,1198,execInit);
AUTOGENERATE_FUNCTION(USmackerTextureInstance,1265,execGetFrameCount);
AUTOGENERATE_FUNCTION(USmackerTextureInstance,1264,execSetPause);
AUTOGENERATE_FUNCTION(USmackerTextureInstance,1263,execSetVolume);
AUTOGENERATE_FUNCTION(USmackerTextureInstance,1262,execSetFrame);
AUTOGENERATE_FUNCTION(USmackerTextureInstance,1261,execSetFilename);
AUTOGENERATE_FUNCTION(USmackerTexture,1221,execGetSmackerTextureInstance);
AUTOGENERATE_FUNCTION(UBinkTexture,-1,execOverrideBackgroundMusic);
AUTOGENERATE_FUNCTION(UBinkTexture,1220,execCloseBink);
AUTOGENERATE_FUNCTION(UBinkTexture,1219,execOpenBink);
AUTOGENERATE_FUNCTION(UBinkTexture,1218,execGetLoop);
AUTOGENERATE_FUNCTION(UBinkTexture,1217,execGetFrameCount);
AUTOGENERATE_FUNCTION(UBinkTexture,1216,execGetFrame);
AUTOGENERATE_FUNCTION(UBinkTexture,1215,execIsFinalFrame);
AUTOGENERATE_FUNCTION(UBinkTexture,1214,execSetVolume);
AUTOGENERATE_FUNCTION(UBinkTexture,1213,execSetLoop);
AUTOGENERATE_FUNCTION(UBinkTexture,1212,execSetPause);
AUTOGENERATE_FUNCTION(UBinkTexture,1211,execSetFrame);
AUTOGENERATE_FUNCTION(UPrecacheIndex,1288,execLogWarning);
AUTOGENERATE_FUNCTION(UPrecacheIndex,1287,execMapHasCoverType);
AUTOGENERATE_FUNCTION(UPrecacheIndex,1286,execWeaponClassIsUsableByPlayer);
AUTOGENERATE_FUNCTION(UPrecacheIndex,1285,execWeaponIsUsableByPlayer);
AUTOGENERATE_FUNCTION(UPrecacheIndex,1284,execRegisterAnimation);
AUTOGENERATE_FUNCTION(UPrecacheIndex,1283,execRegisterAnimationControllerEntry);
AUTOGENERATE_FUNCTION(UPrecacheIndex,1282,execRegisterAnimationController);
AUTOGENERATE_FUNCTION(UPrecacheIndex,1281,execRegisterPawnAnimation);
AUTOGENERATE_FUNCTION(UPrecacheIndex,1280,execRegisterMaterialClass);
AUTOGENERATE_FUNCTION(UPrecacheIndex,1279,execRegisterDamageType);
AUTOGENERATE_FUNCTION(UPrecacheIndex,1278,execRegisterMusic);
AUTOGENERATE_FUNCTION(UPrecacheIndex,1277,execRegisterVoicePackEntry);
AUTOGENERATE_FUNCTION(UPrecacheIndex,1276,execRegisterSoundInfo);
AUTOGENERATE_FUNCTION(UPrecacheIndex,1275,execRegisterAmbientSoundInfo);
AUTOGENERATE_FUNCTION(UPrecacheIndex,1274,execRegisterSound);
AUTOGENERATE_FUNCTION(UPrecacheIndex,1273,execRegisterCubeMap);
AUTOGENERATE_FUNCTION(UPrecacheIndex,1272,execRegisterBumpMap);
AUTOGENERATE_FUNCTION(UPrecacheIndex,1271,execRegisterAttenuationMap);
AUTOGENERATE_FUNCTION(UPrecacheIndex,1270,execRegisterTexture);
AUTOGENERATE_FUNCTION(UPrecacheIndex,1269,execRegisterMaterialEx);
AUTOGENERATE_FUNCTION(UPrecacheIndex,1268,execRegisterMountedActorPrefab);
AUTOGENERATE_FUNCTION(UPrecacheIndex,1267,execRegisterRenderObject);
AUTOGENERATE_FUNCTION(UPrecacheIndex,1266,execRegisterActorClass);
AUTOGENERATE_FUNCTION(UPhysicsEffectsDatabase,1289,execPlayPhysicsImpactSound);
AUTOGENERATE_FUNCTION(AdnKingOfTheHill_MarkerBase,1075,execCopyToProjector);
AUTOGENERATE_FUNCTION(APickup,-1,execAttemptPickup);
AUTOGENERATE_FUNCTION(APickup,-1,execDoPickup);
AUTOGENERATE_FUNCTION(AWeapon,1074,execGetWeaponAnimName);
AUTOGENERATE_FUNCTION(AWeapon,-1,execGetMaxClip);
AUTOGENERATE_FUNCTION(AWeapon,1073,execPerformFire);
AUTOGENERATE_FUNCTION(AWeapon,1072,execGetCurrentShellEjectionLocation);
AUTOGENERATE_FUNCTION(AWeapon,1071,execEject_Casing);
AUTOGENERATE_FUNCTION(AWeapon,-1,execFindLookActor);
AUTOGENERATE_FUNCTION(AWeapon,1070,execGiveToAI);
AUTOGENERATE_FUNCTION(AWeapon,-1,execUserCanSprint);
AUTOGENERATE_FUNCTION(ADoorMoverEx,1079,execCalculateExtraOffset);
AUTOGENERATE_FUNCTION(ADoorMoverEx,1078,execGetMountingSide);
AUTOGENERATE_FUNCTION(ADoorMoverEx,1077,execCalcMidpoint);
AUTOGENERATE_FUNCTION(ADoorMoverEx,1076,execCalcSensorLocation);
AUTOGENERATE_FUNCTION(UColorTable,1290,execGetColorForPosition);
AUTOGENERATE_FUNCTION(UAnimationControllerEx,1326,execGetCachedPrimaryRefId);
AUTOGENERATE_FUNCTION(UAnimationControllerEx,1325,execGetCachedAnimRefIds);
AUTOGENERATE_FUNCTION(UAnimationControllerEx,1324,execGetCachedAnimSequences);
AUTOGENERATE_FUNCTION(UAnimationControllerEx,1323,execGetCachedAnimChannel);
AUTOGENERATE_FUNCTION(UAnimationControllerEx,1322,execGetCachedAnimSequence);
AUTOGENERATE_FUNCTION(UAnimationControllerEx,1321,execGetNumberOfCachedAnimSequences);
AUTOGENERATE_FUNCTION(UAnimationControllerEx,1320,execUpdateChannelTime);
AUTOGENERATE_FUNCTION(UAnimationControllerEx,1319,execUpdateChannelBlendAlpha);
AUTOGENERATE_FUNCTION(UAnimationControllerEx,1318,execUpdateGlobalAnimRateScale);
AUTOGENERATE_FUNCTION(UAnimationControllerEx,1317,execAnimationFinished);
AUTOGENERATE_FUNCTION(UAnimationControllerEx,1316,execGetAnimTimeByIndex);
AUTOGENERATE_FUNCTION(UAnimationControllerEx,1315,execGetAnimTimeByName);
AUTOGENERATE_FUNCTION(UAnimationControllerEx,1314,execGetMeshSequenceName);
AUTOGENERATE_FUNCTION(UAnimationControllerEx,1313,execGetPrimaryChannelIndex);
AUTOGENERATE_FUNCTION(UAnimationControllerEx,1312,execFindAnimChannelBlockIndexForName);
AUTOGENERATE_FUNCTION(UAnimationControllerEx,1311,execFindAnimChannelIndexForName);
AUTOGENERATE_FUNCTION(UAnimationControllerEx,1310,execFindAnimBlockIndexForName);
AUTOGENERATE_FUNCTION(UAnimationControllerEx,1309,execFindAnimPairIndexForName);
AUTOGENERATE_FUNCTION(UAnimationControllerEx,1308,execFindAnimGridIndexForName);
AUTOGENERATE_FUNCTION(UAnimationControllerEx,1307,execFindAnimIndexForName);
AUTOGENERATE_FUNCTION(UAnimationControllerEx,1306,execSetChannelBlockMasterAlpha);
AUTOGENERATE_FUNCTION(UAnimationControllerEx,1305,execBlendChannelBlock);
AUTOGENERATE_FUNCTION(UAnimationControllerEx,1304,execGetChannelBlockBlendTarget);
AUTOGENERATE_FUNCTION(UAnimationControllerEx,1303,execGetChannelBlockBlend);
AUTOGENERATE_FUNCTION(UAnimationControllerEx,1302,execEmptyAnimChannels_ByBlock);
AUTOGENERATE_FUNCTION(UAnimationControllerEx,1301,execEmptyAnimChannels_OnlyGroup);
AUTOGENERATE_FUNCTION(UAnimationControllerEx,1300,execEmptyAnimChannels_AllButGroup);
AUTOGENERATE_FUNCTION(UAnimationControllerEx,1299,execEmptyAnimChannel);
AUTOGENERATE_FUNCTION(UAnimationControllerEx,1298,execSetChannelEventState);
AUTOGENERATE_FUNCTION(UAnimationControllerEx,1297,execSetChannelGridState);
AUTOGENERATE_FUNCTION(UAnimationControllerEx,1296,execSetAnimGridState);
AUTOGENERATE_FUNCTION(UAnimationControllerEx,1295,execSetAnimPairState);
AUTOGENERATE_FUNCTION(UAnimationControllerEx,1294,execSetAnimState);
AUTOGENERATE_FUNCTION(UAnimationControllerEx,1293,execResetServer);
AUTOGENERATE_FUNCTION(UAnimationControllerEx,1292,execFlushHashes);
AUTOGENERATE_FUNCTION(UAnimationControllerEx,1291,execInitAnimationControllerEx);
AUTOGENERATE_FUNCTION(ASoftParticleSystem,1065,execScaleSoundRadius);
AUTOGENERATE_FUNCTION(ASoftParticleSystem,1064,execTriggeredActivities);
AUTOGENERATE_FUNCTION(ASoftParticleSystem,1063,execDoTrigger);
AUTOGENERATE_FUNCTION(ASoftParticleSystem,1062,execSetAllOwner);
AUTOGENERATE_FUNCTION(ASoftParticleSystem,1061,execSetDontReflect);
AUTOGENERATE_FUNCTION(ASoftParticleSystem,1060,execSetParticleSystemHidden);
AUTOGENERATE_FUNCTION(ASoftParticleSystem,1059,execSetScaleFactor);
AUTOGENERATE_FUNCTION(ASoftParticleSystem,1058,execSetOwnerSeeSpecial);
AUTOGENERATE_FUNCTION(ASoftParticleSystem,1057,execSetUpdateWhenNotVisible);
AUTOGENERATE_FUNCTION(ASoftParticleSystem,1056,execStopFlocking);
AUTOGENERATE_FUNCTION(ASoftParticleSystem,1055,execForceSelfEnabled);
AUTOGENERATE_FUNCTION(ASoftParticleSystem,1054,execForceSelfDisabled);
AUTOGENERATE_FUNCTION(ASoftParticleSystem,1053,execDelayedActivityInternal);
AUTOGENERATE_FUNCTION(ASoftParticleSystem,1052,execResetParticleSystem);
AUTOGENERATE_FUNCTION(ASoftParticleSystem,1051,execInitializeFriends);
AUTOGENERATE_FUNCTION(ASoftParticleSystem,1050,execDoPrimeSpawn);
AUTOGENERATE_FUNCTION(ASoftParticleSystem,1049,execParticleHurtRadius);
AUTOGENERATE_FUNCTION(ASoftParticleSystem,1048,execInitializeParticleSystem);
AUTOGENERATE_FUNCTION(ASoftParticleSystem,1047,execPlayParticleSystemSounds);
AUTOGENERATE_FUNCTION(ASoftParticleSystem,1046,execNativeInitializeParticleSystem);
AUTOGENERATE_FUNCTION(ASoftParticleSystem,1045,execSetUpdateRate);
AUTOGENERATE_FUNCTION(ASoftParticleSystem,1044,execInitFriendData);
AUTOGENERATE_FUNCTION(ASoftParticleSystem,1043,execPrimeParticles);
AUTOGENERATE_FUNCTION(ASoftParticleSystem,1042,execDoAdditionalSpawn);
AUTOGENERATE_FUNCTION(ASoftParticleSystem,1041,execDestroyParticleCollisionActors);
AUTOGENERATE_FUNCTION(ASoftParticleSystem,1040,execDrawParticles);
AUTOGENERATE_FUNCTION(ASoftParticleSystem,1039,execSpawnParticleEx);
AUTOGENERATE_FUNCTION(ASoftParticleSystem,1038,execSpawnParticle);
AUTOGENERATE_FUNCTION(ASoftParticleSystem,1037,execSetParticle);
AUTOGENERATE_FUNCTION(ASoftParticleSystem,1036,execGetParticle);
AUTOGENERATE_FUNCTION(ASoftParticleSystem,1035,execFreeParticle);
AUTOGENERATE_FUNCTION(ASoftParticleSystem,1034,execResetParticles);
AUTOGENERATE_FUNCTION(ASoftParticleSystem,1033,execForceTick);
AUTOGENERATE_FUNCTION(APhysicsVolume,848,execSetVolumeAngularVelocity);
AUTOGENERATE_FUNCTION(APhysicsVolume,847,execSetVolumeVelocity);
AUTOGENERATE_FUNCTION(AParticleEffector,1179,execCreateEffector);
AUTOGENERATE_FUNCTION(AParticleEffector,1178,execUpdate);
AUTOGENERATE_FUNCTION(AParticleEffector,1177,execEffectorDetach);
AUTOGENERATE_FUNCTION(AParticleEffector,1176,execEffectorAttach);
AUTOGENERATE_FUNCTION(AHUD,-1,execSetKeyInfoState);
AUTOGENERATE_FUNCTION(AHUD,1189,execDrawTileOnDirectionalCircle);
AUTOGENERATE_FUNCTION(AHUD,1188,execTickDirectionalIndicators);
AUTOGENERATE_FUNCTION(AHUD,1187,execAddDirectionalIndicator);
AUTOGENERATE_FUNCTION(AHUD,-1,execHUDDrawStretchedTextureSegment);
AUTOGENERATE_FUNCTION(AHUD,-1,execTickScreenFlashes);
AUTOGENERATE_FUNCTION(AHUD,1186,execRemoveScreenFlash);
AUTOGENERATE_FUNCTION(AHUD,1185,execAddScreenFlash);
AUTOGENERATE_FUNCTION(AHUD,-1,execAddHudEffect);
AUTOGENERATE_FUNCTION(AHUD,1184,execTickDisplayMessages);
AUTOGENERATE_FUNCTION(AHUD,1183,execGetGamepadButtonImageForShortKeyName);
AUTOGENERATE_FUNCTION(AHUD,1182,execGetSpecialKeyString);
AUTOGENERATE_FUNCTION(AHUD,1181,execFindFirstPCBinding);
AUTOGENERATE_FUNCTION(AHUD,1180,execFindFirstGamepadBinding);
AUTOGENERATE_FUNCTION(AHUD,-1,execPostRender);
AUTOGENERATE_FUNCTION(AGeoWater,1119,execDetachOscillator);
AUTOGENERATE_FUNCTION(AGeoWater,1118,execAttachOscillator);
AUTOGENERATE_FUNCTION(AGeoWater,1117,execInternalTick);
AUTOGENERATE_FUNCTION(AGeoWater,1116,execSampleHeight);
AUTOGENERATE_FUNCTION(AGeoWater,1115,execSplashWater);
AUTOGENERATE_FUNCTION(AChallengeInfo,1174,execUnlockPreorderGroup);
AUTOGENERATE_FUNCTION(AChallengeInfo,1173,execUnlockPreorderBonuses);
AUTOGENERATE_FUNCTION(AChallengeInfo,1172,execUnlockPreorderGroupIncludesDBP);
AUTOGENERATE_FUNCTION(AChallengeInfo,1171,execTryBonusCode);
AUTOGENERATE_FUNCTION(AChallengeInfo,1170,execIsEnterBonusCodeMenuItemEnabled);
AUTOGENERATE_FUNCTION(AChallengeInfo,1169,execGetChallengeIdxFromID);
AUTOGENERATE_FUNCTION(AChallengeInfo,1168,execStaticInit);
AUTOGENERATE_FUNCTION(ABreakableGlass,-1,execRecalculateRenderBox);
AUTOGENERATE_FUNCTION(ABreakableGlass,1088,execIsDone);
AUTOGENERATE_FUNCTION(ABreakableGlass,1087,execIsShattered);
AUTOGENERATE_FUNCTION(ABreakableGlass,1086,execShatterGlass);
AUTOGENERATE_FUNCTION(ABreakableGlass,1085,execDoRespawn);
AUTOGENERATE_FUNCTION(ABreakableGlass,1084,execInternalTick);
AUTOGENERATE_FUNCTION(ABreakableGlass,1083,execGetParticleBox);
AUTOGENERATE_FUNCTION(ABreakableGlass,1082,execBreakGlassXY);
AUTOGENERATE_FUNCTION(ABreakableGlass,1081,execBreakGlassDir);
AUTOGENERATE_FUNCTION(ABreakableGlass,1080,execBreakGlass);
AUTOGENERATE_FUNCTION(ABeamSystem,1068,execTickNative);
AUTOGENERATE_FUNCTION(ABeamSystem,1067,execFreeSegment);
AUTOGENERATE_FUNCTION(ABeamSystem,1066,execAllocSegment);
AUTOGENERATE_FUNCTION(AActionPoint,-1,execIsLockedBy);
AUTOGENERATE_FUNCTION(AActionPoint,-1,execIsCompletelyCompromised);
AUTOGENERATE_FUNCTION(AActionPoint,-1,execNative_InitActionPoint);

#ifndef NAMES_ONLY
#undef AUTOGENERATE_NAME
#undef AUTOGENERATE_FUNCTION
#endif // NAMES_ONLY

#if _MSC_VER
#pragma pack (pop)
#elif defined PS3
#pragma pack (pop)
#endif


#ifdef NATIVE_DEFS_ONLY
#if _MSC_VER
#pragma message("*** Including native definitions from Engine.")
#endif
DECLARE_NATIVE_TYPE(Engine,UFactory);
DECLARE_NATIVE_TYPE(Engine,UObject);
DECLARE_NATIVE_TYPE(Engine,UCommandlet);
DECLARE_NATIVE_TYPE(Engine,UEngine);
DECLARE_NATIVE_TYPE(Engine,UExporter);
DECLARE_NATIVE_TYPE(Engine,ARenderActor);
DECLARE_NATIVE_TYPE(Engine,AKarmaActor);
DECLARE_NATIVE_TYPE(Engine,AActor);
DECLARE_NATIVE_TYPE(Engine,ULCDHelper);
DECLARE_NATIVE_TYPE(Engine,UGearboxEngineGlobals);
DECLARE_NATIVE_TYPE(Engine,UAgentPendingLevel);
DECLARE_NATIVE_TYPE(Engine,UNetPendingLevel);
DECLARE_NATIVE_TYPE(Engine,UPendingLevel);
DECLARE_NATIVE_TYPE(Engine,UAgentNetDriver);
DECLARE_NATIVE_TYPE(Engine,UNetDriver);
DECLARE_NATIVE_TYPE(Engine,UAgentConnection);
DECLARE_NATIVE_TYPE(Engine,UNetConnection);
DECLARE_NATIVE_TYPE(Engine,UPlayer);
DECLARE_NATIVE_TYPE(Engine,UOnlineAgentNetDriverListener);
DECLARE_NATIVE_TYPE(Engine,UOnlineAgentListener);
DECLARE_NATIVE_TYPE(Engine,UPS3RichPresenceData);
DECLARE_NATIVE_TYPE(Engine,UOnlineServerFactory);
DECLARE_NATIVE_TYPE(Engine,UOnlineAgent);
DECLARE_NATIVE_TYPE(Engine,USteamDedicatedListener);
DECLARE_NATIVE_TYPE(Engine,UMeshInstance);
DECLARE_NATIVE_TYPE(Engine,UDukeMesh);
DECLARE_NATIVE_TYPE(Engine,UMesh);
DECLARE_NATIVE_TYPE(Engine,USkeletonMgr);
DECLARE_NATIVE_TYPE(Engine,USkinMeshMgr);
DECLARE_NATIVE_TYPE(Engine,UAnimationMgr);
DECLARE_NATIVE_TYPE(Engine,AStaticMeshActor);
DECLARE_NATIVE_TYPE(Engine,UStaticMeshInstance);
DECLARE_NATIVE_TYPE(Engine,UStaticMesh);
DECLARE_NATIVE_TYPE(Engine,ANAVStats);
DECLARE_NATIVE_TYPE(Engine,ACollisionVolume);
DECLARE_NATIVE_TYPE(Engine,AVolume);
DECLARE_NATIVE_TYPE(Engine,ABrush);
DECLARE_NATIVE_TYPE(Engine,ANavVolume_Door);
DECLARE_NATIVE_TYPE(Engine,ANavVolume);
DECLARE_NATIVE_TYPE(Engine,UUpdateServerCommandlet);
DECLARE_NATIVE_TYPE(Engine,UMasterServerCommandlet);
DECLARE_NATIVE_TYPE(Engine,AXboxLiveQuery);
DECLARE_NATIVE_TYPE(Engine,AUdpLink);
DECLARE_NATIVE_TYPE(Engine,AInternetLink);
DECLARE_NATIVE_TYPE(Engine,AInternetInfo);
DECLARE_NATIVE_TYPE(Engine,AInfo);
DECLARE_NATIVE_TYPE(Engine,AInfoActor);
DECLARE_NATIVE_TYPE(Engine,AUdpSystemLinkQuery);
DECLARE_NATIVE_TYPE(Engine,AUdpBeaconSystemLink);
DECLARE_NATIVE_TYPE(Engine,UTcpNetDriver);
DECLARE_NATIVE_TYPE(Engine,UTcpipConnection);
DECLARE_NATIVE_TYPE(Engine,ATcpLink);
DECLARE_NATIVE_TYPE(Engine,UWindowsViewport);
DECLARE_NATIVE_TYPE(Engine,UViewport);
DECLARE_NATIVE_TYPE(Engine,UWindowsClient);
DECLARE_NATIVE_TYPE(Engine,UClient);
DECLARE_NATIVE_TYPE(Engine,UWindowManager);
DECLARE_NATIVE_TYPE(Engine,UPackageMapLevel);
DECLARE_NATIVE_TYPE(Engine,UPackageMap);
DECLARE_NATIVE_TYPE(Engine,UDemoRecDriver);
DECLARE_NATIVE_TYPE(Engine,UDemoRecConnection);
DECLARE_NATIVE_TYPE(Engine,UDemoPlayPendingLevel);
DECLARE_NATIVE_TYPE(Engine,UFileChannel);
DECLARE_NATIVE_TYPE(Engine,UChannel);
DECLARE_NATIVE_TYPE(Engine,UActorChannel);
DECLARE_NATIVE_TYPE(Engine,UControlChannel);
DECLARE_NATIVE_TYPE(Engine,UOnlineAgentQualityControl);
DECLARE_NATIVE_TYPE(Engine,UZoneCubemap);
DECLARE_NATIVE_TYPE(Engine,UTexture);
DECLARE_NATIVE_TYPE(Engine,UMaterialEx);
DECLARE_NATIVE_TYPE(Engine,ASavedMove);
DECLARE_NATIVE_TYPE(Engine,URender);
DECLARE_NATIVE_TYPE(Engine,AProjector);
DECLARE_NATIVE_TYPE(Engine,UProjectorPrimitive);
DECLARE_NATIVE_TYPE(Engine,APlayerPawn);
DECLARE_NATIVE_TYPE(Engine,APawn);
DECLARE_NATIVE_TYPE(Engine,AInteractiveActor);
DECLARE_NATIVE_TYPE(Engine,ULipSyncInfo);
DECLARE_NATIVE_TYPE(Engine,UModel);
DECLARE_NATIVE_TYPE(Engine,ULevel);
DECLARE_NATIVE_TYPE(Engine,ULevelBase);
DECLARE_NATIVE_TYPE(Engine,UInput);
DECLARE_NATIVE_TYPE(Engine,UGameEngine);
DECLARE_NATIVE_TYPE(Engine,UPolys);
DECLARE_NATIVE_TYPE(Engine,UFontTrueType);
DECLARE_NATIVE_TYPE(Engine,UFont);
DECLARE_NATIVE_TYPE(Engine,UGlobalTempObjects);
DECLARE_NATIVE_TYPE(Engine,UServerCommandlet);
DECLARE_NATIVE_TYPE(Engine,URenderDevice);
DECLARE_NATIVE_TYPE(Engine,UConvexVolume);
DECLARE_NATIVE_TYPE(Engine,UConsole);
DECLARE_NATIVE_TYPE(Engine,UCanvas);
DECLARE_NATIVE_TYPE(Engine,UAudioSubsystem);
DECLARE_NATIVE_TYPE(Engine,UMusic);
DECLARE_NATIVE_TYPE(Engine,UVoiceSound);
DECLARE_NATIVE_TYPE(Engine,USound);
DECLARE_NATIVE_TYPE(Engine,ACorpse_LimbCap);
DECLARE_NATIVE_TYPE(Engine,ACorpseBase);
DECLARE_NATIVE_TYPE(Engine,AMenuCamera);
DECLARE_NATIVE_TYPE(Engine,ATriggerHint);
DECLARE_NATIVE_TYPE(Engine,ATriggers);
DECLARE_NATIVE_TYPE(Engine,AMapRefKeeper);
DECLARE_NATIVE_TYPE(Engine,AMultiplayerInfo);
DECLARE_NATIVE_TYPE(Engine,AControlRemapperEx);
DECLARE_NATIVE_TYPE(Engine,AAmmoCasing);
DECLARE_NATIVE_TYPE(Engine,Adeleteme);
DECLARE_NATIVE_TYPE(Engine,UTraceDamageType);
DECLARE_NATIVE_TYPE(Engine,UDamageType);
DECLARE_NATIVE_TYPE(Engine,UNearMissEffect);
DECLARE_NATIVE_TYPE(Engine,UMaterial);
DECLARE_NATIVE_TYPE(Engine,ANavigationPoint);
DECLARE_NATIVE_TYPE(Engine,ALadderVolume);
DECLARE_NATIVE_TYPE(Engine,AParticleSystemBase);
DECLARE_NATIVE_TYPE(Engine,ABranchingTrigger);
DECLARE_NATIVE_TYPE(Engine,ATriggerLightEx);
DECLARE_NATIVE_TYPE(Engine,ALightEx);
DECLARE_NATIVE_TYPE(Engine,AAmmo);
DECLARE_NATIVE_TYPE(Engine,AInventory);
DECLARE_NATIVE_TYPE(Engine,AMapInfo);
DECLARE_NATIVE_TYPE(Engine,AMPMapInfo);
DECLARE_NATIVE_TYPE(Engine,AMapLocationsDM);
DECLARE_NATIVE_TYPE(Engine,AMapLocations);
DECLARE_NATIVE_TYPE(Engine,AMutator);
DECLARE_NATIVE_TYPE(Engine,AdnDecal);
DECLARE_NATIVE_TYPE(Engine,ADecal);
DECLARE_NATIVE_TYPE(Engine,Alocationid);
DECLARE_NATIVE_TYPE(Engine,AKeypoint);
DECLARE_NATIVE_TYPE(Engine,ULevelSummary);
DECLARE_NATIVE_TYPE(Engine,ADlcInfo);
DECLARE_NATIVE_TYPE(Engine,AGameReplicationInfo);
DECLARE_NATIVE_TYPE(Engine,AReplicationInfo);
DECLARE_NATIVE_TYPE(Engine,APlayerReplicationInfo);
DECLARE_NATIVE_TYPE(Engine,ADispatcher);
DECLARE_NATIVE_TYPE(Engine,ATrigger);
DECLARE_NATIVE_TYPE(Engine,APlayerStart);
DECLARE_NATIVE_TYPE(Engine,ATeleporter);
DECLARE_NATIVE_TYPE(Engine,AWarpZoneInfo);
DECLARE_NATIVE_TYPE(Engine,AZoneInfo);
DECLARE_NATIVE_TYPE(Engine,AProjectile);
DECLARE_NATIVE_TYPE(Engine,AInterpolationPoint);
DECLARE_NATIVE_TYPE(Engine,ASkyZoneInfo);
DECLARE_NATIVE_TYPE(Engine,ACamera);
DECLARE_NATIVE_TYPE(Engine,AGameInfo);
DECLARE_NATIVE_TYPE(Engine,ALevelInfo);
DECLARE_NATIVE_TYPE(Engine,APolyMarker);
DECLARE_NATIVE_TYPE(Engine,AClipMarker);
DECLARE_NATIVE_TYPE(Engine,UMetagameData);
DECLARE_NATIVE_TYPE(Engine,UCharacterVoicePack);
DECLARE_NATIVE_TYPE(Engine,UAction);
DECLARE_NATIVE_TYPE(Engine,UKMeshProps);
DECLARE_NATIVE_TYPE(Engine,AKConvexSensor);
DECLARE_NATIVE_TYPE(Engine,AKSensor);
DECLARE_NATIVE_TYPE(Engine,AKSphereSensor);
DECLARE_NATIVE_TYPE(Engine,AKBoxSensor);
DECLARE_NATIVE_TYPE(Engine,AKLineSensor);
DECLARE_NATIVE_TYPE(Engine,UStandardPhysicsAction);
DECLARE_NATIVE_TYPE(Engine,UPhysicsAction);
DECLARE_NATIVE_TYPE(Engine,UPhysicsAction_Clamp);
DECLARE_NATIVE_TYPE(Engine,UPhysicsAction_DrunkTargeting);
DECLARE_NATIVE_TYPE(Engine,UPhysicsAction_PathConstraint);
DECLARE_NATIVE_TYPE(Engine,UPhysicsAction_JetPropulsion);
DECLARE_NATIVE_TYPE(Engine,UPhysicsAction_VelocityClamp);
DECLARE_NATIVE_TYPE(Engine,UPhysicsAction_Acceleration);
DECLARE_NATIVE_TYPE(Engine,UPhysicsAction_ConstAccel);
DECLARE_NATIVE_TYPE(Engine,UPhysicsAction_ConstVel);
DECLARE_NATIVE_TYPE(Engine,UPhysicsAction_ConstLinearVel);
DECLARE_NATIVE_TYPE(Engine,UPhysicsAction_VelocityLock);
DECLARE_NATIVE_TYPE(Engine,UPhysicsAction_Frisbee);
DECLARE_NATIVE_TYPE(Engine,UPhysicsAction_Lift);
DECLARE_NATIVE_TYPE(Engine,AKLinearAngularPulley);
DECLARE_NATIVE_TYPE(Engine,AKPulley);
DECLARE_NATIVE_TYPE(Engine,AKConstraint);
DECLARE_NATIVE_TYPE(Engine,AKAngularPulley);
DECLARE_NATIVE_TYPE(Engine,AKLinearPulley);
DECLARE_NATIVE_TYPE(Engine,AKAngularSpringDamper);
DECLARE_NATIVE_TYPE(Engine,AKSpringDamper);
DECLARE_NATIVE_TYPE(Engine,AKAffector);
DECLARE_NATIVE_TYPE(Engine,AKLinearSpringDamper);
DECLARE_NATIVE_TYPE(Engine,AKAngularJointLimit);
DECLARE_NATIVE_TYPE(Engine,AKLinearJointLimit);
DECLARE_NATIVE_TYPE(Engine,AKAngularMotorAffector);
DECLARE_NATIVE_TYPE(Engine,AKLinearMotorAffector);
DECLARE_NATIVE_TYPE(Engine,AKSliding);
DECLARE_NATIVE_TYPE(Engine,AKLinear);
DECLARE_NATIVE_TYPE(Engine,AKFixedOrientation);
DECLARE_NATIVE_TYPE(Engine,AKFixed);
DECLARE_NATIVE_TYPE(Engine,AKHinge);
DECLARE_NATIVE_TYPE(Engine,AKBSJoint);
DECLARE_NATIVE_TYPE(Engine,ABuildSprite);
DECLARE_NATIVE_TYPE(Engine,AdnVisualizationController);
DECLARE_NATIVE_TYPE(Engine,UStaticTexture);
DECLARE_NATIVE_TYPE(Engine,UTextureCanvas);
DECLARE_NATIVE_TYPE(Engine,USmackerTextureInstance);
DECLARE_NATIVE_TYPE(Engine,UMaterialExInstance);
DECLARE_NATIVE_TYPE(Engine,USmackerTexture);
DECLARE_NATIVE_TYPE(Engine,UBinkTexture);
DECLARE_NATIVE_TYPE(Engine,UPrecacheIndex);
DECLARE_NATIVE_TYPE(Engine,UDefaultPhysicsMaterial);
DECLARE_NATIVE_TYPE(Engine,UPhysicsMaterial);
DECLARE_NATIVE_TYPE(Engine,UPhysicsEffectsDatabase);
DECLARE_NATIVE_TYPE(Engine,UPatchPrimitive);
DECLARE_NATIVE_TYPE(Engine,UPatchRenderData);
DECLARE_NATIVE_TYPE(Engine,UPatchData);
DECLARE_NATIVE_TYPE(Engine,APatchActor);
DECLARE_NATIVE_TYPE(Engine,UMovementBoneTracker);
DECLARE_NATIVE_TYPE(Engine,UTextureAnimMgr);
DECLARE_NATIVE_TYPE(Engine,UModifier);
DECLARE_NATIVE_TYPE(Engine,UGrayscaleShader);
DECLARE_NATIVE_TYPE(Engine,UBumpCubeEnvMap);
DECLARE_NATIVE_TYPE(Engine,URenderTarget);
DECLARE_NATIVE_TYPE(Engine,UFrameBuffer);
DECLARE_NATIVE_TYPE(Engine,UBumpWaterReflection);
DECLARE_NATIVE_TYPE(Engine,UFakeBumpMap);
DECLARE_NATIVE_TYPE(Engine,UCombiner);
DECLARE_NATIVE_TYPE(Engine,UTexMatrix);
DECLARE_NATIVE_TYPE(Engine,UTexModifier);
DECLARE_NATIVE_TYPE(Engine,UParticleMaterial);
DECLARE_NATIVE_TYPE(Engine,UFogMaterial);
DECLARE_NATIVE_TYPE(Engine,UColorModifier);
DECLARE_NATIVE_TYPE(Engine,UProxyBitmapMaterial);
DECLARE_NATIVE_TYPE(Engine,UMiscMaterial);
DECLARE_NATIVE_TYPE(Engine,ULayerMaterial);
DECLARE_NATIVE_TYPE(Engine,UMaterialWorkspace);
DECLARE_NATIVE_TYPE(Engine,UBumpShader);
DECLARE_NATIVE_TYPE(Engine,UTexEnvMap);
DECLARE_NATIVE_TYPE(Engine,UTexRotator);
DECLARE_NATIVE_TYPE(Engine,UTexScaler);
DECLARE_NATIVE_TYPE(Engine,UTexPanner);
DECLARE_NATIVE_TYPE(Engine,UActorColor);
DECLARE_NATIVE_TYPE(Engine,UConstantMaterial);
DECLARE_NATIVE_TYPE(Engine,UDistFadeColor);
DECLARE_NATIVE_TYPE(Engine,UFadeColor);
DECLARE_NATIVE_TYPE(Engine,UConstantValue);
DECLARE_NATIVE_TYPE(Engine,UConstantColor);
DECLARE_NATIVE_TYPE(Engine,UFinalBlend);
DECLARE_NATIVE_TYPE(Engine,ULightExPrimitive);
DECLARE_NATIVE_TYPE(Engine,AdnKingOfTheHill_MarkerBase);
DECLARE_NATIVE_TYPE(Engine,AWeaponPickup);
DECLARE_NATIVE_TYPE(Engine,APickup);
DECLARE_NATIVE_TYPE(Engine,UWeaponConfig);
DECLARE_NATIVE_TYPE(Engine,AWeapon);
DECLARE_NATIVE_TYPE(Engine,AActivatableInventory);
DECLARE_NATIVE_TYPE(Engine,AIKSystemInfo_InteractiveDecoration);
DECLARE_NATIVE_TYPE(Engine,AIKSystemInfo);
DECLARE_NATIVE_TYPE(Engine,AIKSystemInfo_Walker);
DECLARE_NATIVE_TYPE(Engine,AIKSystemInfo_Inventory);
DECLARE_NATIVE_TYPE(Engine,AGameModulePersistantData);
DECLARE_NATIVE_TYPE(Engine,AGameModule);
DECLARE_NATIVE_TYPE(Engine,ADoorExtras);
DECLARE_NATIVE_TYPE(Engine,ADecoration);
DECLARE_NATIVE_TYPE(Engine,ADoorHingeEx);
DECLARE_NATIVE_TYPE(Engine,ADoorMoverEx);
DECLARE_NATIVE_TYPE(Engine,UColorTable);
DECLARE_NATIVE_TYPE(Engine,UAnimationControllerEx);
DECLARE_NATIVE_TYPE(Engine,AStickyNote);
DECLARE_NATIVE_TYPE(Engine,UParticleSystemPrimitive);
DECLARE_NATIVE_TYPE(Engine,AdnPhysicsFX_Spawners);
DECLARE_NATIVE_TYPE(Engine,AdnFriendFX_Spawners);
DECLARE_NATIVE_TYPE(Engine,ASoftParticleSystem);
DECLARE_NATIVE_TYPE(Engine,AParticleCollisionActor);
DECLARE_NATIVE_TYPE(Engine,AParticleSystem);
DECLARE_NATIVE_TYPE(Engine,ASoftParticleAffector);
DECLARE_NATIVE_TYPE(Engine,UMotionPrefab);
DECLARE_NATIVE_TYPE(Engine,ADefaultPhysicsVolume);
DECLARE_NATIVE_TYPE(Engine,APhysicsVolume);
DECLARE_NATIVE_TYPE(Engine,AParticleEffector);
DECLARE_NATIVE_TYPE(Engine,AAIFaction);
DECLARE_NATIVE_TYPE(Engine,AHUDEffects);
DECLARE_NATIVE_TYPE(Engine,UHUDIconTable);
DECLARE_NATIVE_TYPE(Engine,AHUDItem);
DECLARE_NATIVE_TYPE(Engine,AHUD);
DECLARE_NATIVE_TYPE(Engine,UWaterPrimitive);
DECLARE_NATIVE_TYPE(Engine,AGeoWaterOscillatorRing);
DECLARE_NATIVE_TYPE(Engine,AGeoWaterOscillator);
DECLARE_NATIVE_TYPE(Engine,AGeoWater);
DECLARE_NATIVE_TYPE(Engine,UChallengeObject);
DECLARE_NATIVE_TYPE(Engine,AChallengeInfo);
DECLARE_NATIVE_TYPE(Engine,UGlassPrimitive);
DECLARE_NATIVE_TYPE(Engine,ABreakableGlass);
DECLARE_NATIVE_TYPE(Engine,ABeamSystem);
DECLARE_NATIVE_TYPE(Engine,ABaseAI);
DECLARE_NATIVE_TYPE(Engine,AAntiPortalActor);
DECLARE_NATIVE_TYPE(Engine,AAIInfo);
DECLARE_NATIVE_TYPE(Engine,AActionPoint);
DECLARE_NATIVE_TYPE(Engine,USystem);
DECLARE_NATIVE_TYPE(Engine,UStructProperty);
DECLARE_NATIVE_TYPE(Engine,UProperty);
DECLARE_NATIVE_TYPE(Engine,UField);
DECLARE_NATIVE_TYPE(Engine,UArrayProperty);
DECLARE_NATIVE_TYPE(Engine,UStrProperty);
DECLARE_NATIVE_TYPE(Engine,UNameProperty);
DECLARE_NATIVE_TYPE(Engine,UClassProperty);
DECLARE_NATIVE_TYPE(Engine,UObjectProperty);
DECLARE_NATIVE_TYPE(Engine,UFloatProperty);
DECLARE_NATIVE_TYPE(Engine,UBoolProperty);
DECLARE_NATIVE_TYPE(Engine,UDelegateProperty);
DECLARE_NATIVE_TYPE(Engine,UPointerProperty);
DECLARE_NATIVE_TYPE(Engine,UIntProperty);
DECLARE_NATIVE_TYPE(Engine,UByteProperty);
DECLARE_NATIVE_TYPE(Engine,ULanguage);
DECLARE_NATIVE_TYPE(Engine,UTextBufferFactory);
DECLARE_NATIVE_TYPE(Engine,UPackage);
DECLARE_NATIVE_TYPE(Engine,ULinkerSave);
DECLARE_NATIVE_TYPE(Engine,ULinker);
DECLARE_NATIVE_TYPE(Engine,ULinkerLoad);
DECLARE_NATIVE_TYPE(Engine,UEnum);
DECLARE_NATIVE_TYPE(Engine,UTextBuffer);
DECLARE_NATIVE_TYPE(Engine,UConst);
DECLARE_NATIVE_TYPE(Engine,UFunction);
DECLARE_NATIVE_TYPE(Engine,UStruct);
DECLARE_NATIVE_TYPE(Engine,UClass);
DECLARE_NATIVE_TYPE(Engine,UState);
DECLARE_NATIVE_TYPE(Engine,UObjectExporterT3D);

#define AUTO_INITIALIZE_REGISTRANTS_ENGINE \
	UFactory::StaticClassNoInline(); \
	UObject::StaticClassNoInline(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineUObjectNative; \
	UCommandlet::StaticClassNoInline(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineUCommandletNative; \
	UEngine::StaticClassNoInline(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineUEngineNative; \
	USubsystem::StaticClassNoInline(); \
	UExporter::StaticClassNoInline(); \
	ARenderActor::StaticClassNoInline(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineARenderActorNative; \
	AKarmaActor::StaticClassNoInline(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineAKarmaActorNative; \
	AActor::StaticClassNoInline(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineAActorNative; \
	ULCDHelper::StaticClassNoInline(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineULCDHelperNative; \
	UGearboxEngineGlobals::StaticClassNoInline(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineUGearboxEngineGlobalsNative; \
	UAgentPendingLevel::StaticClassNoInline(); \
	UNetPendingLevel::StaticClassNoInline(); \
	UPendingLevel::StaticClassNoInline(); \
	UAgentNetDriver::StaticClassNoInline(); \
	UNetDriver::StaticClassNoInline(); \
	UAgentConnection::StaticClassNoInline(); \
	UNetConnection::StaticClassNoInline(); \
	UPlayer::StaticClassNoInline(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineUPlayerNative; \
	UOnlineAgentNetDriverListener::StaticClassNoInline(); \
	UOnlineAgentListener::StaticClassNoInline(); \
	UPS3RichPresenceData::StaticClassNoInline(); \
	UOnlineSubsystem::StaticClassNoInline(); \
	UOnlineServerFactory::StaticClassNoInline(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineUOnlineServerFactoryNative; \
	UOnlineAgent::StaticClassNoInline(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineUOnlineAgentNative; \
	USteamDedicatedListener::StaticClassNoInline(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineUSteamDedicatedListenerNative; \
	UMeshInstance::StaticClassNoInline(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineUMeshInstanceNative; \
	UPrimitive::StaticClassNoInline(); \
	UDukeMesh::StaticClassNoInline(); \
	UMesh::StaticClassNoInline(); \
	UBonePartMapper::StaticClassNoInline(); \
	USkeletonMgr::StaticClassNoInline(); \
	USkinMeshMgr::StaticClassNoInline(); \
	UAnimationMgr::StaticClassNoInline(); \
	AStaticMeshActor::StaticClassNoInline(); \
	UStaticMeshInstance::StaticClassNoInline(); \
	UStaticMesh::StaticClassNoInline(); \
	ANAVStats::StaticClassNoInline(); \
	ACollisionVolume::StaticClassNoInline(); \
	AVolume::StaticClassNoInline(); \
	ABrush::StaticClassNoInline(); \
	ANavVolume_Door::StaticClassNoInline(); \
	ANavVolume::StaticClassNoInline(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineANavVolumeNative; \
	UUpdateServerCommandlet::StaticClassNoInline(); \
	UMasterServerCommandlet::StaticClassNoInline(); \
	AXboxLiveQuery::StaticClassNoInline(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineAXboxLiveQueryNative; \
	AUdpLink::StaticClassNoInline(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineAUdpLinkNative; \
	AInternetLink::StaticClassNoInline(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineAInternetLinkNative; \
	AInternetInfo::StaticClassNoInline(); \
	AInfo::StaticClassNoInline(); \
	AInfoActor::StaticClassNoInline(); \
	AUdpSystemLinkQuery::StaticClassNoInline(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineAUdpSystemLinkQueryNative; \
	AUdpBeaconSystemLink::StaticClassNoInline(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineAUdpBeaconSystemLinkNative; \
	UTcpNetDriver::StaticClassNoInline(); \
	UTcpipConnection::StaticClassNoInline(); \
	ATcpLink::StaticClassNoInline(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineATcpLinkNative; \
	UWindowsViewport::StaticClassNoInline(); \
	UViewport::StaticClassNoInline(); \
	UWindowsClient::StaticClassNoInline(); \
	UClient::StaticClassNoInline(); \
	UWindowManager::StaticClassNoInline(); \
	UPackageMapLevel::StaticClassNoInline(); \
	UPackageMap::StaticClassNoInline(); \
	UDemoRecDriver::StaticClassNoInline(); \
	UDemoRecConnection::StaticClassNoInline(); \
	UDemoPlayPendingLevel::StaticClassNoInline(); \
	UFileChannel::StaticClassNoInline(); \
	UChannel::StaticClassNoInline(); \
	UActorChannel::StaticClassNoInline(); \
	UControlChannel::StaticClassNoInline(); \
	UOnlineAgentQualityControl::StaticClassNoInline(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineUOnlineAgentQualityControlNative; \
	UZoneCubemap::StaticClassNoInline(); \
	UCubemap::StaticClassNoInline(); \
	UTexture::StaticClassNoInline(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineUTextureNative; \
	UBitmap::StaticClassNoInline(); \
	URenderedMaterial::StaticClassNoInline(); \
	UMaterialEx::StaticClassNoInline(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineUMaterialExNative; \
	UPalette::StaticClassNoInline(); \
	UProceduralTexture::StaticClassNoInline(); \
	ASavedMove::StaticClassNoInline(); \
	URender::StaticClassNoInline(); \
	AProjector::StaticClassNoInline(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineAProjectorNative; \
	UProjectorPrimitive::StaticClassNoInline(); \
	APlayerPawn::StaticClassNoInline(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineAPlayerPawnNative; \
	APawn::StaticClassNoInline(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineAPawnNative; \
	AInteractiveActor::StaticClassNoInline(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineAInteractiveActorNative; \
	ULipSyncInfo::StaticClassNoInline(); \
	UModel::StaticClassNoInline(); \
	ULevel::StaticClassNoInline(); \
	ULevelBase::StaticClassNoInline(); \
	UInput::StaticClassNoInline(); \
	UGameEngine::StaticClassNoInline(); \
	UPolys::StaticClassNoInline(); \
	UFontTrueType::StaticClassNoInline(); \
	UFont::StaticClassNoInline(); \
	UGlobalTempObjects::StaticClassNoInline(); \
	UServerCommandlet::StaticClassNoInline(); \
	URenderDevice::StaticClassNoInline(); \
	UConvexVolume::StaticClassNoInline(); \
	UConsole::StaticClassNoInline(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineUConsoleNative; \
	UCanvas::StaticClassNoInline(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineUCanvasNative; \
	UAudioSubsystem::StaticClassNoInline(); \
	UMusic::StaticClassNoInline(); \
	UVoiceSound::StaticClassNoInline(); \
	USound::StaticClassNoInline(); \
	ACorpse_LimbCap::StaticClassNoInline(); \
	ACorpseBase::StaticClassNoInline(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineACorpseBaseNative; \
	AMenuCamera::StaticClassNoInline(); \
	ATriggerHint::StaticClassNoInline(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineATriggerHintNative; \
	ATriggers::StaticClassNoInline(); \
	AMapRefKeeper::StaticClassNoInline(); \
	AMultiplayerInfo::StaticClassNoInline(); \
	AControlRemapperEx::StaticClassNoInline(); \
	AAmmoCasing::StaticClassNoInline(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineAAmmoCasingNative; \
	Adeleteme::StaticClassNoInline(); \
	UTraceDamageType::StaticClassNoInline(); \
	UDamageType::StaticClassNoInline(); \
	UNearMissEffect::StaticClassNoInline(); \
	UMaterial::StaticClassNoInline(); \
	ANavigationPoint::StaticClassNoInline(); \
	ALadderVolume::StaticClassNoInline(); \
	AParticleSystemBase::StaticClassNoInline(); \
	ABranchingTrigger::StaticClassNoInline(); \
	ATriggerLightEx::StaticClassNoInline(); \
	ALightEx::StaticClassNoInline(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineALightExNative; \
	AAmmo::StaticClassNoInline(); \
	AInventory::StaticClassNoInline(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineAInventoryNative; \
	AMapInfo::StaticClassNoInline(); \
	AMPMapInfo::StaticClassNoInline(); \
	AMapLocationsDM::StaticClassNoInline(); \
	AMapLocations::StaticClassNoInline(); \
	AMutator::StaticClassNoInline(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineAMutatorNative; \
	AdnDecal::StaticClassNoInline(); \
	ADecal::StaticClassNoInline(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineADecalNative; \
	Alocationid::StaticClassNoInline(); \
	AKeypoint::StaticClassNoInline(); \
	ULevelSummary::StaticClassNoInline(); \
	ADlcInfo::StaticClassNoInline(); \
	AGameReplicationInfo::StaticClassNoInline(); \
	AReplicationInfo::StaticClassNoInline(); \
	APlayerReplicationInfo::StaticClassNoInline(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineAPlayerReplicationInfoNative; \
	ADispatcher::StaticClassNoInline(); \
	ATrigger::StaticClassNoInline(); \
	APlayerStart::StaticClassNoInline(); \
	ATeleporter::StaticClassNoInline(); \
	AWarpZoneInfo::StaticClassNoInline(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineAWarpZoneInfoNative; \
	AZoneInfo::StaticClassNoInline(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineAZoneInfoNative; \
	AProjectile::StaticClassNoInline(); \
	AInterpolationPoint::StaticClassNoInline(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineAInterpolationPointNative; \
	ASkyZoneInfo::StaticClassNoInline(); \
	ACamera::StaticClassNoInline(); \
	AGameInfo::StaticClassNoInline(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineAGameInfoNative; \
	ALevelInfo::StaticClassNoInline(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineALevelInfoNative; \
	APolyMarker::StaticClassNoInline(); \
	AClipMarker::StaticClassNoInline(); \
	UMetagameData::StaticClassNoInline(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineUMetagameDataNative; \
	UCharacterVoicePack::StaticClassNoInline(); \
	UAction::StaticClassNoInline(); \
	UKMeshProps::StaticClassNoInline(); \
	AKConvexSensor::StaticClassNoInline(); \
	AKSensor::StaticClassNoInline(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineAKSensorNative; \
	AKSphereSensor::StaticClassNoInline(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineAKSphereSensorNative; \
	AKBoxSensor::StaticClassNoInline(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineAKBoxSensorNative; \
	AKLineSensor::StaticClassNoInline(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineAKLineSensorNative; \
	UStandardPhysicsAction::StaticClassNoInline(); \
	UPhysicsAction::StaticClassNoInline(); \
	UPhysicsAction_Clamp::StaticClassNoInline(); \
	UPhysicsAction_DrunkTargeting::StaticClassNoInline(); \
	UPhysicsAction_PathConstraint::StaticClassNoInline(); \
	UPhysicsAction_JetPropulsion::StaticClassNoInline(); \
	UPhysicsAction_VelocityClamp::StaticClassNoInline(); \
	UPhysicsAction_Acceleration::StaticClassNoInline(); \
	UPhysicsAction_ConstAccel::StaticClassNoInline(); \
	UPhysicsAction_ConstVel::StaticClassNoInline(); \
	UPhysicsAction_ConstLinearVel::StaticClassNoInline(); \
	UPhysicsAction_VelocityLock::StaticClassNoInline(); \
	UPhysicsAction_Frisbee::StaticClassNoInline(); \
	UPhysicsAction_Lift::StaticClassNoInline(); \
	AKLinearAngularPulley::StaticClassNoInline(); \
	AKPulley::StaticClassNoInline(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineAKPulleyNative; \
	AKConstraint::StaticClassNoInline(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineAKConstraintNative; \
	AKAngularPulley::StaticClassNoInline(); \
	AKLinearPulley::StaticClassNoInline(); \
	AKAngularSpringDamper::StaticClassNoInline(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineAKAngularSpringDamperNative; \
	AKSpringDamper::StaticClassNoInline(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineAKSpringDamperNative; \
	AKAffector::StaticClassNoInline(); \
	AKLinearSpringDamper::StaticClassNoInline(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineAKLinearSpringDamperNative; \
	AKAngularJointLimit::StaticClassNoInline(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineAKAngularJointLimitNative; \
	AKLinearJointLimit::StaticClassNoInline(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineAKLinearJointLimitNative; \
	AKAngularMotorAffector::StaticClassNoInline(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineAKAngularMotorAffectorNative; \
	AKLinearMotorAffector::StaticClassNoInline(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineAKLinearMotorAffectorNative; \
	AKSliding::StaticClassNoInline(); \
	AKLinear::StaticClassNoInline(); \
	AKFixedOrientation::StaticClassNoInline(); \
	AKFixed::StaticClassNoInline(); \
	AKHinge::StaticClassNoInline(); \
	AKBSJoint::StaticClassNoInline(); \
	ABuildSprite::StaticClassNoInline(); \
	AdnVisualizationController::StaticClassNoInline(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineAdnVisualizationControllerNative; \
	UStaticTexture::StaticClassNoInline(); \
	UTextureCanvas::StaticClassNoInline(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineUTextureCanvasNative; \
	USmackerTextureInstance::StaticClassNoInline(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineUSmackerTextureInstanceNative; \
	UMaterialExInstance::StaticClassNoInline(); \
	USmackerTexture::StaticClassNoInline(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineUSmackerTextureNative; \
	UBinkTexture::StaticClassNoInline(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineUBinkTextureNative; \
	UPrecacheIndex::StaticClassNoInline(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineUPrecacheIndexNative; \
	UDefaultPhysicsMaterial::StaticClassNoInline(); \
	UPhysicsMaterial::StaticClassNoInline(); \
	UPhysicsEffectsDatabase::StaticClassNoInline(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineUPhysicsEffectsDatabaseNative; \
	UPatchPrimitive::StaticClassNoInline(); \
	UPatchRenderData::StaticClassNoInline(); \
	UPatchData::StaticClassNoInline(); \
	APatchActor::StaticClassNoInline(); \
	UMovementBoneTracker::StaticClassNoInline(); \
	UTextureAnimMgr::StaticClassNoInline(); \
	UModifier::StaticClassNoInline(); \
	UGrayscaleShader::StaticClassNoInline(); \
	UBumpCubeEnvMap::StaticClassNoInline(); \
	URenderTarget::StaticClassNoInline(); \
	UFrameBuffer::StaticClassNoInline(); \
	UBumpWaterReflection::StaticClassNoInline(); \
	UFakeBumpMap::StaticClassNoInline(); \
	UCombiner::StaticClassNoInline(); \
	UTexMatrix::StaticClassNoInline(); \
	UTexModifier::StaticClassNoInline(); \
	UParticleMaterial::StaticClassNoInline(); \
	UFogMaterial::StaticClassNoInline(); \
	UColorModifier::StaticClassNoInline(); \
	UProxyBitmapMaterial::StaticClassNoInline(); \
	UMiscMaterial::StaticClassNoInline(); \
	ULayerMaterial::StaticClassNoInline(); \
	UMaterialWorkspace::StaticClassNoInline(); \
	UBumpShader::StaticClassNoInline(); \
	UTexEnvMap::StaticClassNoInline(); \
	UTexRotator::StaticClassNoInline(); \
	UTexScaler::StaticClassNoInline(); \
	UTexPanner::StaticClassNoInline(); \
	UActorColor::StaticClassNoInline(); \
	UConstantMaterial::StaticClassNoInline(); \
	UDistFadeColor::StaticClassNoInline(); \
	UFadeColor::StaticClassNoInline(); \
	UConstantValue::StaticClassNoInline(); \
	UConstantColor::StaticClassNoInline(); \
	UFinalBlend::StaticClassNoInline(); \
	ULightExPrimitive::StaticClassNoInline(); \
	AdnKingOfTheHill_MarkerBase::StaticClassNoInline(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineAdnKingOfTheHill_MarkerBaseNative; \
	AWeaponPickup::StaticClassNoInline(); \
	APickup::StaticClassNoInline(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineAPickupNative; \
	UWeaponConfig::StaticClassNoInline(); \
	AWeapon::StaticClassNoInline(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineAWeaponNative; \
	AActivatableInventory::StaticClassNoInline(); \
	AIKSystemInfo_InteractiveDecoration::StaticClassNoInline(); \
	AIKSystemInfo::StaticClassNoInline(); \
	AIKSystemInfo_Walker::StaticClassNoInline(); \
	AIKSystemInfo_Inventory::StaticClassNoInline(); \
	AGameModulePersistantData::StaticClassNoInline(); \
	AGameModule::StaticClassNoInline(); \
	ADoorExtras::StaticClassNoInline(); \
	ADecoration::StaticClassNoInline(); \
	ADoorHingeEx::StaticClassNoInline(); \
	ADoorMoverEx::StaticClassNoInline(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineADoorMoverExNative; \
	UColorTable::StaticClassNoInline(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineUColorTableNative; \
	UAnimationControllerEx::StaticClassNoInline(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineUAnimationControllerExNative; \
	AStickyNote::StaticClassNoInline(); \
	UParticleSystemPrimitive::StaticClassNoInline(); \
	AdnPhysicsFX_Spawners::StaticClassNoInline(); \
	AdnFriendFX_Spawners::StaticClassNoInline(); \
	ASoftParticleSystem::StaticClassNoInline(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineASoftParticleSystemNative; \
	AParticleCollisionActor::StaticClassNoInline(); \
	AParticleSystem::StaticClassNoInline(); \
	ASoftParticleAffector::StaticClassNoInline(); \
	UMotionPrefab::StaticClassNoInline(); \
	ADefaultPhysicsVolume::StaticClassNoInline(); \
	APhysicsVolume::StaticClassNoInline(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineAPhysicsVolumeNative; \
	AParticleEffector::StaticClassNoInline(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineAParticleEffectorNative; \
	AAIFaction::StaticClassNoInline(); \
	AHUDEffects::StaticClassNoInline(); \
	UHUDIconTable::StaticClassNoInline(); \
	AHUDItem::StaticClassNoInline(); \
	AHUD::StaticClassNoInline(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineAHUDNative; \
	UWaterPrimitive::StaticClassNoInline(); \
	AGeoWaterOscillatorRing::StaticClassNoInline(); \
	AGeoWaterOscillator::StaticClassNoInline(); \
	AGeoWater::StaticClassNoInline(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineAGeoWaterNative; \
	UChallengeObject::StaticClassNoInline(); \
	AChallengeInfo::StaticClassNoInline(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineAChallengeInfoNative; \
	UGlassPrimitive::StaticClassNoInline(); \
	ABreakableGlass::StaticClassNoInline(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineABreakableGlassNative; \
	ABeamSystem::StaticClassNoInline(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineABeamSystemNative; \
	ABaseAI::StaticClassNoInline(); \
	AAntiPortalActor::StaticClassNoInline(); \
	AAIInfo::StaticClassNoInline(); \
	AActionPoint::StaticClassNoInline(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineAActionPointNative; \
	USystem::StaticClassNoInline(); \
	UStructProperty::StaticClassNoInline(); \
	UProperty::StaticClassNoInline(); \
	UField::StaticClassNoInline(); \
	UArrayProperty::StaticClassNoInline(); \
	UStrProperty::StaticClassNoInline(); \
	UNameProperty::StaticClassNoInline(); \
	UClassProperty::StaticClassNoInline(); \
	UObjectProperty::StaticClassNoInline(); \
	UFloatProperty::StaticClassNoInline(); \
	UBoolProperty::StaticClassNoInline(); \
	UDelegateProperty::StaticClassNoInline(); \
	UPointerProperty::StaticClassNoInline(); \
	UIntProperty::StaticClassNoInline(); \
	UByteProperty::StaticClassNoInline(); \
	ULanguage::StaticClassNoInline(); \
	UTextBufferFactory::StaticClassNoInline(); \
	UPackage::StaticClassNoInline(); \
	ULinkerSave::StaticClassNoInline(); \
	ULinker::StaticClassNoInline(); \
	ULinkerLoad::StaticClassNoInline(); \
	UEnum::StaticClassNoInline(); \
	UTextBuffer::StaticClassNoInline(); \
	UConst::StaticClassNoInline(); \
	UFunction::StaticClassNoInline(); \
	UStruct::StaticClassNoInline(); \
	UClass::StaticClassNoInline(); \
	UState::StaticClassNoInline(); \
	UObjectExporterT3D::StaticClassNoInline(); \

#endif // NATIVE_DEFS_ONLY

#ifdef NATIVES_ONLY
#if _MSC_VER
#pragma message("*** Including native classes from Engine.")
#endif
NATIVE_INFO(UObject) GEngineUObjectNatives[] = 
{ 
	MAP_NATIVE(UObject,execGetCountryCode)
	MAP_NATIVE(UObject,execObjectDeferredDestroy)
	MAP_NATIVE(UObject,execObjectDestroy)
	MAP_NATIVE(UObject,execIsDemo)
	MAP_NATIVE(UObject,execIsConsole)
	MAP_NATIVE(UObject,execQuitPS3Game)
	MAP_NATIVE(UObject,execEnoughRoom_TD)
	MAP_NATIVE(UObject,execEnoughRoom_SD)
	MAP_NATIVE(UObject,execEnoughRoom_GD)
	MAP_NATIVE(UObject,execGetInstallPct)
	MAP_NATIVE(UObject,execInstallIsCompleted)
	MAP_NATIVE(UObject,execInstallPS3Data)
	MAP_NATIVE(UObject,execIsPS3InstallNeeded)
	MAP_NATIVE(UObject,execGetLCDHelper)
	MAP_NATIVE(UObject,execGetGearboxEngineGlobals)
	MAP_NATIVE(UObject,execObjectIsDestroyed)
	MAP_NATIVE(UObject,execIsPS3)
	MAP_NATIVE(UObject,execIsXbox)
	MAP_NATIVE(UObject,execIsNotFinal)
	MAP_NATIVE(UObject,execGetStateName)
	MAP_NATIVE(UObject,execIsInState)
	MAP_NATIVE(UObject,execGotoState)
	MAP_NATIVE(UObject,execSplitObjectPath)
	MAP_NATIVE(UObject,execUnrealToMeters)
	MAP_NATIVE(UObject,execUnrealToFeetInches)
	MAP_NATIVE(UObject,execUnrealToInches)
	MAP_NATIVE(UObject,execGetWorldMax)
	MAP_NATIVE(UObject,execGetFilenameForDirectory)
	MAP_NATIVE(UObject,execGetFileCountForDirectory)
	MAP_NATIVE(UObject,execFormatClockTime)
	MAP_NATIVE(UObject,execUnclock)
	MAP_NATIVE(UObject,execClock)
	MAP_NATIVE(UObject,execUnclockStat)
	MAP_NATIVE(UObject,execClockStat)
	MAP_NATIVE(UObject,execSetConfigColor)
	MAP_NATIVE(UObject,execSetConfigBool)
	MAP_NATIVE(UObject,execSetConfigString)
	MAP_NATIVE(UObject,execSetConfigFloat)
	MAP_NATIVE(UObject,execSetConfigInt)
	MAP_NATIVE(UObject,execGetConfigColor)
	MAP_NATIVE(UObject,execGetConfigBool)
	MAP_NATIVE(UObject,execGetConfigString)
	MAP_NATIVE(UObject,execGetConfigFloat)
	MAP_NATIVE(UObject,execGetConfigInt)
	MAP_NATIVE(UObject,execLogStackTrace)
	MAP_NATIVE(UObject,execResetConfigByName)
	MAP_NATIVE(UObject,execResetConfig)
	MAP_NATIVE(UObject,execStaticSaveVideoConfig)
	MAP_NATIVE(UObject,execStaticSaveAudioConfig)
	MAP_NATIVE(UObject,execStaticSaveConfig)
	MAP_NATIVE(UObject,execSaveConfig)
	MAP_NATIVE(UObject,execSaveConfigFile)
	MAP_NATIVE(UObject,execDynamicLoadObject)
	MAP_NATIVE(UObject,execGetEnum)
	MAP_NATIVE(UObject,execSetPropertyText)
	MAP_NATIVE(UObject,execGetPropertyText)
	MAP_NATIVE(UObject,execDisable)
	MAP_NATIVE(UObject,execEnable)
	MAP_NATIVE(UObject,execCallingFunction)
	MAP_NATIVE(UObject,execClassForName)
	MAP_NATIVE(UObject,execIsA)
	MAP_NATIVE(UObject,execClassIsChildOf)
	MAP_NATIVE(UObject,execLocalize)
	MAP_NATIVE(UObject,execLog)
	MAP_NATIVE(UObject,execcheck)
	MAP_NATIVE(UObject,execHandleColorModifier)
	MAP_NATIVE(UObject,execHandleStringModifier)
	MAP_NATIVE(UObject,execHandleNameModifier)
	MAP_NATIVE(UObject,execHandleRotModifier)
	MAP_NATIVE(UObject,execHandleVectModifier)
	MAP_NATIVE(UObject,execHandleFloatModifier)
	MAP_NATIVE(UObject,execHandleIntModifier)
	MAP_NATIVE(UObject,execHandleBitModifier)
	MAP_NATIVE(UObject,execEvaluateCompare)
	MAP_NATIVE(UObject,execCompositeNames)
	MAP_NATIVE(UObject,execNameForString)
	MAP_NATIVE(UObject,execNotEqual_NameName)
	MAP_NATIVE(UObject,execEqualEqual_NameName)
	MAP_NATIVE(UObject,execNotEqual_ObjectObject)
	MAP_NATIVE(UObject,execEqualEqual_ObjectObject)
	MAP_NATIVE(UObject,execCLerp)
	MAP_NATIVE(UObject,execNotEqual_ColorColor)
	MAP_NATIVE(UObject,execEqualEqual_ColorColor)
	MAP_NATIVE(UObject,execAdd_ColorColor)
	MAP_NATIVE(UObject,execSubtract_ColorColor)
	MAP_NATIVE(UObject,execDivide_ColorFloat)
	MAP_NATIVE(UObject,execMultiply_ColorFloat)
	MAP_NATIVE(UObject,execMultiply_FloatColor)
	MAP_NATIVE(UObject,execGenerateColorFromChar)
	MAP_NATIVE(UObject,execFormatTimeString)
	MAP_NATIVE(UObject,execFormatString)
	MAP_NATIVE(UObject,execStripWhitespace)
	MAP_NATIVE(UObject,execJoinStringArray)
	MAP_NATIVE(UObject,execSplit)
	MAP_NATIVE(UObject,execDivide)
	MAP_NATIVE(UObject,execStrGetChar)
	MAP_NATIVE(UObject,execAsc)
	MAP_NATIVE(UObject,execChr)
	MAP_NATIVE(UObject,execLower)
	MAP_NATIVE(UObject,execCaps)
	MAP_NATIVE(UObject,execRight)
	MAP_NATIVE(UObject,execLeft)
	MAP_NATIVE(UObject,execMid)
	MAP_NATIVE(UObject,execInStr)
	MAP_NATIVE(UObject,execLen)
	MAP_NATIVE(UObject,execSubtractEqual_StrStr)
	MAP_NATIVE(UObject,execAtEqual_StrStr)
	MAP_NATIVE(UObject,execConcatEqual_StrStr)
	MAP_NATIVE(UObject,execComplementEqual_StrStr)
	MAP_NATIVE(UObject,execNotEqual_StrStr)
	MAP_NATIVE(UObject,execEqualEqual_StrStr)
	MAP_NATIVE(UObject,execGreaterEqual_StrStr)
	MAP_NATIVE(UObject,execLessEqual_StrStr)
	MAP_NATIVE(UObject,execGreater_StrStr)
	MAP_NATIVE(UObject,execLess_StrStr)
	MAP_NATIVE(UObject,execAt_StrStr)
	MAP_NATIVE(UObject,execConcat_StrStr)
	MAP_NATIVE(UObject,execCylinderLineSegmentIntersection)
	MAP_NATIVE(UObject,execQuatFromAxes)
	MAP_NATIVE(UObject,execQuatGetRight)
	MAP_NATIVE(UObject,execQuatGetUp)
	MAP_NATIVE(UObject,execQuatGetForward)
	MAP_NATIVE(UObject,execQuatGetAxes)
	MAP_NATIVE(UObject,execQuatRotateRotator)
	MAP_NATIVE(UObject,execQuatToRotator)
	MAP_NATIVE(UObject,execQuatFromRotator)
	MAP_NATIVE(UObject,execQuatFromAxisAndAngle)
	MAP_NATIVE(UObject,execQuatFindBetween)
	MAP_NATIVE(UObject,execQuatRotateVector)
	MAP_NATIVE(UObject,execQuatInvert)
	MAP_NATIVE(UObject,execQuatProduct)
	MAP_NATIVE(UObject,execSlerp)
	MAP_NATIVE(UObject,execFixedTurnDelta)
	MAP_NATIVE(UObject,execFixedTurn)
	MAP_NATIVE(UObject,execRVar)
	MAP_NATIVE(UObject,execNormalize)
	MAP_NATIVE(UObject,execOrthoRotation)
	MAP_NATIVE(UObject,execRotRand)
	MAP_NATIVE(UObject,execGetUnAxes)
	MAP_NATIVE(UObject,execGetAxes)
	MAP_NATIVE(UObject,execSubtractEqual_RotatorRotator)
	MAP_NATIVE(UObject,execAddEqual_RotatorRotator)
	MAP_NATIVE(UObject,execSubtract_RotatorRotator)
	MAP_NATIVE(UObject,execAdd_RotatorRotator)
	MAP_NATIVE(UObject,execDivideEqual_RotatorFloat)
	MAP_NATIVE(UObject,execMultiplyEqual_RotatorFloat)
	MAP_NATIVE(UObject,execNotEqual_RotatorRotator)
	MAP_NATIVE(UObject,execEqualEqual_RotatorRotator)
	MAP_NATIVE(UObject,execLessLess_RotatorRotator)
	MAP_NATIVE(UObject,execGreaterGreater_RotatorRotator)
	MAP_NATIVE(UObject,execDivide_RotatorFloat)
	MAP_NATIVE(UObject,execMultiply_FloatRotator)
	MAP_NATIVE(UObject,execMultiply_RotatorFloat)
	MAP_NATIVE(UObject,execRot)
	MAP_NATIVE(UObject,execGetClosestPointToSegment)
	MAP_NATIVE(UObject,execTransformVectorByRot)
	MAP_NATIVE(UObject,execRotateAroundAxis)
	MAP_NATIVE(UObject,execVMax)
	MAP_NATIVE(UObject,execVMin)
	MAP_NATIVE(UObject,execVHermiteInterp)
	MAP_NATIVE(UObject,execVLerp)
	MAP_NATIVE(UObject,execMirrorVectorByNormal)
	MAP_NATIVE(UObject,execVVar)
	MAP_NATIVE(UObject,execVRand)
	MAP_NATIVE(UObject,execInvert)
	MAP_NATIVE(UObject,execNormal)
	MAP_NATIVE(UObject,execVSizeSquared)
	MAP_NATIVE(UObject,execVSize)
	MAP_NATIVE(UObject,execSubtractEqual_VectorVector)
	MAP_NATIVE(UObject,execAddEqual_VectorVector)
	MAP_NATIVE(UObject,execDivideEqual_VectorFloat)
	MAP_NATIVE(UObject,execMultiplyEqual_VectorVector)
	MAP_NATIVE(UObject,execMultiplyEqual_VectorFloat)
	MAP_NATIVE(UObject,execCross_VectorVector)
	MAP_NATIVE(UObject,execDot_VectorVector)
	MAP_NATIVE(UObject,execNotEqual_VectorVector)
	MAP_NATIVE(UObject,execEqualEqual_VectorVector)
	MAP_NATIVE(UObject,execGreaterGreater_VectorRotator)
	MAP_NATIVE(UObject,execLessLess_VectorRotator)
	MAP_NATIVE(UObject,execSubtract_VectorVector)
	MAP_NATIVE(UObject,execAdd_VectorVector)
	MAP_NATIVE(UObject,execDivide_VectorFloat)
	MAP_NATIVE(UObject,execMultiply_VectorVector)
	MAP_NATIVE(UObject,execMultiply_FloatVector)
	MAP_NATIVE(UObject,execMultiply_VectorFloat)
	MAP_NATIVE(UObject,execSubtract_PreVector)
	MAP_NATIVE(UObject,execVect)
	MAP_NATIVE(UObject,execAsin)
	MAP_NATIVE(UObject,execPow)
	MAP_NATIVE(UObject,execSmerp)
	MAP_NATIVE(UObject,execLerp)
	MAP_NATIVE(UObject,execFClamp)
	MAP_NATIVE(UObject,execFVar)
	MAP_NATIVE(UObject,execFMax)
	MAP_NATIVE(UObject,execFMin)
	MAP_NATIVE(UObject,execRandRange)
	MAP_NATIVE(UObject,execFRand)
	MAP_NATIVE(UObject,execSquare)
	MAP_NATIVE(UObject,execSqrt)
	MAP_NATIVE(UObject,execLoge)
	MAP_NATIVE(UObject,execExp)
	MAP_NATIVE(UObject,execAtan2)
	MAP_NATIVE(UObject,execAtan)
	MAP_NATIVE(UObject,execTan)
	MAP_NATIVE(UObject,execAcos)
	MAP_NATIVE(UObject,execCos)
	MAP_NATIVE(UObject,execSin)
	MAP_NATIVE(UObject,execAbs)
	MAP_NATIVE(UObject,execSubtractEqual_FloatFloat)
	MAP_NATIVE(UObject,execAddEqual_FloatFloat)
	MAP_NATIVE(UObject,execDivideEqual_FloatFloat)
	MAP_NATIVE(UObject,execMultiplyEqual_FloatFloat)
	MAP_NATIVE(UObject,execNotEqual_FloatFloat)
	MAP_NATIVE(UObject,execComplementEqual_FloatFloat)
	MAP_NATIVE(UObject,execEqualEqual_FloatFloat)
	MAP_NATIVE(UObject,execGreaterEqual_FloatFloat)
	MAP_NATIVE(UObject,execLessEqual_FloatFloat)
	MAP_NATIVE(UObject,execGreater_FloatFloat)
	MAP_NATIVE(UObject,execLess_FloatFloat)
	MAP_NATIVE(UObject,execSubtract_FloatFloat)
	MAP_NATIVE(UObject,execAdd_FloatFloat)
	MAP_NATIVE(UObject,execPercent_FloatFloat)
	MAP_NATIVE(UObject,execDivide_FloatFloat)
	MAP_NATIVE(UObject,execMultiply_FloatFloat)
	MAP_NATIVE(UObject,execSubtract_PreFloat)
	MAP_NATIVE(UObject,execCeil)
	MAP_NATIVE(UObject,execRound)
	MAP_NATIVE(UObject,execClamp)
	MAP_NATIVE(UObject,execIVar)
	MAP_NATIVE(UObject,execMax)
	MAP_NATIVE(UObject,execMin)
	MAP_NATIVE(UObject,execRand)
	MAP_NATIVE(UObject,execSeed)
	MAP_NATIVE(UObject,execSubtractSubtract_Int)
	MAP_NATIVE(UObject,execAddAdd_Int)
	MAP_NATIVE(UObject,execSubtractSubtract_PreInt)
	MAP_NATIVE(UObject,execAddAdd_PreInt)
	MAP_NATIVE(UObject,execSubtractEqual_IntInt)
	MAP_NATIVE(UObject,execAddEqual_IntInt)
	MAP_NATIVE(UObject,execDivideEqual_IntFloat)
	MAP_NATIVE(UObject,execMultiplyEqual_IntFloat)
	MAP_NATIVE(UObject,execOr_IntInt)
	MAP_NATIVE(UObject,execXor_IntInt)
	MAP_NATIVE(UObject,execAnd_IntInt)
	MAP_NATIVE(UObject,execNotEqual_IntInt)
	MAP_NATIVE(UObject,execEqualEqual_IntInt)
	MAP_NATIVE(UObject,execGreaterEqual_IntInt)
	MAP_NATIVE(UObject,execLessEqual_IntInt)
	MAP_NATIVE(UObject,execGreater_IntInt)
	MAP_NATIVE(UObject,execLess_IntInt)
	MAP_NATIVE(UObject,execGreaterGreater_IntInt)
	MAP_NATIVE(UObject,execLessLess_IntInt)
	MAP_NATIVE(UObject,execSubtract_IntInt)
	MAP_NATIVE(UObject,execAdd_IntInt)
	MAP_NATIVE(UObject,execPercent_IntInt)
	MAP_NATIVE(UObject,execDivide_IntInt)
	MAP_NATIVE(UObject,execMultiply_IntInt)
	MAP_NATIVE(UObject,execSubtract_PreInt)
	MAP_NATIVE(UObject,execComplement_PreInt)
	MAP_NATIVE(UObject,execBVar)
	MAP_NATIVE(UObject,execSubtractSubtract_Byte)
	MAP_NATIVE(UObject,execAddAdd_Byte)
	MAP_NATIVE(UObject,execSubtractSubtract_PreByte)
	MAP_NATIVE(UObject,execAddAdd_PreByte)
	MAP_NATIVE(UObject,execSubtractEqual_ByteByte)
	MAP_NATIVE(UObject,execAddEqual_ByteByte)
	MAP_NATIVE(UObject,execDivideEqual_ByteByte)
	MAP_NATIVE(UObject,execMultiplyEqual_ByteByte)
	MAP_NATIVE(UObject,execOrOr_BoolBool)
	MAP_NATIVE(UObject,execXorXor_BoolBool)
	MAP_NATIVE(UObject,execAndAnd_BoolBool)
	MAP_NATIVE(UObject,execNotEqual_BoolBool)
	MAP_NATIVE(UObject,execEqualEqual_BoolBool)
	MAP_NATIVE(UObject,execNot_PreBool)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,UObject);

NATIVE_INFO(UCommandlet) GEngineUCommandletNatives[] = 
{ 
	MAP_NATIVE(UCommandlet,execMain)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,UCommandlet);

NATIVE_INFO(UEngine) GEngineUEngineNatives[] = 
{ 
	MAP_NATIVE(UEngine,execGetMetagameDataSubsystem)
	MAP_NATIVE(UEngine,execGetOnlineSubsystem)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,UEngine);

NATIVE_INFO(ARenderActor) GEngineARenderActorNatives[] = 
{ 
	MAP_NATIVE(ARenderActor,execRegisterIKClass)
	MAP_NATIVE(ARenderActor,execEnableIKSystem)
	MAP_NATIVE(ARenderActor,execProcessSpawnActorPoolOnDestroyed)
	MAP_NATIVE(ARenderActor,execForceAnimTick)
	MAP_NATIVE(ARenderActor,execGetAnimationMotion)
	MAP_NATIVE(ARenderActor,execAllAnims)
	MAP_NATIVE(ARenderActor,execMeshEvent)
	MAP_NATIVE(ARenderActor,execGetRenderBoundingBox)
	MAP_NATIVE(ARenderActor,execSpawnMountPrefabActor)
	MAP_NATIVE(ARenderActor,execProcessSpawnActorPrefab)
	MAP_NATIVE(ARenderActor,execApplyMotionPrefab)
	MAP_NATIVE(ARenderActor,execSpawnMotionPrefab)
	MAP_NATIVE(ARenderActor,execSkinMeshOptimization)
	MAP_NATIVE(ARenderActor,execSetHealth)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,ARenderActor);

NATIVE_INFO(AKarmaActor) GEngineAKarmaActorNatives[] = 
{ 
	MAP_NATIVE(AKarmaActor,execImportNetworkRigidBodyState)
	MAP_NATIVE(AKarmaActor,execTraceFireHit)
	MAP_NATIVE(AKarmaActor,execKGetSensors)
	MAP_NATIVE(AKarmaActor,execKGetInteractingActors)
	MAP_NATIVE(AKarmaActor,execKGetCollidingActors)
	MAP_NATIVE(AKarmaActor,execKSetJointsFrozenPercent)
	MAP_NATIVE(AKarmaActor,execKRemoveAboveNamed)
	MAP_NATIVE(AKarmaActor,execKRemoveBelowNamed)
	MAP_NATIVE(AKarmaActor,execKRemovePhysicsAction)
	MAP_NATIVE(AKarmaActor,execKFindPhysicsAction)
	MAP_NATIVE(AKarmaActor,execKUndisableCollisionBetween)
	MAP_NATIVE(AKarmaActor,execKDisableCollisionBetween)
	MAP_NATIVE(AKarmaActor,execKAddTorque)
	MAP_NATIVE(AKarmaActor,execKAddImpulse)
	MAP_NATIVE(AKarmaActor,execKAddForce)
	MAP_NATIVE(AKarmaActor,execKSleep)
	MAP_NATIVE(AKarmaActor,execKWake)
	MAP_NATIVE(AKarmaActor,execSetPhysicsEntityGroup)
	MAP_NATIVE(AKarmaActor,execSetPhysicsTimeScale)
	MAP_NATIVE(AKarmaActor,execSetEnableDisableThreshold)
	MAP_NATIVE(AKarmaActor,execSetMagneticProperties)
	MAP_NATIVE(AKarmaActor,execSetDynamicInteractionClassification)
	MAP_NATIVE(AKarmaActor,execSetStaticInteractionClassification)
	MAP_NATIVE(AKarmaActor,execSetKMaterialProperties)
	MAP_NATIVE(AKarmaActor,execSetKRestitution)
	MAP_NATIVE(AKarmaActor,execSetKFriction)
	MAP_NATIVE(AKarmaActor,execGetConstraint)
	MAP_NATIVE(AKarmaActor,execGetConstraintCount)
	MAP_NATIVE(AKarmaActor,execStopPersistantPhysicsEffects)
	MAP_NATIVE(AKarmaActor,execKHurtRadiusActivity)
	MAP_NATIVE(AKarmaActor,execSetPhysicsPose)
	MAP_NATIVE(AKarmaActor,execKPushGeneratedSimpleState)
	MAP_NATIVE(AKarmaActor,execKPopState)
	MAP_NATIVE(AKarmaActor,execKPushState)
	MAP_NATIVE(AKarmaActor,execKGetRotationVector)
	MAP_NATIVE(AKarmaActor,execKGetLinearVelocityAtPoint)
	MAP_NATIVE(AKarmaActor,execKGetAngularAcceleration)
	MAP_NATIVE(AKarmaActor,execKGetLinearAcceleration)
	MAP_NATIVE(AKarmaActor,execKGetAngularVelocity)
	MAP_NATIVE(AKarmaActor,execKGetLinearVelocity)
	MAP_NATIVE(AKarmaActor,execKSetAngularAcceleration)
	MAP_NATIVE(AKarmaActor,execKSetLinearAcceleration)
	MAP_NATIVE(AKarmaActor,execKSetAngularVelocity)
	MAP_NATIVE(AKarmaActor,execKSetLinearVelocity)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,AKarmaActor);

NATIVE_INFO(AActor) GEngineAActorNatives[] = 
{ 
	MAP_NATIVE(AActor,execNU_Location)
	MAP_NATIVE(AActor,execBSPSurfaceIsValidForMineAttachment)
	MAP_NATIVE(AActor,execGetSaveGameMapName)
	MAP_NATIVE(AActor,execFastSavesEnabled)
	MAP_NATIVE(AActor,execSaveGameExistsEx)
	MAP_NATIVE(AActor,execSaveGameExists)
	MAP_NATIVE(AActor,execGetSavedGameLongInfo)
	MAP_NATIVE(AActor,execGetSavedGameInfo)
	MAP_NATIVE(AActor,execGetNumSavedGames)
	MAP_NATIVE(AActor,execDeleteSavedGame)
	MAP_NATIVE(AActor,execSaveGame)
	MAP_NATIVE(AActor,execLoadGame)
	MAP_NATIVE(AActor,execSendMailMessage)
	MAP_NATIVE(AActor,execScreenShotIsValid)
	MAP_NATIVE(AActor,execScreenshot)
	MAP_NATIVE(AActor,execGetNextPlayerProfile)
	MAP_NATIVE(AActor,execDestroyPlayerProfile)
	MAP_NATIVE(AActor,execCreatePlayerProfile)
	MAP_NATIVE(AActor,execSwitchToPlayerProfile)
	MAP_NATIVE(AActor,execProfileSwitchNeedsReLaunch)
	MAP_NATIVE(AActor,execGetCurrentPlayerProfile)
	MAP_NATIVE(AActor,execGetMeshList)
	MAP_NATIVE(AActor,execGetSkinList)
	MAP_NATIVE(AActor,execGetNextMDSMapList)
	MAP_NATIVE(AActor,execGetNextMDSMap)
	MAP_NATIVE(AActor,execGetNextClass)
	MAP_NATIVE(AActor,execGetNextThing)
	MAP_NATIVE(AActor,execGetNextIntDesc)
	MAP_NATIVE(AActor,execGetNextInt)
	MAP_NATIVE(AActor,execGetURLMap)
	MAP_NATIVE(AActor,execGetNextSkin)
	MAP_NATIVE(AActor,execGetMapName)
	MAP_NATIVE(AActor,execNewColor)
	MAP_NATIVE(AActor,execRotateVectorAroundAxis)
	MAP_NATIVE(AActor,execEvalTimeCurve)
	MAP_NATIVE(AActor,execEvalTimeRampUnsafe)
	MAP_NATIVE(AActor,execEvalTimeRamp)
	MAP_NATIVE(AActor,execVisibleCollidingActors)
	MAP_NATIVE(AActor,execMountedActorListActors)
	MAP_NATIVE(AActor,execVisibleActors)
	MAP_NATIVE(AActor,execRadiusActors)
	MAP_NATIVE(AActor,execTraceActors)
	MAP_NATIVE(AActor,execTouchingActors)
	MAP_NATIVE(AActor,execChildActors)
	MAP_NATIVE(AActor,execAllActors)
	MAP_NATIVE(AActor,execAllProperties)
	MAP_NATIVE(AActor,execMarkDirtyRenderFlags)
	MAP_NATIVE(AActor,execCopyDisplaySkinsToActorSkins)
	MAP_NATIVE(AActor,execGetNumberOfMaterials)
	MAP_NATIVE(AActor,execGetRenderObjectDefaultTexture)
	MAP_NATIVE(AActor,execSetRenderObjectTexture)
	MAP_NATIVE(AActor,execGetRenderObjectTexture)
	MAP_NATIVE(AActor,execSetPortalSurfaceState)
	MAP_NATIVE(AActor,execIsIntersecting)
	MAP_NATIVE(AActor,execGetLightBrightness)
	MAP_NATIVE(AActor,execGetLightColor)
	MAP_NATIVE(AActor,execTraceEx)
	MAP_NATIVE(AActor,execTrace)
	MAP_NATIVE(AActor,execFastTrace)
	MAP_NATIVE(AActor,execEncompasses)
	MAP_NATIVE(AActor,execFindNearWaterPoint)
	MAP_NATIVE(AActor,execTraceWaterPoint)
	MAP_NATIVE(AActor,execIsInWaterRegion)
	MAP_NATIVE(AActor,execGetPointRegion)
	MAP_NATIVE(AActor,execGetPointPhysicsVolume)
	MAP_NATIVE(AActor,execPushOutCheck)
	MAP_NATIVE(AActor,execPointCheck)
	MAP_NATIVE(AActor,execActorClassPointCheck)
	MAP_NATIVE(AActor,execPlayerCanSeeMe)
	MAP_NATIVE(AActor,execZoneIsVisible)
	MAP_NATIVE(AActor,execGetCameraViewInfo)
	MAP_NATIVE(AActor,execGlobalTrigger)
	MAP_NATIVE(AActor,execGetSpecialEventParms)
	MAP_NATIVE(AActor,execUnregisterSpecialEvent)
	MAP_NATIVE(AActor,execRegisterSpecialEvent)
	MAP_NATIVE(AActor,execGetSequence)
	MAP_NATIVE(AActor,execFreezeAnimations)
	MAP_NATIVE(AActor,execGetAnimMovement)
	MAP_NATIVE(AActor,execSetGlobalAnimRate)
	MAP_NATIVE(AActor,execSetAnimRate)
	MAP_NATIVE(AActor,execSetAnimFrame)
	MAP_NATIVE(AActor,execClearAnimGroup)
	MAP_NATIVE(AActor,execClearAnim)
	MAP_NATIVE(AActor,execClearAnimAll)
	MAP_NATIVE(AActor,execHasAnim)
	MAP_NATIVE(AActor,execFinishAnim)
	MAP_NATIVE(AActor,execGetAnimGroup)
	MAP_NATIVE(AActor,execSetAnimGroup)
	MAP_NATIVE(AActor,execIsAnimating)
	MAP_NATIVE(AActor,execPlayAnimEx)
	MAP_NATIVE(AActor,execOnDetachFromPinball)
	MAP_NATIVE(AActor,execOnAttachToPinball)
	MAP_NATIVE(AActor,execSetAmbientMusic)
	MAP_NATIVE(AActor,execSetAmbientSound)
	MAP_NATIVE(AActor,execScaleSoundVolume)
	MAP_NATIVE(AActor,execScaleSoundPitch)
	MAP_NATIVE(AActor,execScaleSoundRadius)
	MAP_NATIVE(AActor,execFindAndStopSound)
	MAP_NATIVE(AActor,execFindAndFadeSound)
	MAP_NATIVE(AActor,execFindAndPlaySound)
	MAP_NATIVE(AActor,execFindSoundIndex)
	MAP_NATIVE(AActor,execPlayAmbientSoundInfo)
	MAP_NATIVE(AActor,execGetSoundInfoDuration)
	MAP_NATIVE(AActor,execStopSoundInfo)
	MAP_NATIVE(AActor,execFadeSoundInfo)
	MAP_NATIVE(AActor,execPlaySoundInfo)
	MAP_NATIVE(AActor,execOverrideMixerGroupVolume)
	MAP_NATIVE(AActor,execMusicPlay)
	MAP_NATIVE(AActor,execFadeSound)
	MAP_NATIVE(AActor,execPlaySound)
	MAP_NATIVE(AActor,execStopAllMySounds)
	MAP_NATIVE(AActor,execStopSound)
	MAP_NATIVE(AActor,execSetSlotVisFalloffRate)
	MAP_NATIVE(AActor,execSetSlotPitch)
	MAP_NATIVE(AActor,execSetSlotVolume)
	MAP_NATIVE(AActor,execSetGlobalVolume)
	MAP_NATIVE(AActor,execGetSlotVisData)
	MAP_NATIVE(AActor,execGetSlotLoopAlpha)
	MAP_NATIVE(AActor,execGetSlotPitch)
	MAP_NATIVE(AActor,execGetSlotVolume)
	MAP_NATIVE(AActor,execGetSoundDuration)
	MAP_NATIVE(AActor,execGetGlobalVolume)
	MAP_NATIVE(AActor,execIsSoundPlayingOnSlot)
	MAP_NATIVE(AActor,execGetVisibilityPoint)
	MAP_NATIVE(AActor,execMarkers_ClearAll)
	MAP_NATIVE(AActor,execMarkers_AddText)
	MAP_NATIVE(AActor,execMarkers_AddSprite)
	MAP_NATIVE(AActor,execMarkers_AddIcon)
	MAP_NATIVE(AActor,execMarkers_AddCross)
	MAP_NATIVE(AActor,execMarkers_AddBounds)
	MAP_NATIVE(AActor,execMarkers_AddLine)
	MAP_NATIVE(AActor,execMarkers_AddCylinder)
	MAP_NATIVE(AActor,execMarkers_AddCircle)
	MAP_NATIVE(AActor,execMarkers_AddArrow)
	MAP_NATIVE(AActor,execMarkers_AddDiamond)
	MAP_NATIVE(AActor,execMarkers_AddPoint)
	MAP_NATIVE(AActor,execFinishInterpolation)
	MAP_NATIVE(AActor,execVehicleDriverCanPickupItem)
	MAP_NATIVE(AActor,execVehicleGetDriver)
	MAP_NATIVE(AActor,execCalcProjVelocity)
	MAP_NATIVE(AActor,execCreateDesiredRotation_Roll)
	MAP_NATIVE(AActor,execCreateDesiredRotation_Yaw)
	MAP_NATIVE(AActor,execCreateDesiredRotation_Pitch)
	MAP_NATIVE(AActor,execClientCreateDesiredRotation)
	MAP_NATIVE(AActor,execCreateDesiredRotation)
	MAP_NATIVE(AActor,execDisableDesiredRotation_Roll)
	MAP_NATIVE(AActor,execDisableDesiredRotation_Yaw)
	MAP_NATIVE(AActor,execDisableDesiredRotation_Pitch)
	MAP_NATIVE(AActor,execDisableDesiredRotation)
	MAP_NATIVE(AActor,execSetDesiredRotation_Roll)
	MAP_NATIVE(AActor,execSetDesiredRotation_Yaw)
	MAP_NATIVE(AActor,execSetDesiredRotation_Pitch)
	MAP_NATIVE(AActor,execSetDesiredRotation)
	MAP_NATIVE(AActor,execDisableFixedRotationRate)
	MAP_NATIVE(AActor,execSetFixedRotationRate)
	MAP_NATIVE(AActor,execSetRotation)
	MAP_NATIVE(AActor,execClientCreateDesiredLocationEx)
	MAP_NATIVE(AActor,execCreateDesiredLocationEx)
	MAP_NATIVE(AActor,execCreateDesiredLocation)
	MAP_NATIVE(AActor,execDisableDesiredLocation)
	MAP_NATIVE(AActor,execSetDesiredLocationPoints)
	MAP_NATIVE(AActor,execSetDesiredLocation)
	MAP_NATIVE(AActor,execSetLocation)
	MAP_NATIVE(AActor,execMoveActor)
	MAP_NATIVE(AActor,execDropToFloor)
	MAP_NATIVE(AActor,execSetPhysics)
	MAP_NATIVE(AActor,execSetOwner)
	MAP_NATIVE(AActor,execGetGravity)
	MAP_NATIVE(AActor,execSetMass)
	MAP_NATIVE(AActor,execWorldExtentCheck)
	MAP_NATIVE(AActor,execFindBlockingActors)
	MAP_NATIVE(AActor,execFindSpot)
	MAP_NATIVE(AActor,execAttachToActor)
	MAP_NATIVE(AActor,execAttachToActorTagged)
	MAP_NATIVE(AActor,execAttachToActorMountPrefab)
	MAP_NATIVE(AActor,execGenerateMountPrefabLocation)
	MAP_NATIVE(AActor,execDetachFromMountParent)
	MAP_NATIVE(AActor,execForceMountUpdate)
	MAP_NATIVE(AActor,execIsMountedTo)
	MAP_NATIVE(AActor,execGetMountLocation)
	MAP_NATIVE(AActor,execHandleInitialMountParent)
	MAP_NATIVE(AActor,execGetCollisionBounds)
	MAP_NATIVE(AActor,execShouldTouch)
	MAP_NATIVE(AActor,execEmptyTouchClasses)
	MAP_NATIVE(AActor,execRemoveTouchClass)
	MAP_NATIVE(AActor,execAddTouchClass)
	MAP_NATIVE(AActor,execSetCollision)
	MAP_NATIVE(AActor,execSetCollisionSize)
	MAP_NATIVE(AActor,execStaticAttachDecal)
	MAP_NATIVE(AActor,execSpawnAmmoCasing)
	MAP_NATIVE(AActor,execPerformTraceFireEffects)
	MAP_NATIVE(AActor,execTraceFireHit)
	MAP_NATIVE(AActor,execTraceFireMaterialHit)
	MAP_NATIVE(AActor,execTraceActor)
	MAP_NATIVE(AActor,execPerformDamageCategoryEffectEx)
	MAP_NATIVE(AActor,execTraceFire)
	MAP_NATIVE(AActor,execSpawn)
	MAP_NATIVE(AActor,execDestroy)
	MAP_NATIVE(AActor,execCallFunction)
	MAP_NATIVE(AActor,execGetTickFrameStamp)
	MAP_NATIVE(AActor,execFinishSlottedSound)
	MAP_NATIVE(AActor,execSleep)
	MAP_NATIVE(AActor,execCopyTimers)
	MAP_NATIVE(AActor,execEndCallbackTimer_Always)
	MAP_NATIVE(AActor,execSetCallbackTimer_Always)
	MAP_NATIVE(AActor,execEndCallbackTimer)
	MAP_NATIVE(AActor,execSetCallbackTimer)
	MAP_NATIVE(AActor,execGetOverlayEffectAlpha)
	MAP_NATIVE(AActor,execGetActorColor)
	MAP_NATIVE(AActor,execSetActorColorEx)
	MAP_NATIVE(AActor,execSetActorColor)
	MAP_NATIVE(AActor,execRemoveActorColor)
	MAP_NATIVE(AActor,execGetZoneLastRenderTime)
	MAP_NATIVE(AActor,execSetPostPivot)
	MAP_NATIVE(AActor,execSetPrePivot)
	MAP_NATIVE(AActor,execGetRenderObject)
	MAP_NATIVE(AActor,execSetRenderObject)
	MAP_NATIVE(AActor,execCalculateDrawScaleDifference)
	MAP_NATIVE(AActor,execSetDrawscaleEx)
	MAP_NATIVE(AActor,execSetDrawscale3D)
	MAP_NATIVE(AActor,execSetDrawscale)
	MAP_NATIVE(AActor,execSetHidden)
	MAP_NATIVE(AActor,execFadeActorColor)
	MAP_NATIVE(AActor,execClearActorColorFade)
	MAP_NATIVE(AActor,execGetScaleModifierTime)
	MAP_NATIVE(AActor,execGetScaleModifierTarget)
	MAP_NATIVE(AActor,execGetScaleModifier)
	MAP_NATIVE(AActor,execHasScaleModifier)
	MAP_NATIVE(AActor,execClearScaleModifier)
	MAP_NATIVE(AActor,execClearScaleModifierGroup)
	MAP_NATIVE(AActor,execCalcScaleModifier)
	MAP_NATIVE(AActor,execUpdateScaleModifier)
	MAP_NATIVE(AActor,execResetScaleModifier)
	MAP_NATIVE(AActor,execSetScaleModifierEx)
	MAP_NATIVE(AActor,execSetScaleModifier)
	MAP_NATIVE(AActor,execGetAnimationStart)
	MAP_NATIVE(AActor,execDrawWorldDebugPoint)
	MAP_NATIVE(AActor,execGetBonePartMapper)
	MAP_NATIVE(AActor,execGetLimbCapInfo)
	MAP_NATIVE(AActor,execGetLimbDestroyedEffect)
	MAP_NATIVE(AActor,execGetDestroyableBoneForBone)
	MAP_NATIVE(AActor,execGetBodyPartForBone)
	MAP_NATIVE(AActor,execGetStaticMeshInstance)
	MAP_NATIVE(AActor,execGetMeshInstance)
	MAP_NATIVE(AActor,execSetTag)
	MAP_NATIVE(AActor,execConsoleCommand)
	MAP_NATIVE(AActor,execShowStack)
	MAP_NATIVE(AActor,execDebugBreak)
	MAP_NATIVE(AActor,execError)
	MAP_NATIVE(AActor,execIsMyDigs)
	MAP_NATIVE(AActor,execIsMP)
	MAP_NATIVE(AActor,execGetEntryLevel)
	MAP_NATIVE(AActor,execSentinelAddEvent)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,AActor);

NATIVE_INFO(ULCDHelper) GEngineULCDHelperNatives[] = 
{ 
	MAP_NATIVE(ULCDHelper,execChangeRoomSetUnlocks)
	MAP_NATIVE(ULCDHelper,execDigsSetUnlocks)
	MAP_NATIVE(ULCDHelper,execMPSetMap)
	MAP_NATIVE(ULCDHelper,execSPUse4Weapons)
	MAP_NATIVE(ULCDHelper,execSPClassicFreezeRay)
	MAP_NATIVE(ULCDHelper,execSPHeadScale)
	MAP_NATIVE(ULCDHelper,execSPGameSpeed)
	MAP_NATIVE(ULCDHelper,execSPGrayscaleMode)
	MAP_NATIVE(ULCDHelper,execSPMirrorMode)
	MAP_NATIVE(ULCDHelper,execSPSetInstaGib)
	MAP_NATIVE(ULCDHelper,execSPSetInfiniteAmmo)
	MAP_NATIVE(ULCDHelper,execSPSetGodMode)
	MAP_NATIVE(ULCDHelper,execSPSetCheat)
	MAP_NATIVE(ULCDHelper,execSPSetEgoAwardsForLevel)
	MAP_NATIVE(ULCDHelper,execSPSetEgo)
	MAP_NATIVE(ULCDHelper,execSPSetMap)
	MAP_NATIVE(ULCDHelper,execNotifyLoading)
	MAP_NATIVE(ULCDHelper,execAddMPMapName)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,ULCDHelper);

NATIVE_INFO(UGearboxEngineGlobals) GEngineUGearboxEngineGlobalsNatives[] = 
{ 
	MAP_NATIVE(UGearboxEngineGlobals,execRequestDeferredGibCallback)
	MAP_NATIVE(UGearboxEngineGlobals,execRequestDeferredWeaponPickup)
	MAP_NATIVE(UGearboxEngineGlobals,execCanDoExitWoundNow)
	MAP_NATIVE(UGearboxEngineGlobals,execAssaultCaptainCanFireRealShotNow)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,UGearboxEngineGlobals);

NATIVE_INFO(UPlayer) GEngineUPlayerNatives[] = 
{ 
	MAP_NATIVE(UPlayer,execClearInput)
	MAP_NATIVE(UPlayer,execHasFocus)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,UPlayer);

NATIVE_INFO(UOnlineServerFactory) GEngineUOnlineServerFactoryNatives[] = 
{ 
	MAP_NATIVE(UOnlineServerFactory,execLoadFavourites)
	MAP_NATIVE(UOnlineServerFactory,execSaveFavourites)
	MAP_NATIVE(UOnlineServerFactory,execSetServerFavorite)
	MAP_NATIVE(UOnlineServerFactory,execConnectTo)
	MAP_NATIVE(UOnlineServerFactory,execSortServers)
	MAP_NATIVE(UOnlineServerFactory,execUnlockMutex)
	MAP_NATIVE(UOnlineServerFactory,execLockMutex)
	MAP_NATIVE(UOnlineServerFactory,execHasNoErrors)
	MAP_NATIVE(UOnlineServerFactory,execIsWaitingForResponse)
	MAP_NATIVE(UOnlineServerFactory,execInterruptQuery)
	MAP_NATIVE(UOnlineServerFactory,execStartQuery)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,UOnlineServerFactory);

NATIVE_INFO(UOnlineAgent) GEngineUOnlineAgentNatives[] = 
{ 
	MAP_NATIVE(UOnlineAgent,execIsDLCInstalled)
	MAP_NATIVE(UOnlineAgent,execCheckForNewDLC)
	MAP_NATIVE(UOnlineAgent,execGetInstalledDlcMask)
	MAP_NATIVE(UOnlineAgent,execGetNewDlcNames)
	MAP_NATIVE(UOnlineAgent,execHasInstalledNewDlc)
	MAP_NATIVE(UOnlineAgent,execGetCorruptDLCNames)
	MAP_NATIVE(UOnlineAgent,execIsDLCCorrupt)
	MAP_NATIVE(UOnlineAgent,execIsPrivateMatch)
	MAP_NATIVE(UOnlineAgent,execIsActive)
	MAP_NATIVE(UOnlineAgent,execBreakpoint)
	MAP_NATIVE(UOnlineAgent,execStopAsyncLeaderboardOperations)
	MAP_NATIVE(UOnlineAgent,execCancel)
	MAP_NATIVE(UOnlineAgent,execProcessDedicatedServerTravel)
	MAP_NATIVE(UOnlineAgent,execStartWaitingForResponse)
	MAP_NATIVE(UOnlineAgent,execIsWaitingForResponse)
	MAP_NATIVE(UOnlineAgent,execStopVoIPRecording)
	MAP_NATIVE(UOnlineAgent,execStartVoIPRecording)
	MAP_NATIVE(UOnlineAgent,execSetReliableVoIP)
	MAP_NATIVE(UOnlineAgent,execIsVoipTeamOnly)
	MAP_NATIVE(UOnlineAgent,execSetTeamGame)
	MAP_NATIVE(UOnlineAgent,execAddVoIPPlayer)
	MAP_NATIVE(UOnlineAgent,execGetLocalizedGameTypeForId)
	MAP_NATIVE(UOnlineAgent,execSubmitScoreToLeaderboard)
	MAP_NATIVE(UOnlineAgent,execRefreshLeaderboard)
	MAP_NATIVE(UOnlineAgent,execShowPartyUI)
	MAP_NATIVE(UOnlineAgent,execIsInMainMenu)
	MAP_NATIVE(UOnlineAgent,execGetChatPermission)
	MAP_NATIVE(UOnlineAgent,execGetOnlinePermission)
	MAP_NATIVE(UOnlineAgent,execHasOnlinePermission)
	MAP_NATIVE(UOnlineAgent,execIsSignedIn)
	MAP_NATIVE(UOnlineAgent,execLogin)
	MAP_NATIVE(UOnlineAgent,execIsLoggedIn)
	MAP_NATIVE(UOnlineAgent,execJoinLobby)
	MAP_NATIVE(UOnlineAgent,execCheckInvites)
	MAP_NATIVE(UOnlineAgent,execHasInvite)
	MAP_NATIVE(UOnlineAgent,execGetDefaultPlayerName)
	MAP_NATIVE(UOnlineAgent,execShowStore)
	MAP_NATIVE(UOnlineAgent,execGetPlayerProfileTexture)
	MAP_NATIVE(UOnlineAgent,execShowVirtualKeyboard)
	MAP_NATIVE(UOnlineAgent,execTranslateJoinFailReason)
	MAP_NATIVE(UOnlineAgent,execTranslateShutdownReason)
	MAP_NATIVE(UOnlineAgent,execShowGamercardFromAccountID)
	MAP_NATIVE(UOnlineAgent,execShowGamercardFromUid)
	MAP_NATIVE(UOnlineAgent,execShowGamercardByName)
	MAP_NATIVE(UOnlineAgent,execShowGamerCard)
	MAP_NATIVE(UOnlineAgent,execGetCountdownTime)
	MAP_NATIVE(UOnlineAgent,execShouldShowCountdownTimer)
	MAP_NATIVE(UOnlineAgent,execGetTravelURL)
	MAP_NATIVE(UOnlineAgent,execPlaylistHasNextMap)
	MAP_NATIVE(UOnlineAgent,execSendChatMessage)
	MAP_NATIVE(UOnlineAgent,execIsHost)
	MAP_NATIVE(UOnlineAgent,execIsInGame)
	MAP_NATIVE(UOnlineAgent,execLoadNextMap)
	MAP_NATIVE(UOnlineAgent,execDisconnectUnreal)
	MAP_NATIVE(UOnlineAgent,execIsInParty)
	MAP_NATIVE(UOnlineAgent,execShowSystemInviteUI)
	MAP_NATIVE(UOnlineAgent,execGetGameMaxPlayers)
	MAP_NATIVE(UOnlineAgent,execGetHostPingFor)
	MAP_NATIVE(UOnlineAgent,execGetLocalAgentPlayer)
	MAP_NATIVE(UOnlineAgent,execGetAgentPlayers)
	MAP_NATIVE(UOnlineAgent,execGetAgentPlayerAccountId)
	MAP_NATIVE(UOnlineAgent,execGetPlayerVoIPState)
	MAP_NATIVE(UOnlineAgent,execIsPlayerMuted)
	MAP_NATIVE(UOnlineAgent,execMutePlayer)
	MAP_NATIVE(UOnlineAgent,execRequestChangeTeam)
	MAP_NATIVE(UOnlineAgent,execKickPlayer)
	MAP_NATIVE(UOnlineAgent,execGetLevel)
	MAP_NATIVE(UOnlineAgent,execSaveLevel)
	MAP_NATIVE(UOnlineAgent,execReadyUp)
	MAP_NATIVE(UOnlineAgent,execEndRound)
	MAP_NATIVE(UOnlineAgent,execEndGame)
	MAP_NATIVE(UOnlineAgent,execStartRound)
	MAP_NATIVE(UOnlineAgent,execStartGame)
	MAP_NATIVE(UOnlineAgent,execLeaveGame)
	MAP_NATIVE(UOnlineAgent,execJoinGame)
	MAP_NATIVE(UOnlineAgent,execOnPostBeginPlay)
	MAP_NATIVE(UOnlineAgent,execOnPostLogin)
	MAP_NATIVE(UOnlineAgent,execGetSearchGame)
	MAP_NATIVE(UOnlineAgent,execGetSearchGameCount)
	MAP_NATIVE(UOnlineAgent,execSearchGames)
	MAP_NATIVE(UOnlineAgent,execCreateGame)
	MAP_NATIVE(UOnlineAgent,execQuickMatch)
	MAP_NATIVE(UOnlineAgent,execUnregisterListener)
	MAP_NATIVE(UOnlineAgent,execRegisterListener)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,UOnlineAgent);

NATIVE_INFO(USteamDedicatedListener) GEngineUSteamDedicatedListenerNatives[] = 
{ 
	MAP_NATIVE(USteamDedicatedListener,execOnDLCScanComplete)
	MAP_NATIVE(USteamDedicatedListener,execBuildServerURL)
	MAP_NATIVE(USteamDedicatedListener,execStopServer)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,USteamDedicatedListener);

NATIVE_INFO(UMeshInstance) GEngineUMeshInstanceNatives[] = 
{ 
	MAP_NATIVE(UMeshInstance,execResetTimeWitholding)
	MAP_NATIVE(UMeshInstance,execGetBounds)
	MAP_NATIVE(UMeshInstance,execSetChannelEndFlags)
	MAP_NATIVE(UMeshInstance,execClearAnimEarlyEnds)
	MAP_NATIVE(UMeshInstance,execClearAnimEnds)
	MAP_NATIVE(UMeshInstance,execGetSequence)
	MAP_NATIVE(UMeshInstance,execGetAnimTime)
	MAP_NATIVE(UMeshInstance,execGetAnimChanInfo)
	MAP_NATIVE(UMeshInstance,execAnimEventEnable)
	MAP_NATIVE(UMeshInstance,execAnimUpdateTime)
	MAP_NATIVE(UMeshInstance,execAnimUpdateBlend)
	MAP_NATIVE(UMeshInstance,execAnimUpdateGrid)
	MAP_NATIVE(UMeshInstance,execAnimUpdateRate)
	MAP_NATIVE(UMeshInstance,execFreezeAnimations)
	MAP_NATIVE(UMeshInstance,execIsAnyAnimating)
	MAP_NATIVE(UMeshInstance,execIsAnimating)
	MAP_NATIVE(UMeshInstance,execSwapChannel)
	MAP_NATIVE(UMeshInstance,execCreateAnimGroup)
	MAP_NATIVE(UMeshInstance,execCopyBoneInfo)
	MAP_NATIVE(UMeshInstance,execBoneGetNearest)
	MAP_NATIVE(UMeshInstance,execBoneSetScale)
	MAP_NATIVE(UMeshInstance,execBoneSetRotate)
	MAP_NATIVE(UMeshInstance,execBoneSetTranslate)
	MAP_NATIVE(UMeshInstance,execBoneGetLastFrameTranslate)
	MAP_NATIVE(UMeshInstance,execBoneGetScale)
	MAP_NATIVE(UMeshInstance,execBoneGetRotate)
	MAP_NATIVE(UMeshInstance,execBoneGetTranslate)
	MAP_NATIVE(UMeshInstance,execMakeReferencePose)
	MAP_NATIVE(UMeshInstance,execAimBoneAtPoint)
	MAP_NATIVE(UMeshInstance,execRotateBoneAroundAxis)
	MAP_NATIVE(UMeshInstance,execBoneSupportsPhysics)
	MAP_NATIVE(UMeshInstance,execBoneGetChildName)
	MAP_NATIVE(UMeshInstance,execBoneGetChildCount)
	MAP_NATIVE(UMeshInstance,execBoneGetParentName)
	MAP_NATIVE(UMeshInstance,execBoneExists)
	MAP_NATIVE(UMeshInstance,execGetBoneName)
	MAP_NATIVE(UMeshInstance,execGetBoneCount)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,UMeshInstance);

NATIVE_INFO(ANavVolume) GEngineANavVolumeNatives[] = 
{ 
	MAP_NATIVE(ANavVolume,execSetState)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,ANavVolume);

NATIVE_INFO(AXboxLiveQuery) GEngineAXboxLiveQueryNatives[] = 
{ 
	MAP_NATIVE(AXboxLiveQuery,execGetSearchResultCount)
	MAP_NATIVE(AXboxLiveQuery,execIsSearching)
	MAP_NATIVE(AXboxLiveQuery,execJoinSearchResult)
	MAP_NATIVE(AXboxLiveQuery,execSearch)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,AXboxLiveQuery);

NATIVE_INFO(AUdpLink) GEngineAUdpLinkNatives[] = 
{ 
	MAP_NATIVE(AUdpLink,execReadBinary)
	MAP_NATIVE(AUdpLink,execReadText)
	MAP_NATIVE(AUdpLink,execSendBinary)
	MAP_NATIVE(AUdpLink,execSendText)
	MAP_NATIVE(AUdpLink,execBindPort)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,AUdpLink);

NATIVE_INFO(AInternetLink) GEngineAInternetLinkNatives[] = 
{ 
	MAP_NATIVE(AInternetLink,execGetLocalIP)
	MAP_NATIVE(AInternetLink,execValidate)
	MAP_NATIVE(AInternetLink,execStringToIpAddr)
	MAP_NATIVE(AInternetLink,execIpAddrToString)
	MAP_NATIVE(AInternetLink,execGetLastError)
	MAP_NATIVE(AInternetLink,execResolve)
	MAP_NATIVE(AInternetLink,execParseURL)
	MAP_NATIVE(AInternetLink,execIsDataPending)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,AInternetLink);

NATIVE_INFO(AUdpSystemLinkQuery) GEngineAUdpSystemLinkQueryNatives[] = 
{ 
	MAP_NATIVE(AUdpSystemLinkQuery,execBindToSystemLinkGame)
	MAP_NATIVE(AUdpSystemLinkQuery,execServerReceived)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,AUdpSystemLinkQuery);

NATIVE_INFO(AUdpBeaconSystemLink) GEngineAUdpBeaconSystemLinkNatives[] = 
{ 
	MAP_NATIVE(AUdpBeaconSystemLink,execBroadcastBeacon)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,AUdpBeaconSystemLink);

NATIVE_INFO(ATcpLink) GEngineATcpLinkNatives[] = 
{ 
	MAP_NATIVE(ATcpLink,execReadBinary)
	MAP_NATIVE(ATcpLink,execReadText)
	MAP_NATIVE(ATcpLink,execSendBinary)
	MAP_NATIVE(ATcpLink,execSendText)
	MAP_NATIVE(ATcpLink,execIsConnected)
	MAP_NATIVE(ATcpLink,execClose)
	MAP_NATIVE(ATcpLink,execOpen)
	MAP_NATIVE(ATcpLink,execListen)
	MAP_NATIVE(ATcpLink,execBindPort)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,ATcpLink);

NATIVE_INFO(UOnlineAgentQualityControl) GEngineUOnlineAgentQualityControlNatives[] = 
{ 
	MAP_NATIVE(UOnlineAgentQualityControl,execOnPostBeginPlay)
	MAP_NATIVE(UOnlineAgentQualityControl,execOnTick)
	MAP_NATIVE(UOnlineAgentQualityControl,execOnStartLoading)
	MAP_NATIVE(UOnlineAgentQualityControl,execOnEndGame)
	MAP_NATIVE(UOnlineAgentQualityControl,execOnPlayerLeave)
	MAP_NATIVE(UOnlineAgentQualityControl,execOnPlayerJoin)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,UOnlineAgentQualityControl);

NATIVE_INFO(UTexture) GEngineUTextureNatives[] = 
{ 
	MAP_NATIVE(UTexture,execUnloadTexture)
	MAP_NATIVE(UTexture,execLoadTexture)
	MAP_NATIVE(UTexture,execGetPixel)
	MAP_NATIVE(UTexture,execCollisionCheck)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,UTexture);

NATIVE_INFO(UMaterialEx) GEngineUMaterialExNatives[] = 
{ 
	MAP_NATIVE(UMaterialEx,execDuplicate)
	MAP_NATIVE(UMaterialEx,execSetPropertyByIndex)
	MAP_NATIVE(UMaterialEx,execGetPropertyByIndex)
	MAP_NATIVE(UMaterialEx,execIsMasking)
	MAP_NATIVE(UMaterialEx,execGetVSize)
	MAP_NATIVE(UMaterialEx,execGetUSize)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,UMaterialEx);

NATIVE_INFO(AProjector) GEngineAProjectorNatives[] = 
{ 
	MAP_NATIVE(AProjector,execUpdateMatrix)
	MAP_NATIVE(AProjector,execTurnOff)
	MAP_NATIVE(AProjector,execGetLastRenderTime)
	MAP_NATIVE(AProjector,execDetachActor)
	MAP_NATIVE(AProjector,execAttachActor)
	MAP_NATIVE(AProjector,execAbandonProjector)
	MAP_NATIVE(AProjector,execDetachProjector)
	MAP_NATIVE(AProjector,execAttachProjector)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,AProjector);

NATIVE_INFO(APlayerPawn) GEngineAPlayerPawnNatives[] = 
{ 
	MAP_NATIVE(APlayerPawn,execDecompressAnalog)
	MAP_NATIVE(APlayerPawn,execCompressAnalog)
	MAP_NATIVE(APlayerPawn,execRealCompressedServerMove)
	MAP_NATIVE(APlayerPawn,execCompressedServerMove)
	MAP_NATIVE(APlayerPawn,execClientAckGoodMove)
	MAP_NATIVE(APlayerPawn,execClientAdjustPosition)
	MAP_NATIVE(APlayerPawn,execClearSavedMoveList)
	MAP_NATIVE(APlayerPawn,execPhysicsEndOfFrameHelper_SetPostureState)
	MAP_NATIVE(APlayerPawn,execCalculatePhysics_Base3DMotion)
	MAP_NATIVE(APlayerPawn,execCalculatePhysics_Base2DMotion)
	MAP_NATIVE(APlayerPawn,execGetWeaponTraceVars)
	MAP_NATIVE(APlayerPawn,execHandleServerMeleeUp)
	MAP_NATIVE(APlayerPawn,execHandleServerMeleeDown)
	MAP_NATIVE(APlayerPawn,execHandleServerFireUp)
	MAP_NATIVE(APlayerPawn,execHandleServerFireDown)
	MAP_NATIVE(APlayerPawn,execNativeSetNewPostureState)
	MAP_NATIVE(APlayerPawn,execGetPlayerNetworkAddress)
	MAP_NATIVE(APlayerPawn,execrNativeClientFindAndPlaySound)
	MAP_NATIVE(APlayerPawn,execCanDuck)
	MAP_NATIVE(APlayerPawn,execCanTransitionToPostureState)
	MAP_NATIVE(APlayerPawn,execHandlePlayerMovePrePhysics)
	MAP_NATIVE(APlayerPawn,execPlayerMove)
	MAP_NATIVE(APlayerPawn,execFindBestWeapon)
	MAP_NATIVE(APlayerPawn,execCanGrabActor)
	MAP_NATIVE(APlayerPawn,execTickDistanceFog)
	MAP_NATIVE(APlayerPawn,execTickDistanceFogOverride)
	MAP_NATIVE(APlayerPawn,execEndDistanceFogOverride)
	MAP_NATIVE(APlayerPawn,execSetDistanceFogOverride)
	MAP_NATIVE(APlayerPawn,execForceStopAllRumble)
	MAP_NATIVE(APlayerPawn,execAddRumble)
	MAP_NATIVE(APlayerPawn,execAddViewShake)
	MAP_NATIVE(APlayerPawn,execStopAllShakes)
	MAP_NATIVE(APlayerPawn,execStopShake)
	MAP_NATIVE(APlayerPawn,execHasShake)
	MAP_NATIVE(APlayerPawn,execPlayerCalcView_MPDead)
	MAP_NATIVE(APlayerPawn,execPlayerCalcView_Behind)
	MAP_NATIVE(APlayerPawn,execPlayerCalcView)
	MAP_NATIVE(APlayerPawn,execPostureStateExChange_Ladder)
	MAP_NATIVE(APlayerPawn,execPostureStateExChange_Mounted)
	MAP_NATIVE(APlayerPawn,execPostureStateExChange_Jetpack)
	MAP_NATIVE(APlayerPawn,execPostureStateExChange_Swimming)
	MAP_NATIVE(APlayerPawn,execPostureStateExChange_InAir)
	MAP_NATIVE(APlayerPawn,execPostureStateExChange_Crouching)
	MAP_NATIVE(APlayerPawn,execPostureStateExChange_Standing)
	MAP_NATIVE(APlayerPawn,execPostureStateExLeaving_Ladder)
	MAP_NATIVE(APlayerPawn,execPostureStateExLeaving_Mounted)
	MAP_NATIVE(APlayerPawn,execPostureStateExLeaving_Jetpack)
	MAP_NATIVE(APlayerPawn,execPostureStateExLeaving_Swimming)
	MAP_NATIVE(APlayerPawn,execPostureStateExLeaving_InAir)
	MAP_NATIVE(APlayerPawn,execPostureStateExLeaving_Crouching)
	MAP_NATIVE(APlayerPawn,execPostureStateExLeaving_Standing)
	MAP_NATIVE(APlayerPawn,execPostureStateExLeaving_Unknown)
	MAP_NATIVE(APlayerPawn,execUpdateMovementState)
	MAP_NATIVE(APlayerPawn,execFindAnimationControllerForPostureState)
	MAP_NATIVE(APlayerPawn,execTickKick)
	MAP_NATIVE(APlayerPawn,execUpdateAdditionalAnimationState)
	MAP_NATIVE(APlayerPawn,execGetLookAnimGrid)
	MAP_NATIVE(APlayerPawn,execApplyBodyTwist)
	MAP_NATIVE(APlayerPawn,execRemoveListener)
	MAP_NATIVE(APlayerPawn,execAddListener)
	MAP_NATIVE(APlayerPawn,execRecordShotByType)
	MAP_NATIVE(APlayerPawn,execSentinelWriteShots)
	MAP_NATIVE(APlayerPawn,execAddMoveToFreeList)
	MAP_NATIVE(APlayerPawn,execEnumerate3DAudioProviders)
	MAP_NATIVE(APlayerPawn,execSetSpeakerType)
	MAP_NATIVE(APlayerPawn,execGetSpeakerType)
	MAP_NATIVE(APlayerPawn,execGet3DAudioProvider)
	MAP_NATIVE(APlayerPawn,execShutdown3DAudio)
	MAP_NATIVE(APlayerPawn,execInitialize3DAudio)
	MAP_NATIVE(APlayerPawn,execShouldInputWakePlayerPhysics)
	MAP_NATIVE(APlayerPawn,execCheckViewingEnemy)
	MAP_NATIVE(APlayerPawn,execInputKeyIsGamepadButton)
	MAP_NATIVE(APlayerPawn,execIsKeyDown)
	MAP_NATIVE(APlayerPawn,execIsUsingMouse)
	MAP_NATIVE(APlayerPawn,execSetShouldHavePortLock)
	MAP_NATIVE(APlayerPawn,execClearControllerFocus)
	MAP_NATIVE(APlayerPawn,execSelectControllerFocus)
	MAP_NATIVE(APlayerPawn,execIsUsingGamepad)
	MAP_NATIVE(APlayerPawn,execResetKeyboard)
	MAP_NATIVE(APlayerPawn,execPauseGameInput)
	MAP_NATIVE(APlayerPawn,execIsMenuActive)
	MAP_NATIVE(APlayerPawn,execPasteFromClipboard)
	MAP_NATIVE(APlayerPawn,execCopyToClipboard)
	MAP_NATIVE(APlayerPawn,execHasClientTravel)
	MAP_NATIVE(APlayerPawn,execGetDefaultURL)
	MAP_NATIVE(APlayerPawn,execUpdateURL)
	MAP_NATIVE(APlayerPawn,execClientTravel)
	MAP_NATIVE(APlayerPawn,execShouldSaveCheckpoint)
	MAP_NATIVE(APlayerPawn,execNative_GetDisplayMode)
	MAP_NATIVE(APlayerPawn,execNative_GetNumDisplayModes)
	MAP_NATIVE(APlayerPawn,execNative_ShowNavPoints)
	MAP_NATIVE(APlayerPawn,execNativeUpdateLookHitActor)
	MAP_NATIVE(APlayerPawn,execNativeTick)
	MAP_NATIVE(APlayerPawn,execGetRoundState)
	MAP_NATIVE(APlayerPawn,execIsEndOfRound)
	MAP_NATIVE(APlayerPawn,execIsRoundInProgress)
	MAP_NATIVE(APlayerPawn,execIsCountdown)
	MAP_NATIVE(APlayerPawn,execIsPreRound)
	MAP_NATIVE(APlayerPawn,execSetNetSpeed)
	MAP_NATIVE(APlayerPawn,execCanControlMovement)
	MAP_NATIVE(APlayerPawn,execGetSprintSpeedThreshold)
	MAP_NATIVE(APlayerPawn,execIsSprinting)
	MAP_NATIVE(APlayerPawn,execWantsToSprint)
	MAP_NATIVE(APlayerPawn,execCanSprint)
	MAP_NATIVE(APlayerPawn,execGetWalkSpeed)
	MAP_NATIVE(APlayerPawn,execContinueCampaignInProgress)
	MAP_NATIVE(APlayerPawn,execReadyToPlay)
	MAP_NATIVE(APlayerPawn,execSetTitleScreen)
	MAP_NATIVE(APlayerPawn,execXBoxAwardAchievement)
	MAP_NATIVE(APlayerPawn,execXBoxIsSystemUIShowing)
	MAP_NATIVE(APlayerPawn,execXBoxSaveProfile)
	MAP_NATIVE(APlayerPawn,execXBoxDidUserChange)
	MAP_NATIVE(APlayerPawn,execXBoxIsPlayingWithoutSave)
	MAP_NATIVE(APlayerPawn,execXBoxHasStorageDevice)
	MAP_NATIVE(APlayerPawn,execXBoxIsSignedIn)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,APlayerPawn);

NATIVE_INFO(APawn) GEngineAPawnNatives[] = 
{ 
	MAP_NATIVE(APawn,execCalculatePawnPhysics)
	MAP_NATIVE(APawn,execPhysController_CanFit)
	MAP_NATIVE(APawn,execPhysController_IsProcessingFinalSubtick)
	MAP_NATIVE(APawn,execPhysController_ClearFallingVelocity)
	MAP_NATIVE(APawn,execPhysController_UpdateFallingVelocity)
	MAP_NATIVE(APawn,execPhysController_GetFallingVelocity)
	MAP_NATIVE(APawn,execPhysController_GetGroundFriction)
	MAP_NATIVE(APawn,execPhysController_GetGroundNormal)
	MAP_NATIVE(APawn,execPhysController_GetGroundDistance)
	MAP_NATIVE(APawn,execPhysController_GetGroundBoneName)
	MAP_NATIVE(APawn,execPhysController_GetGroundActor)
	MAP_NATIVE(APawn,execPhysController_GetGroundContact)
	MAP_NATIVE(APawn,execPhysController_GetEndOfFrameCallback)
	MAP_NATIVE(APawn,execPhysController_GetDownwardPushScale)
	MAP_NATIVE(APawn,execPhysController_GetGravityScale)
	MAP_NATIVE(APawn,execPhysController_GetGroundConstraintType)
	MAP_NATIVE(APawn,execPhysController_GetGroundConstraintStrength)
	MAP_NATIVE(APawn,execPhysController_GetGroundConstraintDirection)
	MAP_NATIVE(APawn,execPhysController_GetGroundHeight)
	MAP_NATIVE(APawn,execPhysController_GetConstraintGroundType)
	MAP_NATIVE(APawn,execPhysController_GetConstraintStrength)
	MAP_NATIVE(APawn,execPhysController_GetDesiredVelocity)
	MAP_NATIVE(APawn,execPhysController_AddDesiredVelocity)
	MAP_NATIVE(APawn,execPhysController_ScaleConstraintStrengthScalar)
	MAP_NATIVE(APawn,execPhysController_ScaleDesiredVelocityScalar)
	MAP_NATIVE(APawn,execPhysController_ScaleDownwardPushScale)
	MAP_NATIVE(APawn,execPhysController_ScaleGravityScale)
	MAP_NATIVE(APawn,execPhysController_ScaleGroundConstraintStrength)
	MAP_NATIVE(APawn,execPhysController_ScaleGroundHeight)
	MAP_NATIVE(APawn,execPhysController_ScaleConstraintStrength)
	MAP_NATIVE(APawn,execPhysController_ScaleDesiredVelocity)
	MAP_NATIVE(APawn,execPhysController_SetEndOfFrameCallback)
	MAP_NATIVE(APawn,execPhysController_SetDownwardPushScale)
	MAP_NATIVE(APawn,execPhysController_SetGravityScale)
	MAP_NATIVE(APawn,execPhysController_SetGroundConstraintType)
	MAP_NATIVE(APawn,execPhysController_SetGroundConstraintStrength)
	MAP_NATIVE(APawn,execPhysController_SetGroundConstraintDirection)
	MAP_NATIVE(APawn,execPhysController_SetGroundHeight)
	MAP_NATIVE(APawn,execPhysController_SetConstraintGroundType)
	MAP_NATIVE(APawn,execPhysController_SetConstraintStrength)
	MAP_NATIVE(APawn,execPhysController_SetDesiredVelocity)
	MAP_NATIVE(APawn,execPhysController_PerformedCast)
	MAP_NATIVE(APawn,execPhysController_GetSteepSlopeDot)
	MAP_NATIVE(APawn,execPhysController_GetMaximumLength)
	MAP_NATIVE(APawn,execPhysController_EnableGroundFinder)
	MAP_NATIVE(APawn,execPhysController_SetSteepSlopeDot)
	MAP_NATIVE(APawn,execPhysController_SetMaximumLength)
	MAP_NATIVE(APawn,execGetFootstepMaterialFast)
	MAP_NATIVE(APawn,execCanGrabActor)
	MAP_NATIVE(APawn,execTraceFireHit)
	MAP_NATIVE(APawn,execIsDead)
	MAP_NATIVE(APawn,execIsSizeChangeActive)
	MAP_NATIVE(APawn,execShrinkingActive)
	MAP_NATIVE(APawn,execSetShrinkScale)
	MAP_NATIVE(APawn,execFindInventoryByReferenceClass)
	MAP_NATIVE(APawn,execFindInventoryByClass)
	MAP_NATIVE(APawn,execFindInventoryTypeByName)
	MAP_NATIVE(APawn,execFindInventoryType)
	MAP_NATIVE(APawn,execRemoveInventory)
	MAP_NATIVE(APawn,execAddInventory)
	MAP_NATIVE(APawn,execCanDoThings)
	MAP_NATIVE(APawn,execGetStoredLocationAdjust)
	MAP_NATIVE(APawn,execAdjustLocationRestore)
	MAP_NATIVE(APawn,execAdjustLocationAbsolute)
	MAP_NATIVE(APawn,execGetLookDirection)
	MAP_NATIVE(APawn,execDialogGateOpen)
	MAP_NATIVE(APawn,execWaitForLanding)
	MAP_NATIVE(APawn,execGetLockOnPos)
	MAP_NATIVE(APawn,execGetBodyPos)
	MAP_NATIVE(APawn,execGetEyePos)
	MAP_NATIVE(APawn,execStopWaiting)
	MAP_NATIVE(APawn,execLineOfSightTo)
	MAP_NATIVE(APawn,execGetAimTargetActor)
	MAP_NATIVE(APawn,execGetAimTargetLocation)
	MAP_NATIVE(APawn,execClearAimTarget)
	MAP_NATIVE(APawn,execSetAimTargetPoint)
	MAP_NATIVE(APawn,execSetAimTargetActor)
	MAP_NATIVE(APawn,execGetLookTargetActor)
	MAP_NATIVE(APawn,execGetLookTargetLocation)
	MAP_NATIVE(APawn,execClearLookTarget)
	MAP_NATIVE(APawn,execSetLookTargetPoint)
	MAP_NATIVE(APawn,execSetLookTargetActor)
	MAP_NATIVE(APawn,execGetBodyTargetActor)
	MAP_NATIVE(APawn,execGetBodyTargetLocation)
	MAP_NATIVE(APawn,execClearBodyTarget)
	MAP_NATIVE(APawn,execSetBodyTargetPoint)
	MAP_NATIVE(APawn,execSetBodyTargetActor)
	MAP_NATIVE(APawn,execGetDestinationActor)
	MAP_NATIVE(APawn,execGetDestinationLocation)
	MAP_NATIVE(APawn,execClearDestination)
	MAP_NATIVE(APawn,execSetDestinationPoint)
	MAP_NATIVE(APawn,execSetDestinationActor)
	MAP_NATIVE(APawn,execClearLatentAction)
	MAP_NATIVE(APawn,execFaceTarget)
	MAP_NATIVE(APawn,execSlideTo)
	MAP_NATIVE(APawn,execTurnToward)
	MAP_NATIVE(APawn,execTurnTo)
	MAP_NATIVE(APawn,execStrafeFacing)
	MAP_NATIVE(APawn,execStrafeTo)
	MAP_NATIVE(APawn,execMoveToward)
	MAP_NATIVE(APawn,execMoveTo)
	MAP_NATIVE(APawn,execFindStairRotation)
	MAP_NATIVE(APawn,execGetCameraViewRotation)
	MAP_NATIVE(APawn,execGetCameraLocation)
	MAP_NATIVE(APawn,execCanBreatheNormally)
	MAP_NATIVE(APawn,execFinishCachedAnims)
	MAP_NATIVE(APawn,execFinishAnims)
	MAP_NATIVE(APawn,execIsSpectating)
	MAP_NATIVE(APawn,execIsLocallyControlled)
	MAP_NATIVE(APawn,execRemovePawn)
	MAP_NATIVE(APawn,execAddPawn)
	MAP_NATIVE(APawn,execChangeCollisionHeightToCrouching)
	MAP_NATIVE(APawn,execChangeCollisionHeightToStanding)
	MAP_NATIVE(APawn,execChangeCollisionHeightToFull)
	MAP_NATIVE(APawn,execSetCollisionInterpolationTarget)
	MAP_NATIVE(APawn,execInterpolateCollisionSize)
	MAP_NATIVE(APawn,execPawnSetLocation)
	MAP_NATIVE(APawn,execSetMaxStepHeightEx)
	MAP_NATIVE(APawn,execSetPhysicsControllerActive)
	MAP_NATIVE(APawn,execSetSimplePawnPhysicsCollision)
	MAP_NATIVE(APawn,execSetBase)
	MAP_NATIVE(APawn,execdnPathSystem_FindPathPointTo)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,APawn);

NATIVE_INFO(AInteractiveActor) GEngineAInteractiveActorNatives[] = 
{ 
	MAP_NATIVE(AInteractiveActor,execGetTargetedPoint)
	MAP_NATIVE(AInteractiveActor,execCheckUserShrunkUse)
	MAP_NATIVE(AInteractiveActor,execCanBeGrabbedBy)
	MAP_NATIVE(AInteractiveActor,execDoExitWound)
	MAP_NATIVE(AInteractiveActor,execSetTelekineticable)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,AInteractiveActor);

NATIVE_INFO(UConsole) GEngineUConsoleNatives[] = 
{ 
	MAP_NATIVE(UConsole,execIsExchangingData)
	MAP_NATIVE(UConsole,execIsMenuActive)
	MAP_NATIVE(UConsole,execFormatFloat)
	MAP_NATIVE(UConsole,execPS3MsgDialog)
	MAP_NATIVE(UConsole,execSetDialogBoxResult)
	MAP_NATIVE(UConsole,execSetDialogBoxID)
	MAP_NATIVE(UConsole,execPrint)
	MAP_NATIVE(UConsole,execSaveTimeDemo)
	MAP_NATIVE(UConsole,execConsoleCommand)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,UConsole);

NATIVE_INFO(UCanvas) GEngineUCanvasNatives[] = 
{ 
	MAP_NATIVE(UCanvas,execDo480FontScalingFix)
	MAP_NATIVE(UCanvas,execNeeds480FontScalingFix)
	MAP_NATIVE(UCanvas,execDrawBlurryDesaturation)
	MAP_NATIVE(UCanvas,execDrawBar)
	MAP_NATIVE(UCanvas,execDrawArc)
	MAP_NATIVE(UCanvas,execDrawIcon)
	MAP_NATIVE(UCanvas,execDrawScaledIconClipped)
	MAP_NATIVE(UCanvas,execDrawScaledIcon)
	MAP_NATIVE(UCanvas,execSetClip)
	MAP_NATIVE(UCanvas,execSetOrigin)
	MAP_NATIVE(UCanvas,execSetPos)
	MAP_NATIVE(UCanvas,execFlush)
	MAP_NATIVE(UCanvas,execSetClampMode)
	MAP_NATIVE(UCanvas,execDrawCylinder)
	MAP_NATIVE(UCanvas,execGetRenderBoundingBox)
	MAP_NATIVE(UCanvas,execGetScreenXYNoClip)
	MAP_NATIVE(UCanvas,execGetScreenXY)
	MAP_NATIVE(UCanvas,execGetScreenBounds)
	MAP_NATIVE(UCanvas,execDrawPortal)
	MAP_NATIVE(UCanvas,execDrawColoredLine)
	MAP_NATIVE(UCanvas,execDrawLine)
	MAP_NATIVE(UCanvas,execDrawClippedActor)
	MAP_NATIVE(UCanvas,execTextSize)
	MAP_NATIVE(UCanvas,execDrawTextClipped)
	MAP_NATIVE(UCanvas,execDrawTileClipped)
	MAP_NATIVE(UCanvas,execDrawActor)
	MAP_NATIVE(UCanvas,execDrawTile)
	MAP_NATIVE(UCanvas,execDrawTextDropShadowed)
	MAP_NATIVE(UCanvas,execDrawText)
	MAP_NATIVE(UCanvas,execStrLen)
	MAP_NATIVE(UCanvas,execReset)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,UCanvas);

NATIVE_INFO(ACorpseBase) GEngineACorpseBaseNatives[] = 
{ 
	MAP_NATIVE(ACorpseBase,execBoneIsDestroyed)
	MAP_NATIVE(ACorpseBase,execDestroyBoneAndChildren)
	MAP_NATIVE(ACorpseBase,execTraceFireHit)
	MAP_NATIVE(ACorpseBase,execNativeHitWall)
	MAP_NATIVE(ACorpseBase,execDoSplatter)
	MAP_NATIVE(ACorpseBase,execGib)
	MAP_NATIVE(ACorpseBase,execIsFrozen)
	MAP_NATIVE(ACorpseBase,execUpdateFrictionAndJoints)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,ACorpseBase);

NATIVE_INFO(ATriggerHint) GEngineATriggerHintNatives[] = 
{ 
	MAP_NATIVE(ATriggerHint,execTickHint)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,ATriggerHint);

NATIVE_INFO(AAmmoCasing) GEngineAAmmoCasingNatives[] = 
{ 
	MAP_NATIVE(AAmmoCasing,execNativeHitWall)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,AAmmoCasing);

NATIVE_INFO(ALightEx) GEngineALightExNatives[] = 
{ 
	MAP_NATIVE(ALightEx,execGetCurrentColor)
	MAP_NATIVE(ALightEx,execMarkDirty)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,ALightEx);

NATIVE_INFO(AInventory) GEngineAInventoryNatives[] = 
{ 
	MAP_NATIVE(AInventory,execGiveTo)
	MAP_NATIVE(AInventory,execPickupSuccess)
	MAP_NATIVE(AInventory,execAttemptPickup)
	MAP_NATIVE(AInventory,execCanPickupClass)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,AInventory);

NATIVE_INFO(AMutator) GEngineAMutatorNatives[] = 
{ 
	MAP_NATIVE(AMutator,execAllowPickup)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,AMutator);

NATIVE_INFO(ADecal) GEngineADecalNatives[] = 
{ 
	MAP_NATIVE(ADecal,execDetachDecal)
	MAP_NATIVE(ADecal,execAttachDecal)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,ADecal);

NATIVE_INFO(APlayerReplicationInfo) GEngineAPlayerReplicationInfoNatives[] = 
{ 
	MAP_NATIVE(APlayerReplicationInfo,execIsSpectating)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,APlayerReplicationInfo);

NATIVE_INFO(AWarpZoneInfo) GEngineAWarpZoneInfoNatives[] = 
{ 
	MAP_NATIVE(AWarpZoneInfo,execUnWarp)
	MAP_NATIVE(AWarpZoneInfo,execWarp)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,AWarpZoneInfo);

NATIVE_INFO(AZoneInfo) GEngineAZoneInfoNatives[] = 
{ 
	MAP_NATIVE(AZoneInfo,execZoneActors)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,AZoneInfo);

NATIVE_INFO(AInterpolationPoint) GEngineAInterpolationPointNatives[] = 
{ 
	MAP_NATIVE(AInterpolationPoint,execComputeArcLength)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,AInterpolationPoint);

NATIVE_INFO(AGameInfo) GEngineAGameInfoNatives[] = 
{ 
	MAP_NATIVE(AGameInfo,execParseKillMessage)
	MAP_NATIVE(AGameInfo,execGameAllowPickup)
	MAP_NATIVE(AGameInfo,execGiveInventoryTo)
	MAP_NATIVE(AGameInfo,execAddFakeNetBot)
	MAP_NATIVE(AGameInfo,execGetNetworkNumber)
	MAP_NATIVE(AGameInfo,execDecodeString)
	MAP_NATIVE(AGameInfo,execEncodeString)
	MAP_NATIVE(AGameInfo,execUpdateURL)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,AGameInfo);

NATIVE_INFO(ALevelInfo) GEngineALevelInfoNatives[] = 
{ 
	MAP_NATIVE(ALevelInfo,execIsFullScreen)
	MAP_NATIVE(ALevelInfo,execMirrorModeEnabled)
	MAP_NATIVE(ALevelInfo,execNoteGameResumed)
	MAP_NATIVE(ALevelInfo,execNoteGamePaused)
	MAP_NATIVE(ALevelInfo,execGetLocalPlayerPawn)
	MAP_NATIVE(ALevelInfo,execCheckAndUpdateAIGate)
	MAP_NATIVE(ALevelInfo,execUpdateAIGate)
	MAP_NATIVE(ALevelInfo,execCheckAIGate)
	MAP_NATIVE(ALevelInfo,execPerformTeamDialog)
	MAP_NATIVE(ALevelInfo,execPerformStandaloneSimulation)
	MAP_NATIVE(ALevelInfo,execSetLevelEventFunctionHook)
	MAP_NATIVE(ALevelInfo,execRegisterLevelEvent)
	MAP_NATIVE(ALevelInfo,execWarmupPhysics)
	MAP_NATIVE(ALevelInfo,execGetAddressURL)
	MAP_NATIVE(ALevelInfo,execGetLocalURL)
	MAP_NATIVE(ALevelInfo,execXboxShowGamerCard)
	MAP_NATIVE(ALevelInfo,execXboxEndMatch)
	MAP_NATIVE(ALevelInfo,execXboxStartMatch)
	MAP_NATIVE(ALevelInfo,execCheckOverridePlayerClass)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,ALevelInfo);

NATIVE_INFO(UMetagameData) GEngineUMetagameDataNatives[] = 
{ 
	MAP_NATIVE(UMetagameData,execLoadMetagame)
	MAP_NATIVE(UMetagameData,execSaveMetagame)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,UMetagameData);

NATIVE_INFO(AKSensor) GEngineAKSensorNatives[] = 
{ 
	MAP_NATIVE(AKSensor,execGetSensedActors)
	MAP_NATIVE(AKSensor,execGetFirstSensedPawn)
	MAP_NATIVE(AKSensor,execRemoveSensableClass)
	MAP_NATIVE(AKSensor,execAddSensableClass)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,AKSensor);

NATIVE_INFO(AKSphereSensor) GEngineAKSphereSensorNatives[] = 
{ 
	MAP_NATIVE(AKSphereSensor,execSetSensorRadius)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,AKSphereSensor);

NATIVE_INFO(AKBoxSensor) GEngineAKBoxSensorNatives[] = 
{ 
	MAP_NATIVE(AKBoxSensor,execSetSensorSize)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,AKBoxSensor);

NATIVE_INFO(AKLineSensor) GEngineAKLineSensorNatives[] = 
{ 
	MAP_NATIVE(AKLineSensor,execSetSensorLength)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,AKLineSensor);

NATIVE_INFO(AKPulley) GEngineAKPulleyNatives[] = 
{ 
	MAP_NATIVE(AKPulley,execSetPulleyRatio)
	MAP_NATIVE(AKPulley,execSetSecondaryAxisState)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,AKPulley);

NATIVE_INFO(AKConstraint) GEngineAKConstraintNatives[] = 
{ 
	MAP_NATIVE(AKConstraint,execSetBreakThreshold)
	MAP_NATIVE(AKConstraint,execConstraintSupportsBreaking)
	MAP_NATIVE(AKConstraint,execBreakConstraint)
	MAP_NATIVE(AKConstraint,execSetKDisableCollision)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,AKConstraint);

NATIVE_INFO(AKAngularSpringDamper) GEngineAKAngularSpringDamperNatives[] = 
{ 
	MAP_NATIVE(AKAngularSpringDamper,execSetSecondaryAxisState)
	MAP_NATIVE(AKAngularSpringDamper,execSetBreakAngle)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,AKAngularSpringDamper);

NATIVE_INFO(AKSpringDamper) GEngineAKSpringDamperNatives[] = 
{ 
	MAP_NATIVE(AKSpringDamper,execSetSpringD)
	MAP_NATIVE(AKSpringDamper,execSetSpringK)
	MAP_NATIVE(AKSpringDamper,execSetSpringSimulationMode)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,AKSpringDamper);

NATIVE_INFO(AKLinearSpringDamper) GEngineAKLinearSpringDamperNatives[] = 
{ 
	MAP_NATIVE(AKLinearSpringDamper,execSetConstraintActor2UseConstraintPoint)
	MAP_NATIVE(AKLinearSpringDamper,execSetConstraintActor1UseConstraintPoint)
	MAP_NATIVE(AKLinearSpringDamper,execSetBreakLength)
	MAP_NATIVE(AKLinearSpringDamper,execSetRestLength)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,AKLinearSpringDamper);

NATIVE_INFO(AKAngularJointLimit) GEngineAKAngularJointLimitNatives[] = 
{ 
	MAP_NATIVE(AKAngularJointLimit,execSetSecondaryAxisState)
	MAP_NATIVE(AKAngularJointLimit,execSetMaximumAngle)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,AKAngularJointLimit);

NATIVE_INFO(AKLinearJointLimit) GEngineAKLinearJointLimitNatives[] = 
{ 
	MAP_NATIVE(AKLinearJointLimit,execSetDistanceRange)
	MAP_NATIVE(AKLinearJointLimit,execSetAxisMode)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,AKLinearJointLimit);

NATIVE_INFO(AKAngularMotorAffector) GEngineAKAngularMotorAffectorNatives[] = 
{ 
	MAP_NATIVE(AKAngularMotorAffector,execSetMaximumTorque)
	MAP_NATIVE(AKAngularMotorAffector,execSetDesiredAngularVelocity)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,AKAngularMotorAffector);

NATIVE_INFO(AKLinearMotorAffector) GEngineAKLinearMotorAffectorNatives[] = 
{ 
	MAP_NATIVE(AKLinearMotorAffector,execSetMaximumForce)
	MAP_NATIVE(AKLinearMotorAffector,execSetDesiredVelocity)
	MAP_NATIVE(AKLinearMotorAffector,execSetMotorAxisMode)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,AKLinearMotorAffector);

NATIVE_INFO(AdnVisualizationController) GEngineAdnVisualizationControllerNatives[] = 
{ 
	MAP_NATIVE(AdnVisualizationController,execSetColorTable)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,AdnVisualizationController);

NATIVE_INFO(UTextureCanvas) GEngineUTextureCanvasNatives[] = 
{ 
	MAP_NATIVE(UTextureCanvas,execSetDynamic)
	MAP_NATIVE(UTextureCanvas,execSetParametric)
	MAP_NATIVE(UTextureCanvas,execForceTick)
	MAP_NATIVE(UTextureCanvas,execTextSize)
	MAP_NATIVE(UTextureCanvas,execDrawTile)
	MAP_NATIVE(UTextureCanvas,execDrawStatic)
	MAP_NATIVE(UTextureCanvas,execDrawClear)
	MAP_NATIVE(UTextureCanvas,execDrawString)
	MAP_NATIVE(UTextureCanvas,execDrawTriangle)
	MAP_NATIVE(UTextureCanvas,execDrawLine)
	MAP_NATIVE(UTextureCanvas,execDrawPixel)
	MAP_NATIVE(UTextureCanvas,execPrecache)
	MAP_NATIVE(UTextureCanvas,execInit)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,UTextureCanvas);

NATIVE_INFO(USmackerTextureInstance) GEngineUSmackerTextureInstanceNatives[] = 
{ 
	MAP_NATIVE(USmackerTextureInstance,execGetFrameCount)
	MAP_NATIVE(USmackerTextureInstance,execSetPause)
	MAP_NATIVE(USmackerTextureInstance,execSetVolume)
	MAP_NATIVE(USmackerTextureInstance,execSetFrame)
	MAP_NATIVE(USmackerTextureInstance,execSetFilename)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,USmackerTextureInstance);

NATIVE_INFO(USmackerTexture) GEngineUSmackerTextureNatives[] = 
{ 
	MAP_NATIVE(USmackerTexture,execGetSmackerTextureInstance)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,USmackerTexture);

NATIVE_INFO(UBinkTexture) GEngineUBinkTextureNatives[] = 
{ 
	MAP_NATIVE(UBinkTexture,execOverrideBackgroundMusic)
	MAP_NATIVE(UBinkTexture,execCloseBink)
	MAP_NATIVE(UBinkTexture,execOpenBink)
	MAP_NATIVE(UBinkTexture,execGetLoop)
	MAP_NATIVE(UBinkTexture,execGetFrameCount)
	MAP_NATIVE(UBinkTexture,execGetFrame)
	MAP_NATIVE(UBinkTexture,execIsFinalFrame)
	MAP_NATIVE(UBinkTexture,execSetVolume)
	MAP_NATIVE(UBinkTexture,execSetLoop)
	MAP_NATIVE(UBinkTexture,execSetPause)
	MAP_NATIVE(UBinkTexture,execSetFrame)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,UBinkTexture);

NATIVE_INFO(UPrecacheIndex) GEngineUPrecacheIndexNatives[] = 
{ 
	MAP_NATIVE(UPrecacheIndex,execLogWarning)
	MAP_NATIVE(UPrecacheIndex,execMapHasCoverType)
	MAP_NATIVE(UPrecacheIndex,execWeaponClassIsUsableByPlayer)
	MAP_NATIVE(UPrecacheIndex,execWeaponIsUsableByPlayer)
	MAP_NATIVE(UPrecacheIndex,execRegisterAnimation)
	MAP_NATIVE(UPrecacheIndex,execRegisterAnimationControllerEntry)
	MAP_NATIVE(UPrecacheIndex,execRegisterAnimationController)
	MAP_NATIVE(UPrecacheIndex,execRegisterPawnAnimation)
	MAP_NATIVE(UPrecacheIndex,execRegisterMaterialClass)
	MAP_NATIVE(UPrecacheIndex,execRegisterDamageType)
	MAP_NATIVE(UPrecacheIndex,execRegisterMusic)
	MAP_NATIVE(UPrecacheIndex,execRegisterVoicePackEntry)
	MAP_NATIVE(UPrecacheIndex,execRegisterSoundInfo)
	MAP_NATIVE(UPrecacheIndex,execRegisterAmbientSoundInfo)
	MAP_NATIVE(UPrecacheIndex,execRegisterSound)
	MAP_NATIVE(UPrecacheIndex,execRegisterCubeMap)
	MAP_NATIVE(UPrecacheIndex,execRegisterBumpMap)
	MAP_NATIVE(UPrecacheIndex,execRegisterAttenuationMap)
	MAP_NATIVE(UPrecacheIndex,execRegisterTexture)
	MAP_NATIVE(UPrecacheIndex,execRegisterMaterialEx)
	MAP_NATIVE(UPrecacheIndex,execRegisterMountedActorPrefab)
	MAP_NATIVE(UPrecacheIndex,execRegisterRenderObject)
	MAP_NATIVE(UPrecacheIndex,execRegisterActorClass)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,UPrecacheIndex);

NATIVE_INFO(UPhysicsEffectsDatabase) GEngineUPhysicsEffectsDatabaseNatives[] = 
{ 
	MAP_NATIVE(UPhysicsEffectsDatabase,execPlayPhysicsImpactSound)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,UPhysicsEffectsDatabase);

NATIVE_INFO(AdnKingOfTheHill_MarkerBase) GEngineAdnKingOfTheHill_MarkerBaseNatives[] = 
{ 
	MAP_NATIVE(AdnKingOfTheHill_MarkerBase,execCopyToProjector)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,AdnKingOfTheHill_MarkerBase);

NATIVE_INFO(APickup) GEngineAPickupNatives[] = 
{ 
	MAP_NATIVE(APickup,execAttemptPickup)
	MAP_NATIVE(APickup,execDoPickup)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,APickup);

NATIVE_INFO(AWeapon) GEngineAWeaponNatives[] = 
{ 
	MAP_NATIVE(AWeapon,execGetWeaponAnimName)
	MAP_NATIVE(AWeapon,execGetMaxClip)
	MAP_NATIVE(AWeapon,execPerformFire)
	MAP_NATIVE(AWeapon,execGetCurrentShellEjectionLocation)
	MAP_NATIVE(AWeapon,execEject_Casing)
	MAP_NATIVE(AWeapon,execFindLookActor)
	MAP_NATIVE(AWeapon,execGiveToAI)
	MAP_NATIVE(AWeapon,execUserCanSprint)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,AWeapon);

NATIVE_INFO(ADoorMoverEx) GEngineADoorMoverExNatives[] = 
{ 
	MAP_NATIVE(ADoorMoverEx,execCalculateExtraOffset)
	MAP_NATIVE(ADoorMoverEx,execGetMountingSide)
	MAP_NATIVE(ADoorMoverEx,execCalcMidpoint)
	MAP_NATIVE(ADoorMoverEx,execCalcSensorLocation)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,ADoorMoverEx);

NATIVE_INFO(UColorTable) GEngineUColorTableNatives[] = 
{ 
	MAP_NATIVE(UColorTable,execGetColorForPosition)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,UColorTable);

NATIVE_INFO(UAnimationControllerEx) GEngineUAnimationControllerExNatives[] = 
{ 
	MAP_NATIVE(UAnimationControllerEx,execGetCachedPrimaryRefId)
	MAP_NATIVE(UAnimationControllerEx,execGetCachedAnimRefIds)
	MAP_NATIVE(UAnimationControllerEx,execGetCachedAnimSequences)
	MAP_NATIVE(UAnimationControllerEx,execGetCachedAnimChannel)
	MAP_NATIVE(UAnimationControllerEx,execGetCachedAnimSequence)
	MAP_NATIVE(UAnimationControllerEx,execGetNumberOfCachedAnimSequences)
	MAP_NATIVE(UAnimationControllerEx,execUpdateChannelTime)
	MAP_NATIVE(UAnimationControllerEx,execUpdateChannelBlendAlpha)
	MAP_NATIVE(UAnimationControllerEx,execUpdateGlobalAnimRateScale)
	MAP_NATIVE(UAnimationControllerEx,execAnimationFinished)
	MAP_NATIVE(UAnimationControllerEx,execGetAnimTimeByIndex)
	MAP_NATIVE(UAnimationControllerEx,execGetAnimTimeByName)
	MAP_NATIVE(UAnimationControllerEx,execGetMeshSequenceName)
	MAP_NATIVE(UAnimationControllerEx,execGetPrimaryChannelIndex)
	MAP_NATIVE(UAnimationControllerEx,execFindAnimChannelBlockIndexForName)
	MAP_NATIVE(UAnimationControllerEx,execFindAnimChannelIndexForName)
	MAP_NATIVE(UAnimationControllerEx,execFindAnimBlockIndexForName)
	MAP_NATIVE(UAnimationControllerEx,execFindAnimPairIndexForName)
	MAP_NATIVE(UAnimationControllerEx,execFindAnimGridIndexForName)
	MAP_NATIVE(UAnimationControllerEx,execFindAnimIndexForName)
	MAP_NATIVE(UAnimationControllerEx,execSetChannelBlockMasterAlpha)
	MAP_NATIVE(UAnimationControllerEx,execBlendChannelBlock)
	MAP_NATIVE(UAnimationControllerEx,execGetChannelBlockBlendTarget)
	MAP_NATIVE(UAnimationControllerEx,execGetChannelBlockBlend)
	MAP_NATIVE(UAnimationControllerEx,execEmptyAnimChannels_ByBlock)
	MAP_NATIVE(UAnimationControllerEx,execEmptyAnimChannels_OnlyGroup)
	MAP_NATIVE(UAnimationControllerEx,execEmptyAnimChannels_AllButGroup)
	MAP_NATIVE(UAnimationControllerEx,execEmptyAnimChannel)
	MAP_NATIVE(UAnimationControllerEx,execSetChannelEventState)
	MAP_NATIVE(UAnimationControllerEx,execSetChannelGridState)
	MAP_NATIVE(UAnimationControllerEx,execSetAnimGridState)
	MAP_NATIVE(UAnimationControllerEx,execSetAnimPairState)
	MAP_NATIVE(UAnimationControllerEx,execSetAnimState)
	MAP_NATIVE(UAnimationControllerEx,execResetServer)
	MAP_NATIVE(UAnimationControllerEx,execFlushHashes)
	MAP_NATIVE(UAnimationControllerEx,execInitAnimationControllerEx)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,UAnimationControllerEx);

NATIVE_INFO(ASoftParticleSystem) GEngineASoftParticleSystemNatives[] = 
{ 
	MAP_NATIVE(ASoftParticleSystem,execScaleSoundRadius)
	MAP_NATIVE(ASoftParticleSystem,execTriggeredActivities)
	MAP_NATIVE(ASoftParticleSystem,execDoTrigger)
	MAP_NATIVE(ASoftParticleSystem,execSetAllOwner)
	MAP_NATIVE(ASoftParticleSystem,execSetDontReflect)
	MAP_NATIVE(ASoftParticleSystem,execSetParticleSystemHidden)
	MAP_NATIVE(ASoftParticleSystem,execSetScaleFactor)
	MAP_NATIVE(ASoftParticleSystem,execSetOwnerSeeSpecial)
	MAP_NATIVE(ASoftParticleSystem,execSetUpdateWhenNotVisible)
	MAP_NATIVE(ASoftParticleSystem,execStopFlocking)
	MAP_NATIVE(ASoftParticleSystem,execForceSelfEnabled)
	MAP_NATIVE(ASoftParticleSystem,execForceSelfDisabled)
	MAP_NATIVE(ASoftParticleSystem,execDelayedActivityInternal)
	MAP_NATIVE(ASoftParticleSystem,execResetParticleSystem)
	MAP_NATIVE(ASoftParticleSystem,execInitializeFriends)
	MAP_NATIVE(ASoftParticleSystem,execDoPrimeSpawn)
	MAP_NATIVE(ASoftParticleSystem,execParticleHurtRadius)
	MAP_NATIVE(ASoftParticleSystem,execInitializeParticleSystem)
	MAP_NATIVE(ASoftParticleSystem,execPlayParticleSystemSounds)
	MAP_NATIVE(ASoftParticleSystem,execNativeInitializeParticleSystem)
	MAP_NATIVE(ASoftParticleSystem,execSetUpdateRate)
	MAP_NATIVE(ASoftParticleSystem,execInitFriendData)
	MAP_NATIVE(ASoftParticleSystem,execPrimeParticles)
	MAP_NATIVE(ASoftParticleSystem,execDoAdditionalSpawn)
	MAP_NATIVE(ASoftParticleSystem,execDestroyParticleCollisionActors)
	MAP_NATIVE(ASoftParticleSystem,execDrawParticles)
	MAP_NATIVE(ASoftParticleSystem,execSpawnParticleEx)
	MAP_NATIVE(ASoftParticleSystem,execSpawnParticle)
	MAP_NATIVE(ASoftParticleSystem,execSetParticle)
	MAP_NATIVE(ASoftParticleSystem,execGetParticle)
	MAP_NATIVE(ASoftParticleSystem,execFreeParticle)
	MAP_NATIVE(ASoftParticleSystem,execResetParticles)
	MAP_NATIVE(ASoftParticleSystem,execForceTick)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,ASoftParticleSystem);

NATIVE_INFO(APhysicsVolume) GEngineAPhysicsVolumeNatives[] = 
{ 
	MAP_NATIVE(APhysicsVolume,execSetVolumeAngularVelocity)
	MAP_NATIVE(APhysicsVolume,execSetVolumeVelocity)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,APhysicsVolume);

NATIVE_INFO(AParticleEffector) GEngineAParticleEffectorNatives[] = 
{ 
	MAP_NATIVE(AParticleEffector,execCreateEffector)
	MAP_NATIVE(AParticleEffector,execUpdate)
	MAP_NATIVE(AParticleEffector,execEffectorDetach)
	MAP_NATIVE(AParticleEffector,execEffectorAttach)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,AParticleEffector);

NATIVE_INFO(AHUD) GEngineAHUDNatives[] = 
{ 
	MAP_NATIVE(AHUD,execSetKeyInfoState)
	MAP_NATIVE(AHUD,execDrawTileOnDirectionalCircle)
	MAP_NATIVE(AHUD,execTickDirectionalIndicators)
	MAP_NATIVE(AHUD,execAddDirectionalIndicator)
	MAP_NATIVE(AHUD,execHUDDrawStretchedTextureSegment)
	MAP_NATIVE(AHUD,execTickScreenFlashes)
	MAP_NATIVE(AHUD,execRemoveScreenFlash)
	MAP_NATIVE(AHUD,execAddScreenFlash)
	MAP_NATIVE(AHUD,execAddHudEffect)
	MAP_NATIVE(AHUD,execTickDisplayMessages)
	MAP_NATIVE(AHUD,execGetGamepadButtonImageForShortKeyName)
	MAP_NATIVE(AHUD,execGetSpecialKeyString)
	MAP_NATIVE(AHUD,execFindFirstPCBinding)
	MAP_NATIVE(AHUD,execFindFirstGamepadBinding)
	MAP_NATIVE(AHUD,execPostRender)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,AHUD);

NATIVE_INFO(AGeoWater) GEngineAGeoWaterNatives[] = 
{ 
	MAP_NATIVE(AGeoWater,execDetachOscillator)
	MAP_NATIVE(AGeoWater,execAttachOscillator)
	MAP_NATIVE(AGeoWater,execInternalTick)
	MAP_NATIVE(AGeoWater,execSampleHeight)
	MAP_NATIVE(AGeoWater,execSplashWater)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,AGeoWater);

NATIVE_INFO(AChallengeInfo) GEngineAChallengeInfoNatives[] = 
{ 
	MAP_NATIVE(AChallengeInfo,execUnlockPreorderGroup)
	MAP_NATIVE(AChallengeInfo,execUnlockPreorderBonuses)
	MAP_NATIVE(AChallengeInfo,execUnlockPreorderGroupIncludesDBP)
	MAP_NATIVE(AChallengeInfo,execTryBonusCode)
	MAP_NATIVE(AChallengeInfo,execIsEnterBonusCodeMenuItemEnabled)
	MAP_NATIVE(AChallengeInfo,execGetChallengeIdxFromID)
	MAP_NATIVE(AChallengeInfo,execStaticInit)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,AChallengeInfo);

NATIVE_INFO(ABreakableGlass) GEngineABreakableGlassNatives[] = 
{ 
	MAP_NATIVE(ABreakableGlass,execRecalculateRenderBox)
	MAP_NATIVE(ABreakableGlass,execIsDone)
	MAP_NATIVE(ABreakableGlass,execIsShattered)
	MAP_NATIVE(ABreakableGlass,execShatterGlass)
	MAP_NATIVE(ABreakableGlass,execDoRespawn)
	MAP_NATIVE(ABreakableGlass,execInternalTick)
	MAP_NATIVE(ABreakableGlass,execGetParticleBox)
	MAP_NATIVE(ABreakableGlass,execBreakGlassXY)
	MAP_NATIVE(ABreakableGlass,execBreakGlassDir)
	MAP_NATIVE(ABreakableGlass,execBreakGlass)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,ABreakableGlass);

NATIVE_INFO(ABeamSystem) GEngineABeamSystemNatives[] = 
{ 
	MAP_NATIVE(ABeamSystem,execTickNative)
	MAP_NATIVE(ABeamSystem,execFreeSegment)
	MAP_NATIVE(ABeamSystem,execAllocSegment)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,ABeamSystem);

NATIVE_INFO(AActionPoint) GEngineAActionPointNatives[] = 
{ 
	MAP_NATIVE(AActionPoint,execIsLockedBy)
	MAP_NATIVE(AActionPoint,execIsCompletelyCompromised)
	MAP_NATIVE(AActionPoint,execNative_InitActionPoint)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,AActionPoint);

#endif // NATIVES_ONLY
#if _MSC_VER
#pragma warning(default:4121)
#endif

#ifdef VERIFY_CLASS_SIZES
#pragma message("*** Verifying class sizes for Engine.")
VERIFY_CLASS_OFFSET_NODIE(UFactory,Factory,Formats)
VERIFY_CLASS_SIZE_NODIE(UFactory)
VERIFY_CLASS_OFFSET_NODIE(UObject,Object,ObjectInternal)
VERIFY_CLASS_OFFSET_NODIE(UObject,Object,Outer)
VERIFY_CLASS_OFFSET_NODIE(UObject,Object,ObjectFlags)
VERIFY_CLASS_OFFSET_NODIE(UObject,Object,Name)
VERIFY_CLASS_OFFSET_NODIE(UObject,Object,Class)
VERIFY_CLASS_SIZE_NODIE(UObject)
VERIFY_CLASS_OFFSET_NODIE(UCommandlet,Commandlet,HelpCmd)
VERIFY_CLASS_OFFSET_NODIE(UCommandlet,Commandlet,HelpOneLiner)
VERIFY_CLASS_OFFSET_NODIE(UCommandlet,Commandlet,HelpUsage)
VERIFY_CLASS_OFFSET_NODIE(UCommandlet,Commandlet,HelpWebLink)
VERIFY_CLASS_OFFSET_NODIE(UCommandlet,Commandlet,HelpParm)
VERIFY_CLASS_OFFSET_NODIE(UCommandlet,Commandlet,HelpDesc)
VERIFY_CLASS_SIZE_NODIE(UCommandlet)
VERIFY_CLASS_OFFSET_NODIE(UEngine,Engine,GameRenderDevice)
VERIFY_CLASS_OFFSET_NODIE(UEngine,Engine,AudioDevice)
VERIFY_CLASS_OFFSET_NODIE(UEngine,Engine,Console)
VERIFY_CLASS_OFFSET_NODIE(UEngine,Engine,NetworkDevice)
VERIFY_CLASS_OFFSET_NODIE(UEngine,Engine,Language)
VERIFY_CLASS_OFFSET_NODIE(UEngine,Engine,Cylinder)
VERIFY_CLASS_OFFSET_NODIE(UEngine,Engine,Client)
VERIFY_CLASS_OFFSET_NODIE(UEngine,Engine,Render)
VERIFY_CLASS_OFFSET_NODIE(UEngine,Engine,Audio)
VERIFY_CLASS_OFFSET_NODIE(UEngine,Engine,Online)
VERIFY_CLASS_OFFSET_NODIE(UEngine,Engine,MGData)
VERIFY_CLASS_OFFSET_NODIE(UEngine,Engine,ParticleEditorHWND)
VERIFY_CLASS_OFFSET_NODIE(UEngine,Engine,ModelessHWNDs)
VERIFY_CLASS_OFFSET_NODIE(UEngine,Engine,CacheSizeMegs)
VERIFY_CLASS_OFFSET_NODIE(UEngine,Engine,CurrentTickRate)
VERIFY_CLASS_OFFSET_NODIE(UEngine,Engine,pIXHVEnginePadding)
VERIFY_CLASS_OFFSET_NODIE(UEngine,Engine,hXHVThreadPadding)
VERIFY_CLASS_SIZE_NODIE(UEngine)
VERIFY_CLASS_OFFSET_NODIE(USubsystem,Subsystem,ExecVtbl)
VERIFY_CLASS_SIZE_NODIE(USubsystem)
VERIFY_CLASS_OFFSET_NODIE(UExporter,Exporter,Formats)
VERIFY_CLASS_SIZE_NODIE(UExporter)
VERIFY_CLASS_OFFSET_NODIE(ARenderActor,RenderActor,ForceAnimTickTag)
VERIFY_CLASS_OFFSET_NODIE(ARenderActor,RenderActor,VisibilityRadius)
VERIFY_CLASS_OFFSET_NODIE(ARenderActor,RenderActor,ShadowGroupOwner)
VERIFY_CLASS_OFFSET_NODIE(ARenderActor,RenderActor,DukeVisionInterference)
VERIFY_CLASS_OFFSET_NODIE(ARenderActor,RenderActor,MountOnSpawn)
VERIFY_CLASS_OFFSET_NODIE(ARenderActor,RenderActor,AutoRegisterIKClasses)
VERIFY_CLASS_OFFSET_NODIE(ARenderActor,RenderActor,Health)
VERIFY_CLASS_OFFSET_NODIE(ARenderActor,RenderActor,HealthCap)
VERIFY_CLASS_OFFSET_NODIE(ARenderActor,RenderActor,HealthMin)
VERIFY_CLASS_OFFSET_NODIE(ARenderActor,RenderActor,ThisFrameDamage)
VERIFY_CLASS_OFFSET_NODIE(ARenderActor,RenderActor,SpawnOnDestroyedSimple)
VERIFY_CLASS_OFFSET_NODIE(ARenderActor,RenderActor,SpawnOnDestroyed)
VERIFY_CLASS_OFFSET_NODIE(ARenderActor,RenderActor,DestroyedParticleFriendEffects)
VERIFY_CLASS_OFFSET_NODIE(ARenderActor,RenderActor,DestructionLevels)
VERIFY_CLASS_OFFSET_NODIE(ARenderActor,RenderActor,DefaultMotionPrefab)
VERIFY_CLASS_OFFSET_NODIE(ARenderActor,RenderActor,NoMotionPrefab)
VERIFY_CLASS_OFFSET_NODIE(ARenderActor,RenderActor,ActorPoolOnDestroyed)
VERIFY_CLASS_OFFSET_NODIE(ARenderActor,RenderActor,BonesToDrawInTheEditor)
VERIFY_CLASS_OFFSET_NODIE(ARenderActor,RenderActor,AnimationController)
VERIFY_CLASS_OFFSET_NODIE(ARenderActor,RenderActor,AnimationControllerClass)
VERIFY_CLASS_OFFSET_NODIE(ARenderActor,RenderActor,MovementBoneTracker)
VERIFY_CLASS_OFFSET_NODIE(ARenderActor,RenderActor,LoadedIKSystemInfos)
VERIFY_CLASS_SIZE_NODIE(ARenderActor)
VERIFY_CLASS_OFFSET_NODIE(AKarmaActor,KarmaActor,WaterSplash)
VERIFY_CLASS_OFFSET_NODIE(AKarmaActor,KarmaActor,MinSplashTime)
VERIFY_CLASS_OFFSET_NODIE(AKarmaActor,KarmaActor,WaterInteractions)
VERIFY_CLASS_OFFSET_NODIE(AKarmaActor,KarmaActor,NextSplashTime)
VERIFY_CLASS_OFFSET_NODIE(AKarmaActor,KarmaActor,PhysicsUserData)
VERIFY_CLASS_OFFSET_NODIE(AKarmaActor,KarmaActor,MeqConstraints)
VERIFY_CLASS_OFFSET_NODIE(AKarmaActor,KarmaActor,PhysicsStateStack)
VERIFY_CLASS_OFFSET_NODIE(AKarmaActor,KarmaActor,iAwake)
VERIFY_CLASS_OFFSET_NODIE(AKarmaActor,KarmaActor,PseudoDynamicsHandle)
VERIFY_CLASS_OFFSET_NODIE(AKarmaActor,KarmaActor,ImpactSoundRadius)
VERIFY_CLASS_OFFSET_NODIE(AKarmaActor,KarmaActor,ImpactSoundInnerRadius)
VERIFY_CLASS_OFFSET_NODIE(AKarmaActor,KarmaActor,ImpactSoundVolume)
VERIFY_CLASS_OFFSET_NODIE(AKarmaActor,KarmaActor,ImpactSoundTimer)
VERIFY_CLASS_OFFSET_NODIE(AKarmaActor,KarmaActor,NextLegalImpactSoundTime)
VERIFY_CLASS_OFFSET_NODIE(AKarmaActor,KarmaActor,NextLegalImpactSoundOffset)
VERIFY_CLASS_OFFSET_NODIE(AKarmaActor,KarmaActor,StaticInteractionClassification)
VERIFY_CLASS_OFFSET_NODIE(AKarmaActor,KarmaActor,DynamicInteractionClassification)
VERIFY_CLASS_OFFSET_NODIE(AKarmaActor,KarmaActor,PersistantEffectType)
VERIFY_CLASS_OFFSET_NODIE(AKarmaActor,KarmaActor,LastPersistantEffectType)
VERIFY_CLASS_OFFSET_NODIE(AKarmaActor,KarmaActor,PersistantEffectDBIndex)
VERIFY_CLASS_OFFSET_NODIE(AKarmaActor,KarmaActor,LastPersistantEffectDBIndex)
VERIFY_CLASS_OFFSET_NODIE(AKarmaActor,KarmaActor,PersistantEffectSound)
VERIFY_CLASS_OFFSET_NODIE(AKarmaActor,KarmaActor,PersistantEffectVolume)
VERIFY_CLASS_OFFSET_NODIE(AKarmaActor,KarmaActor,PersistantEffectPitch)
VERIFY_CLASS_OFFSET_NODIE(AKarmaActor,KarmaActor,PersistantEffectTime)
VERIFY_CLASS_OFFSET_NODIE(AKarmaActor,KarmaActor,PhysicsMaterial)
VERIFY_CLASS_OFFSET_NODIE(AKarmaActor,KarmaActor,PhysicsMassType)
VERIFY_CLASS_OFFSET_NODIE(AKarmaActor,KarmaActor,KFriction)
VERIFY_CLASS_OFFSET_NODIE(AKarmaActor,KarmaActor,KRestitution)
VERIFY_CLASS_OFFSET_NODIE(AKarmaActor,KarmaActor,KImpactThreshold)
VERIFY_CLASS_OFFSET_NODIE(AKarmaActor,KarmaActor,KLinearDamping)
VERIFY_CLASS_OFFSET_NODIE(AKarmaActor,KarmaActor,StoredKLinearDamping)
VERIFY_CLASS_OFFSET_NODIE(AKarmaActor,KarmaActor,KAngularDamping)
VERIFY_CLASS_OFFSET_NODIE(AKarmaActor,KarmaActor,KCenterOfMass)
VERIFY_CLASS_OFFSET_NODIE(AKarmaActor,KarmaActor,GravityScale)
VERIFY_CLASS_OFFSET_NODIE(AKarmaActor,KarmaActor,Density)
VERIFY_CLASS_OFFSET_NODIE(AKarmaActor,KarmaActor,MagneticCharge)
VERIFY_CLASS_OFFSET_NODIE(AKarmaActor,KarmaActor,MagneticRange)
VERIFY_CLASS_OFFSET_NODIE(AKarmaActor,KarmaActor,EnableDisableThreshold)
VERIFY_CLASS_OFFSET_NODIE(AKarmaActor,KarmaActor,PhysicsTimeScale)
VERIFY_CLASS_OFFSET_NODIE(AKarmaActor,KarmaActor,KImpactEvent)
VERIFY_CLASS_OFFSET_NODIE(AKarmaActor,KarmaActor,KWakeEvent)
VERIFY_CLASS_OFFSET_NODIE(AKarmaActor,KarmaActor,KSleepEvent)
VERIFY_CLASS_OFFSET_NODIE(AKarmaActor,KarmaActor,MinImpactTime)
VERIFY_CLASS_OFFSET_NODIE(AKarmaActor,KarmaActor,MinDamageVelocity)
VERIFY_CLASS_OFFSET_NODIE(AKarmaActor,KarmaActor,MinDamageVelocityThrown)
VERIFY_CLASS_OFFSET_NODIE(AKarmaActor,KarmaActor,MinDamageVelocityDropped)
VERIFY_CLASS_OFFSET_NODIE(AKarmaActor,KarmaActor,DefaultMinDamageVelocity)
VERIFY_CLASS_OFFSET_NODIE(AKarmaActor,KarmaActor,DamageScaler)
VERIFY_CLASS_OFFSET_NODIE(AKarmaActor,KarmaActor,MaxImpactDamage)
VERIFY_CLASS_OFFSET_NODIE(AKarmaActor,KarmaActor,FixedPhysicsDamageToNotPlayer)
VERIFY_CLASS_OFFSET_NODIE(AKarmaActor,KarmaActor,FixedPhysicsDamageToPlayer)
VERIFY_CLASS_OFFSET_NODIE(AKarmaActor,KarmaActor,OverridePhysicsImpactDamageType)
VERIFY_CLASS_OFFSET_NODIE(AKarmaActor,KarmaActor,CurrentImpactDamage)
VERIFY_CLASS_OFFSET_NODIE(AKarmaActor,KarmaActor,NextImpactTime)
VERIFY_CLASS_OFFSET_NODIE(AKarmaActor,KarmaActor,CrushResistance)
VERIFY_CLASS_OFFSET_NODIE(AKarmaActor,KarmaActor,PhysicsReplicationThrottle)
VERIFY_CLASS_OFFSET_NODIE(AKarmaActor,KarmaActor,PhysicsReplicationTimer)
VERIFY_CLASS_OFFSET_NODIE(AKarmaActor,KarmaActor,StandardPhysicsAction)
VERIFY_CLASS_OFFSET_NODIE(AKarmaActor,KarmaActor,PhysicsActions)
VERIFY_CLASS_OFFSET_NODIE(AKarmaActor,KarmaActor,PhysicsEntityGroup)
VERIFY_CLASS_OFFSET_NODIE(AKarmaActor,KarmaActor,PhysicsSoundOverrides)
VERIFY_CLASS_OFFSET_NODIE(AKarmaActor,KarmaActor,PhysicsStartupTime)
VERIFY_CLASS_OFFSET_NODIE(AKarmaActor,KarmaActor,SimpleCollisionModel)
VERIFY_CLASS_SIZE_NODIE(AKarmaActor)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,CollisionTag)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,CachePrimitive)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,TraceFalseMask)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,TraceTrueMaskEarly)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,TraceTrueMask)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,Velocity)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,Physics)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,GametypeSpecific)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,Owner)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,Region)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,Level)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,NumOwned)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,Target)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,Instigator)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,SPActorInfo)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,InitialState)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,Group)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,Tag)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,Event)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,ForwardTags)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,SpecialEvents)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,ActorLinks)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,LatentInt)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,LatentFloat)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,Deleted)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,PlacementZOffset)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,SpecialCollisionTag)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,CollisionRadius)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,CollisionHeight)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,TouchClasses)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,VisibleCollidingCenterOffset)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,Touching)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,BasedActorCount)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,BasedParticlesList)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,OctreeNodes)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,OctreeBox)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,OctreeBoxCenter)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,OctreeBoxRadii)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,NavVolume)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,TickSelfRecentTime)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,TickZoneRecentTime)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,TickNearbyRadius)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,TickStamp)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,RotationRate)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,RotationRateTarget)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,RotationRateTargetTimer)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,DisturbWaterStrength)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,DisturbWaterRadius)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,AccelRate)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,ForcePawnBaseHeight)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,StartingInterpolationPoint)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,PhysAlpha)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,PhysRate)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,OldRoll)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,RollLerpAlpha)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,DesiredLocationCurrent)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,DesiredLocation)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,DesiredRotationPitchCurrent)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,DesiredRotationYawCurrent)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,DesiredRotationRollCurrent)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,DesiredRotationPitch)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,DesiredRotationYaw)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,DesiredRotationRoll)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,Mass)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,Location)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,Rotation)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,VolumeProxy)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,PhysicsVolume)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,Acceleration)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,OldLocation)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,OldRotation)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,ColLocation)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,NetworkTweenCompletion)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,NetworkLocationDelta)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,NetworkTweenRate)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,TickStyle)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,MountType)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,DismountPhysics)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,MountParentTag)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,MountOrigin)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,MountAngles)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,MountMeshItem)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,MountParent)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,MountedActorList)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,Style)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,DrawType)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,AnimToggleState)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,AlphaSortGroup)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,PrePivot)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,PostPivot)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,DrawScale)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,DrawScale3D)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,Sprite)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,OverlayMaterial)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,OverlayEffectAlpha)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,OverlayEffectAlphaTarget)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,OverlayEffectTransitionStartTime)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,OverlayEffectTransitionTotalTime)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,OverlayScaleU)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,OverlayScaleV)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,Texture)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,Brush)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,StaticMesh)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,RenderStaticMesh)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,Mesh)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,RenderMesh)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,LastRenderTime)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,Skins)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,OwnerSeeStyle)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,DirtyRenderFlags)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,TraceFireHitResponse)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,VertexFunction)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,VF_Phase)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,VF_PhaseX)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,VF_PhaseY)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,VF_PhaseZ)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,VF_Frequency)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,VF_Amplitude)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,VF_AmplitudeOffset)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,CameraActor)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,CameraFOV)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,MirrorRenderTarget)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,MirrorNormal)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,PixelMotionBlurFactor)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,ActorColorList)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,ActorColorFadeList)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,OverlayBumpShaderInfo)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,MeshInstance)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,RenderMeshInstance)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,StaticMeshInstance)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,RenderStaticMeshInstance)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,LightExs)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,LightTag)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,ShadowTag)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,DirShadowExtrudeDist)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,Projectors)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,AntiPortal)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,Leaves)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,LeafBox)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,VisibleLightTag)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,PortalViewName)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,RenderData)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,TickBefore)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,TimeWarp)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,LifeSpan)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,LifeSpanVariance)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,CallbackTimers)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,CallbackTimers_Always)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,AnimTimeScale)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,NetTag)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,NetPriority)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,NetUpdateFrequency)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,TravelLocation)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,TravelRotation)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,Role)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,RemoteRole)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,SoundVolume)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,SoundPitch)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,SoundRadius)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,SoundInnerRadius)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,AmbientSound)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,AmbientSoundMixerGroup)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,SoundOcclusionScale)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,AmbientMusicVolume)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,AmbientMusicStartTime)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,AmbientMusicEarlyEndTime)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,AmbientMusicInnerRadius)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,AmbientMusicRadius)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,AmbientMusicOldFadeTime)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,AmbientMusicCrossfadeTime)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,AmbientMusic)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,AmbientMusicMixerGroup)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,TransientSoundVolume)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,TransientSoundRadius)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,TransientSoundInnerRadius)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,TransientSoundPitch)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,SoundPitchDrawScaleOverride)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,VoicePack)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,VoicePackSoundThrottles)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,DoneMovingSound)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,DoneMovingSoundName)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,HurtRadiusAffectClass)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,EffectsMaterial)
VERIFY_CLASS_OFFSET_NODIE(AActor,Actor,ScaleModifierGroupList)
VERIFY_CLASS_SIZE_NODIE(AActor)
VERIFY_CLASS_OFFSET_NODIE(ULCDHelper,LCDHelper,Chapters)
VERIFY_CLASS_OFFSET_NODIE(ULCDHelper,LCDHelper,SPMapNames)
VERIFY_CLASS_OFFSET_NODIE(ULCDHelper,LCDHelper,EgoString)
VERIFY_CLASS_OFFSET_NODIE(ULCDHelper,LCDHelper,DigsUnlockString)
VERIFY_CLASS_OFFSET_NODIE(ULCDHelper,LCDHelper,ChangeRoomUnlockString)
VERIFY_CLASS_OFFSET_NODIE(ULCDHelper,LCDHelper,HeadString)
VERIFY_CLASS_OFFSET_NODIE(ULCDHelper,LCDHelper,FaceString)
VERIFY_CLASS_OFFSET_NODIE(ULCDHelper,LCDHelper,ShirtString)
VERIFY_CLASS_OFFSET_NODIE(ULCDHelper,LCDHelper,TitleString)
VERIFY_CLASS_OFFSET_NODIE(ULCDHelper,LCDHelper,PlayersString)
VERIFY_CLASS_OFFSET_NODIE(ULCDHelper,LCDHelper,LevelString)
VERIFY_CLASS_OFFSET_NODIE(ULCDHelper,LCDHelper,ScoreString)
VERIFY_CLASS_OFFSET_NODIE(ULCDHelper,LCDHelper,PingString)
VERIFY_CLASS_OFFSET_NODIE(ULCDHelper,LCDHelper,KillsString)
VERIFY_CLASS_OFFSET_NODIE(ULCDHelper,LCDHelper,DeathsString)
VERIFY_CLASS_OFFSET_NODIE(ULCDHelper,LCDHelper,KDRatioString)
VERIFY_CLASS_OFFSET_NODIE(ULCDHelper,LCDHelper,CachedServerName)
VERIFY_CLASS_OFFSET_NODIE(ULCDHelper,LCDHelper,CachedLevel)
VERIFY_CLASS_OFFSET_NODIE(ULCDHelper,LCDHelper,CachedScore)
VERIFY_CLASS_OFFSET_NODIE(ULCDHelper,LCDHelper,CachedPing)
VERIFY_CLASS_OFFSET_NODIE(ULCDHelper,LCDHelper,CachedKills)
VERIFY_CLASS_OFFSET_NODIE(ULCDHelper,LCDHelper,CachedDeaths)
VERIFY_CLASS_OFFSET_NODIE(ULCDHelper,LCDHelper,CachedNumPlayers)
VERIFY_CLASS_OFFSET_NODIE(ULCDHelper,LCDHelper,CachedXPPercent)
VERIFY_CLASS_OFFSET_NODIE(ULCDHelper,LCDHelper,CachedXPCurrent)
VERIFY_CLASS_OFFSET_NODIE(ULCDHelper,LCDHelper,CachedXPNeeded)
VERIFY_CLASS_OFFSET_NODIE(ULCDHelper,LCDHelper,NextMPTickUpdate)
VERIFY_CLASS_OFFSET_NODIE(ULCDHelper,LCDHelper,MPTickUpdateRateSeconds)
VERIFY_CLASS_OFFSET_NODIE(ULCDHelper,LCDHelper,PieceOfCakeDifficultyString)
VERIFY_CLASS_OFFSET_NODIE(ULCDHelper,LCDHelper,LetsRockDifficultyString)
VERIFY_CLASS_OFFSET_NODIE(ULCDHelper,LCDHelper,ComeGetSomeDifficultyString)
VERIFY_CLASS_OFFSET_NODIE(ULCDHelper,LCDHelper,DamnImGoodDifficultyString)
VERIFY_CLASS_SIZE_NODIE(ULCDHelper)
VERIFY_CLASS_OFFSET_NODIE(UGearboxEngineGlobals,GearboxEngineGlobals,TimeBetweenAssaultCaptainRockets)
VERIFY_CLASS_OFFSET_NODIE(UGearboxEngineGlobals,GearboxEngineGlobals,MaxAssaultCaptainRocketsPerFrame)
VERIFY_CLASS_OFFSET_NODIE(UGearboxEngineGlobals,GearboxEngineGlobals,TimeBetweenExitWounds)
VERIFY_CLASS_OFFSET_NODIE(UGearboxEngineGlobals,GearboxEngineGlobals,MaxExitWoundsPerFrame)
VERIFY_CLASS_OFFSET_NODIE(UGearboxEngineGlobals,GearboxEngineGlobals,FrameIndex)
VERIFY_CLASS_OFFSET_NODIE(UGearboxEngineGlobals,GearboxEngineGlobals,LastAssaultCaptainRocketTime)
VERIFY_CLASS_OFFSET_NODIE(UGearboxEngineGlobals,GearboxEngineGlobals,AssaultCaptainRocketsThisFrame)
VERIFY_CLASS_OFFSET_NODIE(UGearboxEngineGlobals,GearboxEngineGlobals,LastExitWoundTime)
VERIFY_CLASS_OFFSET_NODIE(UGearboxEngineGlobals,GearboxEngineGlobals,ExitWoundsThisFrame)
VERIFY_CLASS_OFFSET_NODIE(UGearboxEngineGlobals,GearboxEngineGlobals,DeferredPickups)
VERIFY_CLASS_OFFSET_NODIE(UGearboxEngineGlobals,GearboxEngineGlobals,DeferredMeqonSynchronizes)
VERIFY_CLASS_OFFSET_NODIE(UGearboxEngineGlobals,GearboxEngineGlobals,DeferredCallbackGibs)
VERIFY_CLASS_OFFSET_NODIE(UGearboxEngineGlobals,GearboxEngineGlobals,DeferredSetPhysicsActors)
VERIFY_CLASS_SIZE_NODIE(UGearboxEngineGlobals)
VERIFY_CLASS_SIZE_NODIE(UAgentPendingLevel)
VERIFY_CLASS_SIZE_NODIE(UNetPendingLevel)
VERIFY_CLASS_SIZE_NODIE(UPendingLevel)
VERIFY_CLASS_SIZE_NODIE(UAgentNetDriver)
VERIFY_CLASS_OFFSET_NODIE(UNetDriver,NetDriver,LanServerMaxTickRate)
VERIFY_CLASS_OFFSET_NODIE(UNetDriver,NetDriver,NetServerMaxTickRate)
VERIFY_CLASS_OFFSET_NODIE(UNetDriver,NetDriver,MinClientRate)
VERIFY_CLASS_OFFSET_NODIE(UNetDriver,NetDriver,MaxClientRate)
VERIFY_CLASS_OFFSET_NODIE(UNetDriver,NetDriver,MaxTolerablePing)
VERIFY_CLASS_OFFSET_NODIE(UNetDriver,NetDriver,MinTolerableNetSpeed)
VERIFY_CLASS_OFFSET_NODIE(UNetDriver,NetDriver,ServerTravelPause)
VERIFY_CLASS_OFFSET_NODIE(UNetDriver,NetDriver,SpawnPrioritySeconds)
VERIFY_CLASS_OFFSET_NODIE(UNetDriver,NetDriver,RelevantTimeout)
VERIFY_CLASS_OFFSET_NODIE(UNetDriver,NetDriver,KeepAliveTime)
VERIFY_CLASS_OFFSET_NODIE(UNetDriver,NetDriver,InitialConnectTimeout)
VERIFY_CLASS_OFFSET_NODIE(UNetDriver,NetDriver,ConnectionTimeout)
VERIFY_CLASS_SIZE_NODIE(UNetDriver)
VERIFY_CLASS_SIZE_NODIE(UAgentConnection)
VERIFY_CLASS_SIZE_NODIE(UNetConnection)
VERIFY_CLASS_OFFSET_NODIE(UPlayer,Player,vfOut)
VERIFY_CLASS_OFFSET_NODIE(UPlayer,Player,vfExec)
VERIFY_CLASS_OFFSET_NODIE(UPlayer,Player,Actor)
VERIFY_CLASS_OFFSET_NODIE(UPlayer,Player,Console)
VERIFY_CLASS_OFFSET_NODIE(UPlayer,Player,WindowsMouseX)
VERIFY_CLASS_OFFSET_NODIE(UPlayer,Player,WindowsMouseY)
VERIFY_CLASS_OFFSET_NODIE(UPlayer,Player,CurrentNetSpeed)
VERIFY_CLASS_OFFSET_NODIE(UPlayer,Player,DynamicNetSpeed)
VERIFY_CLASS_OFFSET_NODIE(UPlayer,Player,ConfiguredInternetSpeed)
VERIFY_CLASS_OFFSET_NODIE(UPlayer,Player,ConfiguredLanSpeed)
VERIFY_CLASS_OFFSET_NODIE(UPlayer,Player,SelectedCursor)
VERIFY_CLASS_SIZE_NODIE(UPlayer)
VERIFY_CLASS_SIZE_NODIE(UOnlineAgentNetDriverListener)
VERIFY_CLASS_OFFSET_NODIE(UOnlineAgentListener,OnlineAgentListener,__OnEndGame__Delegate)
VERIFY_CLASS_OFFSET_NODIE(UOnlineAgentListener,OnlineAgentListener,__OnLeaveRoom__Delegate)
VERIFY_CLASS_OFFSET_NODIE(UOnlineAgentListener,OnlineAgentListener,__OnJoinRoom__Delegate)
VERIFY_CLASS_OFFSET_NODIE(UOnlineAgentListener,OnlineAgentListener,__OnPlayerJoin__Delegate)
VERIFY_CLASS_OFFSET_NODIE(UOnlineAgentListener,OnlineAgentListener,__OnPlayerLeave__Delegate)
VERIFY_CLASS_OFFSET_NODIE(UOnlineAgentListener,OnlineAgentListener,__OnStartLoading__Delegate)
VERIFY_CLASS_OFFSET_NODIE(UOnlineAgentListener,OnlineAgentListener,__OnShutdown__Delegate)
VERIFY_CLASS_OFFSET_NODIE(UOnlineAgentListener,OnlineAgentListener,__OnLeaderboardError__Delegate)
VERIFY_CLASS_OFFSET_NODIE(UOnlineAgentListener,OnlineAgentListener,__OnInviteAccepted__Delegate)
VERIFY_CLASS_OFFSET_NODIE(UOnlineAgentListener,OnlineAgentListener,__OnJoinRoomFailed__Delegate)
VERIFY_CLASS_OFFSET_NODIE(UOnlineAgentListener,OnlineAgentListener,__OnStopWaitingForResponse__Delegate)
VERIFY_CLASS_OFFSET_NODIE(UOnlineAgentListener,OnlineAgentListener,__OnVirtualKeyboardClosed__Delegate)
VERIFY_CLASS_OFFSET_NODIE(UOnlineAgentListener,OnlineAgentListener,__OnNewDLCCheckComplete__Delegate)
VERIFY_CLASS_OFFSET_NODIE(UOnlineAgentListener,OnlineAgentListener,__OnDLCRescanComplete__Delegate)
VERIFY_CLASS_OFFSET_NODIE(UOnlineAgentListener,OnlineAgentListener,__OnNewDLCInstalled__Delegate)
VERIFY_CLASS_OFFSET_NODIE(UOnlineAgentListener,OnlineAgentListener,__OnTick__Delegate)
VERIFY_CLASS_OFFSET_NODIE(UOnlineAgentListener,OnlineAgentListener,__OnPostLogin__Delegate)
VERIFY_CLASS_OFFSET_NODIE(UOnlineAgentListener,OnlineAgentListener,__OnPostBeginPlay__Delegate)
VERIFY_CLASS_OFFSET_NODIE(UOnlineAgentListener,OnlineAgentListener,__OnLeaderboardRefreshed__Delegate)
VERIFY_CLASS_OFFSET_NODIE(UOnlineAgentListener,OnlineAgentListener,__OnServerBrowserClosed__Delegate)
VERIFY_CLASS_OFFSET_NODIE(UOnlineAgentListener,OnlineAgentListener,__OnChatMessageReceived__Delegate)
VERIFY_CLASS_SIZE_NODIE(UOnlineAgentListener)
VERIFY_CLASS_OFFSET_NODIE(UPS3RichPresenceData,PS3RichPresenceData,SPLevel0)
VERIFY_CLASS_OFFSET_NODIE(UPS3RichPresenceData,PS3RichPresenceData,SPLevel1)
VERIFY_CLASS_OFFSET_NODIE(UPS3RichPresenceData,PS3RichPresenceData,SPLevel2)
VERIFY_CLASS_OFFSET_NODIE(UPS3RichPresenceData,PS3RichPresenceData,SPLevel3)
VERIFY_CLASS_OFFSET_NODIE(UPS3RichPresenceData,PS3RichPresenceData,SPLevel4)
VERIFY_CLASS_OFFSET_NODIE(UPS3RichPresenceData,PS3RichPresenceData,SPLevel5)
VERIFY_CLASS_OFFSET_NODIE(UPS3RichPresenceData,PS3RichPresenceData,SPLevel6)
VERIFY_CLASS_OFFSET_NODIE(UPS3RichPresenceData,PS3RichPresenceData,SPLevel7)
VERIFY_CLASS_OFFSET_NODIE(UPS3RichPresenceData,PS3RichPresenceData,SPLevel8)
VERIFY_CLASS_OFFSET_NODIE(UPS3RichPresenceData,PS3RichPresenceData,SPLevel9)
VERIFY_CLASS_OFFSET_NODIE(UPS3RichPresenceData,PS3RichPresenceData,SPLevel10)
VERIFY_CLASS_OFFSET_NODIE(UPS3RichPresenceData,PS3RichPresenceData,SPLevel11)
VERIFY_CLASS_OFFSET_NODIE(UPS3RichPresenceData,PS3RichPresenceData,SPLevel12)
VERIFY_CLASS_OFFSET_NODIE(UPS3RichPresenceData,PS3RichPresenceData,SPLevel13)
VERIFY_CLASS_OFFSET_NODIE(UPS3RichPresenceData,PS3RichPresenceData,SPLevel14)
VERIFY_CLASS_OFFSET_NODIE(UPS3RichPresenceData,PS3RichPresenceData,SPLevel15)
VERIFY_CLASS_OFFSET_NODIE(UPS3RichPresenceData,PS3RichPresenceData,SPLevel16)
VERIFY_CLASS_OFFSET_NODIE(UPS3RichPresenceData,PS3RichPresenceData,SPLevel17)
VERIFY_CLASS_OFFSET_NODIE(UPS3RichPresenceData,PS3RichPresenceData,SPLevel18)
VERIFY_CLASS_OFFSET_NODIE(UPS3RichPresenceData,PS3RichPresenceData,SPLevel19)
VERIFY_CLASS_OFFSET_NODIE(UPS3RichPresenceData,PS3RichPresenceData,SPLevel20)
VERIFY_CLASS_OFFSET_NODIE(UPS3RichPresenceData,PS3RichPresenceData,SPLevel21)
VERIFY_CLASS_OFFSET_NODIE(UPS3RichPresenceData,PS3RichPresenceData,SPLevel22)
VERIFY_CLASS_OFFSET_NODIE(UPS3RichPresenceData,PS3RichPresenceData,SPLevel23)
VERIFY_CLASS_OFFSET_NODIE(UPS3RichPresenceData,PS3RichPresenceData,MPLevel0)
VERIFY_CLASS_OFFSET_NODIE(UPS3RichPresenceData,PS3RichPresenceData,MPLevel1)
VERIFY_CLASS_OFFSET_NODIE(UPS3RichPresenceData,PS3RichPresenceData,MPLevel2)
VERIFY_CLASS_OFFSET_NODIE(UPS3RichPresenceData,PS3RichPresenceData,MPLevel3)
VERIFY_CLASS_OFFSET_NODIE(UPS3RichPresenceData,PS3RichPresenceData,MPLevel4)
VERIFY_CLASS_OFFSET_NODIE(UPS3RichPresenceData,PS3RichPresenceData,MPLevel5)
VERIFY_CLASS_OFFSET_NODIE(UPS3RichPresenceData,PS3RichPresenceData,MPLevel6)
VERIFY_CLASS_OFFSET_NODIE(UPS3RichPresenceData,PS3RichPresenceData,MPLevel7)
VERIFY_CLASS_OFFSET_NODIE(UPS3RichPresenceData,PS3RichPresenceData,MPLevel8)
VERIFY_CLASS_OFFSET_NODIE(UPS3RichPresenceData,PS3RichPresenceData,MPLevel9)
VERIFY_CLASS_OFFSET_NODIE(UPS3RichPresenceData,PS3RichPresenceData,MPLevel10)
VERIFY_CLASS_OFFSET_NODIE(UPS3RichPresenceData,PS3RichPresenceData,MPGameModeBuckeyeMatch)
VERIFY_CLASS_OFFSET_NODIE(UPS3RichPresenceData,PS3RichPresenceData,MPGameModeTeamBuckeyeMatch)
VERIFY_CLASS_OFFSET_NODIE(UPS3RichPresenceData,PS3RichPresenceData,MPGameModeCaptureTheBabe)
VERIFY_CLASS_OFFSET_NODIE(UPS3RichPresenceData,PS3RichPresenceData,MPGameModeHailToTheKing)
VERIFY_CLASS_OFFSET_NODIE(UPS3RichPresenceData,PS3RichPresenceData,PresenceInactive)
VERIFY_CLASS_OFFSET_NODIE(UPS3RichPresenceData,PS3RichPresenceData,PresenceBuckeyeMatch)
VERIFY_CLASS_OFFSET_NODIE(UPS3RichPresenceData,PS3RichPresenceData,PresenceMenu)
VERIFY_CLASS_OFFSET_NODIE(UPS3RichPresenceData,PS3RichPresenceData,PresenceSPGame)
VERIFY_CLASS_OFFSET_NODIE(UPS3RichPresenceData,PS3RichPresenceData,PresenceDigs)
VERIFY_CLASS_OFFSET_NODIE(UPS3RichPresenceData,PS3RichPresenceData,PresenceDLC)
VERIFY_CLASS_SIZE_NODIE(UPS3RichPresenceData)
VERIFY_CLASS_SIZE_NODIE(UOnlineSubsystem)
VERIFY_CLASS_OFFSET_NODIE(UOnlineServerFactory,OnlineServerFactory,SearchConstraint)
VERIFY_CLASS_OFFSET_NODIE(UOnlineServerFactory,OnlineServerFactory,SortState)
VERIFY_CLASS_OFFSET_NODIE(UOnlineServerFactory,OnlineServerFactory,Status)
VERIFY_CLASS_OFFSET_NODIE(UOnlineServerFactory,OnlineServerFactory,Servers)
VERIFY_CLASS_OFFSET_NODIE(UOnlineServerFactory,OnlineServerFactory,Factory)
VERIFY_CLASS_OFFSET_NODIE(UOnlineServerFactory,OnlineServerFactory,MaxFavourites)
VERIFY_CLASS_OFFSET_NODIE(UOnlineServerFactory,OnlineServerFactory,Favourites)
VERIFY_CLASS_SIZE_NODIE(UOnlineServerFactory)
VERIFY_CLASS_OFFSET_NODIE(UOnlineAgent,OnlineAgent,OnlineAgentListeners)
VERIFY_CLASS_OFFSET_NODIE(UOnlineAgent,OnlineAgent,CurrentPlaylist)
VERIFY_CLASS_OFFSET_NODIE(UOnlineAgent,OnlineAgent,CurrentPlaylistMapIndex)
VERIFY_CLASS_OFFSET_NODIE(UOnlineAgent,OnlineAgent,CurrentMapId)
VERIFY_CLASS_OFFSET_NODIE(UOnlineAgent,OnlineAgent,CurrentGameModeId)
VERIFY_CLASS_OFFSET_NODIE(UOnlineAgent,OnlineAgent,CurrentMutatorId)
VERIFY_CLASS_OFFSET_NODIE(UOnlineAgent,OnlineAgent,CurrentMapName)
VERIFY_CLASS_OFFSET_NODIE(UOnlineAgent,OnlineAgent,CurrentGameModeName)
VERIFY_CLASS_OFFSET_NODIE(UOnlineAgent,OnlineAgent,CurrentMutatorName)
VERIFY_CLASS_OFFSET_NODIE(UOnlineAgent,OnlineAgent,CustomMatchString)
VERIFY_CLASS_OFFSET_NODIE(UOnlineAgent,OnlineAgent,AdditionalClientTravelOptions)
VERIFY_CLASS_OFFSET_NODIE(UOnlineAgent,OnlineAgent,AdditionalServerTravelOptions)
VERIFY_CLASS_OFFSET_NODIE(UOnlineAgent,OnlineAgent,LeaderboardEntries)
VERIFY_CLASS_OFFSET_NODIE(UOnlineAgent,OnlineAgent,CurrentPlayerLeaderboardData)
VERIFY_CLASS_OFFSET_NODIE(UOnlineAgent,OnlineAgent,LobbyPlayers)
VERIFY_CLASS_OFFSET_NODIE(UOnlineAgent,OnlineAgent,Quitter)
VERIFY_CLASS_OFFSET_NODIE(UOnlineAgent,OnlineAgent,EORCountTime)
VERIFY_CLASS_SIZE_NODIE(UOnlineAgent)
VERIFY_CLASS_OFFSET_NODIE(USteamDedicatedListener,SteamDedicatedListener,agent)
VERIFY_CLASS_SIZE_NODIE(USteamDedicatedListener)
VERIFY_CLASS_OFFSET_NODIE(UMeshInstance,MeshInstance,UnrealMesh)
VERIFY_CLASS_OFFSET_NODIE(UMeshInstance,MeshInstance,Actor)
VERIFY_CLASS_OFFSET_NODIE(UMeshInstance,MeshInstance,FrameCount)
VERIFY_CLASS_OFFSET_NODIE(UMeshInstance,MeshInstance,SkinMeshInstance)
VERIFY_CLASS_OFFSET_NODIE(UMeshInstance,MeshInstance,AnimInfoArray)
VERIFY_CLASS_OFFSET_NODIE(UMeshInstance,MeshInstance,InstanceData)
VERIFY_CLASS_OFFSET_NODIE(UMeshInstance,MeshInstance,ProjectorList)
VERIFY_CLASS_OFFSET_NODIE(UMeshInstance,MeshInstance,TimeWitholding)
VERIFY_CLASS_SIZE_NODIE(UMeshInstance)
VERIFY_CLASS_OFFSET_NODIE(UPrimitive,Primitive,BoundingBox)
VERIFY_CLASS_SIZE_NODIE(UPrimitive)
VERIFY_CLASS_SIZE_NODIE(UDukeMesh)
VERIFY_CLASS_OFFSET_NODIE(UMesh,Mesh,BonePartMapperClass)
VERIFY_CLASS_OFFSET_NODIE(UMesh,Mesh,KSkeletonName)
VERIFY_CLASS_OFFSET_NODIE(UMesh,Mesh,ConfigName)
VERIFY_CLASS_SIZE_NODIE(UMesh)
VERIFY_CLASS_OFFSET_NODIE(UBonePartMapper,BonePartMapper,PartMapping)
VERIFY_CLASS_OFFSET_NODIE(UBonePartMapper,BonePartMapper,DestroyableBones)
VERIFY_CLASS_OFFSET_NODIE(UBonePartMapper,BonePartMapper,Gibs)
VERIFY_CLASS_OFFSET_NODIE(UBonePartMapper,BonePartMapper,GibEffects)
VERIFY_CLASS_OFFSET_NODIE(UBonePartMapper,BonePartMapper,FrozenGibEffects)
VERIFY_CLASS_OFFSET_NODIE(UBonePartMapper,BonePartMapper,GibBloodyMess)
VERIFY_CLASS_OFFSET_NODIE(UBonePartMapper,BonePartMapper,CenterOfMassBone)
VERIFY_CLASS_OFFSET_NODIE(UBonePartMapper,BonePartMapper,FullyGibbedSoundName)
VERIFY_CLASS_OFFSET_NODIE(UBonePartMapper,BonePartMapper,FullyGibbedFrozenSoundName)
VERIFY_CLASS_OFFSET_NODIE(UBonePartMapper,BonePartMapper,NumLimbsUntilDestructible)
VERIFY_CLASS_SIZE_NODIE(UBonePartMapper)
VERIFY_CLASS_SIZE_NODIE(USkeletonMgr)
VERIFY_CLASS_SIZE_NODIE(USkinMeshMgr)
VERIFY_CLASS_SIZE_NODIE(UAnimationMgr)
VERIFY_CLASS_SIZE_NODIE(AStaticMeshActor)
VERIFY_CLASS_OFFSET_NODIE(UStaticMeshInstance,StaticMeshInstance,CachedMaterials)
VERIFY_CLASS_OFFSET_NODIE(UStaticMeshInstance,StaticMeshInstance,StaticMesh)
VERIFY_CLASS_OFFSET_NODIE(UStaticMeshInstance,StaticMeshInstance,InternalVersion)
VERIFY_CLASS_SIZE_NODIE(UStaticMeshInstance)
VERIFY_CLASS_OFFSET_NODIE(UStaticMesh,StaticMesh,OverrideCollisionTexture)
VERIFY_CLASS_SIZE_NODIE(UStaticMesh)
VERIFY_CLASS_OFFSET_NODIE(ANAVStats,NAVStats,PathStats)
VERIFY_CLASS_SIZE_NODIE(ANAVStats)
VERIFY_CLASS_SIZE_NODIE(ACollisionVolume)
VERIFY_CLASS_OFFSET_NODIE(AVolume,Volume,VolumeColor)
VERIFY_CLASS_OFFSET_NODIE(AVolume,Volume,LocationName)
VERIFY_CLASS_SIZE_NODIE(AVolume)
VERIFY_CLASS_OFFSET_NODIE(ABrush,Brush,CsgOper)
VERIFY_CLASS_OFFSET_NODIE(ABrush,Brush,MainScale)
VERIFY_CLASS_OFFSET_NODIE(ABrush,Brush,PostScale)
VERIFY_CLASS_OFFSET_NODIE(ABrush,Brush,TempScale)
VERIFY_CLASS_OFFSET_NODIE(ABrush,Brush,BrushColor)
VERIFY_CLASS_OFFSET_NODIE(ABrush,Brush,PolyFlags)
VERIFY_CLASS_OFFSET_NODIE(ABrush,Brush,BrushRotation)
VERIFY_CLASS_SIZE_NODIE(ABrush)
VERIFY_CLASS_SIZE_NODIE(ANavVolume_Door)
VERIFY_CLASS_OFFSET_NODIE(ANavVolume,NavVolume,Priority)
VERIFY_CLASS_OFFSET_NODIE(ANavVolume,NavVolume,VolumeType)
VERIFY_CLASS_OFFSET_NODIE(ANavVolume,NavVolume,NavBSPInfo)
VERIFY_CLASS_SIZE_NODIE(ANavVolume)
VERIFY_CLASS_SIZE_NODIE(UUpdateServerCommandlet)
VERIFY_CLASS_SIZE_NODIE(UMasterServerCommandlet)
VERIFY_CLASS_SIZE_NODIE(AXboxLiveQuery)
VERIFY_CLASS_OFFSET_NODIE(AUdpLink,UdpLink,BroadcastAddr)
VERIFY_CLASS_SIZE_NODIE(AUdpLink)
VERIFY_CLASS_OFFSET_NODIE(AInternetLink,InternetLink,LinkMode)
VERIFY_CLASS_OFFSET_NODIE(AInternetLink,InternetLink,ReceiveMode)
VERIFY_CLASS_OFFSET_NODIE(AInternetLink,InternetLink,Socket)
VERIFY_CLASS_OFFSET_NODIE(AInternetLink,InternetLink,Port)
VERIFY_CLASS_OFFSET_NODIE(AInternetLink,InternetLink,RemoteSocket)
VERIFY_CLASS_OFFSET_NODIE(AInternetLink,InternetLink,PrivateResolveInfo)
VERIFY_CLASS_OFFSET_NODIE(AInternetLink,InternetLink,DataPending)
VERIFY_CLASS_SIZE_NODIE(AInternetLink)
VERIFY_CLASS_SIZE_NODIE(AInternetInfo)
VERIFY_CLASS_SIZE_NODIE(AInfo)
VERIFY_CLASS_SIZE_NODIE(AInfoActor)
VERIFY_CLASS_OFFSET_NODIE(AUdpSystemLinkQuery,UdpSystemLinkQuery,Nonce)
VERIFY_CLASS_OFFSET_NODIE(AUdpSystemLinkQuery,UdpSystemLinkQuery,ServerBeaconPort)
VERIFY_CLASS_OFFSET_NODIE(AUdpSystemLinkQuery,UdpSystemLinkQuery,GameList)
VERIFY_CLASS_SIZE_NODIE(AUdpSystemLinkQuery)
VERIFY_CLASS_OFFSET_NODIE(AUdpBeaconSystemLink,UdpBeaconSystemLink,ServerBeaconPort)
VERIFY_CLASS_SIZE_NODIE(AUdpBeaconSystemLink)
VERIFY_CLASS_OFFSET_NODIE(UTcpNetDriver,TcpNetDriver,MaxConnPerIPPerMinute)
VERIFY_CLASS_SIZE_NODIE(UTcpNetDriver)
VERIFY_CLASS_SIZE_NODIE(UTcpipConnection)
VERIFY_CLASS_OFFSET_NODIE(ATcpLink,TcpLink,LinkState)
VERIFY_CLASS_OFFSET_NODIE(ATcpLink,TcpLink,RemoteAddr)
VERIFY_CLASS_OFFSET_NODIE(ATcpLink,TcpLink,AcceptClass)
VERIFY_CLASS_OFFSET_NODIE(ATcpLink,TcpLink,SendFIFO)
VERIFY_CLASS_SIZE_NODIE(ATcpLink)
VERIFY_CLASS_SIZE_NODIE(UWindowsViewport)
VERIFY_CLASS_SIZE_NODIE(UViewport)
VERIFY_CLASS_SIZE_NODIE(UWindowsClient)
VERIFY_CLASS_OFFSET_NODIE(UClient,Client,HDRMode)
VERIFY_CLASS_OFFSET_NODIE(UClient,Client,ShadowMapDetail)
VERIFY_CLASS_OFFSET_NODIE(UClient,Client,TextureDetail)
VERIFY_CLASS_OFFSET_NODIE(UClient,Client,Brightness)
VERIFY_CLASS_OFFSET_NODIE(UClient,Client,FullscreenColorBits)
VERIFY_CLASS_OFFSET_NODIE(UClient,Client,FullscreenRefreshRate)
VERIFY_CLASS_OFFSET_NODIE(UClient,Client,FullscreenViewportY)
VERIFY_CLASS_OFFSET_NODIE(UClient,Client,FullscreenViewportX)
VERIFY_CLASS_OFFSET_NODIE(UClient,Client,WindowedColorBits)
VERIFY_CLASS_OFFSET_NODIE(UClient,Client,WindowedViewportY)
VERIFY_CLASS_OFFSET_NODIE(UClient,Client,WindowedViewportX)
VERIFY_CLASS_SIZE_NODIE(UClient)
VERIFY_CLASS_SIZE_NODIE(UWindowManager)
VERIFY_CLASS_SIZE_NODIE(UPackageMapLevel)
VERIFY_CLASS_SIZE_NODIE(UPackageMap)
VERIFY_CLASS_OFFSET_NODIE(UDemoRecDriver,DemoRecDriver,DemoSpectatorClass)
VERIFY_CLASS_SIZE_NODIE(UDemoRecDriver)
VERIFY_CLASS_SIZE_NODIE(UDemoRecConnection)
VERIFY_CLASS_SIZE_NODIE(UDemoPlayPendingLevel)
VERIFY_CLASS_SIZE_NODIE(UFileChannel)
VERIFY_CLASS_SIZE_NODIE(UChannel)
VERIFY_CLASS_SIZE_NODIE(UActorChannel)
VERIFY_CLASS_SIZE_NODIE(UControlChannel)
VERIFY_CLASS_SIZE_NODIE(UOnlineAgentQualityControl)
VERIFY_CLASS_OFFSET_NODIE(UZoneCubemap,ZoneCubemap,ZoneCubemapIndex)
VERIFY_CLASS_OFFSET_NODIE(UZoneCubemap,ZoneCubemap,DefaultCubemap)
VERIFY_CLASS_SIZE_NODIE(UZoneCubemap)
VERIFY_CLASS_OFFSET_NODIE(UCubemap,Cubemap,Faces)
VERIFY_CLASS_OFFSET_NODIE(UCubemap,Cubemap,ActiveFaces)
VERIFY_CLASS_OFFSET_NODIE(UCubemap,Cubemap,FaceDirty)
VERIFY_CLASS_OFFSET_NODIE(UCubemap,Cubemap,CubemapRenderInterface)
VERIFY_CLASS_OFFSET_NODIE(UCubemap,Cubemap,Padding)
VERIFY_CLASS_SIZE_NODIE(UCubemap)
VERIFY_CLASS_OFFSET_NODIE(UTexture,Texture,BumpMap)
VERIFY_CLASS_OFFSET_NODIE(UTexture,Texture,SpecularMap)
VERIFY_CLASS_OFFSET_NODIE(UTexture,Texture,EmissiveMap)
VERIFY_CLASS_OFFSET_NODIE(UTexture,Texture,NormalMap)
VERIFY_CLASS_OFFSET_NODIE(UTexture,Texture,SpecularScale)
VERIFY_CLASS_OFFSET_NODIE(UTexture,Texture,BumpScale)
VERIFY_CLASS_OFFSET_NODIE(UTexture,Texture,BumpSmoothPasses)
VERIFY_CLASS_OFFSET_NODIE(UTexture,Texture,RT_SpecularExp)
VERIFY_CLASS_OFFSET_NODIE(UTexture,Texture,LODSet)
VERIFY_CLASS_OFFSET_NODIE(UTexture,Texture,XboxLODBiasAdjust)
VERIFY_CLASS_OFFSET_NODIE(UTexture,Texture,PS3LODBiasAdjust)
VERIFY_CLASS_OFFSET_NODIE(UTexture,Texture,AnimNext)
VERIFY_CLASS_OFFSET_NODIE(UTexture,Texture,AnimCurrent)
VERIFY_CLASS_OFFSET_NODIE(UTexture,Texture,PrimeCount)
VERIFY_CLASS_OFFSET_NODIE(UTexture,Texture,PrimeCurrent)
VERIFY_CLASS_OFFSET_NODIE(UTexture,Texture,MinFrameRate)
VERIFY_CLASS_OFFSET_NODIE(UTexture,Texture,MaxFrameRate)
VERIFY_CLASS_OFFSET_NODIE(UTexture,Texture,Accumulator)
VERIFY_CLASS_OFFSET_NODIE(UTexture,Texture,Mips)
VERIFY_CLASS_OFFSET_NODIE(UTexture,Texture,CompMips)
VERIFY_CLASS_OFFSET_NODIE(UTexture,Texture,CompFormat)
VERIFY_CLASS_OFFSET_NODIE(UTexture,Texture,CompressionMode)
VERIFY_CLASS_OFFSET_NODIE(UTexture,Texture,CRC)
VERIFY_CLASS_OFFSET_NODIE(UTexture,Texture,TextureAnimController)
VERIFY_CLASS_OFFSET_NODIE(UTexture,Texture,RenderInterface)
VERIFY_CLASS_OFFSET_NODIE(UTexture,Texture,CompressedInterface)
VERIFY_CLASS_SIZE_NODIE(UTexture)
VERIFY_CLASS_OFFSET_NODIE(UBitmap,Bitmap,Format)
VERIFY_CLASS_OFFSET_NODIE(UBitmap,Bitmap,Palette)
VERIFY_CLASS_OFFSET_NODIE(UBitmap,Bitmap,UBits)
VERIFY_CLASS_OFFSET_NODIE(UBitmap,Bitmap,VBits)
VERIFY_CLASS_OFFSET_NODIE(UBitmap,Bitmap,USize)
VERIFY_CLASS_OFFSET_NODIE(UBitmap,Bitmap,VSize)
VERIFY_CLASS_OFFSET_NODIE(UBitmap,Bitmap,UClamp)
VERIFY_CLASS_OFFSET_NODIE(UBitmap,Bitmap,VClamp)
VERIFY_CLASS_OFFSET_NODIE(UBitmap,Bitmap,UClampMode)
VERIFY_CLASS_OFFSET_NODIE(UBitmap,Bitmap,VClampMode)
VERIFY_CLASS_OFFSET_NODIE(UBitmap,Bitmap,MipZero)
VERIFY_CLASS_OFFSET_NODIE(UBitmap,Bitmap,MaxColor)
VERIFY_CLASS_OFFSET_NODIE(UBitmap,Bitmap,InternalTime)
VERIFY_CLASS_SIZE_NODIE(UBitmap)
VERIFY_CLASS_SIZE_NODIE(URenderedMaterial)
VERIFY_CLASS_OFFSET_NODIE(UMaterialEx,MaterialEx,FallbackMaterial)
VERIFY_CLASS_OFFSET_NODIE(UMaterialEx,MaterialEx,DefaultMaterial)
VERIFY_CLASS_OFFSET_NODIE(UMaterialEx,MaterialEx,MaterialName)
VERIFY_CLASS_OFFSET_NODIE(UMaterialEx,MaterialEx,MaterialClass)
VERIFY_CLASS_SIZE_NODIE(UMaterialEx)
VERIFY_CLASS_OFFSET_NODIE(UPalette,Palette,Colors)
VERIFY_CLASS_SIZE_NODIE(UPalette)
VERIFY_CLASS_SIZE_NODIE(UProceduralTexture)
VERIFY_CLASS_OFFSET_NODIE(ASavedMove,SavedMove,NextMove)
VERIFY_CLASS_OFFSET_NODIE(ASavedMove,SavedMove,PreviousMove)
VERIFY_CLASS_OFFSET_NODIE(ASavedMove,SavedMove,Timestamp)
VERIFY_CLASS_OFFSET_NODIE(ASavedMove,SavedMove,DeltaTime)
VERIFY_CLASS_OFFSET_NODIE(ASavedMove,SavedMove,StartViewRotation)
VERIFY_CLASS_OFFSET_NODIE(ASavedMove,SavedMove,endLocation)
VERIFY_CLASS_OFFSET_NODIE(ASavedMove,SavedMove,WeaponTraceStartOffset)
VERIFY_CLASS_OFFSET_NODIE(ASavedMove,SavedMove,aForward)
VERIFY_CLASS_OFFSET_NODIE(ASavedMove,SavedMove,aStrafe)
VERIFY_CLASS_OFFSET_NODIE(ASavedMove,SavedMove,Physics)
VERIFY_CLASS_OFFSET_NODIE(ASavedMove,SavedMove,DrawScale)
VERIFY_CLASS_OFFSET_NODIE(ASavedMove,SavedMove,PostureState)
VERIFY_CLASS_OFFSET_NODIE(ASavedMove,SavedMove,CollisionRadius)
VERIFY_CLASS_OFFSET_NODIE(ASavedMove,SavedMove,CollisionHeight)
VERIFY_CLASS_OFFSET_NODIE(ASavedMove,SavedMove,StartVelocity)
VERIFY_CLASS_OFFSET_NODIE(ASavedMove,SavedMove,StoredPlayer_aForward)
VERIFY_CLASS_OFFSET_NODIE(ASavedMove,SavedMove,StoredPlayer_aStrafe)
VERIFY_CLASS_OFFSET_NODIE(ASavedMove,SavedMove,StoredPlayerViewRotation)
VERIFY_CLASS_OFFSET_NODIE(ASavedMove,SavedMove,StoredPlayerPhysics)
VERIFY_CLASS_OFFSET_NODIE(ASavedMove,SavedMove,StoredPlayerDrawScale)
VERIFY_CLASS_OFFSET_NODIE(ASavedMove,SavedMove,StoredPlayerPostureState)
VERIFY_CLASS_OFFSET_NODIE(ASavedMove,SavedMove,StoredPlayerCollisionRadius)
VERIFY_CLASS_OFFSET_NODIE(ASavedMove,SavedMove,StoredPlayerCollisionHeight)
VERIFY_CLASS_SIZE_NODIE(ASavedMove)
VERIFY_CLASS_SIZE_NODIE(URender)
VERIFY_CLASS_OFFSET_NODIE(AProjector,Projector,ProjTexture)
VERIFY_CLASS_OFFSET_NODIE(AProjector,Projector,FOV)
VERIFY_CLASS_OFFSET_NODIE(AProjector,Projector,MaxTraceDistance)
VERIFY_CLASS_OFFSET_NODIE(AProjector,Projector,MaxViewDistance)
VERIFY_CLASS_OFFSET_NODIE(AProjector,Projector,FadeOutStart)
VERIFY_CLASS_OFFSET_NODIE(AProjector,Projector,ProjectTag)
VERIFY_CLASS_OFFSET_NODIE(AProjector,Projector,BackFaceThreshold)
VERIFY_CLASS_OFFSET_NODIE(AProjector,Projector,ScaleX)
VERIFY_CLASS_OFFSET_NODIE(AProjector,Projector,ScaleY)
VERIFY_CLASS_OFFSET_NODIE(AProjector,Projector,MinSpawnDistance)
VERIFY_CLASS_OFFSET_NODIE(AProjector,Projector,OverrideNearPlaneDist)
VERIFY_CLASS_OFFSET_NODIE(AProjector,Projector,ProjectorOpacity)
VERIFY_CLASS_OFFSET_NODIE(AProjector,Projector,TurnOnTag)
VERIFY_CLASS_OFFSET_NODIE(AProjector,Projector,TurnOffTag)
VERIFY_CLASS_OFFSET_NODIE(AProjector,Projector,InternalData)
VERIFY_CLASS_OFFSET_NODIE(AProjector,Projector,ExclusiveActor)
VERIFY_CLASS_SIZE_NODIE(AProjector)
VERIFY_CLASS_SIZE_NODIE(UProjectorPrimitive)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,OrthoZoom)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,Player)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,StoredURL)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,StoredTravelType)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,QueuedMesh)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,LastPostNetReceiveShrinkScale)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,bUnDeafenSpeed)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,PreviousPostureStateEx)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,LowerBodyOverrideState)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,ForwardMovementState)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,PreviousForwardMovementState)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,StrafeMovementState)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,PreviousStrafeMovementState)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,VerticalMovementState)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,PreviousVerticalMovementState)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,ForwardMovementStateSlowThreshold)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,ForwardMovementStateFastThreshold)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,StrafeMovementStateSlowThreshold)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,StrafeMovementStateFastThreshold)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,VerticalMovementStateSlowThreshold)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,VerticalMovementStateFastThreshold)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,TargetMoveAlphaX)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,LastMoveRelDir)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,MoveAlpha)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,MoveAlphaX)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,MoveAlphaY)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,MoveAlphaZ)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,MoveAnimTimer)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,LastIdleAnim)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,LastAnimX)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,LastAnimZ)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,WeaponBlendInTime)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,WeaponBlendOutTime)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,AimOffset)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,MinAimOffset)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,MaxAimOffset)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,AirControlEx)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,AccelRateEx)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,LadderControlXYEx)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,LadderControlZEx)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,StoredAirControlEx)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,LastFallingDamageTime)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,MinFallingDamageRepeatTime)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,LightFallingDamageVelocity)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,MediumFallingDamageVelocity)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,FatalFallingDamageVelocity)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,LightFallingDamage)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,MediumFallingDamage)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,HeavyFallingDamage)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,DeferredFallingDamage)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,DeferredFallingDamageType)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,FatalFallingDamageType)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,LandRumble)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,WaterSplatterClass)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,AnimationControllerCacheIndex)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,AnimationControllerCache)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,LastUpperBodyState)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,LastUpperBodyPostureState)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,CalcedViewLocation)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,CalcedViewRotation)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,CurrentMenuCamera)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,MapFloatHeight)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,ViewLockLocation)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,ViewLockActor)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,ViewLockLocationOffset)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,CameraStyle)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,BlurAmount)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,BlurBrightnessScale)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,BloomBrightnessScale)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,MotionBlurIntensity)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,MotionBlurAmount)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,DOF_BlurAmount)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,DOF_FocalDist)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,DOF_FocalRangeMin)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,DOF_FocalRangeMax)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,DOF_WeapDist)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,DOF_WeapDistDelta)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,DOF_CameraActor)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,AutoDOF_FadeTime)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,AutoDOF_PawnFadeTime)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,AutoDOF_LastPawnTraceTime)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,MaxPixelMotionBlurVel)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,BSPPixelMotionBlurFactor)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,WaterBlurFactor)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,FloatingPushUpIntensity)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,HeatVisionBackground)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,ViewTarget)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,ListenTargets)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,ShakeFadeRate)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,CompOldShakes)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,ActiveShakes)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,CurrentShake)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,ActiveRumbles)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,CameraBobState)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,WalkingCameraBob)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,CrouchingCameraBob)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,SprintingCameraBob)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,BobPCT)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,DamageViewKickSoft)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,DamageViewKickHard)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,DamageViewKickHardThreshold)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,MeleeContactShake)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,ExecutionContactShake)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,MeleeContactRumble)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,ExecutionContactRumble)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,LightContactRumbleInfo)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,MediumContactRumbleInfo)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,HeavyContactRumbleInfo)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,EgoCapIncreaseRumbleInfo)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,HeatFogColor)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,NightFogColor)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,ZoneFogOverride)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,VolumeFogOverride)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,LastFogCheckTime)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,LastFogStart)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,LastFogEnd)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,LastFogColor)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,LastFogOpacity)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,CurrentFOV)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,DefaultFOV)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,DefaultFOVShrunk)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,ShowFlags)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,RendMap)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,Misc1)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,Misc2)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,ViewMapper)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,OverlayActor)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,LoadGameType)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,LoadGameNum)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,HelpKey)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,HelpKeyAlt)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,HelpText)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,MyHUD)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,HUDType)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,MultiKillLevel)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,LastKillTime)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,ProgressMessage)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,ProgressColor)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,ProgressTimeOut)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,AccuracyHits)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,AccuracyHitsMax)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,AccuracyShots)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,MatchMessage)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,MatchColor)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,MatchTimeOut)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,StartMatchTime)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,RespawnCountdown)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,QuickSaveString)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,NoPauseMessage)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,ViewingFrom)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,OwnCamera)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,FailedView)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,JoinSpectatorText)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,LeaveSpectatorText)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,LastPlaySound)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,TinnitusLoopSoundInfo)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,TinnitusEndSoundInfo)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,NextMirrorEgoTime)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,aBaseX)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,aBaseY)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,aMouseX)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,aMouseY)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,aForward)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,aTurn)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,aStrafe)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,aUp)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,aLookUp)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,aLeftTrigger)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,aRightTrigger)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,LookUpAnalogInfo)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,TurnAnalogInfo)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,LookUpAnalogAccelWarmup)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,TurnAnalogAccelWarmup)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,AimAssistEnemy)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,AimAssistTimer)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,AimAssistPoint)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,AimAssistAdjust)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,MouseSensitivity)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,MouseAccelDampening)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,MouseSmoothThreshold)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,LookSensitivityH)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,LookSensitivityV)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,PrefabConfigIndex)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,RumbleLeftSpeed)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,RumbleRightSpeed)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,OMPL)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,TravelVehicleTag)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,TravelVehicleVelocity)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,MyAutoAim)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,WeaponPriority)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,UserCrosshairIndex)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,TravelViewRotation)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,TouchingWeaponPickup)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,NotifyUnUsed)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,NotifyGrabUnUsed)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,ThrowTime)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,BladderLevel)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,EgoDepletedHUDEffectMaterial)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,EgoDepletedHUDEffectAmp)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,EgoDepletedHUDEffectFreq)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,EgoDepletedHUDEffectOffset)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,DirectLookHitActor)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,LookHitActor)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,LookHitPawn)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,LookActor)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,LookHitDistance)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,RestartTime)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,VolumeSoundsTimer)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,MaxDrunkLevel)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,DrunkRampUpTime)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,DrunkTime)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,DrunkRecoveryTime)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,DrunkBlurAmount)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,DrunkZoomDuration)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,DrunkZoomPct)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,DrunkRingingSound)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,DrunkRingingSoundVolume)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,DrunkDeafFactorBase)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,DrunkDeafFactorDelta)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,DrunkHiccupTime)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,DrunkHiccupTimeVar)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,DrunkDamageAbsorbPct)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,SteroidDamageAbsorbPct)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,SteroidsDuration)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,SteroidsStartTime)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,DrunkStartTime)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,DrunkEndTime)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,DrunkLevel)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,CigarAttachment)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,DebugSlomo)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,HoloDukeEffectMaterial)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,HoloDukeEffectActors)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,DetonatorRef)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,inputWalk)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,inputEnableMouseLook)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,inputViewSnapLevel)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,inputStrafe)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,inputFreeLook)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,IdleTime)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,IdleWarningTime)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,IdleOldViewRotation)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,IdleViewRotationChangeCount)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,GridYCached2)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,LastMoveViewRotation)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,AnalogInputByte)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,ButtonInputByte1)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,ButtonInputByte2)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,SavedCompressedServerMoveData)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,ServerPendingAdjustment)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,ClientTimeDifference)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,SavedMoveClass)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,SavedMovesHead)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,SavedMovesTail)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,FreeMoves)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,LastGoodMove)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,CurrentTimeStamp)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,ServerLastUpdateTime)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,ServerTimeStamp)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,TimeMargin)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,ClientUpdateTime)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,WeaponStartTraceLocation)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,WeaponStartTraceDirection)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,WeaponSeed)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,DemoViewPitch)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,DemoViewYaw)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,LastDeathLoc)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,LastDeathRot)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,PainDebounceTime)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,PainDelay)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,HealthRecoveryScreenFlash)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,ViewRotationMode)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,DesiredViewRotation)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,StartViewRotation)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,RotateViewLength)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,RotateViewStartTime)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,MinViewPitch)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,MaxViewPitch)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,LastGhostLocation)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,GameReplicationInfo)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,LoginTeam)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,InputHookActor)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,KeyEventHookActor)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,CurrentInputDecoration)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,WatchInfo)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,MyDebugView)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,MaxVoteCount)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,VoteCount)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,CrouchSpeedScaleEx)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,TargetWalkSpeedEx)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,TargetSprintSpeedEx)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,TargetJumpSpeedEx)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,TargetSwimSpeedEx)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,TargetLadderJumpSpeedEx)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,WalkSpeedEx)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,SprintSpeedEx)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,JumpSpeedEx)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,ShrunkenJumpSpeedEx)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,SwimSpeedEx)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,LadderJumpSpeedEx)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,TargetWaterExitJumpSpeedEx)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,WaterExitJumpSpeedEx)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,SprintTotalTime)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,SprintTimer)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,SprintRecoverTime)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,SprintFOVScale)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,SprintDownTime)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,VehiclePOV)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,SizeChangeFOVScale)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,SizeChangeFOVApplyTime)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,SizeChangeFOVRemoveTime)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,SizeChangeMotionBlur)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,SizeChangeMotionBlurTime)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,SavedGameTimeSeconds)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,LoadGameTimeSeconds)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,CheckpointTravelActors)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,LoginPlayerStart)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,LoadScreenAmbience)
VERIFY_CLASS_OFFSET_NODIE(APlayerPawn,PlayerPawn,NavigateSoundInfo)
VERIFY_CLASS_SIZE_NODIE(APlayerPawn)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,CurrentShrinkScale)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,BloatState)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,ExpandAmount)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,ExpandTimeWarp)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,BloatStartTime)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,ExpandRate)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,UnderwaterThrowVelocityAdjust)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,PickupOverride)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,PickupKImpulseMagnitude)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,PostureStateEx)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,Team)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,EnemySpottedDialog)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,ConfirmKillDialog)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,HealthRecoveryState)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,EgoRecoveryState)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,FrozenState)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,CarriedActorMountType)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,FootstepCategory)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,FootprintType)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,Gender)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,TurnType)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,NextPawn)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,Faction)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,InventoryPhysicsItem)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,PhysicsController)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,PhysicsAirCloudSensor)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,PhysicsSimpleCollision)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,SlopeMinimumDotEx)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,SteepSlopeStrengthScaleEx)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,GameplayDesiredPhysicsVelocity)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,InventoryListHead)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,Base)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,Enemy)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,FieldOfView)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,BaseTraceHeight)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,PawnRotationRate)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,InitialSpeed)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,FallingTime)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,FluidFrictionScale)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,EgoThisFrame)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,SteroidHUDEffectMaterial)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,SteroidHUDEffectMaterial2)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,InvincibilityHUDEffectMaterial)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,SteroidsMeleeDamageMultiplier)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,SteroidsFakeExplosionMagnitude)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,Ego)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,EgoCap)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,SteroidEgoCap)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,SteroidEgoCapPct)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,SlomoKillRampInTime)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,SlomoKillRampOutTime)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,SlomoKillLength)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,SlomoKillSpeed)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,SlomoKillStart)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,SlomoKillEnd)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,EyeBone)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,BodyBone)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,LockOnBone)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,DialogGate)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,KillSoundRandomChance)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,CustomKillSoundName)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,CustomKillSoundChance)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,CanRespawnTime)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,ShrinkScale)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,TargetCollisionRadius)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,TargetCollisionHeight)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,TargetMaxStepHeightEx)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,TargetMass)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,CrouchTransitionTime)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,StandingCollisionRadius)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,StandingCollisionHeight)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,StandingMaxStepHeightEx)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,CrouchingCollisionRadius)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,CrouchingCollisionHeight)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,CrouchingMaxStepHeightEx)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,TargetUseDistance)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,TargetShrunkUseDistance)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,CollisionInterpolationTimer)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,CollisionInterpolationDuration)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,CollisionInterpolationStartRadius)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,CollisionInterpolationDestinationRadius)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,CollisionInterpolationStartHeight)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,CollisionInterpolationDestinationHeight)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,CollisionInterpolationStartStepHeight)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,CollisionInterpolationDestinationStepHeight)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,HealthRecoveryWaitForRechargeTime)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,HealthRecoveryRate)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,HealthDangerDeafenFactor)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,HealthDangerEffectRampTime)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,HealthDangerMotionBlurFactor)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,HealthDangerBlurFactor)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,HealthDangerBlurBrightnessFactor)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,HealthDangerBloomFactor)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,EgoRecoveryWaitForRechargeTime)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,EgoRecoveryRate)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,Spree)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,WeaponSpree)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,LastKillDamageType)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,StartInventorySize)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,Weapon)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,WeaponChangeNotify)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,NoWeaponCrossHairIndex)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,SelectedItem)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,UseDistance)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,MeleeDamageMultiplier)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,TraceFireDamageMultiplier)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,PrimaryWeapon1)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,PrimaryWeapon2)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,PrimaryWeapon3)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,PrimaryWeapon4)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,WeaponSelectStartTime)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,WeaponSelectSelectedWeapon)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,WeaponSelectActivateTime)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,ActiveHoloDuke)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,PickupMountBone)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,CorpseType)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,MyCorpse)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,PreviousWeapon)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,PendingWeapon)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,PreviousWeaponForQuickSwitch)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,LastPainSound)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,DamageScaling)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,ExplosiveArea)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,DamageAbsorbers)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,AnimationControllerServer)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,LastYawMoveDirection)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,PercentageMoved)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,SizeChangeTime)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,ShrinkSound)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,ExpandSound)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,ShrinkingMaterial)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,SizeChangeRelativeDrawscale)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,SizeChangeTargetRelativeDrawscale)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,FrozenStateChangeTime)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,FreezeTime)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,UnFreezeTime)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,FreezingSound)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,ThawingSound)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,ExpandingStartTime)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,ExpandingAlpha)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,ExpandingBoneName)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,PissEffectClass)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,PissEffect)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,PissEffectBoneName)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,DrainedLockoutTime)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,MaxStepHeightEx)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,GroundSpeed)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,AirSpeed)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,WalkSpeedScale)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,DuckSpeedScale)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,MaxStepHeight)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,AirControl)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,MoveTimer)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,DestinationTarget)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,BodyTarget)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,LookTarget)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,AimTarget)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,DesiredSpeed)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,MaxDesiredSpeed)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,LastWalkMaterial)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,HeadVolume)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,FootVolume)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,LadderVolume)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,DeferredRotation)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,ChokingDamage)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,SwimSoundTime)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,SwimSounds)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,RemainingAir)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,ChokeHurtRate)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,HoldBreathTime)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,BreathDrainRate)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,BreathRechargeRate)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,ChokeHurtDamage)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,ChokeGaspMinorPercentage)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,ChokeGaspMajorPercentage)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,BreathPhysicsVolume)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,BreathZoneInfo)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,PathInfo)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,CarriedActorThrowCurve)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,CarriedActorDropResolution)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,CarriedActorDropAngles)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,CarriedActorThrowAngles)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,CarriedActorPositionBuffer)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,CarriedActorRightHandAdjust)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,CarriedActorLeftHandAdjust)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,CarriedActorMountMeshItem)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,LastThrownActorDelay)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,CarriedActor)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,CarriedActorMountPose)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,LastThrownActor)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,LastThrownClearTime)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,HandFocusActor)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,HandFocusActorClass)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,LastQuickAction)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,MinHitWall)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,PlayerReplicationInfo)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,PlayerReplicationInfoClass)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,MenuName)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,OldMessageTime)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,LastReplicatedLocation)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,LandedVelocityThreshold)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,FootBones)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,FootprintSpecialLength)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,FootprintSpecialTime)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,CurrentMaterialOverride)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,FootstepTraceLength)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,VoiceType)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,ExitSplashSoundName)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,BigSplashSoundName)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,LittleSplashSoundName)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,SwimStrokeSoundName)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,ExitSplash)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,BigSplash)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,LittleSplash)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,SplashTime)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,ViewRotation)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,PreviousViewRotation)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,ViewRotationInt)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,FovAngle)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,CameraMount)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,FinishAnimSequences)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,SavedDisplayPropPrePivot)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,SavedDisplayPropPostPivot)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,InteractiveDecoration)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,LipSyncSoundSource)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,LipSyncInfoClass)
VERIFY_CLASS_OFFSET_NODIE(APawn,Pawn,LipSyncPrevPose)
VERIFY_CLASS_SIZE_NODIE(APawn)
VERIFY_CLASS_OFFSET_NODIE(AInteractiveActor,InteractiveActor,ChallengeTag)
VERIFY_CLASS_OFFSET_NODIE(AInteractiveActor,InteractiveActor,ShowComponentEvent)
VERIFY_CLASS_OFFSET_NODIE(AInteractiveActor,InteractiveActor,HideComponentEvent)
VERIFY_CLASS_OFFSET_NODIE(AInteractiveActor,InteractiveActor,ProximityDistance)
VERIFY_CLASS_OFFSET_NODIE(AInteractiveActor,InteractiveActor,GlowDistance)
VERIFY_CLASS_OFFSET_NODIE(AInteractiveActor,InteractiveActor,ChallengeTurnOnGlowTag)
VERIFY_CLASS_OFFSET_NODIE(AInteractiveActor,InteractiveActor,ChallengeTurnOffGlowTag)
VERIFY_CLASS_OFFSET_NODIE(AInteractiveActor,InteractiveActor,ShrunkUseStyle)
VERIFY_CLASS_OFFSET_NODIE(AInteractiveActor,InteractiveActor,ShrunkGrabStyle)
VERIFY_CLASS_OFFSET_NODIE(AInteractiveActor,InteractiveActor,ThrowPhysics)
VERIFY_CLASS_OFFSET_NODIE(AInteractiveActor,InteractiveActor,PostTKPhysics)
VERIFY_CLASS_OFFSET_NODIE(AInteractiveActor,InteractiveActor,UsePhrase)
VERIFY_CLASS_OFFSET_NODIE(AInteractiveActor,InteractiveActor,GrabUsePhrase)
VERIFY_CLASS_OFFSET_NODIE(AInteractiveActor,InteractiveActor,GrabUseCombinePhrase)
VERIFY_CLASS_OFFSET_NODIE(AInteractiveActor,InteractiveActor,IconGrab)
VERIFY_CLASS_OFFSET_NODIE(AInteractiveActor,InteractiveActor,IconUse)
VERIFY_CLASS_OFFSET_NODIE(AInteractiveActor,InteractiveActor,UsePostureSuccess)
VERIFY_CLASS_OFFSET_NODIE(AInteractiveActor,InteractiveActor,UsePostureFailure)
VERIFY_CLASS_OFFSET_NODIE(AInteractiveActor,InteractiveActor,UsePhysicsSuccess)
VERIFY_CLASS_OFFSET_NODIE(AInteractiveActor,InteractiveActor,UsePhysicsFailure)
VERIFY_CLASS_OFFSET_NODIE(AInteractiveActor,InteractiveActor,UseAngleThreshold)
VERIFY_CLASS_OFFSET_NODIE(AInteractiveActor,InteractiveActor,EndViewingAngleMinDiff)
VERIFY_CLASS_OFFSET_NODIE(AInteractiveActor,InteractiveActor,CarriedBy)
VERIFY_CLASS_OFFSET_NODIE(AInteractiveActor,InteractiveActor,GrabInfo)
VERIFY_CLASS_OFFSET_NODIE(AInteractiveActor,InteractiveActor,ThrowForce)
VERIFY_CLASS_OFFSET_NODIE(AInteractiveActor,InteractiveActor,ThrowBone)
VERIFY_CLASS_OFFSET_NODIE(AInteractiveActor,InteractiveActor,ThrowBaseRotation)
VERIFY_CLASS_OFFSET_NODIE(AInteractiveActor,InteractiveActor,ThrowBaseRotationVariance)
VERIFY_CLASS_OFFSET_NODIE(AInteractiveActor,InteractiveActor,ThrowDropBaseRotation)
VERIFY_CLASS_OFFSET_NODIE(AInteractiveActor,InteractiveActor,ThrowForceScale)
VERIFY_CLASS_OFFSET_NODIE(AInteractiveActor,InteractiveActor,ThrowForceScaleAI)
VERIFY_CLASS_OFFSET_NODIE(AInteractiveActor,InteractiveActor,TelekinesisChargeClassName)
VERIFY_CLASS_OFFSET_NODIE(AInteractiveActor,InteractiveActor,TelekinesisBeamSystemClassName)
VERIFY_CLASS_OFFSET_NODIE(AInteractiveActor,InteractiveActor,TelekinesisAngularVel)
VERIFY_CLASS_OFFSET_NODIE(AInteractiveActor,InteractiveActor,TelekinesisThrowVel)
VERIFY_CLASS_OFFSET_NODIE(AInteractiveActor,InteractiveActor,TelekinesisCharge)
VERIFY_CLASS_OFFSET_NODIE(AInteractiveActor,InteractiveActor,TelekinesisBeamSystem)
VERIFY_CLASS_OFFSET_NODIE(AInteractiveActor,InteractiveActor,MicrowaveInfo)
VERIFY_CLASS_OFFSET_NODIE(AInteractiveActor,InteractiveActor,ExitWoundInfo)
VERIFY_CLASS_OFFSET_NODIE(AInteractiveActor,InteractiveActor,VendOwner)
VERIFY_CLASS_OFFSET_NODIE(AInteractiveActor,InteractiveActor,VendInfo)
VERIFY_CLASS_OFFSET_NODIE(AInteractiveActor,InteractiveActor,ShieldClass)
VERIFY_CLASS_OFFSET_NODIE(AInteractiveActor,InteractiveActor,ShieldLifetime)
VERIFY_CLASS_OFFSET_NODIE(AInteractiveActor,InteractiveActor,ShieldScaleFactor)
VERIFY_CLASS_OFFSET_NODIE(AInteractiveActor,InteractiveActor,ShieldTex)
VERIFY_CLASS_OFFSET_NODIE(AInteractiveActor,InteractiveActor,ForceEMPTag)
VERIFY_CLASS_OFFSET_NODIE(AInteractiveActor,InteractiveActor,ForceUnEMPTag)
VERIFY_CLASS_OFFSET_NODIE(AInteractiveActor,InteractiveActor,ForcedEMPDisableTime)
VERIFY_CLASS_OFFSET_NODIE(AInteractiveActor,InteractiveActor,EMPDisableTime)
VERIFY_CLASS_OFFSET_NODIE(AInteractiveActor,InteractiveActor,ShieldActor)
VERIFY_CLASS_OFFSET_NODIE(AInteractiveActor,InteractiveActor,LastEMPTime)
VERIFY_CLASS_OFFSET_NODIE(AInteractiveActor,InteractiveActor,DamageAbsorbAmount)
VERIFY_CLASS_OFFSET_NODIE(AInteractiveActor,InteractiveActor,DamageAbsorbPct)
VERIFY_CLASS_OFFSET_NODIE(AInteractiveActor,InteractiveActor,AvoidRange)
VERIFY_CLASS_OFFSET_NODIE(AInteractiveActor,InteractiveActor,StartAnimSequence)
VERIFY_CLASS_OFFSET_NODIE(AInteractiveActor,InteractiveActor,StartAnimFrame)
VERIFY_CLASS_SIZE_NODIE(AInteractiveActor)
VERIFY_CLASS_OFFSET_NODIE(ULipSyncInfo,LipSyncInfo,NeutralPose)
VERIFY_CLASS_OFFSET_NODIE(ULipSyncInfo,LipSyncInfo,PhoneRegions)
VERIFY_CLASS_SIZE_NODIE(ULipSyncInfo)
VERIFY_CLASS_SIZE_NODIE(UModel)
VERIFY_CLASS_SIZE_NODIE(ULevel)
VERIFY_CLASS_SIZE_NODIE(ULevelBase)
VERIFY_CLASS_SIZE_NODIE(UInput)
VERIFY_CLASS_OFFSET_NODIE(UGameEngine,GameEngine,ServerPackages)
VERIFY_CLASS_OFFSET_NODIE(UGameEngine,GameEngine,ServerActors)
VERIFY_CLASS_SIZE_NODIE(UGameEngine)
VERIFY_CLASS_SIZE_NODIE(UPolys)
VERIFY_CLASS_SIZE_NODIE(UFontTrueType)
VERIFY_CLASS_SIZE_NODIE(UFont)
VERIFY_CLASS_SIZE_NODIE(UGlobalTempObjects)
VERIFY_CLASS_SIZE_NODIE(UServerCommandlet)
VERIFY_CLASS_OFFSET_NODIE(URenderDevice,RenderDevice,DescFlags)
VERIFY_CLASS_OFFSET_NODIE(URenderDevice,RenderDevice,Description)
VERIFY_CLASS_SIZE_NODIE(URenderDevice)
VERIFY_CLASS_SIZE_NODIE(UConvexVolume)
VERIFY_CLASS_OFFSET_NODIE(UConsole,Console,vtblOut)
VERIFY_CLASS_OFFSET_NODIE(UConsole,Console,iDialogBoxID)
VERIFY_CLASS_OFFSET_NODIE(UConsole,Console,iDialogBoxResult)
VERIFY_CLASS_OFFSET_NODIE(UConsole,Console,Viewport)
VERIFY_CLASS_OFFSET_NODIE(UConsole,Console,HistoryTop)
VERIFY_CLASS_OFFSET_NODIE(UConsole,Console,HistoryBot)
VERIFY_CLASS_OFFSET_NODIE(UConsole,Console,HistoryCur)
VERIFY_CLASS_OFFSET_NODIE(UConsole,Console,BackspaceBuffer)
VERIFY_CLASS_OFFSET_NODIE(UConsole,Console,TypedStr)
VERIFY_CLASS_OFFSET_NODIE(UConsole,Console,History)
VERIFY_CLASS_OFFSET_NODIE(UConsole,Console,Scrollback)
VERIFY_CLASS_OFFSET_NODIE(UConsole,Console,numLines)
VERIFY_CLASS_OFFSET_NODIE(UConsole,Console,TopLine)
VERIFY_CLASS_OFFSET_NODIE(UConsole,Console,TextLines)
VERIFY_CLASS_OFFSET_NODIE(UConsole,Console,MsgTime)
VERIFY_CLASS_OFFSET_NODIE(UConsole,Console,MsgTickTime)
VERIFY_CLASS_OFFSET_NODIE(UConsole,Console,MsgText)
VERIFY_CLASS_OFFSET_NODIE(UConsole,Console,MsgType)
VERIFY_CLASS_OFFSET_NODIE(UConsole,Console,MsgTick)
VERIFY_CLASS_OFFSET_NODIE(UConsole,Console,BorderSize)
VERIFY_CLASS_OFFSET_NODIE(UConsole,Console,ConsoleLines)
VERIFY_CLASS_OFFSET_NODIE(UConsole,Console,BorderLines)
VERIFY_CLASS_OFFSET_NODIE(UConsole,Console,BorderPixels)
VERIFY_CLASS_OFFSET_NODIE(UConsole,Console,ConsolePos)
VERIFY_CLASS_OFFSET_NODIE(UConsole,Console,ConsoleDest)
VERIFY_CLASS_OFFSET_NODIE(UConsole,Console,FrameX)
VERIFY_CLASS_OFFSET_NODIE(UConsole,Console,FrameY)
VERIFY_CLASS_OFFSET_NODIE(UConsole,Console,ConBackground)
VERIFY_CLASS_OFFSET_NODIE(UConsole,Console,Border)
VERIFY_CLASS_OFFSET_NODIE(UConsole,Console,TypingCursorPos)
VERIFY_CLASS_OFFSET_NODIE(UConsole,Console,SelectionPos)
VERIFY_CLASS_OFFSET_NODIE(UConsole,Console,MouseBitmap)
VERIFY_CLASS_OFFSET_NODIE(UConsole,Console,MouseX)
VERIFY_CLASS_OFFSET_NODIE(UConsole,Console,MouseY)
VERIFY_CLASS_OFFSET_NODIE(UConsole,Console,StartTime)
VERIFY_CLASS_OFFSET_NODIE(UConsole,Console,ExtraTime)
VERIFY_CLASS_OFFSET_NODIE(UConsole,Console,LastFrameTime)
VERIFY_CLASS_OFFSET_NODIE(UConsole,Console,LastSecondStartTime)
VERIFY_CLASS_OFFSET_NODIE(UConsole,Console,FrameCount)
VERIFY_CLASS_OFFSET_NODIE(UConsole,Console,LastSecondFrameCount)
VERIFY_CLASS_OFFSET_NODIE(UConsole,Console,MinFPS)
VERIFY_CLASS_OFFSET_NODIE(UConsole,Console,MaxFPS)
VERIFY_CLASS_OFFSET_NODIE(UConsole,Console,LastSecFPS)
VERIFY_CLASS_OFFSET_NODIE(UConsole,Console,RestartTime)
VERIFY_CLASS_OFFSET_NODIE(UConsole,Console,MapperTimer)
VERIFY_CLASS_OFFSET_NODIE(UConsole,Console,LoadingMessage)
VERIFY_CLASS_OFFSET_NODIE(UConsole,Console,SavingMessage)
VERIFY_CLASS_OFFSET_NODIE(UConsole,Console,ConnectingMessage)
VERIFY_CLASS_OFFSET_NODIE(UConsole,Console,PausedMessage)
VERIFY_CLASS_OFFSET_NODIE(UConsole,Console,PrecachingMessage)
VERIFY_CLASS_OFFSET_NODIE(UConsole,Console,FrameRateText)
VERIFY_CLASS_OFFSET_NODIE(UConsole,Console,AvgText)
VERIFY_CLASS_OFFSET_NODIE(UConsole,Console,LastSecText)
VERIFY_CLASS_OFFSET_NODIE(UConsole,Console,MinText)
VERIFY_CLASS_OFFSET_NODIE(UConsole,Console,MaxText)
VERIFY_CLASS_OFFSET_NODIE(UConsole,Console,FPSText)
VERIFY_CLASS_OFFSET_NODIE(UConsole,Console,SecondsText)
VERIFY_CLASS_OFFSET_NODIE(UConsole,Console,FramesText)
VERIFY_CLASS_OFFSET_NODIE(UConsole,Console,LoadingScreenShot)
VERIFY_CLASS_OFFSET_NODIE(UConsole,Console,LoadingMapName)
VERIFY_CLASS_OFFSET_NODIE(UConsole,Console,ProgressTimeOut)
VERIFY_CLASS_OFFSET_NODIE(UConsole,Console,DeferredConsoleMessage)
VERIFY_CLASS_SIZE_NODIE(UConsole)
VERIFY_CLASS_OFFSET_NODIE(UCanvas,Canvas,Font)
VERIFY_CLASS_OFFSET_NODIE(UCanvas,Canvas,SpaceX)
VERIFY_CLASS_OFFSET_NODIE(UCanvas,Canvas,SpaceY)
VERIFY_CLASS_OFFSET_NODIE(UCanvas,Canvas,OrgX)
VERIFY_CLASS_OFFSET_NODIE(UCanvas,Canvas,OrgY)
VERIFY_CLASS_OFFSET_NODIE(UCanvas,Canvas,ClipX)
VERIFY_CLASS_OFFSET_NODIE(UCanvas,Canvas,ClipY)
VERIFY_CLASS_OFFSET_NODIE(UCanvas,Canvas,CurX)
VERIFY_CLASS_OFFSET_NODIE(UCanvas,Canvas,CurY)
VERIFY_CLASS_OFFSET_NODIE(UCanvas,Canvas,Z)
VERIFY_CLASS_OFFSET_NODIE(UCanvas,Canvas,Style)
VERIFY_CLASS_OFFSET_NODIE(UCanvas,Canvas,CurYL)
VERIFY_CLASS_OFFSET_NODIE(UCanvas,Canvas,DrawColor)
VERIFY_CLASS_OFFSET_NODIE(UCanvas,Canvas,SizeX)
VERIFY_CLASS_OFFSET_NODIE(UCanvas,Canvas,SizeY)
VERIFY_CLASS_OFFSET_NODIE(UCanvas,Canvas,FixedX)
VERIFY_CLASS_OFFSET_NODIE(UCanvas,Canvas,FixedY)
VERIFY_CLASS_OFFSET_NODIE(UCanvas,Canvas,FixedScale)
VERIFY_CLASS_OFFSET_NODIE(UCanvas,Canvas,SmallFont)
VERIFY_CLASS_OFFSET_NODIE(UCanvas,Canvas,MedFont)
VERIFY_CLASS_OFFSET_NODIE(UCanvas,Canvas,LargeFont)
VERIFY_CLASS_OFFSET_NODIE(UCanvas,Canvas,HUDFont)
VERIFY_CLASS_OFFSET_NODIE(UCanvas,Canvas,HUDFontSmall)
VERIFY_CLASS_OFFSET_NODIE(UCanvas,Canvas,BlockFont)
VERIFY_CLASS_OFFSET_NODIE(UCanvas,Canvas,BlockFontSmall)
VERIFY_CLASS_OFFSET_NODIE(UCanvas,Canvas,TallFont)
VERIFY_CLASS_OFFSET_NODIE(UCanvas,Canvas,Viewport)
VERIFY_CLASS_OFFSET_NODIE(UCanvas,Canvas,Frame)
VERIFY_CLASS_OFFSET_NODIE(UCanvas,Canvas,Render)
VERIFY_CLASS_OFFSET_NODIE(UCanvas,Canvas,BitmapFonts)
VERIFY_CLASS_OFFSET_NODIE(UCanvas,Canvas,TrueTypeFonts)
VERIFY_CLASS_OFFSET_NODIE(UCanvas,Canvas,FontBase)
VERIFY_CLASS_SIZE_NODIE(UCanvas)
VERIFY_CLASS_SIZE_NODIE(UAudioSubsystem)
VERIFY_CLASS_SIZE_NODIE(UMusic)
VERIFY_CLASS_SIZE_NODIE(UVoiceSound)
VERIFY_CLASS_SIZE_NODIE(USound)
VERIFY_CLASS_OFFSET_NODIE(ACorpse_LimbCap,Corpse_LimbCap,LimbMountOnSpawn)
VERIFY_CLASS_SIZE_NODIE(ACorpse_LimbCap)
VERIFY_CLASS_OFFSET_NODIE(ACorpseBase,CorpseBase,RemoveCheckTime)
VERIFY_CLASS_OFFSET_NODIE(ACorpseBase,CorpseBase,BoneDamageThreshold)
VERIFY_CLASS_OFFSET_NODIE(ACorpseBase,CorpseBase,FrozenBoneDamageThreshold)
VERIFY_CLASS_OFFSET_NODIE(ACorpseBase,CorpseBase,BoneConstraints)
VERIFY_CLASS_OFFSET_NODIE(ACorpseBase,CorpseBase,GibThreshold)
VERIFY_CLASS_OFFSET_NODIE(ACorpseBase,CorpseBase,FrozenGibThreshold)
VERIFY_CLASS_OFFSET_NODIE(ACorpseBase,CorpseBase,FrozenSolidThreshold)
VERIFY_CLASS_OFFSET_NODIE(ACorpseBase,CorpseBase,ThawJointsThreshold)
VERIFY_CLASS_OFFSET_NODIE(ACorpseBase,CorpseBase,GibMaxDistance)
VERIFY_CLASS_OFFSET_NODIE(ACorpseBase,CorpseBase,LimbEgoBoost)
VERIFY_CLASS_OFFSET_NODIE(ACorpseBase,CorpseBase,GibsEgoBoost)
VERIFY_CLASS_OFFSET_NODIE(ACorpseBase,CorpseBase,MaxGibsPerFrame)
VERIFY_CLASS_OFFSET_NODIE(ACorpseBase,CorpseBase,MaxLimbsPerFrame)
VERIFY_CLASS_OFFSET_NODIE(ACorpseBase,CorpseBase,NumberOfLimbsGibbed)
VERIFY_CLASS_OFFSET_NODIE(ACorpseBase,CorpseBase,StartupDestroyedBones)
VERIFY_CLASS_OFFSET_NODIE(ACorpseBase,CorpseBase,FullyGibbedLinearVelocity)
VERIFY_CLASS_OFFSET_NODIE(ACorpseBase,CorpseBase,FullyGibbedAngularVelocityVariance)
VERIFY_CLASS_OFFSET_NODIE(ACorpseBase,CorpseBase,SavedDamageInstigator)
VERIFY_CLASS_OFFSET_NODIE(ACorpseBase,CorpseBase,SavedDamageOrigin)
VERIFY_CLASS_OFFSET_NODIE(ACorpseBase,CorpseBase,SavedDamageRadius)
VERIFY_CLASS_OFFSET_NODIE(ACorpseBase,CorpseBase,SavedDamageFalloffStart)
VERIFY_CLASS_OFFSET_NODIE(ACorpseBase,CorpseBase,SavedDamageType)
VERIFY_CLASS_OFFSET_NODIE(ACorpseBase,CorpseBase,SavedRelativeScale)
VERIFY_CLASS_OFFSET_NODIE(ACorpseBase,CorpseBase,LimbCaps)
VERIFY_CLASS_OFFSET_NODIE(ACorpseBase,CorpseBase,DestroyedBones)
VERIFY_CLASS_OFFSET_NODIE(ACorpseBase,CorpseBase,SpawnedLimbs)
VERIFY_CLASS_OFFSET_NODIE(ACorpseBase,CorpseBase,BloodScreenSplatterClass)
VERIFY_CLASS_OFFSET_NODIE(ACorpseBase,CorpseBase,FrozenPercent)
VERIFY_CLASS_OFFSET_NODIE(ACorpseBase,CorpseBase,TargetFrozenPercent)
VERIFY_CLASS_OFFSET_NODIE(ACorpseBase,CorpseBase,DefaultFriction)
VERIFY_CLASS_OFFSET_NODIE(ACorpseBase,CorpseBase,FrozenFriction)
VERIFY_CLASS_OFFSET_NODIE(ACorpseBase,CorpseBase,FreezeDuration)
VERIFY_CLASS_OFFSET_NODIE(ACorpseBase,CorpseBase,ThawDuration)
VERIFY_CLASS_OFFSET_NODIE(ACorpseBase,CorpseBase,OwnerPawn)
VERIFY_CLASS_OFFSET_NODIE(ACorpseBase,CorpseBase,FrozenPhysicsSoundOverrides)
VERIFY_CLASS_OFFSET_NODIE(ACorpseBase,CorpseBase,ClearMaterial)
VERIFY_CLASS_OFFSET_NODIE(ACorpseBase,CorpseBase,MaxGibScaleFactor)
VERIFY_CLASS_OFFSET_NODIE(ACorpseBase,CorpseBase,MinDist)
VERIFY_CLASS_OFFSET_NODIE(ACorpseBase,CorpseBase,MaxDist)
VERIFY_CLASS_OFFSET_NODIE(ACorpseBase,CorpseBase,TotalMaxGibsPerFrame)
VERIFY_CLASS_OFFSET_NODIE(ACorpseBase,CorpseBase,LowGoreTotalMaxGibsPerFrame)
VERIFY_CLASS_OFFSET_NODIE(ACorpseBase,CorpseBase,NumGibsInFrame)
VERIFY_CLASS_OFFSET_NODIE(ACorpseBase,CorpseBase,ImpulseMag)
VERIFY_CLASS_OFFSET_NODIE(ACorpseBase,CorpseBase,Spawner)
VERIFY_CLASS_OFFSET_NODIE(ACorpseBase,CorpseBase,MPLimbLinearVelocity)
VERIFY_CLASS_OFFSET_NODIE(ACorpseBase,CorpseBase,MPShirtColor)
VERIFY_CLASS_OFFSET_NODIE(ACorpseBase,CorpseBase,LastSpawnedLimbTime)
VERIFY_CLASS_SIZE_NODIE(ACorpseBase)
VERIFY_CLASS_OFFSET_NODIE(AMenuCamera,MenuCamera,DOF_BlurAmount)
VERIFY_CLASS_OFFSET_NODIE(AMenuCamera,MenuCamera,DOF_FocalDist)
VERIFY_CLASS_OFFSET_NODIE(AMenuCamera,MenuCamera,DOF_FocalRangeMin)
VERIFY_CLASS_OFFSET_NODIE(AMenuCamera,MenuCamera,DOF_FocalRangeMax)
VERIFY_CLASS_OFFSET_NODIE(AMenuCamera,MenuCamera,FovAngle)
VERIFY_CLASS_SIZE_NODIE(AMenuCamera)
VERIFY_CLASS_OFFSET_NODIE(ATriggerHint,TriggerHint,Message)
VERIFY_CLASS_OFFSET_NODIE(ATriggerHint,TriggerHint,MaxDisplayTime)
VERIFY_CLASS_OFFSET_NODIE(ATriggerHint,TriggerHint,InventoryClass)
VERIFY_CLASS_OFFSET_NODIE(ATriggerHint,TriggerHint,SpecialKeys)
VERIFY_CLASS_OFFSET_NODIE(ATriggerHint,TriggerHint,SpecialKeysPressed)
VERIFY_CLASS_OFFSET_NODIE(ATriggerHint,TriggerHint,ForceHintOnEvent)
VERIFY_CLASS_OFFSET_NODIE(ATriggerHint,TriggerHint,ForceHintOffEvent)
VERIFY_CLASS_OFFSET_NODIE(ATriggerHint,TriggerHint,HintCompleteEvent)
VERIFY_CLASS_OFFSET_NODIE(ATriggerHint,TriggerHint,TimeLeft)
VERIFY_CLASS_SIZE_NODIE(ATriggerHint)
VERIFY_CLASS_SIZE_NODIE(ATriggers)
VERIFY_CLASS_OFFSET_NODIE(AMapRefKeeper,MapRefKeeper,RefArray)
VERIFY_CLASS_SIZE_NODIE(AMapRefKeeper)
VERIFY_CLASS_OFFSET_NODIE(AMultiplayerInfo,MultiplayerInfo,StartingEgo)
VERIFY_CLASS_OFFSET_NODIE(AMultiplayerInfo,MultiplayerInfo,StartingHealth)
VERIFY_CLASS_OFFSET_NODIE(AMultiplayerInfo,MultiplayerInfo,MovementSpeed)
VERIFY_CLASS_OFFSET_NODIE(AMultiplayerInfo,MultiplayerInfo,SprintSpeed)
VERIFY_CLASS_OFFSET_NODIE(AMultiplayerInfo,MultiplayerInfo,JumpSpeed)
VERIFY_CLASS_OFFSET_NODIE(AMultiplayerInfo,MultiplayerInfo,InventoryOverride)
VERIFY_CLASS_OFFSET_NODIE(AMultiplayerInfo,MultiplayerInfo,WeaponStayTime)
VERIFY_CLASS_OFFSET_NODIE(AMultiplayerInfo,MultiplayerInfo,Mutators)
VERIFY_CLASS_OFFSET_NODIE(AMultiplayerInfo,MultiplayerInfo,ConsoleCommands)
VERIFY_CLASS_SIZE_NODIE(AMultiplayerInfo)
VERIFY_CLASS_OFFSET_NODIE(AControlRemapperEx,ControlRemapperEx,CoreType)
VERIFY_CLASS_OFFSET_NODIE(AControlRemapperEx,ControlRemapperEx,Actions)
VERIFY_CLASS_OFFSET_NODIE(AControlRemapperEx,ControlRemapperEx,DisabledTickStyle)
VERIFY_CLASS_OFFSET_NODIE(AControlRemapperEx,ControlRemapperEx,MotionMappings)
VERIFY_CLASS_OFFSET_NODIE(AControlRemapperEx,ControlRemapperEx,EventEvents)
VERIFY_CLASS_OFFSET_NODIE(AControlRemapperEx,ControlRemapperEx,DisabledKeyTypes)
VERIFY_CLASS_OFFSET_NODIE(AControlRemapperEx,ControlRemapperEx,InputForwardActors)
VERIFY_CLASS_OFFSET_NODIE(AControlRemapperEx,ControlRemapperEx,NotificationActors)
VERIFY_CLASS_OFFSET_NODIE(AControlRemapperEx,ControlRemapperEx,PlayerMountForceActor)
VERIFY_CLASS_OFFSET_NODIE(AControlRemapperEx,ControlRemapperEx,PlayerMountParentTag)
VERIFY_CLASS_OFFSET_NODIE(AControlRemapperEx,ControlRemapperEx,PlayerLockPrefab)
VERIFY_CLASS_OFFSET_NODIE(AControlRemapperEx,ControlRemapperEx,InterpolationCurrentTime)
VERIFY_CLASS_OFFSET_NODIE(AControlRemapperEx,ControlRemapperEx,InterpForceActor)
VERIFY_CLASS_OFFSET_NODIE(AControlRemapperEx,ControlRemapperEx,InterpLocation)
VERIFY_CLASS_OFFSET_NODIE(AControlRemapperEx,ControlRemapperEx,InterpRotation)
VERIFY_CLASS_OFFSET_NODIE(AControlRemapperEx,ControlRemapperEx,InterpViewRotation)
VERIFY_CLASS_OFFSET_NODIE(AControlRemapperEx,ControlRemapperEx,InterpRelevantActor)
VERIFY_CLASS_OFFSET_NODIE(AControlRemapperEx,ControlRemapperEx,InterpolationRelevantActorTag)
VERIFY_CLASS_OFFSET_NODIE(AControlRemapperEx,ControlRemapperEx,InterpolationInInfo)
VERIFY_CLASS_OFFSET_NODIE(AControlRemapperEx,ControlRemapperEx,InterpolationOutAlphaInfo)
VERIFY_CLASS_OFFSET_NODIE(AControlRemapperEx,ControlRemapperEx,InterpolationOutBetaInfo)
VERIFY_CLASS_OFFSET_NODIE(AControlRemapperEx,ControlRemapperEx,CurrentRemapperState)
VERIFY_CLASS_OFFSET_NODIE(AControlRemapperEx,ControlRemapperEx,CurrentPlayer)
VERIFY_CLASS_OFFSET_NODIE(AControlRemapperEx,ControlRemapperEx,CurrentPawn)
VERIFY_CLASS_OFFSET_NODIE(AControlRemapperEx,ControlRemapperEx,CurrentPawnPhysics)
VERIFY_CLASS_OFFSET_NODIE(AControlRemapperEx,ControlRemapperEx,ViewOffset)
VERIFY_CLASS_OFFSET_NODIE(AControlRemapperEx,ControlRemapperEx,MinViewOffset)
VERIFY_CLASS_OFFSET_NODIE(AControlRemapperEx,ControlRemapperEx,MaxViewOffset)
VERIFY_CLASS_SIZE_NODIE(AControlRemapperEx)
VERIFY_CLASS_OFFSET_NODIE(AAmmoCasing,AmmoCasing,Bounces)
VERIFY_CLASS_SIZE_NODIE(AAmmoCasing)
VERIFY_CLASS_SIZE_NODIE(Adeleteme)
VERIFY_CLASS_SIZE_NODIE(UTraceDamageType)
VERIFY_CLASS_OFFSET_NODIE(UDamageType,DamageType,DamageName)
VERIFY_CLASS_OFFSET_NODIE(UDamageType,DamageType,DeathMessage)
VERIFY_CLASS_OFFSET_NODIE(UDamageType,DamageType,SuicideDeathMessage)
VERIFY_CLASS_OFFSET_NODIE(UDamageType,DamageType,MomentumTransfer)
VERIFY_CLASS_OFFSET_NODIE(UDamageType,DamageType,DamageVibrations)
VERIFY_CLASS_OFFSET_NODIE(UDamageType,DamageType,DamageRumbles)
VERIFY_CLASS_OFFSET_NODIE(UDamageType,DamageType,Icon)
VERIFY_CLASS_OFFSET_NODIE(UDamageType,DamageType,WeaponSpreeMessageType)
VERIFY_CLASS_OFFSET_NODIE(UDamageType,DamageType,WeaponSpreePhrase)
VERIFY_CLASS_OFFSET_NODIE(UDamageType,DamageType,WeaponSpreeSound)
VERIFY_CLASS_OFFSET_NODIE(UDamageType,DamageType,PlayerDamageScale)
VERIFY_CLASS_OFFSET_NODIE(UDamageType,DamageType,SelfDamageScale)
VERIFY_CLASS_OFFSET_NODIE(UDamageType,DamageType,FrameDamageLerp)
VERIFY_CLASS_OFFSET_NODIE(UDamageType,DamageType,BodyPartDamageScaleLerp)
VERIFY_CLASS_OFFSET_NODIE(UDamageType,DamageType,DeathMomentumScale)
VERIFY_CLASS_OFFSET_NODIE(UDamageType,DamageType,DeathLiftScale)
VERIFY_CLASS_OFFSET_NODIE(UDamageType,DamageType,DamageSound)
VERIFY_CLASS_OFFSET_NODIE(UDamageType,DamageType,DamageScreenFlash)
VERIFY_CLASS_OFFSET_NODIE(UDamageType,DamageType,DamageScreenFlashScaleDenominator)
VERIFY_CLASS_OFFSET_NODIE(UDamageType,DamageType,DamageScreenFlashColorMin)
VERIFY_CLASS_OFFSET_NODIE(UDamageType,DamageType,DamageScreenFlashColorMax)
VERIFY_CLASS_OFFSET_NODIE(UDamageType,DamageType,DamageScreenFlashTimeMin)
VERIFY_CLASS_OFFSET_NODIE(UDamageType,DamageType,DamageScreenFlashTimeMax)
VERIFY_CLASS_OFFSET_NODIE(UDamageType,DamageType,DamageScreenFlashTimeMidScale)
VERIFY_CLASS_OFFSET_NODIE(UDamageType,DamageType,DamageIndicatorIcon)
VERIFY_CLASS_OFFSET_NODIE(UDamageType,DamageType,DamageIndicatorColor)
VERIFY_CLASS_OFFSET_NODIE(UDamageType,DamageType,DamageIndicatorLifetime)
VERIFY_CLASS_OFFSET_NODIE(UDamageType,DamageType,DamageIndicatorRadius)
VERIFY_CLASS_OFFSET_NODIE(UDamageType,DamageType,BlurDamageThreshold)
VERIFY_CLASS_OFFSET_NODIE(UDamageType,DamageType,MotionBlurDamageThreshold)
VERIFY_CLASS_OFFSET_NODIE(UDamageType,DamageType,MaterialEffectMappings)
VERIFY_CLASS_OFFSET_NODIE(UDamageType,DamageType,DefaultDamageCategoryEffect)
VERIFY_CLASS_OFFSET_NODIE(UDamageType,DamageType,NearMissChance)
VERIFY_CLASS_OFFSET_NODIE(UDamageType,DamageType,NearMissMaxDistSq)
VERIFY_CLASS_OFFSET_NODIE(UDamageType,DamageType,NearMissClass)
VERIFY_CLASS_OFFSET_NODIE(UDamageType,DamageType,DamageScaleMap)
VERIFY_CLASS_OFFSET_NODIE(UDamageType,DamageType,SteroidsImpulseMultiplier)
VERIFY_CLASS_OFFSET_NODIE(UDamageType,DamageType,SteroidsMeleeZImpulse)
VERIFY_CLASS_OFFSET_NODIE(UDamageType,DamageType,SteroidsDamageMultiplier)
VERIFY_CLASS_SIZE_NODIE(UDamageType)
VERIFY_CLASS_OFFSET_NODIE(UNearMissEffect,NearMissEffect,NearMissSoundInfo)
VERIFY_CLASS_SIZE_NODIE(UNearMissEffect)
VERIFY_CLASS_OFFSET_NODIE(UMaterial,Material,FootprintTypeOverrideTime)
VERIFY_CLASS_OFFSET_NODIE(UMaterial,Material,FootprintTypeOverride)
VERIFY_CLASS_OFFSET_NODIE(UMaterial,Material,FootstepCategoryEffect)
VERIFY_CLASS_OFFSET_NODIE(UMaterial,Material,LandedCategoryEffect)
VERIFY_CLASS_OFFSET_NODIE(UMaterial,Material,PhysicsMaterial)
VERIFY_CLASS_OFFSET_NODIE(UMaterial,Material,Friction)
VERIFY_CLASS_OFFSET_NODIE(UMaterial,Material,Restitution)
VERIFY_CLASS_OFFSET_NODIE(UMaterial,Material,InternalMaterialLevelData)
VERIFY_CLASS_OFFSET_NODIE(UMaterial,Material,InternalMaterialMaterial)
VERIFY_CLASS_OFFSET_NODIE(UMaterial,Material,PenetrateDistance)
VERIFY_CLASS_SIZE_NODIE(UMaterial)
VERIFY_CLASS_SIZE_NODIE(ANavigationPoint)
VERIFY_CLASS_SIZE_NODIE(ALadderVolume)
VERIFY_CLASS_OFFSET_NODIE(AParticleSystemBase,ParticleSystemBase,NonFinalBlendBloomTint)
VERIFY_CLASS_SIZE_NODIE(AParticleSystemBase)
VERIFY_CLASS_OFFSET_NODIE(ABranchingTrigger,BranchingTrigger,FailedEvent)
VERIFY_CLASS_SIZE_NODIE(ABranchingTrigger)
VERIFY_CLASS_OFFSET_NODIE(ATriggerLightEx,TriggerLightEx,eToggleOnStyle)
VERIFY_CLASS_OFFSET_NODIE(ATriggerLightEx,TriggerLightEx,eToggleOffStyle)
VERIFY_CLASS_OFFSET_NODIE(ATriggerLightEx,TriggerLightEx,eForceOffToggleStyle)
VERIFY_CLASS_OFFSET_NODIE(ATriggerLightEx,TriggerLightEx,eForceOffStyle)
VERIFY_CLASS_OFFSET_NODIE(ATriggerLightEx,TriggerLightEx,fStateChangeTime)
VERIFY_CLASS_OFFSET_NODIE(ATriggerLightEx,TriggerLightEx,strToggleOnString)
VERIFY_CLASS_OFFSET_NODIE(ATriggerLightEx,TriggerLightEx,strToggleOffString)
VERIFY_CLASS_OFFSET_NODIE(ATriggerLightEx,TriggerLightEx,strForcedOffString)
VERIFY_CLASS_OFFSET_NODIE(ATriggerLightEx,TriggerLightEx,ForcedOffLightColor)
VERIFY_CLASS_OFFSET_NODIE(ATriggerLightEx,TriggerLightEx,fMinIntensityChangeTime)
VERIFY_CLASS_OFFSET_NODIE(ATriggerLightEx,TriggerLightEx,fMaxIntensityChangeTime)
VERIFY_CLASS_OFFSET_NODIE(ATriggerLightEx,TriggerLightEx,TurnOnTag)
VERIFY_CLASS_OFFSET_NODIE(ATriggerLightEx,TriggerLightEx,TurnOffTag)
VERIFY_CLASS_OFFSET_NODIE(ATriggerLightEx,TriggerLightEx,TurnOffColor)
VERIFY_CLASS_OFFSET_NODIE(ATriggerLightEx,TriggerLightEx,TurnOffStyle)
VERIFY_CLASS_OFFSET_NODIE(ATriggerLightEx,TriggerLightEx,strForceOffTag)
VERIFY_CLASS_OFFSET_NODIE(ATriggerLightEx,TriggerLightEx,fForceOffTransitionTime)
VERIFY_CLASS_OFFSET_NODIE(ATriggerLightEx,TriggerLightEx,fForceOffTime)
VERIFY_CLASS_OFFSET_NODIE(ATriggerLightEx,TriggerLightEx,OriginalColor)
VERIFY_CLASS_OFFSET_NODIE(ATriggerLightEx,TriggerLightEx,OriginalStyle)
VERIFY_CLASS_OFFSET_NODIE(ATriggerLightEx,TriggerLightEx,LightState)
VERIFY_CLASS_OFFSET_NODIE(ATriggerLightEx,TriggerLightEx,StateTimeElapsed)
VERIFY_CLASS_OFFSET_NODIE(ATriggerLightEx,TriggerLightEx,NextIntensityChangeTime)
VERIFY_CLASS_OFFSET_NODIE(ATriggerLightEx,TriggerLightEx,StartStateColor)
VERIFY_CLASS_OFFSET_NODIE(ATriggerLightEx,TriggerLightEx,EndStateColor)
VERIFY_CLASS_OFFSET_NODIE(ATriggerLightEx,TriggerLightEx,ForceOffTimeElapsed)
VERIFY_CLASS_OFFSET_NODIE(ATriggerLightEx,TriggerLightEx,DefaultTickStyle)
VERIFY_CLASS_SIZE_NODIE(ATriggerLightEx)
VERIFY_CLASS_OFFSET_NODIE(ALightEx,LightEx,LightStyle)
VERIFY_CLASS_OFFSET_NODIE(ALightEx,LightEx,LightRadius)
VERIFY_CLASS_OFFSET_NODIE(ALightEx,LightEx,LightIntensity)
VERIFY_CLASS_OFFSET_NODIE(ALightEx,LightEx,LightRadius3D)
VERIFY_CLASS_OFFSET_NODIE(ALightEx,LightEx,LightColor)
VERIFY_CLASS_OFFSET_NODIE(ALightEx,LightEx,LightShadowSourceTag)
VERIFY_CLASS_OFFSET_NODIE(ALightEx,LightEx,LightShadowSource)
VERIFY_CLASS_OFFSET_NODIE(ALightEx,LightEx,LightLastShadowCastLocation)
VERIFY_CLASS_OFFSET_NODIE(ALightEx,LightEx,LightStyleSave)
VERIFY_CLASS_OFFSET_NODIE(ALightEx,LightEx,ShadowOpacity)
VERIFY_CLASS_OFFSET_NODIE(ALightEx,LightEx,LightCubeMap)
VERIFY_CLASS_OFFSET_NODIE(ALightEx,LightEx,SpecularCubeMap)
VERIFY_CLASS_OFFSET_NODIE(ALightEx,LightEx,SpecularCubeIntensity)
VERIFY_CLASS_OFFSET_NODIE(ALightEx,LightEx,LightCubeScale)
VERIFY_CLASS_OFFSET_NODIE(ALightEx,LightEx,LightFOV)
VERIFY_CLASS_OFFSET_NODIE(ALightEx,LightEx,LightAspectW)
VERIFY_CLASS_OFFSET_NODIE(ALightEx,LightEx,LightAspectH)
VERIFY_CLASS_OFFSET_NODIE(ALightEx,LightEx,SpotLightTexture)
VERIFY_CLASS_OFFSET_NODIE(ALightEx,LightEx,LightShaftTexture)
VERIFY_CLASS_OFFSET_NODIE(ALightEx,LightEx,CookieTexture)
VERIFY_CLASS_OFFSET_NODIE(ALightEx,LightEx,LightShaftStart)
VERIFY_CLASS_OFFSET_NODIE(ALightEx,LightEx,LightShaftEndScale)
VERIFY_CLASS_OFFSET_NODIE(ALightEx,LightEx,LightShaftBrightness)
VERIFY_CLASS_OFFSET_NODIE(ALightEx,LightEx,MaxLightShaftSlices)
VERIFY_CLASS_OFFSET_NODIE(ALightEx,LightEx,SliceSpacing)
VERIFY_CLASS_OFFSET_NODIE(ALightEx,LightEx,ShaftEdgeFadeDist)
VERIFY_CLASS_OFFSET_NODIE(ALightEx,LightEx,ShaftPanXSpeed)
VERIFY_CLASS_OFFSET_NODIE(ALightEx,LightEx,ShaftPanYSpeed)
VERIFY_CLASS_OFFSET_NODIE(ALightEx,LightEx,AttenuationMode)
VERIFY_CLASS_OFFSET_NODIE(ALightEx,LightEx,AttenuationMap)
VERIFY_CLASS_OFFSET_NODIE(ALightEx,LightEx,FogType)
VERIFY_CLASS_OFFSET_NODIE(ALightEx,LightEx,FogMode)
VERIFY_CLASS_OFFSET_NODIE(ALightEx,LightEx,FogDist)
VERIFY_CLASS_OFFSET_NODIE(ALightEx,LightEx,FogHeight)
VERIFY_CLASS_OFFSET_NODIE(ALightEx,LightEx,DirShadowMapDist)
VERIFY_CLASS_OFFSET_NODIE(ALightEx,LightEx,LightPeriod)
VERIFY_CLASS_OFFSET_NODIE(ALightEx,LightEx,LightPhase)
VERIFY_CLASS_OFFSET_NODIE(ALightEx,LightEx,LightString)
VERIFY_CLASS_OFFSET_NODIE(ALightEx,LightEx,LightStringRed)
VERIFY_CLASS_OFFSET_NODIE(ALightEx,LightEx,LightStringGreen)
VERIFY_CLASS_OFFSET_NODIE(ALightEx,LightEx,LightStringBlue)
VERIFY_CLASS_OFFSET_NODIE(ALightEx,LightEx,fFlickerMinBrightness)
VERIFY_CLASS_OFFSET_NODIE(ALightEx,LightEx,fFlickerMaxBrightness)
VERIFY_CLASS_OFFSET_NODIE(ALightEx,LightEx,fFlickerStaticMinTime)
VERIFY_CLASS_OFFSET_NODIE(ALightEx,LightEx,fFlickerStaticMaxTime)
VERIFY_CLASS_OFFSET_NODIE(ALightEx,LightEx,RespectLightingTags)
VERIFY_CLASS_OFFSET_NODIE(ALightEx,LightEx,LightFlickerString)
VERIFY_CLASS_OFFSET_NODIE(ALightEx,LightEx,LightAmbientSoundName)
VERIFY_CLASS_OFFSET_NODIE(ALightEx,LightEx,LightAmbientSoundMinScale)
VERIFY_CLASS_OFFSET_NODIE(ALightEx,LightEx,LightAmbientSoundMaxScale)
VERIFY_CLASS_OFFSET_NODIE(ALightEx,LightEx,InternalData)
VERIFY_CLASS_OFFSET_NODIE(ALightEx,LightEx,LightScaleString)
VERIFY_CLASS_OFFSET_NODIE(ALightEx,LightEx,LightStringStartTime)
VERIFY_CLASS_OFFSET_NODIE(ALightEx,LightEx,LightScaleStringStartTime)
VERIFY_CLASS_OFFSET_NODIE(ALightEx,LightEx,fNextFlickerTime)
VERIFY_CLASS_OFFSET_NODIE(ALightEx,LightEx,fLastBrightness)
VERIFY_CLASS_OFFSET_NODIE(ALightEx,LightEx,fFlickerTypeChangeTime)
VERIFY_CLASS_OFFSET_NODIE(ALightEx,LightEx,fCurFlickerScale)
VERIFY_CLASS_OFFSET_NODIE(ALightEx,LightEx,fLastFlickerScale)
VERIFY_CLASS_OFFSET_NODIE(ALightEx,LightEx,fFlickerInterval)
VERIFY_CLASS_OFFSET_NODIE(ALightEx,LightEx,FinalColorScale)
VERIFY_CLASS_OFFSET_NODIE(ALightEx,LightEx,SlaveSprite)
VERIFY_CLASS_OFFSET_NODIE(ALightEx,LightEx,LightFlickerType)
VERIFY_CLASS_SIZE_NODIE(ALightEx)
VERIFY_CLASS_OFFSET_NODIE(AAmmo,Ammo,AmmoCasingMesh)
VERIFY_CLASS_OFFSET_NODIE(AAmmo,Ammo,AmmoCasingMaterial)
VERIFY_CLASS_SIZE_NODIE(AAmmo)
VERIFY_CLASS_OFFSET_NODIE(AInventory,Inventory,NextInventory)
VERIFY_CLASS_OFFSET_NODIE(AInventory,Inventory,InventoryReferenceClass)
VERIFY_CLASS_OFFSET_NODIE(AInventory,Inventory,PickupClass)
VERIFY_CLASS_OFFSET_NODIE(AInventory,Inventory,MultiplePickupBehavior)
VERIFY_CLASS_OFFSET_NODIE(AInventory,Inventory,Charge)
VERIFY_CLASS_OFFSET_NODIE(AInventory,Inventory,MaxCharge)
VERIFY_CLASS_OFFSET_NODIE(AInventory,Inventory,HUDPickupEventIcon)
VERIFY_CLASS_OFFSET_NODIE(AInventory,Inventory,HUDPickupIconTex)
VERIFY_CLASS_SIZE_NODIE(AInventory)
VERIFY_CLASS_OFFSET_NODIE(AMapInfo,MapInfo,CampaignList)
VERIFY_CLASS_SIZE_NODIE(AMapInfo)
VERIFY_CLASS_OFFSET_NODIE(AMPMapInfo,MPMapInfo,Playlist)
VERIFY_CLASS_OFFSET_NODIE(AMPMapInfo,MPMapInfo,MapList)
VERIFY_CLASS_OFFSET_NODIE(AMPMapInfo,MPMapInfo,GameTypes)
VERIFY_CLASS_OFFSET_NODIE(AMPMapInfo,MPMapInfo,MutatorTypes)
VERIFY_CLASS_SIZE_NODIE(AMPMapInfo)
VERIFY_CLASS_OFFSET_NODIE(AMapLocationsDM,MapLocationsDM,Maps)
VERIFY_CLASS_SIZE_NODIE(AMapLocationsDM)
VERIFY_CLASS_OFFSET_NODIE(AMapLocations,MapLocations,NumMaps)
VERIFY_CLASS_OFFSET_NODIE(AMapLocations,MapLocations,Maps)
VERIFY_CLASS_OFFSET_NODIE(AMapLocations,MapLocations,ScrollSpeed)
VERIFY_CLASS_SIZE_NODIE(AMapLocations)
VERIFY_CLASS_OFFSET_NODIE(AMutator,Mutator,NextMutator)
VERIFY_CLASS_OFFSET_NODIE(AMutator,Mutator,MutatorName)
VERIFY_CLASS_SIZE_NODIE(AMutator)
VERIFY_CLASS_OFFSET_NODIE(AdnDecal,dnDecal,Decals)
VERIFY_CLASS_OFFSET_NODIE(AdnDecal,dnDecal,RandomDrawscale)
VERIFY_CLASS_SIZE_NODIE(AdnDecal)
VERIFY_CLASS_OFFSET_NODIE(ADecal,Decal,BehaviorArgument)
VERIFY_CLASS_OFFSET_NODIE(ADecal,Decal,Behavior)
VERIFY_CLASS_SIZE_NODIE(ADecal)
VERIFY_CLASS_OFFSET_NODIE(Alocationid,locationid,LocationName)
VERIFY_CLASS_OFFSET_NODIE(Alocationid,locationid,Radius)
VERIFY_CLASS_OFFSET_NODIE(Alocationid,locationid,NextLocation)
VERIFY_CLASS_SIZE_NODIE(Alocationid)
VERIFY_CLASS_SIZE_NODIE(AKeypoint)
VERIFY_CLASS_OFFSET_NODIE(ULevelSummary,LevelSummary,Title)
VERIFY_CLASS_OFFSET_NODIE(ULevelSummary,LevelSummary,Author)
VERIFY_CLASS_OFFSET_NODIE(ULevelSummary,LevelSummary,IdealPlayerCount)
VERIFY_CLASS_OFFSET_NODIE(ULevelSummary,LevelSummary,RecommendedEnemies)
VERIFY_CLASS_OFFSET_NODIE(ULevelSummary,LevelSummary,RecommendedTeammates)
VERIFY_CLASS_OFFSET_NODIE(ULevelSummary,LevelSummary,LevelEnterText)
VERIFY_CLASS_SIZE_NODIE(ULevelSummary)
VERIFY_CLASS_OFFSET_NODIE(ADlcInfo,DlcInfo,DlcPackages)
VERIFY_CLASS_OFFSET_NODIE(ADlcInfo,DlcInfo,PreorderGroups)
VERIFY_CLASS_OFFSET_NODIE(ADlcInfo,DlcInfo,PrecacheObjs)
VERIFY_CLASS_SIZE_NODIE(ADlcInfo)
VERIFY_CLASS_OFFSET_NODIE(AGameReplicationInfo,GameReplicationInfo,GameName)
VERIFY_CLASS_OFFSET_NODIE(AGameReplicationInfo,GameReplicationInfo,GameClass)
VERIFY_CLASS_OFFSET_NODIE(AGameReplicationInfo,GameReplicationInfo,RulesVoteType)
VERIFY_CLASS_OFFSET_NODIE(AGameReplicationInfo,GameReplicationInfo,LastReplicatedElapsedTime)
VERIFY_CLASS_OFFSET_NODIE(AGameReplicationInfo,GameReplicationInfo,ElapsedTime)
VERIFY_CLASS_OFFSET_NODIE(AGameReplicationInfo,GameReplicationInfo,SyncElapsedTime)
VERIFY_CLASS_OFFSET_NODIE(AGameReplicationInfo,GameReplicationInfo,RoundEndTime)
VERIFY_CLASS_OFFSET_NODIE(AGameReplicationInfo,GameReplicationInfo,MatchEndTime)
VERIFY_CLASS_OFFSET_NODIE(AGameReplicationInfo,GameReplicationInfo,NumPlayers)
VERIFY_CLASS_OFFSET_NODIE(AGameReplicationInfo,GameReplicationInfo,NumSpectators)
VERIFY_CLASS_OFFSET_NODIE(AGameReplicationInfo,GameReplicationInfo,RemainingVoteTime)
VERIFY_CLASS_OFFSET_NODIE(AGameReplicationInfo,GameReplicationInfo,VoteYes)
VERIFY_CLASS_OFFSET_NODIE(AGameReplicationInfo,GameReplicationInfo,VoteNo)
VERIFY_CLASS_OFFSET_NODIE(AGameReplicationInfo,GameReplicationInfo,DmgStrIndex)
VERIFY_CLASS_OFFSET_NODIE(AGameReplicationInfo,GameReplicationInfo,ServerName)
VERIFY_CLASS_OFFSET_NODIE(AGameReplicationInfo,GameReplicationInfo,AdminName)
VERIFY_CLASS_OFFSET_NODIE(AGameReplicationInfo,GameReplicationInfo,AdminEmail)
VERIFY_CLASS_OFFSET_NODIE(AGameReplicationInfo,GameReplicationInfo,GameRegion)
VERIFY_CLASS_OFFSET_NODIE(AGameReplicationInfo,GameReplicationInfo,MOTDLine1)
VERIFY_CLASS_OFFSET_NODIE(AGameReplicationInfo,GameReplicationInfo,MOTDLine2)
VERIFY_CLASS_OFFSET_NODIE(AGameReplicationInfo,GameReplicationInfo,MOTDLine3)
VERIFY_CLASS_OFFSET_NODIE(AGameReplicationInfo,GameReplicationInfo,MOTDLine4)
VERIFY_CLASS_OFFSET_NODIE(AGameReplicationInfo,GameReplicationInfo,GameEndedComments)
VERIFY_CLASS_OFFSET_NODIE(AGameReplicationInfo,GameReplicationInfo,VoteMessage)
VERIFY_CLASS_OFFSET_NODIE(AGameReplicationInfo,GameReplicationInfo,DebugDamageStrings)
VERIFY_CLASS_OFFSET_NODIE(AGameReplicationInfo,GameReplicationInfo,PRIArray)
VERIFY_CLASS_OFFSET_NODIE(AGameReplicationInfo,GameReplicationInfo,CountDown)
VERIFY_CLASS_OFFSET_NODIE(AGameReplicationInfo,GameReplicationInfo,LastCountDown)
VERIFY_CLASS_OFFSET_NODIE(AGameReplicationInfo,GameReplicationInfo,ShowWinnerSeconds)
VERIFY_CLASS_SIZE_NODIE(AGameReplicationInfo)
VERIFY_CLASS_SIZE_NODIE(AReplicationInfo)
VERIFY_CLASS_OFFSET_NODIE(APlayerReplicationInfo,PlayerReplicationInfo,PlayerName)
VERIFY_CLASS_OFFSET_NODIE(APlayerReplicationInfo,PlayerReplicationInfo,PlayerTitle)
VERIFY_CLASS_OFFSET_NODIE(APlayerReplicationInfo,PlayerReplicationInfo,OldName)
VERIFY_CLASS_OFFSET_NODIE(APlayerReplicationInfo,PlayerReplicationInfo,PlayerID)
VERIFY_CLASS_OFFSET_NODIE(APlayerReplicationInfo,PlayerReplicationInfo,RoomMemberID)
VERIFY_CLASS_OFFSET_NODIE(APlayerReplicationInfo,PlayerReplicationInfo,TeamName)
VERIFY_CLASS_OFFSET_NODIE(APlayerReplicationInfo,PlayerReplicationInfo,Team)
VERIFY_CLASS_OFFSET_NODIE(APlayerReplicationInfo,PlayerReplicationInfo,TeamID)
VERIFY_CLASS_OFFSET_NODIE(APlayerReplicationInfo,PlayerReplicationInfo,Score)
VERIFY_CLASS_OFFSET_NODIE(APlayerReplicationInfo,PlayerReplicationInfo,Deaths)
VERIFY_CLASS_OFFSET_NODIE(APlayerReplicationInfo,PlayerReplicationInfo,Kills)
VERIFY_CLASS_OFFSET_NODIE(APlayerReplicationInfo,PlayerReplicationInfo,RoundKills)
VERIFY_CLASS_OFFSET_NODIE(APlayerReplicationInfo,PlayerReplicationInfo,NumLives)
VERIFY_CLASS_OFFSET_NODIE(APlayerReplicationInfo,PlayerReplicationInfo,Credits)
VERIFY_CLASS_OFFSET_NODIE(APlayerReplicationInfo,PlayerReplicationInfo,PlayerVoicePack)
VERIFY_CLASS_OFFSET_NODIE(APlayerReplicationInfo,PlayerReplicationInfo,Ping)
VERIFY_CLASS_OFFSET_NODIE(APlayerReplicationInfo,PlayerReplicationInfo,PacketLoss)
VERIFY_CLASS_OFFSET_NODIE(APlayerReplicationInfo,PlayerReplicationInfo,Gender)
VERIFY_CLASS_OFFSET_NODIE(APlayerReplicationInfo,PlayerReplicationInfo,Icon)
VERIFY_CLASS_OFFSET_NODIE(APlayerReplicationInfo,PlayerReplicationInfo,PlayerZone)
VERIFY_CLASS_OFFSET_NODIE(APlayerReplicationInfo,PlayerReplicationInfo,PlayerLocation)
VERIFY_CLASS_OFFSET_NODIE(APlayerReplicationInfo,PlayerReplicationInfo,Frags)
VERIFY_CLASS_OFFSET_NODIE(APlayerReplicationInfo,PlayerReplicationInfo,FragTypes)
VERIFY_CLASS_OFFSET_NODIE(APlayerReplicationInfo,PlayerReplicationInfo,GameState)
VERIFY_CLASS_OFFSET_NODIE(APlayerReplicationInfo,PlayerReplicationInfo,XUIDUpper)
VERIFY_CLASS_OFFSET_NODIE(APlayerReplicationInfo,PlayerReplicationInfo,XUIDLower)
VERIFY_CLASS_OFFSET_NODIE(APlayerReplicationInfo,PlayerReplicationInfo,StartTime)
VERIFY_CLASS_OFFSET_NODIE(APlayerReplicationInfo,PlayerReplicationInfo,TimeAcc)
VERIFY_CLASS_OFFSET_NODIE(APlayerReplicationInfo,PlayerReplicationInfo,DukeLevel)
VERIFY_CLASS_SIZE_NODIE(APlayerReplicationInfo)
VERIFY_CLASS_OFFSET_NODIE(ADispatcher,Dispatcher,OutEvents)
VERIFY_CLASS_OFFSET_NODIE(ADispatcher,Dispatcher,OutDelays)
VERIFY_CLASS_OFFSET_NODIE(ADispatcher,Dispatcher,ResetTag)
VERIFY_CLASS_OFFSET_NODIE(ADispatcher,Dispatcher,Index)
VERIFY_CLASS_OFFSET_NODIE(ADispatcher,Dispatcher,DefaultTickStyle)
VERIFY_CLASS_OFFSET_NODIE(ADispatcher,Dispatcher,PauseDispatchingTag)
VERIFY_CLASS_OFFSET_NODIE(ADispatcher,Dispatcher,UnPauseDispatchingTag)
VERIFY_CLASS_SIZE_NODIE(ADispatcher)
VERIFY_CLASS_OFFSET_NODIE(ATrigger,Trigger,DukeInstigator)
VERIFY_CLASS_OFFSET_NODIE(ATrigger,Trigger,TriggerType)
VERIFY_CLASS_OFFSET_NODIE(ATrigger,Trigger,TriggerShrunkType)
VERIFY_CLASS_OFFSET_NODIE(ATrigger,Trigger,LookUseTags)
VERIFY_CLASS_OFFSET_NODIE(ATrigger,Trigger,LookUseEvents)
VERIFY_CLASS_OFFSET_NODIE(ATrigger,Trigger,EnableTag)
VERIFY_CLASS_OFFSET_NODIE(ATrigger,Trigger,DisableTag)
VERIFY_CLASS_OFFSET_NODIE(ATrigger,Trigger,LookUseTriggered)
VERIFY_CLASS_OFFSET_NODIE(ATrigger,Trigger,Message)
VERIFY_CLASS_OFFSET_NODIE(ATrigger,Trigger,ClassProximityType)
VERIFY_CLASS_OFFSET_NODIE(ATrigger,Trigger,ClassProximityType2)
VERIFY_CLASS_OFFSET_NODIE(ATrigger,Trigger,TagEventProximity)
VERIFY_CLASS_OFFSET_NODIE(ATrigger,Trigger,RepeatTriggerTime)
VERIFY_CLASS_OFFSET_NODIE(ATrigger,Trigger,ReTriggerDelay)
VERIFY_CLASS_OFFSET_NODIE(ATrigger,Trigger,ReUnTriggerDelay)
VERIFY_CLASS_OFFSET_NODIE(ATrigger,Trigger,AllowTriggerTime)
VERIFY_CLASS_OFFSET_NODIE(ATrigger,Trigger,AllowUnTriggerTime)
VERIFY_CLASS_OFFSET_NODIE(ATrigger,Trigger,DamageThreshold)
VERIFY_CLASS_OFFSET_NODIE(ATrigger,Trigger,UntriggerEvent)
VERIFY_CLASS_OFFSET_NODIE(ATrigger,Trigger,TriggerWhenClassCarried)
VERIFY_CLASS_OFFSET_NODIE(ATrigger,Trigger,TriggerActor)
VERIFY_CLASS_OFFSET_NODIE(ATrigger,Trigger,TriggerActor2)
VERIFY_CLASS_OFFSET_NODIE(ATrigger,Trigger,Touches)
VERIFY_CLASS_SIZE_NODIE(ATrigger)
VERIFY_CLASS_OFFSET_NODIE(APlayerStart,PlayerStart,TeamNumber)
VERIFY_CLASS_OFFSET_NODIE(APlayerStart,PlayerStart,PositionalOverride)
VERIFY_CLASS_SIZE_NODIE(APlayerStart)
VERIFY_CLASS_OFFSET_NODIE(ATeleporter,Teleporter,URL)
VERIFY_CLASS_OFFSET_NODIE(ATeleporter,Teleporter,MusicFilename)
VERIFY_CLASS_OFFSET_NODIE(ATeleporter,Teleporter,TeleportRadius)
VERIFY_CLASS_OFFSET_NODIE(ATeleporter,Teleporter,TargetVelocity)
VERIFY_CLASS_OFFSET_NODIE(ATeleporter,Teleporter,SourceVehicleTag)
VERIFY_CLASS_OFFSET_NODIE(ATeleporter,Teleporter,DestinationVehicleTag)
VERIFY_CLASS_OFFSET_NODIE(ATeleporter,Teleporter,TriggerActor)
VERIFY_CLASS_OFFSET_NODIE(ATeleporter,Teleporter,TriggerActor2)
VERIFY_CLASS_OFFSET_NODIE(ATeleporter,Teleporter,LastFired)
VERIFY_CLASS_SIZE_NODIE(ATeleporter)
VERIFY_CLASS_OFFSET_NODIE(AWarpZoneInfo,WarpZoneInfo,OtherSideURL)
VERIFY_CLASS_OFFSET_NODIE(AWarpZoneInfo,WarpZoneInfo,ThisTag)
VERIFY_CLASS_OFFSET_NODIE(AWarpZoneInfo,WarpZoneInfo,iWarpZone)
VERIFY_CLASS_OFFSET_NODIE(AWarpZoneInfo,WarpZoneInfo,WarpCoords)
VERIFY_CLASS_OFFSET_NODIE(AWarpZoneInfo,WarpZoneInfo,OtherSideActor)
VERIFY_CLASS_OFFSET_NODIE(AWarpZoneInfo,WarpZoneInfo,OtherSideLevel)
VERIFY_CLASS_OFFSET_NODIE(AWarpZoneInfo,WarpZoneInfo,Destinations)
VERIFY_CLASS_OFFSET_NODIE(AWarpZoneInfo,WarpZoneInfo,numDestinations)
VERIFY_CLASS_SIZE_NODIE(AWarpZoneInfo)
VERIFY_CLASS_OFFSET_NODIE(AZoneInfo,ZoneInfo,ZonePlayerEvent)
VERIFY_CLASS_OFFSET_NODIE(AZoneInfo,ZoneInfo,ZonePlayerExitEvent)
VERIFY_CLASS_OFFSET_NODIE(AZoneInfo,ZoneInfo,ZoneName)
VERIFY_CLASS_OFFSET_NODIE(AZoneInfo,ZoneInfo,ZoneTag)
VERIFY_CLASS_OFFSET_NODIE(AZoneInfo,ZoneInfo,MaxCorpses)
VERIFY_CLASS_OFFSET_NODIE(AZoneInfo,ZoneInfo,DefaultVisibilityRadius)
VERIFY_CLASS_OFFSET_NODIE(AZoneInfo,ZoneInfo,AmbientLightScale)
VERIFY_CLASS_OFFSET_NODIE(AZoneInfo,ZoneInfo,DistanceFog)
VERIFY_CLASS_OFFSET_NODIE(AZoneInfo,ZoneInfo,GlobalHeightFog)
VERIFY_CLASS_OFFSET_NODIE(AZoneInfo,ZoneInfo,DistanceFogFadeTime)
VERIFY_CLASS_OFFSET_NODIE(AZoneInfo,ZoneInfo,ZoneCubemaps)
VERIFY_CLASS_OFFSET_NODIE(AZoneInfo,ZoneInfo,ZoneSpecularCubemap)
VERIFY_CLASS_OFFSET_NODIE(AZoneInfo,ZoneInfo,ZoneOverrideMaterial)
VERIFY_CLASS_OFFSET_NODIE(AZoneInfo,ZoneInfo,DOFBlurAmount)
VERIFY_CLASS_OFFSET_NODIE(AZoneInfo,ZoneInfo,DOFFocalDist)
VERIFY_CLASS_OFFSET_NODIE(AZoneInfo,ZoneInfo,DOFFocalRangeMin)
VERIFY_CLASS_OFFSET_NODIE(AZoneInfo,ZoneInfo,DOFFocalRangeMax)
VERIFY_CLASS_OFFSET_NODIE(AZoneInfo,ZoneInfo,Scene)
VERIFY_CLASS_OFFSET_NODIE(AZoneInfo,ZoneInfo,SkyZoneTag)
VERIFY_CLASS_OFFSET_NODIE(AZoneInfo,ZoneInfo,GeoWaterTag)
VERIFY_CLASS_OFFSET_NODIE(AZoneInfo,ZoneInfo,ZoneFlotsamEffect)
VERIFY_CLASS_OFFSET_NODIE(AZoneInfo,ZoneInfo,ZoneFlotsamRotation)
VERIFY_CLASS_OFFSET_NODIE(AZoneInfo,ZoneInfo,SuffocationEnabledTag)
VERIFY_CLASS_OFFSET_NODIE(AZoneInfo,ZoneInfo,SuffocationDisabledTag)
VERIFY_CLASS_OFFSET_NODIE(AZoneInfo,ZoneInfo,ZoneMusic)
VERIFY_CLASS_OFFSET_NODIE(AZoneInfo,ZoneInfo,ZoneMusicVolume)
VERIFY_CLASS_OFFSET_NODIE(AZoneInfo,ZoneInfo,ZoneMusicCrossfadeTime)
VERIFY_CLASS_OFFSET_NODIE(AZoneInfo,ZoneInfo,ZoneMusicMixerGroup)
VERIFY_CLASS_OFFSET_NODIE(AZoneInfo,ZoneInfo,ReverbPreset)
VERIFY_CLASS_OFFSET_NODIE(AZoneInfo,ZoneInfo,ReverbTime)
VERIFY_CLASS_OFFSET_NODIE(AZoneInfo,ZoneInfo,ReverbPreDelay)
VERIFY_CLASS_OFFSET_NODIE(AZoneInfo,ZoneInfo,ReverbDamping)
VERIFY_CLASS_OFFSET_NODIE(AZoneInfo,ZoneInfo,ReverbDryLevel)
VERIFY_CLASS_OFFSET_NODIE(AZoneInfo,ZoneInfo,ReverbWetLevel)
VERIFY_CLASS_OFFSET_NODIE(AZoneInfo,ZoneInfo,SkyZone)
VERIFY_CLASS_OFFSET_NODIE(AZoneInfo,ZoneInfo,locationid)
VERIFY_CLASS_OFFSET_NODIE(AZoneInfo,ZoneInfo,ZonePlayerCount)
VERIFY_CLASS_OFFSET_NODIE(AZoneInfo,ZoneInfo,GeoWaterActor)
VERIFY_CLASS_OFFSET_NODIE(AZoneInfo,ZoneInfo,Corpses)
VERIFY_CLASS_SIZE_NODIE(AZoneInfo)
VERIFY_CLASS_OFFSET_NODIE(AProjectile,Projectile,SafetyTimer)
VERIFY_CLASS_OFFSET_NODIE(AProjectile,Projectile,Speed)
VERIFY_CLASS_OFFSET_NODIE(AProjectile,Projectile,MinSpeed)
VERIFY_CLASS_OFFSET_NODIE(AProjectile,Projectile,MaxSpeed)
VERIFY_CLASS_OFFSET_NODIE(AProjectile,Projectile,AccelerationScaler)
VERIFY_CLASS_OFFSET_NODIE(AProjectile,Projectile,Damage)
VERIFY_CLASS_OFFSET_NODIE(AProjectile,Projectile,DamageRadius)
VERIFY_CLASS_OFFSET_NODIE(AProjectile,Projectile,DamageFalloffStart)
VERIFY_CLASS_OFFSET_NODIE(AProjectile,Projectile,DamageClass)
VERIFY_CLASS_OFFSET_NODIE(AProjectile,Projectile,DamageRadiusDrawscaleExponent)
VERIFY_CLASS_OFFSET_NODIE(AProjectile,Projectile,NumBounces)
VERIFY_CLASS_OFFSET_NODIE(AProjectile,Projectile,ImpactSoundName)
VERIFY_CLASS_OFFSET_NODIE(AProjectile,Projectile,ImpactSoundSpeed)
VERIFY_CLASS_OFFSET_NODIE(AProjectile,Projectile,ShakeScalar)
VERIFY_CLASS_OFFSET_NODIE(AProjectile,Projectile,ShakeInfo)
VERIFY_CLASS_OFFSET_NODIE(AProjectile,Projectile,RumbleInfo)
VERIFY_CLASS_OFFSET_NODIE(AProjectile,Projectile,WaterSplashStrength)
VERIFY_CLASS_OFFSET_NODIE(AProjectile,Projectile,WaterSplashRadius)
VERIFY_CLASS_OFFSET_NODIE(AProjectile,Projectile,TouchWaterClass)
VERIFY_CLASS_OFFSET_NODIE(AProjectile,Projectile,WaterScaler)
VERIFY_CLASS_OFFSET_NODIE(AProjectile,Projectile,ExploWallOut)
VERIFY_CLASS_OFFSET_NODIE(AProjectile,Projectile,ExplosionOffset)
VERIFY_CLASS_OFFSET_NODIE(AProjectile,Projectile,ExplosionSplashClass)
VERIFY_CLASS_OFFSET_NODIE(AProjectile,Projectile,ExplosionDecal)
VERIFY_CLASS_OFFSET_NODIE(AProjectile,Projectile,ExplosionClass)
VERIFY_CLASS_OFFSET_NODIE(AProjectile,Projectile,UnderwaterExplosionClass)
VERIFY_CLASS_OFFSET_NODIE(AProjectile,Projectile,ExplosionLight)
VERIFY_CLASS_OFFSET_NODIE(AProjectile,Projectile,ExplosionSoundName)
VERIFY_CLASS_OFFSET_NODIE(AProjectile,Projectile,WillNotHarmClasses)
VERIFY_CLASS_OFFSET_NODIE(AProjectile,Projectile,MPDrawscaleSpeedExponent)
VERIFY_CLASS_OFFSET_NODIE(AProjectile,Projectile,SpawnTime)
VERIFY_CLASS_OFFSET_NODIE(AProjectile,Projectile,NumWallHits)
VERIFY_CLASS_OFFSET_NODIE(AProjectile,Projectile,InitialLocation)
VERIFY_CLASS_OFFSET_NODIE(AProjectile,Projectile,DeferredExplosionTimer)
VERIFY_CLASS_OFFSET_NODIE(AProjectile,Projectile,DeferredExplosionTimerVariance)
VERIFY_CLASS_OFFSET_NODIE(AProjectile,Projectile,DeferredExplosionHitLocation)
VERIFY_CLASS_OFFSET_NODIE(AProjectile,Projectile,DeferredExplosionHitNormal)
VERIFY_CLASS_OFFSET_NODIE(AProjectile,Projectile,DeferredExplosionHitActor)
VERIFY_CLASS_OFFSET_NODIE(AProjectile,Projectile,MuzzleFireIndex)
VERIFY_CLASS_SIZE_NODIE(AProjectile)
VERIFY_CLASS_OFFSET_NODIE(AInterpolationPoint,InterpolationPoint,RateModifier)
VERIFY_CLASS_OFFSET_NODIE(AInterpolationPoint,InterpolationPoint,GameSpeedModifier)
VERIFY_CLASS_OFFSET_NODIE(AInterpolationPoint,InterpolationPoint,TriggerEvent)
VERIFY_CLASS_OFFSET_NODIE(AInterpolationPoint,InterpolationPoint,LocationVariance)
VERIFY_CLASS_OFFSET_NODIE(AInterpolationPoint,InterpolationPoint,RotationVariance)
VERIFY_CLASS_OFFSET_NODIE(AInterpolationPoint,InterpolationPoint,MotionType)
VERIFY_CLASS_OFFSET_NODIE(AInterpolationPoint,InterpolationPoint,RateType)
VERIFY_CLASS_OFFSET_NODIE(AInterpolationPoint,InterpolationPoint,RateModifierBlendBegin)
VERIFY_CLASS_OFFSET_NODIE(AInterpolationPoint,InterpolationPoint,RateModifierBlendEnd)
VERIFY_CLASS_OFFSET_NODIE(AInterpolationPoint,InterpolationPoint,PathColor)
VERIFY_CLASS_OFFSET_NODIE(AInterpolationPoint,InterpolationPoint,AutoRollMaxRoll)
VERIFY_CLASS_OFFSET_NODIE(AInterpolationPoint,InterpolationPoint,AutoRollRate)
VERIFY_CLASS_OFFSET_NODIE(AInterpolationPoint,InterpolationPoint,RebuildPathTag)
VERIFY_CLASS_OFFSET_NODIE(AInterpolationPoint,InterpolationPoint,Tesselations)
VERIFY_CLASS_OFFSET_NODIE(AInterpolationPoint,InterpolationPoint,InterpLocation)
VERIFY_CLASS_OFFSET_NODIE(AInterpolationPoint,InterpolationPoint,InterpRotation)
VERIFY_CLASS_OFFSET_NODIE(AInterpolationPoint,InterpolationPoint,Prev)
VERIFY_CLASS_OFFSET_NODIE(AInterpolationPoint,InterpolationPoint,Next)
VERIFY_CLASS_OFFSET_NODIE(AInterpolationPoint,InterpolationPoint,CloneParent)
VERIFY_CLASS_OFFSET_NODIE(AInterpolationPoint,InterpolationPoint,ArcLength)
VERIFY_CLASS_SIZE_NODIE(AInterpolationPoint)
VERIFY_CLASS_OFFSET_NODIE(ASkyZoneInfo,SkyZoneInfo,UnlitHDRScale)
VERIFY_CLASS_SIZE_NODIE(ASkyZoneInfo)
VERIFY_CLASS_SIZE_NODIE(ACamera)
VERIFY_CLASS_OFFSET_NODIE(AGameInfo,GameInfo,MaxPlayers)
VERIFY_CLASS_OFFSET_NODIE(AGameInfo,GameInfo,NumPlayers)
VERIFY_CLASS_OFFSET_NODIE(AGameInfo,GameInfo,NumVotingPlayers)
VERIFY_CLASS_OFFSET_NODIE(AGameInfo,GameInfo,CurrentID)
VERIFY_CLASS_OFFSET_NODIE(AGameInfo,GameInfo,Difficulty)
VERIFY_CLASS_OFFSET_NODIE(AGameInfo,GameInfo,AutoAim)
VERIFY_CLASS_OFFSET_NODIE(AGameInfo,GameInfo,GameSpeed)
VERIFY_CLASS_OFFSET_NODIE(AGameInfo,GameInfo,StartTime)
VERIFY_CLASS_OFFSET_NODIE(AGameInfo,GameInfo,PlayerRespawnDelay)
VERIFY_CLASS_OFFSET_NODIE(AGameInfo,GameInfo,SuicideRespawnPenalty)
VERIFY_CLASS_OFFSET_NODIE(AGameInfo,GameInfo,DefaultPlayerClass)
VERIFY_CLASS_OFFSET_NODIE(AGameInfo,GameInfo,DefaultInventory)
VERIFY_CLASS_OFFSET_NODIE(AGameInfo,GameInfo,MaxSpectators)
VERIFY_CLASS_OFFSET_NODIE(AGameInfo,GameInfo,NumSpectators)
VERIFY_CLASS_OFFSET_NODIE(AGameInfo,GameInfo,NumBots)
VERIFY_CLASS_OFFSET_NODIE(AGameInfo,GameInfo,ScoreboardType)
VERIFY_CLASS_OFFSET_NODIE(AGameInfo,GameInfo,RulesMenuType)
VERIFY_CLASS_OFFSET_NODIE(AGameInfo,GameInfo,GameOptionsMenuType)
VERIFY_CLASS_OFFSET_NODIE(AGameInfo,GameInfo,BotMenuType)
VERIFY_CLASS_OFFSET_NODIE(AGameInfo,GameInfo,MapMenuType)
VERIFY_CLASS_OFFSET_NODIE(AGameInfo,GameInfo,MutatorMenuType)
VERIFY_CLASS_OFFSET_NODIE(AGameInfo,GameInfo,ServerMenuType)
VERIFY_CLASS_OFFSET_NODIE(AGameInfo,GameInfo,RespawnMarkerType)
VERIFY_CLASS_OFFSET_NODIE(AGameInfo,GameInfo,RulesVoteType)
VERIFY_CLASS_OFFSET_NODIE(AGameInfo,GameInfo,HUDType)
VERIFY_CLASS_OFFSET_NODIE(AGameInfo,GameInfo,MapListType)
VERIFY_CLASS_OFFSET_NODIE(AGameInfo,GameInfo,MapPrefix)
VERIFY_CLASS_OFFSET_NODIE(AGameInfo,GameInfo,BeaconName)
VERIFY_CLASS_OFFSET_NODIE(AGameInfo,GameInfo,SentText)
VERIFY_CLASS_OFFSET_NODIE(AGameInfo,GameInfo,DefaultPlayerName)
VERIFY_CLASS_OFFSET_NODIE(AGameInfo,GameInfo,LeftMessage)
VERIFY_CLASS_OFFSET_NODIE(AGameInfo,GameInfo,IdleMessage)
VERIFY_CLASS_OFFSET_NODIE(AGameInfo,GameInfo,FailedSpawnMessage)
VERIFY_CLASS_OFFSET_NODIE(AGameInfo,GameInfo,FailedPlaceMessage)
VERIFY_CLASS_OFFSET_NODIE(AGameInfo,GameInfo,FailedTeamMessage)
VERIFY_CLASS_OFFSET_NODIE(AGameInfo,GameInfo,NameChangedMessage)
VERIFY_CLASS_OFFSET_NODIE(AGameInfo,GameInfo,EnteredMessage)
VERIFY_CLASS_OFFSET_NODIE(AGameInfo,GameInfo,EnteredSpectatorMessage)
VERIFY_CLASS_OFFSET_NODIE(AGameInfo,GameInfo,GameName)
VERIFY_CLASS_OFFSET_NODIE(AGameInfo,GameInfo,ShortGameName)
VERIFY_CLASS_OFFSET_NODIE(AGameInfo,GameInfo,MaxedOutMessage)
VERIFY_CLASS_OFFSET_NODIE(AGameInfo,GameInfo,WrongPassword)
VERIFY_CLASS_OFFSET_NODIE(AGameInfo,GameInfo,NeedPassword)
VERIFY_CLASS_OFFSET_NODIE(AGameInfo,GameInfo,IPBanned)
VERIFY_CLASS_OFFSET_NODIE(AGameInfo,GameInfo,IPPolicies)
VERIFY_CLASS_OFFSET_NODIE(AGameInfo,GameInfo,ServerLogName)
VERIFY_CLASS_OFFSET_NODIE(AGameInfo,GameInfo,DeathMessageClass)
VERIFY_CLASS_OFFSET_NODIE(AGameInfo,GameInfo,DMMessageClass)
VERIFY_CLASS_OFFSET_NODIE(AGameInfo,GameInfo,MutatorClass)
VERIFY_CLASS_OFFSET_NODIE(AGameInfo,GameInfo,BaseMutator)
VERIFY_CLASS_OFFSET_NODIE(AGameInfo,GameInfo,AdminPassword)
VERIFY_CLASS_OFFSET_NODIE(AGameInfo,GameInfo,GamePassword)
VERIFY_CLASS_OFFSET_NODIE(AGameInfo,GameInfo,DestroyCorpseTime)
VERIFY_CLASS_OFFSET_NODIE(AGameInfo,GameInfo,VoteCmd)
VERIFY_CLASS_OFFSET_NODIE(AGameInfo,GameInfo,VoteArgs)
VERIFY_CLASS_OFFSET_NODIE(AGameInfo,GameInfo,VoteTime)
VERIFY_CLASS_OFFSET_NODIE(AGameInfo,GameInfo,VoteTimeSeconds)
VERIFY_CLASS_OFFSET_NODIE(AGameInfo,GameInfo,MaxVoteMessage)
VERIFY_CLASS_OFFSET_NODIE(AGameInfo,GameInfo,VoteInProgressMessage)
VERIFY_CLASS_OFFSET_NODIE(AGameInfo,GameInfo,VoteNotAllowedMessage)
VERIFY_CLASS_OFFSET_NODIE(AGameInfo,GameInfo,GameReplicationInfoClass)
VERIFY_CLASS_OFFSET_NODIE(AGameInfo,GameInfo,GameReplicationInfo)
VERIFY_CLASS_OFFSET_NODIE(AGameInfo,GameInfo,OverridePlayerClass)
VERIFY_CLASS_OFFSET_NODIE(AGameInfo,GameInfo,SinglePlayerStart)
VERIFY_CLASS_OFFSET_NODIE(AGameInfo,GameInfo,ForcedPlayerTag)
VERIFY_CLASS_OFFSET_NODIE(AGameInfo,GameInfo,MPInfo)
VERIFY_CLASS_SIZE_NODIE(AGameInfo)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,XLevel)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,TimeDilation)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,LevelTickStamp)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,TimeSeconds)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,TimeDeltaSeconds)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,GameTimeSeconds)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,TotalGameTimeSeconds)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,SessionSeconds)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,TotalTimeSeconds)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,Year)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,Month)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,Day)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,DayOfWeek)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,Hour)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,Minute)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,Second)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,Millisecond)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,Title)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,MapFileName)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,Author)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,IdealPlayerCount)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,RecommendedEnemies)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,RecommendedTeammates)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,LocationName)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,LevelEnterText)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,LocalizedPkg)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,DefaultGroupName)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,Pauser)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,Summary)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,VisibleGroups)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,PatchLayerGroup)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,LevelEnterSmacker)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,LevelEnterSmackerWarmup)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,ActiveBink)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,ActiveBinkAlpha)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,ActiveBinkAlphaFadeRate)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,ActiveBinkCompleteEvent)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,FilmGrainMaterial)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,BlackWhiteMaterial)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,MenuBackgroundMaterial)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,GameSpeedModifier)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,HeadScaleModifier)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,MaxTexStreamMegs)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,ShadowCullDistance)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,DirectionalShadowBias)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,DirectionalShadowBiasPS3)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,DirectionalShadowBias360)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,CheckpointTravelActors)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,LevelMaxX)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,LevelMaxY)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,LevelMaxZ)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,LevelMinX)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,LevelMinY)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,LevelMinZ)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,AdditionalAIPathInfos)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,LevelNAVStats)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,WarnNAVSize)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,PathPerf)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,GlobalAIGates)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,TKObjects)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,PrimaryHoloActor)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,BerzerkerGrappleGlobalIntervalMin)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,BerzerkerGrappleGate)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,ScreenshotModeLocation)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,ScreenshotModeRotation)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,Brightness)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,Screenshot)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,DefaultTexture)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,DefaultMaterial)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,DefaultStaticMesh)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,DefaultMesh)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,HubStackLevel)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,NodeDecalLimit)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,DecalDistanceScale)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,AutoDOFMaxFocalDistance)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,MenuCameras)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,UsedMenuCameras)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,ExitLevelFadeTime)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,PlayerDiedEvent)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,FilmGrainOnTag)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,FilmGrainOffTag)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,MaterialInstances)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,EventDatabase)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,DisableSkipBinkTimer)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,ESCText)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,toSkipText)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,preToSkipText)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,LevelAction)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,LevelLoadState)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,NumSaves)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,NumLoads)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,NetMode)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,ComputerName)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,EngineVersion)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,MinNetVersion)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,EngineBuildDate)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,UserName)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,DefaultGameType)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,OverridePlayerClass)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,Game)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,GRI)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,PawnList)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,LocalPlayerPawn)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,EnemyDecorations)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,NextURL)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,NextSwitchCountdown)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,PhysicsEffectsDatabaseClass)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,PhysicsEffectsDatabase)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,ProximityDetector)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,PhysicsQuality)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,KStartupPhysicsTime)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,AmbientLightDirActor)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,DukeVisionIntensity)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,DukeVisionInterferenceActors)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,BombDetectorRadius)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,ActiveEditorPath)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,NumPaths)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,NavigationPointList)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,SpawnBlockClasses)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,AISoundInfo)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,AITeamDialogInfo)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,FinishingMoveGate)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,FinishingMoveInterval)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,MinAITicksPerFrame)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,MaxPercentageAITicksPerFrame)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,MaxAITickMSecPerFrame)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,MaxAITargetVisiblitychecksPerFrame)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,MaxAlertSoundsPerFrame)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,AISoundGate)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,AISoundInterval)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,NumAIExecTicksAllowed)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,NumAITargetEvalsAllowed)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,NumAILookEvalsAllowed)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,NumActiveAI)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,NumAGotoXEvalPerFrame)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,AIEvalGateTime)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,AIEvalGateTimeDynamicPathing)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,DebugNumActiveAILastFrame)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,DebugNumAIExecTicksAllowedLastFrame)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,DebugNumAIExecTicksAllowed)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,DebugNumAIExecTicksLastFrame)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,DebugNumAITargetEvalsLastFrame)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,DebugNumAILookEvalsLastFrame)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,VolumePrefabs)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,VolumePrefabTable)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,ReverbPresets)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,MixerAutoDuckRules)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,CorpseCleanupPeriod)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,CorpseLimbCleanupPeriod)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,GibCleanupPeriod)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,AmmoCasingCleanupPeriod)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,ArmorCleanupPeriod)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,MaxCorpses)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,MaxCorpseLimbs)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,MaxGibs)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,MaxAmmoCasings)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,MaxPipeBombsAndTripMines)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,MaxPipeBombsAndTripMinesMP)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,MaxDestructibleArmor)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,delayedRadiusDamage)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,delayedTraceFireHitDamage)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,NextCorpseCleanupTime)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,NextCorpseLimbCleanupTime)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,NextGibCleanupTime)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,NextAmmoCasingCleanupTime)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,NextArmorCleanupTime)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,Corpses)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,CorpseLimbs)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,Gibs)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,AmmoCasings)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,PipeBombsAndTripMines)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,DestructibleArmor)
VERIFY_CLASS_OFFSET_NODIE(ALevelInfo,LevelInfo,OverridePlayerTypes)
VERIFY_CLASS_SIZE_NODIE(ALevelInfo)
VERIFY_CLASS_SIZE_NODIE(APolyMarker)
VERIFY_CLASS_SIZE_NODIE(AClipMarker)
VERIFY_CLASS_OFFSET_NODIE(UMetagameData,MetagameData,ChallengeStorageArray)
VERIFY_CLASS_OFFSET_NODIE(UMetagameData,MetagameData,StatStorageArray)
VERIFY_CLASS_OFFSET_NODIE(UMetagameData,MetagameData,TotalXP)
VERIFY_CLASS_SIZE_NODIE(UMetagameData)
VERIFY_CLASS_OFFSET_NODIE(UCharacterVoicePack,CharacterVoicePack,CharacterSounds)
VERIFY_CLASS_OFFSET_NODIE(UCharacterVoicePack,CharacterVoicePack,NoSound)
VERIFY_CLASS_SIZE_NODIE(UCharacterVoicePack)
VERIFY_CLASS_SIZE_NODIE(UAction)
VERIFY_CLASS_SIZE_NODIE(UKMeshProps)
VERIFY_CLASS_OFFSET_NODIE(AKConvexSensor,KConvexSensor,ConvexSource)
VERIFY_CLASS_SIZE_NODIE(AKConvexSensor)
VERIFY_CLASS_OFFSET_NODIE(AKSensor,KSensor,OnlySenseTagged)
VERIFY_CLASS_OFFSET_NODIE(AKSensor,KSensor,OnlySenseClasses)
VERIFY_CLASS_OFFSET_NODIE(AKSensor,KSensor,SensorEnableTag)
VERIFY_CLASS_OFFSET_NODIE(AKSensor,KSensor,SensorDisableTag)
VERIFY_CLASS_OFFSET_NODIE(AKSensor,KSensor,BeginSenseEvent)
VERIFY_CLASS_OFFSET_NODIE(AKSensor,KSensor,EndSenseEvent)
VERIFY_CLASS_SIZE_NODIE(AKSensor)
VERIFY_CLASS_OFFSET_NODIE(AKSphereSensor,KSphereSensor,SphereSensorRadius)
VERIFY_CLASS_SIZE_NODIE(AKSphereSensor)
VERIFY_CLASS_OFFSET_NODIE(AKBoxSensor,KBoxSensor,BoxSensorSize)
VERIFY_CLASS_SIZE_NODIE(AKBoxSensor)
VERIFY_CLASS_OFFSET_NODIE(AKLineSensor,KLineSensor,LineSensorLength)
VERIFY_CLASS_SIZE_NODIE(AKLineSensor)
VERIFY_CLASS_SIZE_NODIE(UStandardPhysicsAction)
VERIFY_CLASS_SIZE_NODIE(UPhysicsAction)
VERIFY_CLASS_OFFSET_NODIE(UPhysicsAction_Clamp,PhysicsAction_Clamp,MinLocation)
VERIFY_CLASS_OFFSET_NODIE(UPhysicsAction_Clamp,PhysicsAction_Clamp,MaxLocation)
VERIFY_CLASS_OFFSET_NODIE(UPhysicsAction_Clamp,PhysicsAction_Clamp,LocationClampActor)
VERIFY_CLASS_SIZE_NODIE(UPhysicsAction_Clamp)
VERIFY_CLASS_OFFSET_NODIE(UPhysicsAction_DrunkTargeting,PhysicsAction_DrunkTargeting,TargetActor)
VERIFY_CLASS_SIZE_NODIE(UPhysicsAction_DrunkTargeting)
VERIFY_CLASS_OFFSET_NODIE(UPhysicsAction_PathConstraint,PhysicsAction_PathConstraint,InterpolationPoint)
VERIFY_CLASS_OFFSET_NODIE(UPhysicsAction_PathConstraint,PhysicsAction_PathConstraint,PathFriction)
VERIFY_CLASS_OFFSET_NODIE(UPhysicsAction_PathConstraint,PhysicsAction_PathConstraint,BoneName)
VERIFY_CLASS_OFFSET_NODIE(UPhysicsAction_PathConstraint,PhysicsAction_PathConstraint,PathAlpha)
VERIFY_CLASS_OFFSET_NODIE(UPhysicsAction_PathConstraint,PhysicsAction_PathConstraint,VelocityForAlignment)
VERIFY_CLASS_SIZE_NODIE(UPhysicsAction_PathConstraint)
VERIFY_CLASS_OFFSET_NODIE(UPhysicsAction_JetPropulsion,PhysicsAction_JetPropulsion,JetInfos)
VERIFY_CLASS_SIZE_NODIE(UPhysicsAction_JetPropulsion)
VERIFY_CLASS_OFFSET_NODIE(UPhysicsAction_VelocityClamp,PhysicsAction_VelocityClamp,MaxVelocity)
VERIFY_CLASS_SIZE_NODIE(UPhysicsAction_VelocityClamp)
VERIFY_CLASS_OFFSET_NODIE(UPhysicsAction_Acceleration,PhysicsAction_Acceleration,LinearAccel)
VERIFY_CLASS_OFFSET_NODIE(UPhysicsAction_Acceleration,PhysicsAction_Acceleration,AngularAccel)
VERIFY_CLASS_SIZE_NODIE(UPhysicsAction_Acceleration)
VERIFY_CLASS_OFFSET_NODIE(UPhysicsAction_ConstAccel,PhysicsAction_ConstAccel,LinearAccel)
VERIFY_CLASS_OFFSET_NODIE(UPhysicsAction_ConstAccel,PhysicsAction_ConstAccel,AngularAccel)
VERIFY_CLASS_SIZE_NODIE(UPhysicsAction_ConstAccel)
VERIFY_CLASS_OFFSET_NODIE(UPhysicsAction_ConstVel,PhysicsAction_ConstVel,LinearVel)
VERIFY_CLASS_OFFSET_NODIE(UPhysicsAction_ConstVel,PhysicsAction_ConstVel,AngularVel)
VERIFY_CLASS_SIZE_NODIE(UPhysicsAction_ConstVel)
VERIFY_CLASS_OFFSET_NODIE(UPhysicsAction_ConstLinearVel,PhysicsAction_ConstLinearVel,MyConstraints)
VERIFY_CLASS_OFFSET_NODIE(UPhysicsAction_ConstLinearVel,PhysicsAction_ConstLinearVel,ConstraintAxis)
VERIFY_CLASS_OFFSET_NODIE(UPhysicsAction_ConstLinearVel,PhysicsAction_ConstLinearVel,DesiredSpeed)
VERIFY_CLASS_OFFSET_NODIE(UPhysicsAction_ConstLinearVel,PhysicsAction_ConstLinearVel,Strength)
VERIFY_CLASS_SIZE_NODIE(UPhysicsAction_ConstLinearVel)
VERIFY_CLASS_SIZE_NODIE(UPhysicsAction_VelocityLock)
VERIFY_CLASS_OFFSET_NODIE(UPhysicsAction_Frisbee,PhysicsAction_Frisbee,CenterOfMassOffset)
VERIFY_CLASS_OFFSET_NODIE(UPhysicsAction_Frisbee,PhysicsAction_Frisbee,LiftCoeffecient)
VERIFY_CLASS_SIZE_NODIE(UPhysicsAction_Frisbee)
VERIFY_CLASS_OFFSET_NODIE(UPhysicsAction_Lift,PhysicsAction_Lift,CenterOfMassOffset)
VERIFY_CLASS_OFFSET_NODIE(UPhysicsAction_Lift,PhysicsAction_Lift,ForwardRotationOffset)
VERIFY_CLASS_OFFSET_NODIE(UPhysicsAction_Lift,PhysicsAction_Lift,LiftCoeffecient)
VERIFY_CLASS_OFFSET_NODIE(UPhysicsAction_Lift,PhysicsAction_Lift,ForwardLinearDrag)
VERIFY_CLASS_OFFSET_NODIE(UPhysicsAction_Lift,PhysicsAction_Lift,LinearDrag)
VERIFY_CLASS_OFFSET_NODIE(UPhysicsAction_Lift,PhysicsAction_Lift,AngularDrag)
VERIFY_CLASS_SIZE_NODIE(UPhysicsAction_Lift)
VERIFY_CLASS_SIZE_NODIE(AKLinearAngularPulley)
VERIFY_CLASS_OFFSET_NODIE(AKPulley,KPulley,SecondaryAxis)
VERIFY_CLASS_OFFSET_NODIE(AKPulley,KPulley,PulleyRatio)
VERIFY_CLASS_SIZE_NODIE(AKPulley)
VERIFY_CLASS_OFFSET_NODIE(AKConstraint,KConstraint,KConstraintActor1)
VERIFY_CLASS_OFFSET_NODIE(AKConstraint,KConstraint,KConstraintActor2)
VERIFY_CLASS_OFFSET_NODIE(AKConstraint,KConstraint,KConstraintActor1Tag)
VERIFY_CLASS_OFFSET_NODIE(AKConstraint,KConstraint,KConstraintActor2Tag)
VERIFY_CLASS_OFFSET_NODIE(AKConstraint,KConstraint,KConstraintActor1Bone)
VERIFY_CLASS_OFFSET_NODIE(AKConstraint,KConstraint,KConstraintActor2Bone)
VERIFY_CLASS_OFFSET_NODIE(AKConstraint,KConstraint,BreakOnDamageChance)
VERIFY_CLASS_OFFSET_NODIE(AKConstraint,KConstraint,KForceDisableThreshold)
VERIFY_CLASS_OFFSET_NODIE(AKConstraint,KConstraint,BreakEvent)
VERIFY_CLASS_OFFSET_NODIE(AKConstraint,KConstraint,BreakSoundInfo)
VERIFY_CLASS_SIZE_NODIE(AKConstraint)
VERIFY_CLASS_SIZE_NODIE(AKAngularPulley)
VERIFY_CLASS_OFFSET_NODIE(AKLinearPulley,KLinearPulley,KConstraintActor1Offset)
VERIFY_CLASS_OFFSET_NODIE(AKLinearPulley,KLinearPulley,KConstraintActor2Offset)
VERIFY_CLASS_SIZE_NODIE(AKLinearPulley)
VERIFY_CLASS_OFFSET_NODIE(AKAngularSpringDamper,KAngularSpringDamper,BreakAngle)
VERIFY_CLASS_OFFSET_NODIE(AKAngularSpringDamper,KAngularSpringDamper,SecondaryAxis)
VERIFY_CLASS_SIZE_NODIE(AKAngularSpringDamper)
VERIFY_CLASS_OFFSET_NODIE(AKSpringDamper,KSpringDamper,SimulationMode)
VERIFY_CLASS_OFFSET_NODIE(AKSpringDamper,KSpringDamper,K)
VERIFY_CLASS_OFFSET_NODIE(AKSpringDamper,KSpringDamper,D)
VERIFY_CLASS_SIZE_NODIE(AKSpringDamper)
VERIFY_CLASS_SIZE_NODIE(AKAffector)
VERIFY_CLASS_OFFSET_NODIE(AKLinearSpringDamper,KLinearSpringDamper,Length)
VERIFY_CLASS_OFFSET_NODIE(AKLinearSpringDamper,KLinearSpringDamper,BreakLength)
VERIFY_CLASS_SIZE_NODIE(AKLinearSpringDamper)
VERIFY_CLASS_OFFSET_NODIE(AKAngularJointLimit,KAngularJointLimit,MaximumAngle)
VERIFY_CLASS_OFFSET_NODIE(AKAngularJointLimit,KAngularJointLimit,SecondaryAxis)
VERIFY_CLASS_SIZE_NODIE(AKAngularJointLimit)
VERIFY_CLASS_OFFSET_NODIE(AKLinearJointLimit,KLinearJointLimit,AxisMode)
VERIFY_CLASS_OFFSET_NODIE(AKLinearJointLimit,KLinearJointLimit,MinimumDistance)
VERIFY_CLASS_OFFSET_NODIE(AKLinearJointLimit,KLinearJointLimit,MaximumDistance)
VERIFY_CLASS_SIZE_NODIE(AKLinearJointLimit)
VERIFY_CLASS_OFFSET_NODIE(AKAngularMotorAffector,KAngularMotorAffector,DesiredAngularVelocity)
VERIFY_CLASS_OFFSET_NODIE(AKAngularMotorAffector,KAngularMotorAffector,MaximumTorque)
VERIFY_CLASS_SIZE_NODIE(AKAngularMotorAffector)
VERIFY_CLASS_OFFSET_NODIE(AKLinearMotorAffector,KLinearMotorAffector,MotorAxisMode)
VERIFY_CLASS_OFFSET_NODIE(AKLinearMotorAffector,KLinearMotorAffector,DesiredVelocity)
VERIFY_CLASS_OFFSET_NODIE(AKLinearMotorAffector,KLinearMotorAffector,MaximumForce)
VERIFY_CLASS_SIZE_NODIE(AKLinearMotorAffector)
VERIFY_CLASS_SIZE_NODIE(AKSliding)
VERIFY_CLASS_SIZE_NODIE(AKLinear)
VERIFY_CLASS_SIZE_NODIE(AKFixedOrientation)
VERIFY_CLASS_SIZE_NODIE(AKFixed)
VERIFY_CLASS_OFFSET_NODIE(AKHinge,KHinge,CreakSoundInfo)
VERIFY_CLASS_OFFSET_NODIE(AKHinge,KHinge,CreakInfo)
VERIFY_CLASS_SIZE_NODIE(AKHinge)
VERIFY_CLASS_SIZE_NODIE(AKBSJoint)
VERIFY_CLASS_SIZE_NODIE(ABuildSprite)
VERIFY_CLASS_OFFSET_NODIE(AdnVisualizationController,dnVisualizationController,StreamSource)
VERIFY_CLASS_OFFSET_NODIE(AdnVisualizationController,dnVisualizationController,SourceSoundSlot)
VERIFY_CLASS_OFFSET_NODIE(AdnVisualizationController,dnVisualizationController,Effects)
VERIFY_CLASS_OFFSET_NODIE(AdnVisualizationController,dnVisualizationController,EnableTag)
VERIFY_CLASS_OFFSET_NODIE(AdnVisualizationController,dnVisualizationController,DisableTag)
VERIFY_CLASS_OFFSET_NODIE(AdnVisualizationController,dnVisualizationController,VisDataScale)
VERIFY_CLASS_OFFSET_NODIE(AdnVisualizationController,dnVisualizationController,ColorTablePath)
VERIFY_CLASS_OFFSET_NODIE(AdnVisualizationController,dnVisualizationController,ColorTable)
VERIFY_CLASS_SIZE_NODIE(AdnVisualizationController)
VERIFY_CLASS_SIZE_NODIE(UStaticTexture)
VERIFY_CLASS_OFFSET_NODIE(UTextureCanvas,TextureCanvas,PaletteMap)
VERIFY_CLASS_SIZE_NODIE(UTextureCanvas)
VERIFY_CLASS_OFFSET_NODIE(USmackerTextureInstance,SmackerTextureInstance,State)
VERIFY_CLASS_OFFSET_NODIE(USmackerTextureInstance,SmackerTextureInstance,SavedNewFrame)
VERIFY_CLASS_SIZE_NODIE(USmackerTextureInstance)
VERIFY_CLASS_OFFSET_NODIE(UMaterialExInstance,MaterialExInstance,Material)
VERIFY_CLASS_SIZE_NODIE(UMaterialExInstance)
VERIFY_CLASS_OFFSET_NODIE(USmackerTexture,SmackerTexture,DefaultState)
VERIFY_CLASS_OFFSET_NODIE(USmackerTexture,SmackerTexture,InternalUpdateTime)
VERIFY_CLASS_OFFSET_NODIE(USmackerTexture,SmackerTexture,Instance)
VERIFY_CLASS_SIZE_NODIE(USmackerTexture)
VERIFY_CLASS_OFFSET_NODIE(UBinkTexture,BinkTexture,SeekFrame)
VERIFY_CLASS_OFFSET_NODIE(UBinkTexture,BinkTexture,BinkHandle)
VERIFY_CLASS_OFFSET_NODIE(UBinkTexture,BinkTexture,Revision)
VERIFY_CLASS_OFFSET_NODIE(UBinkTexture,BinkTexture,CacheId)
VERIFY_CLASS_OFFSET_NODIE(UBinkTexture,BinkTexture,SyncTime)
VERIFY_CLASS_SIZE_NODIE(UBinkTexture)
VERIFY_CLASS_OFFSET_NODIE(UPrecacheIndex,PrecacheIndex,StaticMeshes)
VERIFY_CLASS_OFFSET_NODIE(UPrecacheIndex,PrecacheIndex,Meshes)
VERIFY_CLASS_OFFSET_NODIE(UPrecacheIndex,PrecacheIndex,Textures)
VERIFY_CLASS_OFFSET_NODIE(UPrecacheIndex,PrecacheIndex,AttenuationMaps)
VERIFY_CLASS_OFFSET_NODIE(UPrecacheIndex,PrecacheIndex,BumpMaps)
VERIFY_CLASS_OFFSET_NODIE(UPrecacheIndex,PrecacheIndex,CubeMaps)
VERIFY_CLASS_OFFSET_NODIE(UPrecacheIndex,PrecacheIndex,Sounds)
VERIFY_CLASS_OFFSET_NODIE(UPrecacheIndex,PrecacheIndex,Music)
VERIFY_CLASS_OFFSET_NODIE(UPrecacheIndex,PrecacheIndex,DamageTypes)
VERIFY_CLASS_OFFSET_NODIE(UPrecacheIndex,PrecacheIndex,MaterialClasses)
VERIFY_CLASS_OFFSET_NODIE(UPrecacheIndex,PrecacheIndex,FootstepCategories)
VERIFY_CLASS_OFFSET_NODIE(UPrecacheIndex,PrecacheIndex,Level)
VERIFY_CLASS_OFFSET_NODIE(UPrecacheIndex,PrecacheIndex,MapName)
VERIFY_CLASS_OFFSET_NODIE(UPrecacheIndex,PrecacheIndex,ActorClasses)
VERIFY_CLASS_OFFSET_NODIE(UPrecacheIndex,PrecacheIndex,Materials)
VERIFY_CLASS_OFFSET_NODIE(UPrecacheIndex,PrecacheIndex,PawnAnimations)
VERIFY_CLASS_OFFSET_NODIE(UPrecacheIndex,PrecacheIndex,AnimationControllers)
VERIFY_CLASS_OFFSET_NODIE(UPrecacheIndex,PrecacheIndex,AnimationResources)
VERIFY_CLASS_OFFSET_NODIE(UPrecacheIndex,PrecacheIndex,WeaponClasses)
VERIFY_CLASS_OFFSET_NODIE(UPrecacheIndex,PrecacheIndex,ProcessedObjects)
VERIFY_CLASS_OFFSET_NODIE(UPrecacheIndex,PrecacheIndex,CorpseClass)
VERIFY_CLASS_OFFSET_NODIE(UPrecacheIndex,PrecacheIndex,MapInfo)
VERIFY_CLASS_SIZE_NODIE(UPrecacheIndex)
VERIFY_CLASS_SIZE_NODIE(UDefaultPhysicsMaterial)
VERIFY_CLASS_OFFSET_NODIE(UPhysicsMaterial,PhysicsMaterial,InternalMaterialID)
VERIFY_CLASS_OFFSET_NODIE(UPhysicsMaterial,PhysicsMaterial,Hardness)
VERIFY_CLASS_OFFSET_NODIE(UPhysicsMaterial,PhysicsMaterial,ImpactDamageType)
VERIFY_CLASS_SIZE_NODIE(UPhysicsMaterial)
VERIFY_CLASS_OFFSET_NODIE(UPhysicsEffectsDatabase,PhysicsEffectsDatabase,Entries)
VERIFY_CLASS_OFFSET_NODIE(UPhysicsEffectsDatabase,PhysicsEffectsDatabase,Database)
VERIFY_CLASS_OFFSET_NODIE(UPhysicsEffectsDatabase,PhysicsEffectsDatabase,MaterialLookup)
VERIFY_CLASS_SIZE_NODIE(UPhysicsEffectsDatabase)
VERIFY_CLASS_SIZE_NODIE(UPatchPrimitive)
VERIFY_CLASS_OFFSET_NODIE(UPatchRenderData,PatchRenderData,FoliageDefs)
VERIFY_CLASS_OFFSET_NODIE(UPatchRenderData,PatchRenderData,FoliageSectors)
VERIFY_CLASS_SIZE_NODIE(UPatchRenderData)
VERIFY_CLASS_OFFSET_NODIE(UPatchData,PatchData,TerrainLOD)
VERIFY_CLASS_OFFSET_NODIE(UPatchData,PatchData,TerrainEditGrid)
VERIFY_CLASS_OFFSET_NODIE(UPatchData,PatchData,MaxError)
VERIFY_CLASS_OFFSET_NODIE(UPatchData,PatchData,MaxEdgeLength)
VERIFY_CLASS_OFFSET_NODIE(UPatchData,PatchData,MaxErrorPhysicsScale)
VERIFY_CLASS_OFFSET_NODIE(UPatchData,PatchData,MaxEdgeLengthPhysicsScale)
VERIFY_CLASS_OFFSET_NODIE(UPatchData,PatchData,Surfaces)
VERIFY_CLASS_OFFSET_NODIE(UPatchData,PatchData,Vertices)
VERIFY_CLASS_OFFSET_NODIE(UPatchData,PatchData,BBox)
VERIFY_CLASS_OFFSET_NODIE(UPatchData,PatchData,StaticMesh)
VERIFY_CLASS_OFFSET_NODIE(UPatchData,PatchData,NumSelected)
VERIFY_CLASS_OFFSET_NODIE(UPatchData,PatchData,FoliageDefs)
VERIFY_CLASS_OFFSET_NODIE(UPatchData,PatchData,CurrentFoliage)
VERIFY_CLASS_OFFSET_NODIE(UPatchData,PatchData,CurrentFoliageColor1)
VERIFY_CLASS_OFFSET_NODIE(UPatchData,PatchData,CurrentFoliageColor2)
VERIFY_CLASS_OFFSET_NODIE(UPatchData,PatchData,CurrentFoliagePaintMode)
VERIFY_CLASS_OFFSET_NODIE(UPatchData,PatchData,UserData)
VERIFY_CLASS_SIZE_NODIE(UPatchData)
VERIFY_CLASS_OFFSET_NODIE(APatchActor,PatchActor,DefaultPrimitiveMode)
VERIFY_CLASS_OFFSET_NODIE(APatchActor,PatchActor,DefaultSizeX)
VERIFY_CLASS_OFFSET_NODIE(APatchActor,PatchActor,DefaultSizeY)
VERIFY_CLASS_OFFSET_NODIE(APatchActor,PatchActor,PatchData)
VERIFY_CLASS_OFFSET_NODIE(APatchActor,PatchActor,PatchRenderData)
VERIFY_CLASS_SIZE_NODIE(APatchActor)
VERIFY_CLASS_SIZE_NODIE(UMovementBoneTracker)
VERIFY_CLASS_OFFSET_NODIE(UTextureAnimMgr,TextureAnimMgr,AnimControllers)
VERIFY_CLASS_SIZE_NODIE(UTextureAnimMgr)
VERIFY_CLASS_OFFSET_NODIE(UModifier,Modifier,Material)
VERIFY_CLASS_SIZE_NODIE(UModifier)
VERIFY_CLASS_OFFSET_NODIE(UGrayscaleShader,GrayscaleShader,Material)
VERIFY_CLASS_OFFSET_NODIE(UGrayscaleShader,GrayscaleShader,OutputColor)
VERIFY_CLASS_SIZE_NODIE(UGrayscaleShader)
VERIFY_CLASS_OFFSET_NODIE(UBumpCubeEnvMap,BumpCubeEnvMap,NormalMap)
VERIFY_CLASS_OFFSET_NODIE(UBumpCubeEnvMap,BumpCubeEnvMap,HeightMap)
VERIFY_CLASS_OFFSET_NODIE(UBumpCubeEnvMap,BumpCubeEnvMap,BumpScale)
VERIFY_CLASS_OFFSET_NODIE(UBumpCubeEnvMap,BumpCubeEnvMap,NumSmoothPasses)
VERIFY_CLASS_OFFSET_NODIE(UBumpCubeEnvMap,BumpCubeEnvMap,BumpTarget)
VERIFY_CLASS_SIZE_NODIE(UBumpCubeEnvMap)
VERIFY_CLASS_OFFSET_NODIE(URenderTarget,RenderTarget,Width)
VERIFY_CLASS_OFFSET_NODIE(URenderTarget,RenderTarget,Height)
VERIFY_CLASS_OFFSET_NODIE(URenderTarget,RenderTarget,NearClipBias)
VERIFY_CLASS_OFFSET_NODIE(URenderTarget,RenderTarget,RenderTargetInterface)
VERIFY_CLASS_SIZE_NODIE(URenderTarget)
VERIFY_CLASS_OFFSET_NODIE(UFrameBuffer,FrameBuffer,XScale)
VERIFY_CLASS_OFFSET_NODIE(UFrameBuffer,FrameBuffer,YScale)
VERIFY_CLASS_OFFSET_NODIE(UFrameBuffer,FrameBuffer,FOVScale)
VERIFY_CLASS_OFFSET_NODIE(UFrameBuffer,FrameBuffer,FrameBufferGroup)
VERIFY_CLASS_SIZE_NODIE(UFrameBuffer)
VERIFY_CLASS_OFFSET_NODIE(UBumpWaterReflection,BumpWaterReflection,NormalMap)
VERIFY_CLASS_OFFSET_NODIE(UBumpWaterReflection,BumpWaterReflection,HeightMap)
VERIFY_CLASS_OFFSET_NODIE(UBumpWaterReflection,BumpWaterReflection,NormalMap2)
VERIFY_CLASS_OFFSET_NODIE(UBumpWaterReflection,BumpWaterReflection,HeightMap2)
VERIFY_CLASS_OFFSET_NODIE(UBumpWaterReflection,BumpWaterReflection,BumpScale)
VERIFY_CLASS_OFFSET_NODIE(UBumpWaterReflection,BumpWaterReflection,NumSmoothPasses)
VERIFY_CLASS_OFFSET_NODIE(UBumpWaterReflection,BumpWaterReflection,BumpTarget)
VERIFY_CLASS_OFFSET_NODIE(UBumpWaterReflection,BumpWaterReflection,SurfaceNormalMap)
VERIFY_CLASS_OFFSET_NODIE(UBumpWaterReflection,BumpWaterReflection,SurfaceSpecMap)
VERIFY_CLASS_OFFSET_NODIE(UBumpWaterReflection,BumpWaterReflection,FresnelAlpha1)
VERIFY_CLASS_OFFSET_NODIE(UBumpWaterReflection,BumpWaterReflection,FresnelAlpha2)
VERIFY_CLASS_OFFSET_NODIE(UBumpWaterReflection,BumpWaterReflection,FresnelExp)
VERIFY_CLASS_OFFSET_NODIE(UBumpWaterReflection,BumpWaterReflection,ReflPerturbScale)
VERIFY_CLASS_OFFSET_NODIE(UBumpWaterReflection,BumpWaterReflection,RefrPerturbScale)
VERIFY_CLASS_OFFSET_NODIE(UBumpWaterReflection,BumpWaterReflection,SpecularPower)
VERIFY_CLASS_OFFSET_NODIE(UBumpWaterReflection,BumpWaterReflection,SpecularScale)
VERIFY_CLASS_OFFSET_NODIE(UBumpWaterReflection,BumpWaterReflection,WaterColor)
VERIFY_CLASS_OFFSET_NODIE(UBumpWaterReflection,BumpWaterReflection,WaterColorAlpha)
VERIFY_CLASS_OFFSET_NODIE(UBumpWaterReflection,BumpWaterReflection,BackGroundNormalStrength)
VERIFY_CLASS_OFFSET_NODIE(UBumpWaterReflection,BumpWaterReflection,SurfaceMaterial)
VERIFY_CLASS_OFFSET_NODIE(UBumpWaterReflection,BumpWaterReflection,SurfaceAlpha)
VERIFY_CLASS_OFFSET_NODIE(UBumpWaterReflection,BumpWaterReflection,WaterEdgeFadeDist)
VERIFY_CLASS_OFFSET_NODIE(UBumpWaterReflection,BumpWaterReflection,EmissiveTint)
VERIFY_CLASS_OFFSET_NODIE(UBumpWaterReflection,BumpWaterReflection,BloomScale)
VERIFY_CLASS_SIZE_NODIE(UBumpWaterReflection)
VERIFY_CLASS_OFFSET_NODIE(UFakeBumpMap,FakeBumpMap,NormalMap)
VERIFY_CLASS_OFFSET_NODIE(UFakeBumpMap,FakeBumpMap,HeightMap)
VERIFY_CLASS_OFFSET_NODIE(UFakeBumpMap,FakeBumpMap,BumpScale)
VERIFY_CLASS_OFFSET_NODIE(UFakeBumpMap,FakeBumpMap,NumSmoothPasses)
VERIFY_CLASS_OFFSET_NODIE(UFakeBumpMap,FakeBumpMap,NormalMap2)
VERIFY_CLASS_OFFSET_NODIE(UFakeBumpMap,FakeBumpMap,BumpTarget)
VERIFY_CLASS_OFFSET_NODIE(UFakeBumpMap,FakeBumpMap,CA_ShiftR)
VERIFY_CLASS_OFFSET_NODIE(UFakeBumpMap,FakeBumpMap,CA_ShiftG)
VERIFY_CLASS_OFFSET_NODIE(UFakeBumpMap,FakeBumpMap,CA_ShiftRScale)
VERIFY_CLASS_OFFSET_NODIE(UFakeBumpMap,FakeBumpMap,CA_ShiftGScale)
VERIFY_CLASS_OFFSET_NODIE(UFakeBumpMap,FakeBumpMap,AlphaMap)
VERIFY_CLASS_OFFSET_NODIE(UFakeBumpMap,FakeBumpMap,EdgeFadeDist)
VERIFY_CLASS_SIZE_NODIE(UFakeBumpMap)
VERIFY_CLASS_OFFSET_NODIE(UCombiner,Combiner,CombineOperation)
VERIFY_CLASS_OFFSET_NODIE(UCombiner,Combiner,AlphaOperation)
VERIFY_CLASS_OFFSET_NODIE(UCombiner,Combiner,Material1)
VERIFY_CLASS_OFFSET_NODIE(UCombiner,Combiner,Material2)
VERIFY_CLASS_OFFSET_NODIE(UCombiner,Combiner,Material3)
VERIFY_CLASS_SIZE_NODIE(UCombiner)
VERIFY_CLASS_OFFSET_NODIE(UTexMatrix,TexMatrix,Matrix)
VERIFY_CLASS_SIZE_NODIE(UTexMatrix)
VERIFY_CLASS_OFFSET_NODIE(UTexModifier,TexModifier,TexCoordSource)
VERIFY_CLASS_OFFSET_NODIE(UTexModifier,TexModifier,TexCoordCount)
VERIFY_CLASS_OFFSET_NODIE(UTexModifier,TexModifier,MatrixIndex)
VERIFY_CLASS_SIZE_NODIE(UTexModifier)
VERIFY_CLASS_SIZE_NODIE(UParticleMaterial)
VERIFY_CLASS_SIZE_NODIE(UFogMaterial)
VERIFY_CLASS_OFFSET_NODIE(UColorModifier,ColorModifier,Color)
VERIFY_CLASS_SIZE_NODIE(UColorModifier)
VERIFY_CLASS_SIZE_NODIE(UProxyBitmapMaterial)
VERIFY_CLASS_SIZE_NODIE(UMiscMaterial)
VERIFY_CLASS_OFFSET_NODIE(ULayerMaterial,LayerMaterial,Layers)
VERIFY_CLASS_OFFSET_NODIE(ULayerMaterial,LayerMaterial,LayerMatrix)
VERIFY_CLASS_OFFSET_NODIE(ULayerMaterial,LayerMaterial,CurrentLayer)
VERIFY_CLASS_OFFSET_NODIE(ULayerMaterial,LayerMaterial,PaintGrid)
VERIFY_CLASS_OFFSET_NODIE(ULayerMaterial,LayerMaterial,AlphaUScale)
VERIFY_CLASS_OFFSET_NODIE(ULayerMaterial,LayerMaterial,AlphaVScale)
VERIFY_CLASS_OFFSET_NODIE(ULayerMaterial,LayerMaterial,AlphaUShift)
VERIFY_CLASS_OFFSET_NODIE(ULayerMaterial,LayerMaterial,AlphaVShift)
VERIFY_CLASS_OFFSET_NODIE(ULayerMaterial,LayerMaterial,TempActor)
VERIFY_CLASS_OFFSET_NODIE(ULayerMaterial,LayerMaterial,Version)
VERIFY_CLASS_SIZE_NODIE(ULayerMaterial)
VERIFY_CLASS_OFFSET_NODIE(UMaterialWorkspace,MaterialWorkspace,Materials)
VERIFY_CLASS_OFFSET_NODIE(UMaterialWorkspace,MaterialWorkspace,SelectedMaterial)
VERIFY_CLASS_OFFSET_NODIE(UMaterialWorkspace,MaterialWorkspace,SelectedButton)
VERIFY_CLASS_OFFSET_NODIE(UMaterialWorkspace,MaterialWorkspace,MouseButtons)
VERIFY_CLASS_OFFSET_NODIE(UMaterialWorkspace,MaterialWorkspace,MouseX)
VERIFY_CLASS_OFFSET_NODIE(UMaterialWorkspace,MaterialWorkspace,MouseY)
VERIFY_CLASS_SIZE_NODIE(UMaterialWorkspace)
VERIFY_CLASS_OFFSET_NODIE(UBumpShader,BumpShader,DiffuseMap)
VERIFY_CLASS_OFFSET_NODIE(UBumpShader,BumpShader,EmissiveMap)
VERIFY_CLASS_OFFSET_NODIE(UBumpShader,BumpShader,ParallaxMap)
VERIFY_CLASS_OFFSET_NODIE(UBumpShader,BumpShader,ParallaxScale)
VERIFY_CLASS_OFFSET_NODIE(UBumpShader,BumpShader,NormalMap)
VERIFY_CLASS_OFFSET_NODIE(UBumpShader,BumpShader,HeightMap)
VERIFY_CLASS_OFFSET_NODIE(UBumpShader,BumpShader,BumpScale)
VERIFY_CLASS_OFFSET_NODIE(UBumpShader,BumpShader,NumSmoothPasses)
VERIFY_CLASS_OFFSET_NODIE(UBumpShader,BumpShader,DiffuseStream)
VERIFY_CLASS_OFFSET_NODIE(UBumpShader,BumpShader,NormalMapStream)
VERIFY_CLASS_OFFSET_NODIE(UBumpShader,BumpShader,EmissiveStream)
VERIFY_CLASS_OFFSET_NODIE(UBumpShader,BumpShader,SpecularMap)
VERIFY_CLASS_OFFSET_NODIE(UBumpShader,BumpShader,SpecularScale)
VERIFY_CLASS_OFFSET_NODIE(UBumpShader,BumpShader,EmissiveBloomTint)
VERIFY_CLASS_OFFSET_NODIE(UBumpShader,BumpShader,RT_SpecularExp)
VERIFY_CLASS_OFFSET_NODIE(UBumpShader,BumpShader,RT_SpecularScale)
VERIFY_CLASS_OFFSET_NODIE(UBumpShader,BumpShader,DetailBumpShader)
VERIFY_CLASS_OFFSET_NODIE(UBumpShader,BumpShader,DetailAlpha)
VERIFY_CLASS_OFFSET_NODIE(UBumpShader,BumpShader,DetailScaleX)
VERIFY_CLASS_OFFSET_NODIE(UBumpShader,BumpShader,DetailScaleY)
VERIFY_CLASS_OFFSET_NODIE(UBumpShader,BumpShader,DetailShiftX)
VERIFY_CLASS_OFFSET_NODIE(UBumpShader,BumpShader,DetailShiftY)
VERIFY_CLASS_OFFSET_NODIE(UBumpShader,BumpShader,RimLightAlphaMap)
VERIFY_CLASS_OFFSET_NODIE(UBumpShader,BumpShader,RimLightColorMap)
VERIFY_CLASS_OFFSET_NODIE(UBumpShader,BumpShader,RimLightColor)
VERIFY_CLASS_OFFSET_NODIE(UBumpShader,BumpShader,RimLightIntensity)
VERIFY_CLASS_OFFSET_NODIE(UBumpShader,BumpShader,RimLightPower)
VERIFY_CLASS_OFFSET_NODIE(UBumpShader,BumpShader,RimLightFalloff)
VERIFY_CLASS_SIZE_NODIE(UBumpShader)
VERIFY_CLASS_OFFSET_NODIE(UTexEnvMap,TexEnvMap,EnvMapType)
VERIFY_CLASS_SIZE_NODIE(UTexEnvMap)
VERIFY_CLASS_OFFSET_NODIE(UTexRotator,TexRotator,Matrix)
VERIFY_CLASS_OFFSET_NODIE(UTexRotator,TexRotator,TexRotationType)
VERIFY_CLASS_OFFSET_NODIE(UTexRotator,TexRotator,Rotation)
VERIFY_CLASS_OFFSET_NODIE(UTexRotator,TexRotator,UOffset)
VERIFY_CLASS_OFFSET_NODIE(UTexRotator,TexRotator,VOffset)
VERIFY_CLASS_OFFSET_NODIE(UTexRotator,TexRotator,OscillationRate)
VERIFY_CLASS_OFFSET_NODIE(UTexRotator,TexRotator,OscillationAmplitude)
VERIFY_CLASS_OFFSET_NODIE(UTexRotator,TexRotator,OscillationPhase)
VERIFY_CLASS_SIZE_NODIE(UTexRotator)
VERIFY_CLASS_OFFSET_NODIE(UTexScaler,TexScaler,Matrix)
VERIFY_CLASS_OFFSET_NODIE(UTexScaler,TexScaler,UScale)
VERIFY_CLASS_OFFSET_NODIE(UTexScaler,TexScaler,UScaleOscillationRate)
VERIFY_CLASS_OFFSET_NODIE(UTexScaler,TexScaler,UScaleOscillationAmplitude)
VERIFY_CLASS_OFFSET_NODIE(UTexScaler,TexScaler,UScaleOscillationPhase)
VERIFY_CLASS_OFFSET_NODIE(UTexScaler,TexScaler,VScale)
VERIFY_CLASS_OFFSET_NODIE(UTexScaler,TexScaler,VScaleOscillationRate)
VERIFY_CLASS_OFFSET_NODIE(UTexScaler,TexScaler,VScaleOscillationAmplitude)
VERIFY_CLASS_OFFSET_NODIE(UTexScaler,TexScaler,VScaleOscillationPhase)
VERIFY_CLASS_OFFSET_NODIE(UTexScaler,TexScaler,UOffset)
VERIFY_CLASS_OFFSET_NODIE(UTexScaler,TexScaler,VOffset)
VERIFY_CLASS_SIZE_NODIE(UTexScaler)
VERIFY_CLASS_OFFSET_NODIE(UTexPanner,TexPanner,PanDirection)
VERIFY_CLASS_OFFSET_NODIE(UTexPanner,TexPanner,PanDirectionOscillationRate)
VERIFY_CLASS_OFFSET_NODIE(UTexPanner,TexPanner,PanDirectionOscillationAmplitude)
VERIFY_CLASS_OFFSET_NODIE(UTexPanner,TexPanner,PanDirectionOscillationPhase)
VERIFY_CLASS_OFFSET_NODIE(UTexPanner,TexPanner,PanRate)
VERIFY_CLASS_OFFSET_NODIE(UTexPanner,TexPanner,PanRateOscillationRate)
VERIFY_CLASS_OFFSET_NODIE(UTexPanner,TexPanner,PanRateOscillationAmplitude)
VERIFY_CLASS_OFFSET_NODIE(UTexPanner,TexPanner,PanRateOscillationPhase)
VERIFY_CLASS_OFFSET_NODIE(UTexPanner,TexPanner,ShiftX)
VERIFY_CLASS_OFFSET_NODIE(UTexPanner,TexPanner,ShiftY)
VERIFY_CLASS_OFFSET_NODIE(UTexPanner,TexPanner,ShiftOscillationRate)
VERIFY_CLASS_OFFSET_NODIE(UTexPanner,TexPanner,ShiftOscillationAmplitude)
VERIFY_CLASS_OFFSET_NODIE(UTexPanner,TexPanner,ShiftOscillationPhase)
VERIFY_CLASS_OFFSET_NODIE(UTexPanner,TexPanner,TexMatrix)
VERIFY_CLASS_SIZE_NODIE(UTexPanner)
VERIFY_CLASS_OFFSET_NODIE(UActorColor,ActorColor,DefaultColor)
VERIFY_CLASS_OFFSET_NODIE(UActorColor,ActorColor,id)
VERIFY_CLASS_SIZE_NODIE(UActorColor)
VERIFY_CLASS_SIZE_NODIE(UConstantMaterial)
VERIFY_CLASS_OFFSET_NODIE(UDistFadeColor,DistFadeColor,StartDist)
VERIFY_CLASS_OFFSET_NODIE(UDistFadeColor,DistFadeColor,EndDist)
VERIFY_CLASS_OFFSET_NODIE(UDistFadeColor,DistFadeColor,StartColor)
VERIFY_CLASS_OFFSET_NODIE(UDistFadeColor,DistFadeColor,EndColor)
VERIFY_CLASS_SIZE_NODIE(UDistFadeColor)
VERIFY_CLASS_OFFSET_NODIE(UFadeColor,FadeColor,Color1)
VERIFY_CLASS_OFFSET_NODIE(UFadeColor,FadeColor,Color2)
VERIFY_CLASS_OFFSET_NODIE(UFadeColor,FadeColor,FadePeriod)
VERIFY_CLASS_OFFSET_NODIE(UFadeColor,FadeColor,FadePhase)
VERIFY_CLASS_OFFSET_NODIE(UFadeColor,FadeColor,ColorFadeType)
VERIFY_CLASS_OFFSET_NODIE(UFadeColor,FadeColor,FadeString)
VERIFY_CLASS_OFFSET_NODIE(UFadeColor,FadeColor,NextFlickerTime)
VERIFY_CLASS_OFFSET_NODIE(UFadeColor,FadeColor,LastPercent)
VERIFY_CLASS_SIZE_NODIE(UFadeColor)
VERIFY_CLASS_OFFSET_NODIE(UConstantValue,ConstantValue,Value)
VERIFY_CLASS_SIZE_NODIE(UConstantValue)
VERIFY_CLASS_OFFSET_NODIE(UConstantColor,ConstantColor,Color)
VERIFY_CLASS_SIZE_NODIE(UConstantColor)
VERIFY_CLASS_OFFSET_NODIE(UFinalBlend,FinalBlend,FrameBufferBlending)
VERIFY_CLASS_OFFSET_NODIE(UFinalBlend,FinalBlend,AlphaRef)
VERIFY_CLASS_OFFSET_NODIE(UFinalBlend,FinalBlend,GenericBloomTint)
VERIFY_CLASS_OFFSET_NODIE(UFinalBlend,FinalBlend,ZBiasAdjust)
VERIFY_CLASS_OFFSET_NODIE(UFinalBlend,FinalBlend,AlphaSortGroup)
VERIFY_CLASS_OFFSET_NODIE(UFinalBlend,FinalBlend,UnlitHDRScale)
VERIFY_CLASS_OFFSET_NODIE(UFinalBlend,FinalBlend,EdgeFadeDist)
VERIFY_CLASS_SIZE_NODIE(UFinalBlend)
VERIFY_CLASS_SIZE_NODIE(ULightExPrimitive)
VERIFY_CLASS_OFFSET_NODIE(AdnKingOfTheHill_MarkerBase,dnKingOfTheHill_MarkerBase,OriginalLocation)
VERIFY_CLASS_OFFSET_NODIE(AdnKingOfTheHill_MarkerBase,dnKingOfTheHill_MarkerBase,FOV)
VERIFY_CLASS_OFFSET_NODIE(AdnKingOfTheHill_MarkerBase,dnKingOfTheHill_MarkerBase,MaxTraceDistance)
VERIFY_CLASS_OFFSET_NODIE(AdnKingOfTheHill_MarkerBase,dnKingOfTheHill_MarkerBase,MaxViewDistance)
VERIFY_CLASS_OFFSET_NODIE(AdnKingOfTheHill_MarkerBase,dnKingOfTheHill_MarkerBase,FadeOutStart)
VERIFY_CLASS_OFFSET_NODIE(AdnKingOfTheHill_MarkerBase,dnKingOfTheHill_MarkerBase,ProjectorScaleX)
VERIFY_CLASS_OFFSET_NODIE(AdnKingOfTheHill_MarkerBase,dnKingOfTheHill_MarkerBase,ProjectorScaleY)
VERIFY_CLASS_OFFSET_NODIE(AdnKingOfTheHill_MarkerBase,dnKingOfTheHill_MarkerBase,MinSpawnDistance)
VERIFY_CLASS_OFFSET_NODIE(AdnKingOfTheHill_MarkerBase,dnKingOfTheHill_MarkerBase,OverrideNearPlaneDist)
VERIFY_CLASS_OFFSET_NODIE(AdnKingOfTheHill_MarkerBase,dnKingOfTheHill_MarkerBase,ProjectorOpacity)
VERIFY_CLASS_OFFSET_NODIE(AdnKingOfTheHill_MarkerBase,dnKingOfTheHill_MarkerBase,TurnOnTag)
VERIFY_CLASS_OFFSET_NODIE(AdnKingOfTheHill_MarkerBase,dnKingOfTheHill_MarkerBase,TurnOffTag)
VERIFY_CLASS_OFFSET_NODIE(AdnKingOfTheHill_MarkerBase,dnKingOfTheHill_MarkerBase,CylinderDrawScale)
VERIFY_CLASS_OFFSET_NODIE(AdnKingOfTheHill_MarkerBase,dnKingOfTheHill_MarkerBase,CylinderOffset)
VERIFY_CLASS_OFFSET_NODIE(AdnKingOfTheHill_MarkerBase,dnKingOfTheHill_MarkerBase,currentLocIndex)
VERIFY_CLASS_OFFSET_NODIE(AdnKingOfTheHill_MarkerBase,dnKingOfTheHill_MarkerBase,Fresh)
VERIFY_CLASS_OFFSET_NODIE(AdnKingOfTheHill_MarkerBase,dnKingOfTheHill_MarkerBase,LastProjectorState)
VERIFY_CLASS_OFFSET_NODIE(AdnKingOfTheHill_MarkerBase,dnKingOfTheHill_MarkerBase,nInit)
VERIFY_CLASS_SIZE_NODIE(AdnKingOfTheHill_MarkerBase)
VERIFY_CLASS_OFFSET_NODIE(AWeaponPickup,WeaponPickup,ItemName)
VERIFY_CLASS_SIZE_NODIE(AWeaponPickup)
VERIFY_CLASS_OFFSET_NODIE(APickup,Pickup,InventoryType)
VERIFY_CLASS_OFFSET_NODIE(APickup,Pickup,RespawnTime)
VERIFY_CLASS_OFFSET_NODIE(APickup,Pickup,AmmoCharge)
VERIFY_CLASS_OFFSET_NODIE(APickup,Pickup,RespawnSoundInfo)
VERIFY_CLASS_OFFSET_NODIE(APickup,Pickup,PickupNotifyPawn)
VERIFY_CLASS_OFFSET_NODIE(APickup,Pickup,RespawnMarkerActor)
VERIFY_CLASS_OFFSET_NODIE(APickup,Pickup,RespawnMarkerClass)
VERIFY_CLASS_OFFSET_NODIE(APickup,Pickup,ShowRespawnMarkerTime)
VERIFY_CLASS_SIZE_NODIE(APickup)
VERIFY_CLASS_OFFSET_NODIE(UWeaponConfig,WeaponConfig,FreezeDamageType)
VERIFY_CLASS_OFFSET_NODIE(UWeaponConfig,WeaponConfig,AmmoClass)
VERIFY_CLASS_OFFSET_NODIE(UWeaponConfig,WeaponConfig,AmmoExpenditure)
VERIFY_CLASS_OFFSET_NODIE(UWeaponConfig,WeaponConfig,AdditionalPickupAmmoMin)
VERIFY_CLASS_OFFSET_NODIE(UWeaponConfig,WeaponConfig,AdditionalPickupAmmoRnd)
VERIFY_CLASS_OFFSET_NODIE(UWeaponConfig,WeaponConfig,ReloadCount)
VERIFY_CLASS_OFFSET_NODIE(UWeaponConfig,WeaponConfig,ReloadClipAmmo)
VERIFY_CLASS_OFFSET_NODIE(UWeaponConfig,WeaponConfig,MaxTraceDistance)
VERIFY_CLASS_OFFSET_NODIE(UWeaponConfig,WeaponConfig,MaxTracePenetrationCount)
VERIFY_CLASS_OFFSET_NODIE(UWeaponConfig,WeaponConfig,MaxPenetrationDistance)
VERIFY_CLASS_OFFSET_NODIE(UWeaponConfig,WeaponConfig,TraceDamageType)
VERIFY_CLASS_OFFSET_NODIE(UWeaponConfig,WeaponConfig,TraceFlags)
VERIFY_CLASS_OFFSET_NODIE(UWeaponConfig,WeaponConfig,TracerBeamSystemClass)
VERIFY_CLASS_OFFSET_NODIE(UWeaponConfig,WeaponConfig,TracerBeamChance)
VERIFY_CLASS_OFFSET_NODIE(UWeaponConfig,WeaponConfig,TracerBubblesClass)
VERIFY_CLASS_OFFSET_NODIE(UWeaponConfig,WeaponConfig,HorizShotError)
VERIFY_CLASS_OFFSET_NODIE(UWeaponConfig,WeaponConfig,VertShotError)
VERIFY_CLASS_OFFSET_NODIE(UWeaponConfig,WeaponConfig,ZoomErrorPct)
VERIFY_CLASS_OFFSET_NODIE(UWeaponConfig,WeaponConfig,ShrunkHorizShotError)
VERIFY_CLASS_OFFSET_NODIE(UWeaponConfig,WeaponConfig,ShrunkVertShotError)
VERIFY_CLASS_OFFSET_NODIE(UWeaponConfig,WeaponConfig,ProjectileClass)
VERIFY_CLASS_OFFSET_NODIE(UWeaponConfig,WeaponConfig,NumProjectiles)
VERIFY_CLASS_OFFSET_NODIE(UWeaponConfig,WeaponConfig,NumCenteredProjectiles)
VERIFY_CLASS_OFFSET_NODIE(UWeaponConfig,WeaponConfig,ImpactProjectileClass)
VERIFY_CLASS_OFFSET_NODIE(UWeaponConfig,WeaponConfig,ViewKicks)
VERIFY_CLASS_OFFSET_NODIE(UWeaponConfig,WeaponConfig,RumbleKicks)
VERIFY_CLASS_OFFSET_NODIE(UWeaponConfig,WeaponConfig,MuzzleInfo)
VERIFY_CLASS_OFFSET_NODIE(UWeaponConfig,WeaponConfig,MuzzleLightClass)
VERIFY_CLASS_OFFSET_NODIE(UWeaponConfig,WeaponConfig,MuzzleLightBoneName)
VERIFY_CLASS_OFFSET_NODIE(UWeaponConfig,WeaponConfig,MuzzleShellClassName)
VERIFY_CLASS_OFFSET_NODIE(UWeaponConfig,WeaponConfig,MeleeMovementSpeedScale)
VERIFY_CLASS_OFFSET_NODIE(UWeaponConfig,WeaponConfig,NumMeleeAttacks)
VERIFY_CLASS_OFFSET_NODIE(UWeaponConfig,WeaponConfig,MeleeTraceDistance)
VERIFY_CLASS_OFFSET_NODIE(UWeaponConfig,WeaponConfig,MeleeTraceDistanceShrunk)
VERIFY_CLASS_OFFSET_NODIE(UWeaponConfig,WeaponConfig,MeleeHitExtent)
VERIFY_CLASS_OFFSET_NODIE(UWeaponConfig,WeaponConfig,MeleeHitDamageBase)
VERIFY_CLASS_OFFSET_NODIE(UWeaponConfig,WeaponConfig,MeleeHitDamageVariance)
VERIFY_CLASS_OFFSET_NODIE(UWeaponConfig,WeaponConfig,MeleeDamageType)
VERIFY_CLASS_OFFSET_NODIE(UWeaponConfig,WeaponConfig,AmmoWarnPCT)
VERIFY_CLASS_OFFSET_NODIE(UWeaponConfig,WeaponConfig,LockoutFireTime)
VERIFY_CLASS_OFFSET_NODIE(UWeaponConfig,WeaponConfig,WeaponHeatAttackRate)
VERIFY_CLASS_OFFSET_NODIE(UWeaponConfig,WeaponConfig,WeaponHeatDecayRate)
VERIFY_CLASS_OFFSET_NODIE(UWeaponConfig,WeaponConfig,ZoomAmount)
VERIFY_CLASS_OFFSET_NODIE(UWeaponConfig,WeaponConfig,DoneActivatingStateTransition)
VERIFY_CLASS_OFFSET_NODIE(UWeaponConfig,WeaponConfig,WeaponAnimName)
VERIFY_CLASS_OFFSET_NODIE(UWeaponConfig,WeaponConfig,HitWaterStrength)
VERIFY_CLASS_OFFSET_NODIE(UWeaponConfig,WeaponConfig,HitWaterRadius)
VERIFY_CLASS_OFFSET_NODIE(UWeaponConfig,WeaponConfig,DebugColor)
VERIFY_CLASS_OFFSET_NODIE(UWeaponConfig,WeaponConfig,DebugShotTracesTime)
VERIFY_CLASS_SIZE_NODIE(UWeaponConfig)
VERIFY_CLASS_OFFSET_NODIE(AWeapon,Weapon,WeaponConfig)
VERIFY_CLASS_OFFSET_NODIE(AWeapon,Weapon,Ammo)
VERIFY_CLASS_OFFSET_NODIE(AWeapon,Weapon,AmmoLoaded)
VERIFY_CLASS_OFFSET_NODIE(AWeapon,Weapon,HUDAmmoClipIcon)
VERIFY_CLASS_OFFSET_NODIE(AWeapon,Weapon,MuzzleFireIndex)
VERIFY_CLASS_OFFSET_NODIE(AWeapon,Weapon,MuzzleFlashActors)
VERIFY_CLASS_OFFSET_NODIE(AWeapon,Weapon,MuzzleLightActor)
VERIFY_CLASS_OFFSET_NODIE(AWeapon,Weapon,LastMeleeIndex)
VERIFY_CLASS_OFFSET_NODIE(AWeapon,Weapon,MeleeStartTrace)
VERIFY_CLASS_OFFSET_NODIE(AWeapon,Weapon,MeleeAnimEventString)
VERIFY_CLASS_OFFSET_NODIE(AWeapon,Weapon,DOFWeapDist)
VERIFY_CLASS_OFFSET_NODIE(AWeapon,Weapon,DOFWeapDistDelta)
VERIFY_CLASS_OFFSET_NODIE(AWeapon,Weapon,CrosshairIndex)
VERIFY_CLASS_OFFSET_NODIE(AWeapon,Weapon,WeaponStateImpulse)
VERIFY_CLASS_OFFSET_NODIE(AWeapon,Weapon,WeaponState)
VERIFY_CLASS_OFFSET_NODIE(AWeapon,Weapon,ChangeSpeed)
VERIFY_CLASS_OFFSET_NODIE(AWeapon,Weapon,InsertingClip)
VERIFY_CLASS_OFFSET_NODIE(AWeapon,Weapon,EjectingClip)
VERIFY_CLASS_OFFSET_NODIE(AWeapon,Weapon,FullClipRenderObject)
VERIFY_CLASS_OFFSET_NODIE(AWeapon,Weapon,EmptyClipRenderObject)
VERIFY_CLASS_OFFSET_NODIE(AWeapon,Weapon,UserInsertClipMount)
VERIFY_CLASS_OFFSET_NODIE(AWeapon,Weapon,WeaponClipMount)
VERIFY_CLASS_OFFSET_NODIE(AWeapon,Weapon,EmptyClipPhysMaterial)
VERIFY_CLASS_OFFSET_NODIE(AWeapon,Weapon,FireHitEffectSystemSizeScaleScale)
VERIFY_CLASS_OFFSET_NODIE(AWeapon,Weapon,FireHitEffectFakeLightIntensityOverride)
VERIFY_CLASS_OFFSET_NODIE(AWeapon,Weapon,FireHitEffectLifetimeScale)
VERIFY_CLASS_OFFSET_NODIE(AWeapon,Weapon,LastShellCasingTime)
VERIFY_CLASS_OFFSET_NODIE(AWeapon,Weapon,MinTimeBetweenShellCasings)
VERIFY_CLASS_SIZE_NODIE(AWeapon)
VERIFY_CLASS_OFFSET_NODIE(AActivatableInventory,ActivatableInventory,InventoryDrainClass)
VERIFY_CLASS_OFFSET_NODIE(AActivatableInventory,ActivatableInventory,InventoryDrainClass_MP)
VERIFY_CLASS_OFFSET_NODIE(AActivatableInventory,ActivatableInventory,ActivateSoundName)
VERIFY_CLASS_OFFSET_NODIE(AActivatableInventory,ActivatableInventory,DeactivateSoundName)
VERIFY_CLASS_OFFSET_NODIE(AActivatableInventory,ActivatableInventory,ActivationNetworkSoundType)
VERIFY_CLASS_OFFSET_NODIE(AActivatableInventory,ActivatableInventory,dnInventoryCategory)
VERIFY_CLASS_OFFSET_NODIE(AActivatableInventory,ActivatableInventory,dnCategoryPriority)
VERIFY_CLASS_OFFSET_NODIE(AActivatableInventory,ActivatableInventory,ChargeDisplayType)
VERIFY_CLASS_OFFSET_NODIE(AActivatableInventory,ActivatableInventory,CommandAlias)
VERIFY_CLASS_OFFSET_NODIE(AActivatableInventory,ActivatableInventory,HUDItem)
VERIFY_CLASS_SIZE_NODIE(AActivatableInventory)
VERIFY_CLASS_OFFSET_NODIE(AIKSystemInfo_InteractiveDecoration,IKSystemInfo_InteractiveDecoration,IKHierarchy)
VERIFY_CLASS_OFFSET_NODIE(AIKSystemInfo_InteractiveDecoration,IKSystemInfo_InteractiveDecoration,LimbID)
VERIFY_CLASS_SIZE_NODIE(AIKSystemInfo_InteractiveDecoration)
VERIFY_CLASS_OFFSET_NODIE(AIKSystemInfo,IKSystemInfo,IKEvents)
VERIFY_CLASS_SIZE_NODIE(AIKSystemInfo)
VERIFY_CLASS_OFFSET_NODIE(AIKSystemInfo_Walker,IKSystemInfo_Walker,FootRadius)
VERIFY_CLASS_OFFSET_NODIE(AIKSystemInfo_Walker,IKSystemInfo_Walker,FloorHeightOfs)
VERIFY_CLASS_OFFSET_NODIE(AIKSystemInfo_Walker,IKSystemInfo_Walker,OverExtendedOfs)
VERIFY_CLASS_OFFSET_NODIE(AIKSystemInfo_Walker,IKSystemInfo_Walker,PlantedOfs)
VERIFY_CLASS_OFFSET_NODIE(AIKSystemInfo_Walker,IKSystemInfo_Walker,TraceMaxOfs)
VERIFY_CLASS_OFFSET_NODIE(AIKSystemInfo_Walker,IKSystemInfo_Walker,TraceMinOfs)
VERIFY_CLASS_OFFSET_NODIE(AIKSystemInfo_Walker,IKSystemInfo_Walker,MaxZOffsetABS)
VERIFY_CLASS_SIZE_NODIE(AIKSystemInfo_Walker)
VERIFY_CLASS_OFFSET_NODIE(AIKSystemInfo_Inventory,IKSystemInfo_Inventory,IKHierarchy)
VERIFY_CLASS_OFFSET_NODIE(AIKSystemInfo_Inventory,IKSystemInfo_Inventory,MountBoneName)
VERIFY_CLASS_SIZE_NODIE(AIKSystemInfo_Inventory)
VERIFY_CLASS_SIZE_NODIE(AGameModulePersistantData)
VERIFY_CLASS_OFFSET_NODIE(AGameModule,GameModule,DirectionalPadStates)
VERIFY_CLASS_OFFSET_NODIE(AGameModule,GameModule,ButtonPadStates)
VERIFY_CLASS_OFFSET_NODIE(AGameModule,GameModule,PersistantDataClass)
VERIFY_CLASS_OFFSET_NODIE(AGameModule,GameModule,PersistantData)
VERIFY_CLASS_OFFSET_NODIE(AGameModule,GameModule,ButtonAMnemonic)
VERIFY_CLASS_OFFSET_NODIE(AGameModule,GameModule,ButtonBMnemonic)
VERIFY_CLASS_OFFSET_NODIE(AGameModule,GameModule,ButtonXMnemonic)
VERIFY_CLASS_OFFSET_NODIE(AGameModule,GameModule,ButtonYMnemonic)
VERIFY_CLASS_SIZE_NODIE(AGameModule)
VERIFY_CLASS_OFFSET_NODIE(ADoorExtras,DoorExtras,LocationOffset)
VERIFY_CLASS_OFFSET_NODIE(ADoorExtras,DoorExtras,RotationOffset)
VERIFY_CLASS_OFFSET_NODIE(ADoorExtras,DoorExtras,OpenSequence)
VERIFY_CLASS_OFFSET_NODIE(ADoorExtras,DoorExtras,OpenedSequence)
VERIFY_CLASS_OFFSET_NODIE(ADoorExtras,DoorExtras,KickedOpenSequence)
VERIFY_CLASS_OFFSET_NODIE(ADoorExtras,DoorExtras,CloseSequence)
VERIFY_CLASS_OFFSET_NODIE(ADoorExtras,DoorExtras,ClosedSequence)
VERIFY_CLASS_OFFSET_NODIE(ADoorExtras,DoorExtras,LockedSequence)
VERIFY_CLASS_OFFSET_NODIE(ADoorExtras,DoorExtras,LeftRenderObject)
VERIFY_CLASS_OFFSET_NODIE(ADoorExtras,DoorExtras,RightRenderObject)
VERIFY_CLASS_SIZE_NODIE(ADoorExtras)
VERIFY_CLASS_SIZE_NODIE(ADecoration)
VERIFY_CLASS_SIZE_NODIE(ADoorHingeEx)
VERIFY_CLASS_OFFSET_NODIE(ADoorMoverEx,DoorMoverEx,PreOpenDelay)
VERIFY_CLASS_OFFSET_NODIE(ADoorMoverEx,DoorMoverEx,AutoCloseDelay)
VERIFY_CLASS_OFFSET_NODIE(ADoorMoverEx,DoorMoverEx,ProximityRadius)
VERIFY_CLASS_OFFSET_NODIE(ADoorMoverEx,DoorMoverEx,ProximityHeight)
VERIFY_CLASS_OFFSET_NODIE(ADoorMoverEx,DoorMoverEx,ProximityOffset)
VERIFY_CLASS_OFFSET_NODIE(ADoorMoverEx,DoorMoverEx,LockedDoorMsg)
VERIFY_CLASS_OFFSET_NODIE(ADoorMoverEx,DoorMoverEx,FriendDoorTag)
VERIFY_CLASS_OFFSET_NODIE(ADoorMoverEx,DoorMoverEx,ToggleLockTag)
VERIFY_CLASS_OFFSET_NODIE(ADoorMoverEx,DoorMoverEx,OpenDoorTag)
VERIFY_CLASS_OFFSET_NODIE(ADoorMoverEx,DoorMoverEx,CloseDoorTag)
VERIFY_CLASS_OFFSET_NODIE(ADoorMoverEx,DoorMoverEx,PortalSurfaceTag)
VERIFY_CLASS_OFFSET_NODIE(ADoorMoverEx,DoorMoverEx,GoPhysicsTag)
VERIFY_CLASS_OFFSET_NODIE(ADoorMoverEx,DoorMoverEx,VoicePackCustom)
VERIFY_CLASS_OFFSET_NODIE(ADoorMoverEx,DoorMoverEx,DoorLockedActorColor)
VERIFY_CLASS_OFFSET_NODIE(ADoorMoverEx,DoorMoverEx,DoorUnlockedActorColor)
VERIFY_CLASS_OFFSET_NODIE(ADoorMoverEx,DoorMoverEx,AIProximityIgnoreClasses)
VERIFY_CLASS_OFFSET_NODIE(ADoorMoverEx,DoorMoverEx,AIProximityHeight)
VERIFY_CLASS_OFFSET_NODIE(ADoorMoverEx,DoorMoverEx,AIProximityRadius)
VERIFY_CLASS_OFFSET_NODIE(ADoorMoverEx,DoorMoverEx,OpeningEvent)
VERIFY_CLASS_OFFSET_NODIE(ADoorMoverEx,DoorMoverEx,FullyOpenedEvent)
VERIFY_CLASS_OFFSET_NODIE(ADoorMoverEx,DoorMoverEx,ClosingEvent)
VERIFY_CLASS_OFFSET_NODIE(ADoorMoverEx,DoorMoverEx,FullyClosedEvent)
VERIFY_CLASS_OFFSET_NODIE(ADoorMoverEx,DoorMoverEx,DoorExtras)
VERIFY_CLASS_OFFSET_NODIE(ADoorMoverEx,DoorMoverEx,AutoCloseTime)
VERIFY_CLASS_OFFSET_NODIE(ADoorMoverEx,DoorMoverEx,DoorState)
VERIFY_CLASS_OFFSET_NODIE(ADoorMoverEx,DoorMoverEx,Hinge)
VERIFY_CLASS_OFFSET_NODIE(ADoorMoverEx,DoorMoverEx,ProximitySensorClass)
VERIFY_CLASS_OFFSET_NODIE(ADoorMoverEx,DoorMoverEx,ProximitySensor)
VERIFY_CLASS_OFFSET_NODIE(ADoorMoverEx,DoorMoverEx,AIProximitySensors)
VERIFY_CLASS_OFFSET_NODIE(ADoorMoverEx,DoorMoverEx,DoorMidpoint)
VERIFY_CLASS_OFFSET_NODIE(ADoorMoverEx,DoorMoverEx,MasterDoor)
VERIFY_CLASS_OFFSET_NODIE(ADoorMoverEx,DoorMoverEx,FriendDoors)
VERIFY_CLASS_OFFSET_NODIE(ADoorMoverEx,DoorMoverEx,OpenInstigator)
VERIFY_CLASS_OFFSET_NODIE(ADoorMoverEx,DoorMoverEx,Extras)
VERIFY_CLASS_OFFSET_NODIE(ADoorMoverEx,DoorMoverEx,BlockingPlayerPawn)
VERIFY_CLASS_SIZE_NODIE(ADoorMoverEx)
VERIFY_CLASS_OFFSET_NODIE(UColorTable,ColorTable,ColorPoints)
VERIFY_CLASS_OFFSET_NODIE(UColorTable,ColorTable,ColorTriangles)
VERIFY_CLASS_OFFSET_NODIE(UColorTable,ColorTable,XRange)
VERIFY_CLASS_OFFSET_NODIE(UColorTable,ColorTable,YRange)
VERIFY_CLASS_SIZE_NODIE(UColorTable)
VERIFY_CLASS_OFFSET_NODIE(UAnimationControllerEx,AnimationControllerEx,RenderOwner)
VERIFY_CLASS_OFFSET_NODIE(UAnimationControllerEx,AnimationControllerEx,ControllerServer)
VERIFY_CLASS_OFFSET_NODIE(UAnimationControllerEx,AnimationControllerEx,ActiveBlends)
VERIFY_CLASS_OFFSET_NODIE(UAnimationControllerEx,AnimationControllerEx,ChannelBlockActiveBlends)
VERIFY_CLASS_OFFSET_NODIE(UAnimationControllerEx,AnimationControllerEx,AnimationHash)
VERIFY_CLASS_OFFSET_NODIE(UAnimationControllerEx,AnimationControllerEx,AnimationPairHash)
VERIFY_CLASS_OFFSET_NODIE(UAnimationControllerEx,AnimationControllerEx,AnimationGridHash)
VERIFY_CLASS_OFFSET_NODIE(UAnimationControllerEx,AnimationControllerEx,AnimChannels)
VERIFY_CLASS_OFFSET_NODIE(UAnimationControllerEx,AnimationControllerEx,AnimChannelBlocks)
VERIFY_CLASS_OFFSET_NODIE(UAnimationControllerEx,AnimationControllerEx,Animations)
VERIFY_CLASS_OFFSET_NODIE(UAnimationControllerEx,AnimationControllerEx,AnimationBlocks)
VERIFY_CLASS_OFFSET_NODIE(UAnimationControllerEx,AnimationControllerEx,AnimationBlendPairs)
VERIFY_CLASS_OFFSET_NODIE(UAnimationControllerEx,AnimationControllerEx,AnimationGrids)
VERIFY_CLASS_OFFSET_NODIE(UAnimationControllerEx,AnimationControllerEx,_AnimIndexCache)
VERIFY_CLASS_OFFSET_NODIE(UAnimationControllerEx,AnimationControllerEx,_AnimChannelCache)
VERIFY_CLASS_OFFSET_NODIE(UAnimationControllerEx,AnimationControllerEx,_AnimRefIdCache)
VERIFY_CLASS_OFFSET_NODIE(UAnimationControllerEx,AnimationControllerEx,CrossfadeGroups)
VERIFY_CLASS_OFFSET_NODIE(UAnimationControllerEx,AnimationControllerEx,AnimRateScale)
VERIFY_CLASS_OFFSET_NODIE(UAnimationControllerEx,AnimationControllerEx,FrameCounter)
VERIFY_CLASS_SIZE_NODIE(UAnimationControllerEx)
VERIFY_CLASS_OFFSET_NODIE(AStickyNote,StickyNote,Notes)
VERIFY_CLASS_OFFSET_NODIE(AStickyNote,StickyNote,NoteBackground)
VERIFY_CLASS_OFFSET_NODIE(AStickyNote,StickyNote,Pointers)
VERIFY_CLASS_OFFSET_NODIE(AStickyNote,StickyNote,NoteColor)
VERIFY_CLASS_OFFSET_NODIE(AStickyNote,StickyNote,VisibilityRadius)
VERIFY_CLASS_SIZE_NODIE(AStickyNote)
VERIFY_CLASS_SIZE_NODIE(UParticleSystemPrimitive)
VERIFY_CLASS_OFFSET_NODIE(AdnPhysicsFX_Spawners,dnPhysicsFX_Spawners,PerformChance)
VERIFY_CLASS_OFFSET_NODIE(AdnPhysicsFX_Spawners,dnPhysicsFX_Spawners,OriginalSystemSizeScale)
VERIFY_CLASS_SIZE_NODIE(AdnPhysicsFX_Spawners)
VERIFY_CLASS_SIZE_NODIE(AdnFriendFX_Spawners)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,LastUpdateFrame)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,EditorPulsingCountdown)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,EditorGameTimeSeconds)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,DieOutsideRadius)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,GroupID)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,ExtraRenderMins)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,ExtraRenderMaxs)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,fBoundInterval)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,SystemSizeScale)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,UpdateRateMax)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,UpdateRateMin)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,ZoneUpdateRate)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,AdditionalSpawn)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,PCreationFriends)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,PDeathFriends)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,PBounceFriends)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,PRandomFriends)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,PRandomFriendsRate)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,PRandomFriendsRateVariance)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,NamedFriends)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,SysRandomFriends)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,SysRandomFriendsRate)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,SysRandomFriendsRateVariance)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,MaxBounceSounds)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,ParticleSounds)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,ParticleStopSounds)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,ParticleSystemAmbientSounds)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,ParticleSystemSounds)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,ParticleSystemStopSounds)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,PrimeCount)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,PrimeTime)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,PrimeTimeIncrement)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,SpawnNumber)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,SpawnPeriod)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,MaximumParticles)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,Lifetime)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,LifetimeVariance)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,SpawnPeriodVariance)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,SpawnNumberVariance)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,MaxSpawnLimitTest)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,OscillateLifetimeCount)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,OscillateLifetimeCountVariance)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,SpawnOffset)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,SpawnOffsetVariance)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,SpawnOffsetPost)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,SpawnOffsetPostVariance)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,SpawnInALineLength)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,SpawnOnGroundLength)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,SpawnAtRadiusSpacing)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,InitialVelocityAwayFromPointOffset)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,InitialVelocity)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,InitialAcceleration)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,MaxVelocityVariance)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,MaxAccelerationVariance)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,RealtimeVelocityVariance)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,RealtimeAccelerationVariance)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,LocalFriction)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,SlideFriction)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,KLinearDampingVariance)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,KAngularDampingVariance)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,BounceElasticity)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,BounceVelocityVariance)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,ParticlesCollidePercent)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,ParticleCollisionRadius)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,PhysicsTimeoutThreshold)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,Apex)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,ApexInitialVelocity)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,ApexInitialVelocityVariance)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,ApexInitialAcceleration)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,ApexInitialAccelerationVariance)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,ApexActorTag)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,TagZoneOnly)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,DieZoneNotRenderedTime)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,ZoneGravityScaler)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,ZoneVelocityScaler)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,FlockToCenterVelocity)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,FlockToCenterAcceleration)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,FlockToDirectionScale)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,FlockCenterWeight)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,FlockDirectionWeight)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,SineWaveFrequency)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,VelocityAmplitude)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,AccelerationAmplitude)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,SystemAlphaScale)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,SystemAlphaScaleVelocity)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,SystemAlphaScaleAcceleration)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,AlphaVariance)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,AlphaStart)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,AlphaMid)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,AlphaMidVariance)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,AlphaEnd)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,AlphaEndVariance)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,AlphaRampMid)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,EdgeFadeDist)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,LineStartColor)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,LineStartColorVariance)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,LineEndColor)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,LineEndColorVariance)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,LineStartWidth)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,LineStartWidthVariance)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,LineEndWidth)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,LineEndWidthVariance)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,LineWidthVariance)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,MaxMeshParticles)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,Meshes)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,StaticMeshes)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,Textures)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,AnimStopThreshold)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,AnimRateScaler)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,vOffsetSpawnDirection)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,ColorOverTime)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,StartDrawScale)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,EndDrawScale)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,DrawScaleMid)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,DrawScaleRampMid)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,DrawScaleVariance)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,DrawScaleEndVariance)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,DrawScaleMidVariance)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,TextureScaleX)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,TextureScaleY)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,TextureScaleMidX)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,TextureScaleMidY)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,TextureScaleMidRampX)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,TextureScaleMidRampY)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,TextureScaleEndX)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,TextureScaleEndY)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,TextureScaleVarianceX)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,TextureScaleVarianceY)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,RotationInitial)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,RotationVariance)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,RotationVelocity)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,RotationVelocityMaxVariance)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,RotationAcceleration)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,RotationAccelerationMaxVariance)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,RotationInitial3d)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,RotationVariance3d)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,RotationVelocity3d)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,RotationVelocityMaxVariance3d)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,RotationAcceleration3d)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,RotationAccelerationMaxVariance3d)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,RotationVarianceOnBounce3d)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,RestingRotation3D)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,RestingRotation3DVariance)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,ParticleAmbientLight)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,FakeLightColor)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,FakeLightIntensity)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,SpawnOnBounceChance)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,SpawnOnBounce)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,SpawnOnDeathChance)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,SpawnOnDeath)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,fNotVisibleDelay)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,nRePrimeCount)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,fRePrimeTime)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,fRePrimeTimeIncrement)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,ParticleDetail)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,TriggerAfterSeconds)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,TriggerType)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,PulseSeconds)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,PulseSecondsVariance)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,PulseMagnitude)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,DamageAmount)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,DamageRadius)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,DamageName)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,DamagePeriod)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,ParticlesPerCollision)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,NumCollisionActors)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,CollisionActorClass)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,SpawnShape)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,SpawnShapeScale)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,SpawnShapeRotation)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,ZoneUpdateTime)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,PulseStartTime)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,PulseEndTime)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,DamagePeriodRemaining)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,ApexActor)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,InheritVelocityActor)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,fCurSpawnPeriod)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,CurSpawnNumber)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,nMinFlockNumber)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,CurSpawnAtRadiusAngle)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,AverageCenter)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,AverageDirection)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,fOriginalCollisionHeight)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,fOriginalCollisionRadius)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,LowestDirtyParticle)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,CurrentSpawnNumber)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,ParticlesSinceCollision)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,UsedCollisionActors)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,ElapsedTime)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,HighestParticleNumber)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,AllocatedParticles)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,ParticleSystemHandle)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,BoundingBoxMin)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,BoundingBoxMax)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,fNextBoundTime)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,m_pEffector)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,SysRandomFriendsTimer)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,PhysicsTimeoutTimer)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,SystemLifetime)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,CollisionActors)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,SupportedSystems)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,FriendSystems)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,PreviousLocation)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,PreviousRotation)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,CurrentUpdateLocation)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,CurrentUpdateRotation)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,CurrentDeltaLocation)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,CurrentDeltaRotation)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,ThisDeltaLocation)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,ThisDeltaRotation)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,CurrentDeltaPeriod)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,UpdateCapOverride)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,VolumeActors)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,EditorSpawns)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,PendingDeleteTextureAnimControllers)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,CacheRenderParticleNumber)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,AllocatedRenderData)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,ParticleRenderDataHandle)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,PendingDeleteParticles)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,SystemSizeScaleScale)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,LifetimeScale)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleSystem,SoftParticleSystem,FakeLightIntensityOverride)
VERIFY_CLASS_SIZE_NODIE(ASoftParticleSystem)
VERIFY_CLASS_OFFSET_NODIE(AParticleCollisionActor,ParticleCollisionActor,ParticleIndex)
VERIFY_CLASS_OFFSET_NODIE(AParticleCollisionActor,ParticleCollisionActor,MyParticleSystem)
VERIFY_CLASS_OFFSET_NODIE(AParticleCollisionActor,ParticleCollisionActor,CollisionInstigator)
VERIFY_CLASS_OFFSET_NODIE(AParticleCollisionActor,ParticleCollisionActor,pLifetime)
VERIFY_CLASS_OFFSET_NODIE(AParticleCollisionActor,ParticleCollisionActor,pLifetimeRemaining)
VERIFY_CLASS_SIZE_NODIE(AParticleCollisionActor)
VERIFY_CLASS_SIZE_NODIE(AParticleSystem)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleAffector,SoftParticleAffector,AffectedGroupID)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleAffector,SoftParticleAffector,Type)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleAffector,SoftParticleAffector,VortexMagnitude)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleAffector,SoftParticleAffector,Magnitude)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleAffector,SoftParticleAffector,PulseApexMagnitude)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleAffector,SoftParticleAffector,PulseDuration)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleAffector,SoftParticleAffector,TriggerReaction)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleAffector,SoftParticleAffector,AffectScaler)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleAffector,SoftParticleAffector,OriginalMagnitude)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleAffector,SoftParticleAffector,PulseStartTime)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleAffector,SoftParticleAffector,PulseHalfDuration)
VERIFY_CLASS_OFFSET_NODIE(ASoftParticleAffector,SoftParticleAffector,Systems)
VERIFY_CLASS_SIZE_NODIE(ASoftParticleAffector)
VERIFY_CLASS_OFFSET_NODIE(UMotionPrefab,MotionPrefab,VelocityRelativeType)
VERIFY_CLASS_OFFSET_NODIE(UMotionPrefab,MotionPrefab,Velocity)
VERIFY_CLASS_OFFSET_NODIE(UMotionPrefab,MotionPrefab,VelocityVariance)
VERIFY_CLASS_OFFSET_NODIE(UMotionPrefab,MotionPrefab,RotationRate)
VERIFY_CLASS_OFFSET_NODIE(UMotionPrefab,MotionPrefab,RotationRateVariance)
VERIFY_CLASS_SIZE_NODIE(UMotionPrefab)
VERIFY_CLASS_SIZE_NODIE(ADefaultPhysicsVolume)
VERIFY_CLASS_OFFSET_NODIE(APhysicsVolume,PhysicsVolume,Priority)
VERIFY_CLASS_OFFSET_NODIE(APhysicsVolume,PhysicsVolume,ReverbPreset)
VERIFY_CLASS_OFFSET_NODIE(APhysicsVolume,PhysicsVolume,VolumeFlotsamEffect)
VERIFY_CLASS_OFFSET_NODIE(APhysicsVolume,PhysicsVolume,VolumeFlotsamRotation)
VERIFY_CLASS_OFFSET_NODIE(APhysicsVolume,PhysicsVolume,GroundFriction)
VERIFY_CLASS_OFFSET_NODIE(APhysicsVolume,PhysicsVolume,FluidFriction)
VERIFY_CLASS_OFFSET_NODIE(APhysicsVolume,PhysicsVolume,VolumeVelocity)
VERIFY_CLASS_OFFSET_NODIE(APhysicsVolume,PhysicsVolume,KVolumeVelocityPositiveStrength)
VERIFY_CLASS_OFFSET_NODIE(APhysicsVolume,PhysicsVolume,KVolumeVelocityNegativeStrength)
VERIFY_CLASS_OFFSET_NODIE(APhysicsVolume,PhysicsVolume,Gravity)
VERIFY_CLASS_OFFSET_NODIE(APhysicsVolume,PhysicsVolume,TerminalVelocity)
VERIFY_CLASS_OFFSET_NODIE(APhysicsVolume,PhysicsVolume,KLinearDampingScale)
VERIFY_CLASS_OFFSET_NODIE(APhysicsVolume,PhysicsVolume,KAngularDampingScale)
VERIFY_CLASS_OFFSET_NODIE(APhysicsVolume,PhysicsVolume,VolumeVelocityNonPawnScale)
VERIFY_CLASS_OFFSET_NODIE(APhysicsVolume,PhysicsVolume,KEnableDisableScalar)
VERIFY_CLASS_OFFSET_NODIE(APhysicsVolume,PhysicsVolume,KVolumeAngularVelocity)
VERIFY_CLASS_OFFSET_NODIE(APhysicsVolume,PhysicsVolume,KVolumeAngularMaximumTorque)
VERIFY_CLASS_OFFSET_NODIE(APhysicsVolume,PhysicsVolume,PhysicsTimeScale)
VERIFY_CLASS_OFFSET_NODIE(APhysicsVolume,PhysicsVolume,KGravityActor)
VERIFY_CLASS_OFFSET_NODIE(APhysicsVolume,PhysicsVolume,PlayerWaterGravityScale)
VERIFY_CLASS_OFFSET_NODIE(APhysicsVolume,PhysicsVolume,InteractionHandler)
VERIFY_CLASS_OFFSET_NODIE(APhysicsVolume,PhysicsVolume,VolumePlayerEvent)
VERIFY_CLASS_OFFSET_NODIE(APhysicsVolume,PhysicsVolume,VolumePlayerExitEvent)
VERIFY_CLASS_OFFSET_NODIE(APhysicsVolume,PhysicsVolume,ActorTimeScale)
VERIFY_CLASS_OFFSET_NODIE(APhysicsVolume,PhysicsVolume,HUDEffectMaterial)
VERIFY_CLASS_OFFSET_NODIE(APhysicsVolume,PhysicsVolume,HUDEffectFadeTime)
VERIFY_CLASS_OFFSET_NODIE(APhysicsVolume,PhysicsVolume,HUDIgnoredVisionTypes)
VERIFY_CLASS_OFFSET_NODIE(APhysicsVolume,PhysicsVolume,GeoWaterActor)
VERIFY_CLASS_OFFSET_NODIE(APhysicsVolume,PhysicsVolume,VolumeMaterial)
VERIFY_CLASS_OFFSET_NODIE(APhysicsVolume,PhysicsVolume,FullSubmergedMaterial)
VERIFY_CLASS_OFFSET_NODIE(APhysicsVolume,PhysicsVolume,HalfSubmergedMaterial)
VERIFY_CLASS_OFFSET_NODIE(APhysicsVolume,PhysicsVolume,BarelySubmergedMaterial)
VERIFY_CLASS_OFFSET_NODIE(APhysicsVolume,PhysicsVolume,DistanceFog)
VERIFY_CLASS_OFFSET_NODIE(APhysicsVolume,PhysicsVolume,DistanceFogFadeTime)
VERIFY_CLASS_OFFSET_NODIE(APhysicsVolume,PhysicsVolume,DOFBlurAmount)
VERIFY_CLASS_OFFSET_NODIE(APhysicsVolume,PhysicsVolume,DOFFocalRangeMin)
VERIFY_CLASS_OFFSET_NODIE(APhysicsVolume,PhysicsVolume,DOFFocalRangeMax)
VERIFY_CLASS_OFFSET_NODIE(APhysicsVolume,PhysicsVolume,DOFFocalDist)
VERIFY_CLASS_OFFSET_NODIE(APhysicsVolume,PhysicsVolume,Scene)
VERIFY_CLASS_OFFSET_NODIE(APhysicsVolume,PhysicsVolume,UnderWaterMaterial)
VERIFY_CLASS_OFFSET_NODIE(APhysicsVolume,PhysicsVolume,SuffocationEnabledTag)
VERIFY_CLASS_OFFSET_NODIE(APhysicsVolume,PhysicsVolume,SuffocationDisabledTag)
VERIFY_CLASS_OFFSET_NODIE(APhysicsVolume,PhysicsVolume,VolumeMusic)
VERIFY_CLASS_OFFSET_NODIE(APhysicsVolume,PhysicsVolume,VolumeMusicVolume)
VERIFY_CLASS_OFFSET_NODIE(APhysicsVolume,PhysicsVolume,VolumeMusicCrossfadeTime)
VERIFY_CLASS_OFFSET_NODIE(APhysicsVolume,PhysicsVolume,VolumeMusicMixerGroup)
VERIFY_CLASS_OFFSET_NODIE(APhysicsVolume,PhysicsVolume,ReverbTime)
VERIFY_CLASS_OFFSET_NODIE(APhysicsVolume,PhysicsVolume,ReverbPreDelay)
VERIFY_CLASS_OFFSET_NODIE(APhysicsVolume,PhysicsVolume,ReverbDamping)
VERIFY_CLASS_OFFSET_NODIE(APhysicsVolume,PhysicsVolume,ReverbDryLevel)
VERIFY_CLASS_OFFSET_NODIE(APhysicsVolume,PhysicsVolume,ReverbWetLevel)
VERIFY_CLASS_OFFSET_NODIE(APhysicsVolume,PhysicsVolume,VolumeInSounds)
VERIFY_CLASS_OFFSET_NODIE(APhysicsVolume,PhysicsVolume,VolumeOutSounds)
VERIFY_CLASS_OFFSET_NODIE(APhysicsVolume,PhysicsVolume,VolumeSoundsMinInterval)
VERIFY_CLASS_OFFSET_NODIE(APhysicsVolume,PhysicsVolume,VolumeSoundsMaxInterval)
VERIFY_CLASS_OFFSET_NODIE(APhysicsVolume,PhysicsVolume,VolumeSubmergedAmbience)
VERIFY_CLASS_OFFSET_NODIE(APhysicsVolume,PhysicsVolume,VolumeSubmergedAmbienceName)
VERIFY_CLASS_OFFSET_NODIE(APhysicsVolume,PhysicsVolume,VolumePlayerCount)
VERIFY_CLASS_OFFSET_NODIE(APhysicsVolume,PhysicsVolume,VolumeVelocity_Orig)
VERIFY_CLASS_OFFSET_NODIE(APhysicsVolume,PhysicsVolume,VolumeVelocityDirection)
VERIFY_CLASS_OFFSET_NODIE(APhysicsVolume,PhysicsVolume,VolumeVelocityMagnitude)
VERIFY_CLASS_OFFSET_NODIE(APhysicsVolume,PhysicsVolume,VolumeAngularVelocity_Orig)
VERIFY_CLASS_OFFSET_NODIE(APhysicsVolume,PhysicsVolume,VolumeAngularVelocityDirection)
VERIFY_CLASS_OFFSET_NODIE(APhysicsVolume,PhysicsVolume,VolumeAngularVelocityMagnitude)
VERIFY_CLASS_SIZE_NODIE(APhysicsVolume)
VERIFY_CLASS_OFFSET_NODIE(AParticleEffector,ParticleEffector,m_eEffectorType)
VERIFY_CLASS_OFFSET_NODIE(AParticleEffector,ParticleEffector,m_fRadius)
VERIFY_CLASS_OFFSET_NODIE(AParticleEffector,ParticleEffector,m_fAge)
VERIFY_CLASS_OFFSET_NODIE(AParticleEffector,ParticleEffector,m_fAccelSpeed)
VERIFY_CLASS_OFFSET_NODIE(AParticleEffector,ParticleEffector,m_vAccelDir)
VERIFY_CLASS_OFFSET_NODIE(AParticleEffector,ParticleEffector,m_vPlaneDir)
VERIFY_CLASS_OFFSET_NODIE(AParticleEffector,ParticleEffector,m_fElasticity)
VERIFY_CLASS_OFFSET_NODIE(AParticleEffector,ParticleEffector,m_fLifeTime)
VERIFY_CLASS_OFFSET_NODIE(AParticleEffector,ParticleEffector,m_pEffector)
VERIFY_CLASS_SIZE_NODIE(AParticleEffector)
VERIFY_CLASS_SIZE_NODIE(AAIFaction)
VERIFY_CLASS_SIZE_NODIE(AHUDEffects)
VERIFY_CLASS_OFFSET_NODIE(UHUDIconTable,HUDIconTable,PickupEventIcons)
VERIFY_CLASS_OFFSET_NODIE(UHUDIconTable,HUDIconTable,AmmoClipIcons)
VERIFY_CLASS_OFFSET_NODIE(UHUDIconTable,HUDIconTable,AmmoClipSpentIcons)
VERIFY_CLASS_SIZE_NODIE(UHUDIconTable)
VERIFY_CLASS_SIZE_NODIE(AHUDItem)
VERIFY_CLASS_OFFSET_NODIE(AHUD,HUD,DefaultResX)
VERIFY_CLASS_OFFSET_NODIE(AHUD,HUD,DefaultResY)
VERIFY_CLASS_OFFSET_NODIE(AHUD,HUD,HUDConfigWindowType)
VERIFY_CLASS_OFFSET_NODIE(AHUD,HUD,PlayerOwner)
VERIFY_CLASS_OFFSET_NODIE(AHUD,HUD,HUDScaleX)
VERIFY_CLASS_OFFSET_NODIE(AHUD,HUD,HUDScaleY)
VERIFY_CLASS_OFFSET_NODIE(AHUD,HUD,CenterXL)
VERIFY_CLASS_OFFSET_NODIE(AHUD,HUD,CenterYL)
VERIFY_CLASS_OFFSET_NODIE(AHUD,HUD,CenterScale)
VERIFY_CLASS_OFFSET_NODIE(AHUD,HUD,TTFontScale)
VERIFY_CLASS_OFFSET_NODIE(AHUD,HUD,DefaultDirectionalCircleRadius)
VERIFY_CLASS_OFFSET_NODIE(AHUD,HUD,IconTable)
VERIFY_CLASS_OFFSET_NODIE(AHUD,HUD,currentInventoryCategory)
VERIFY_CLASS_OFFSET_NODIE(AHUD,HUD,currentInventoryItem)
VERIFY_CLASS_OFFSET_NODIE(AHUD,HUD,InventoryGoAwayDelay)
VERIFY_CLASS_OFFSET_NODIE(AHUD,HUD,InventoryFadeOutTime)
VERIFY_CLASS_OFFSET_NODIE(AHUD,HUD,WhiteColor)
VERIFY_CLASS_OFFSET_NODIE(AHUD,HUD,RedColor)
VERIFY_CLASS_OFFSET_NODIE(AHUD,HUD,LightGreenColor)
VERIFY_CLASS_OFFSET_NODIE(AHUD,HUD,DarkGreenColor)
VERIFY_CLASS_OFFSET_NODIE(AHUD,HUD,GreenColor)
VERIFY_CLASS_OFFSET_NODIE(AHUD,HUD,CyanColor)
VERIFY_CLASS_OFFSET_NODIE(AHUD,HUD,UnitColor)
VERIFY_CLASS_OFFSET_NODIE(AHUD,HUD,BlueColor)
VERIFY_CLASS_OFFSET_NODIE(AHUD,HUD,GoldColor)
VERIFY_CLASS_OFFSET_NODIE(AHUD,HUD,PurpleColor)
VERIFY_CLASS_OFFSET_NODIE(AHUD,HUD,TurqColor)
VERIFY_CLASS_OFFSET_NODIE(AHUD,HUD,GrayColor)
VERIFY_CLASS_OFFSET_NODIE(AHUD,HUD,FaceColor)
VERIFY_CLASS_OFFSET_NODIE(AHUD,HUD,LightBlueColor)
VERIFY_CLASS_OFFSET_NODIE(AHUD,HUD,DarkBlueColor)
VERIFY_CLASS_OFFSET_NODIE(AHUD,HUD,BlackColor)
VERIFY_CLASS_OFFSET_NODIE(AHUD,HUD,OrangeColor)
VERIFY_CLASS_OFFSET_NODIE(AHUD,HUD,MainHUDColor)
VERIFY_CLASS_OFFSET_NODIE(AHUD,HUD,DisabledInventoryIconColor)
VERIFY_CLASS_OFFSET_NODIE(AHUD,HUD,ActiveInventoryTextColor)
VERIFY_CLASS_OFFSET_NODIE(AHUD,HUD,BroadcastLogLineMax)
VERIFY_CLASS_OFFSET_NODIE(AHUD,HUD,ShortKeyName)
VERIFY_CLASS_OFFSET_NODIE(AHUD,HUD,LongKeyname)
VERIFY_CLASS_OFFSET_NODIE(AHUD,HUD,DisplayMessagePreButtonPadding)
VERIFY_CLASS_OFFSET_NODIE(AHUD,HUD,DisplayMessagePostButtonPadding)
VERIFY_CLASS_OFFSET_NODIE(AHUD,HUD,DisplayMessageGamepadPreButtonPadding)
VERIFY_CLASS_OFFSET_NODIE(AHUD,HUD,DisplayMessageGamepadPostButtonPadding)
VERIFY_CLASS_OFFSET_NODIE(AHUD,HUD,DisplayMessageButtonYAdjust)
VERIFY_CLASS_OFFSET_NODIE(AHUD,HUD,DisplayMessageGamepadButtonYAdjust)
VERIFY_CLASS_OFFSET_NODIE(AHUD,HUD,DisplayMessageButtonXL)
VERIFY_CLASS_OFFSET_NODIE(AHUD,HUD,DisplayMessageButtonYL)
VERIFY_CLASS_OFFSET_NODIE(AHUD,HUD,DisplayMessageGamepadButtonSize)
VERIFY_CLASS_OFFSET_NODIE(AHUD,HUD,HUDMessages)
VERIFY_CLASS_OFFSET_NODIE(AHUD,HUD,TouchingWeaponMessage)
VERIFY_CLASS_OFFSET_NODIE(AHUD,HUD,TouchingWeaponMessage_MP)
VERIFY_CLASS_OFFSET_NODIE(AHUD,HUD,DebugTreeItems)
VERIFY_CLASS_OFFSET_NODIE(AHUD,HUD,DebugTreeIndex)
VERIFY_CLASS_OFFSET_NODIE(AHUD,HUD,DebugTreeUseIndex)
VERIFY_CLASS_OFFSET_NODIE(AHUD,HUD,DebugTreeBGSizeX)
VERIFY_CLASS_OFFSET_NODIE(AHUD,HUD,DebugTreeBGSizeY)
VERIFY_CLASS_OFFSET_NODIE(AHUD,HUD,ScreenFlashes)
VERIFY_CLASS_OFFSET_NODIE(AHUD,HUD,ScrollingMessages)
VERIFY_CLASS_OFFSET_NODIE(AHUD,HUD,DirectionalIndicators)
VERIFY_CLASS_OFFSET_NODIE(AHUD,HUD,HintButtonMaterial)
VERIFY_CLASS_OFFSET_NODIE(AHUD,HUD,ActiveHint)
VERIFY_CLASS_OFFSET_NODIE(AHUD,HUD,XboxButtonIcons)
VERIFY_CLASS_OFFSET_NODIE(AHUD,HUD,PS3ButtonIcons)
VERIFY_CLASS_SIZE_NODIE(AHUD)
VERIFY_CLASS_SIZE_NODIE(UWaterPrimitive)
VERIFY_CLASS_OFFSET_NODIE(AGeoWaterOscillatorRing,GeoWaterOscillatorRing,RadiusInner)
VERIFY_CLASS_OFFSET_NODIE(AGeoWaterOscillatorRing,GeoWaterOscillatorRing,RadiusOuter)
VERIFY_CLASS_OFFSET_NODIE(AGeoWaterOscillatorRing,GeoWaterOscillatorRing,RadiusPeak)
VERIFY_CLASS_OFFSET_NODIE(AGeoWaterOscillatorRing,GeoWaterOscillatorRing,RadiusPeakOuter)
VERIFY_CLASS_OFFSET_NODIE(AGeoWaterOscillatorRing,GeoWaterOscillatorRing,HeightPeak)
VERIFY_CLASS_OFFSET_NODIE(AGeoWaterOscillatorRing,GeoWaterOscillatorRing,HeightInternal)
VERIFY_CLASS_SIZE_NODIE(AGeoWaterOscillatorRing)
VERIFY_CLASS_OFFSET_NODIE(AGeoWaterOscillator,GeoWaterOscillator,Frequency)
VERIFY_CLASS_OFFSET_NODIE(AGeoWaterOscillator,GeoWaterOscillator,Phase)
VERIFY_CLASS_OFFSET_NODIE(AGeoWaterOscillator,GeoWaterOscillator,Strength)
VERIFY_CLASS_OFFSET_NODIE(AGeoWaterOscillator,GeoWaterOscillator,RandomStrength)
VERIFY_CLASS_OFFSET_NODIE(AGeoWaterOscillator,GeoWaterOscillator,Radius)
VERIFY_CLASS_OFFSET_NODIE(AGeoWaterOscillator,GeoWaterOscillator,Water)
VERIFY_CLASS_OFFSET_NODIE(AGeoWaterOscillator,GeoWaterOscillator,OscTime)
VERIFY_CLASS_OFFSET_NODIE(AGeoWaterOscillator,GeoWaterOscillator,SineSide)
VERIFY_CLASS_OFFSET_NODIE(AGeoWaterOscillator,GeoWaterOscillator,StrengthToUse)
VERIFY_CLASS_SIZE_NODIE(AGeoWaterOscillator)
VERIFY_CLASS_OFFSET_NODIE(AGeoWater,GeoWater,GridSizeX)
VERIFY_CLASS_OFFSET_NODIE(AGeoWater,GeoWater,GridSizeY)
VERIFY_CLASS_OFFSET_NODIE(AGeoWater,GeoWater,TextureScaleU)
VERIFY_CLASS_OFFSET_NODIE(AGeoWater,GeoWater,TextureScaleV)
VERIFY_CLASS_OFFSET_NODIE(AGeoWater,GeoWater,WaterDepth)
VERIFY_CLASS_OFFSET_NODIE(AGeoWater,GeoWater,DisturbWaterStrengthScale)
VERIFY_CLASS_OFFSET_NODIE(AGeoWater,GeoWater,WaterDamping)
VERIFY_CLASS_OFFSET_NODIE(AGeoWater,GeoWater,WaterSpeed)
VERIFY_CLASS_OFFSET_NODIE(AGeoWater,GeoWater,WaterScrollYSpeed)
VERIFY_CLASS_OFFSET_NODIE(AGeoWater,GeoWater,UpdateRate)
VERIFY_CLASS_OFFSET_NODIE(AGeoWater,GeoWater,EdgeDeltaMin)
VERIFY_CLASS_OFFSET_NODIE(AGeoWater,GeoWater,EdgeDeltaMax)
VERIFY_CLASS_OFFSET_NODIE(AGeoWater,GeoWater,VertexDeltaMin)
VERIFY_CLASS_OFFSET_NODIE(AGeoWater,GeoWater,VertexDeltaMax)
VERIFY_CLASS_OFFSET_NODIE(AGeoWater,GeoWater,MinTreeDepth)
VERIFY_CLASS_OFFSET_NODIE(AGeoWater,GeoWater,MaxTreeDepth)
VERIFY_CLASS_OFFSET_NODIE(AGeoWater,GeoWater,TessellationSensitivity)
VERIFY_CLASS_OFFSET_NODIE(AGeoWater,GeoWater,WaterAmbientLight)
VERIFY_CLASS_OFFSET_NODIE(AGeoWater,GeoWater,RandomNoiseTime)
VERIFY_CLASS_OFFSET_NODIE(AGeoWater,GeoWater,RandomNoiseStrength)
VERIFY_CLASS_OFFSET_NODIE(AGeoWater,GeoWater,RandomNoiseRadius)
VERIFY_CLASS_OFFSET_NODIE(AGeoWater,GeoWater,PhysicsCollisionType)
VERIFY_CLASS_OFFSET_NODIE(AGeoWater,GeoWater,PhysicsDepth)
VERIFY_CLASS_OFFSET_NODIE(AGeoWater,GeoWater,PhysicsHeight)
VERIFY_CLASS_OFFSET_NODIE(AGeoWater,GeoWater,PhysicsDensity)
VERIFY_CLASS_OFFSET_NODIE(AGeoWater,GeoWater,PhysicsDrag)
VERIFY_CLASS_OFFSET_NODIE(AGeoWater,GeoWater,OnlyAffectTagged)
VERIFY_CLASS_OFFSET_NODIE(AGeoWater,GeoWater,WaterVersion)
VERIFY_CLASS_OFFSET_NODIE(AGeoWater,GeoWater,InternalData)
VERIFY_CLASS_SIZE_NODIE(AGeoWater)
VERIFY_CLASS_OFFSET_NODIE(UChallengeObject,ChallengeObject,ChallDependencies)
VERIFY_CLASS_OFFSET_NODIE(UChallengeObject,ChallengeObject,ChallIdx)
VERIFY_CLASS_OFFSET_NODIE(UChallengeObject,ChallengeObject,ExtraOptions)
VERIFY_CLASS_OFFSET_NODIE(UChallengeObject,ChallengeObject,DefaultState)
VERIFY_CLASS_OFFSET_NODIE(UChallengeObject,ChallengeObject,ChallName)
VERIFY_CLASS_OFFSET_NODIE(UChallengeObject,ChallengeObject,Description)
VERIFY_CLASS_OFFSET_NODIE(UChallengeObject,ChallengeObject,HelpText)
VERIFY_CLASS_OFFSET_NODIE(UChallengeObject,ChallengeObject,CheckU)
VERIFY_CLASS_OFFSET_NODIE(UChallengeObject,ChallengeObject,CheckV)
VERIFY_CLASS_OFFSET_NODIE(UChallengeObject,ChallengeObject,CheckW)
VERIFY_CLASS_OFFSET_NODIE(UChallengeObject,ChallengeObject,CheckH)
VERIFY_CLASS_OFFSET_NODIE(UChallengeObject,ChallengeObject,OpenCheckU)
VERIFY_CLASS_OFFSET_NODIE(UChallengeObject,ChallengeObject,OpenCheckV)
VERIFY_CLASS_OFFSET_NODIE(UChallengeObject,ChallengeObject,CheckX)
VERIFY_CLASS_OFFSET_NODIE(UChallengeObject,ChallengeObject,CheckY)
VERIFY_CLASS_OFFSET_NODIE(UChallengeObject,ChallengeObject,CheckWidth)
VERIFY_CLASS_OFFSET_NODIE(UChallengeObject,ChallengeObject,YOffset)
VERIFY_CLASS_SIZE_NODIE(UChallengeObject)
VERIFY_CLASS_OFFSET_NODIE(AChallengeInfo,ChallengeInfo,ChallengesArray)
VERIFY_CLASS_OFFSET_NODIE(AChallengeInfo,ChallengeInfo,NoDLCChallengeArraySize)
VERIFY_CLASS_OFFSET_NODIE(AChallengeInfo,ChallengeInfo,PlainShirtId)
VERIFY_CLASS_OFFSET_NODIE(AChallengeInfo,ChallengeInfo,NoHadId)
VERIFY_CLASS_OFFSET_NODIE(AChallengeInfo,ChallengeInfo,DefaultGlassesId)
VERIFY_CLASS_OFFSET_NODIE(AChallengeInfo,ChallengeInfo,WhiteColourId)
VERIFY_CLASS_OFFSET_NODIE(AChallengeInfo,ChallengeInfo,NoTitleID)
VERIFY_CLASS_OFFSET_NODIE(AChallengeInfo,ChallengeInfo,EndofDefaultUnlocks)
VERIFY_CLASS_OFFSET_NODIE(AChallengeInfo,ChallengeInfo,PreorderGroups)
VERIFY_CLASS_OFFSET_NODIE(AChallengeInfo,ChallengeInfo,DeveloperGroupIdx)
VERIFY_CLASS_OFFSET_NODIE(AChallengeInfo,ChallengeInfo,PlayerTitles)
VERIFY_CLASS_OFFSET_NODIE(AChallengeInfo,ChallengeInfo,LevelingInfo)
VERIFY_CLASS_OFFSET_NODIE(AChallengeInfo,ChallengeInfo,XPToLevel)
VERIFY_CLASS_SIZE_NODIE(AChallengeInfo)
VERIFY_CLASS_SIZE_NODIE(UGlassPrimitive)
VERIFY_CLASS_OFFSET_NODIE(ABreakableGlass,BreakableGlass,GlassBreakSound)
VERIFY_CLASS_OFFSET_NODIE(ABreakableGlass,BreakableGlass,GlassShatterSound)
VERIFY_CLASS_OFFSET_NODIE(ABreakableGlass,BreakableGlass,GlassBreakSoundName)
VERIFY_CLASS_OFFSET_NODIE(ABreakableGlass,BreakableGlass,GlassShatterSoundName)
VERIFY_CLASS_OFFSET_NODIE(ABreakableGlass,BreakableGlass,ParticleSize)
VERIFY_CLASS_OFFSET_NODIE(ABreakableGlass,BreakableGlass,InitialBreakCount)
VERIFY_CLASS_OFFSET_NODIE(ABreakableGlass,BreakableGlass,FallPerSecond1)
VERIFY_CLASS_OFFSET_NODIE(ABreakableGlass,BreakableGlass,FallPerSecond2)
VERIFY_CLASS_OFFSET_NODIE(ABreakableGlass,BreakableGlass,TotalBreakPercent1)
VERIFY_CLASS_OFFSET_NODIE(ABreakableGlass,BreakableGlass,TotalBreakPercent2)
VERIFY_CLASS_OFFSET_NODIE(ABreakableGlass,BreakableGlass,BounceScale)
VERIFY_CLASS_OFFSET_NODIE(ABreakableGlass,BreakableGlass,RotateScale)
VERIFY_CLASS_OFFSET_NODIE(ABreakableGlass,BreakableGlass,ParticleLife)
VERIFY_CLASS_OFFSET_NODIE(ABreakableGlass,BreakableGlass,UShift)
VERIFY_CLASS_OFFSET_NODIE(ABreakableGlass,BreakableGlass,VShift)
VERIFY_CLASS_OFFSET_NODIE(ABreakableGlass,BreakableGlass,UScale)
VERIFY_CLASS_OFFSET_NODIE(ABreakableGlass,BreakableGlass,VScale)
VERIFY_CLASS_OFFSET_NODIE(ABreakableGlass,BreakableGlass,GlassRespawnTime)
VERIFY_CLASS_OFFSET_NODIE(ABreakableGlass,BreakableGlass,UnBrokenGridSizeW)
VERIFY_CLASS_OFFSET_NODIE(ABreakableGlass,BreakableGlass,UnBrokenGridSizeH)
VERIFY_CLASS_OFFSET_NODIE(ABreakableGlass,BreakableGlass,ParticlesToStayPercent)
VERIFY_CLASS_OFFSET_NODIE(ABreakableGlass,BreakableGlass,GlassAmbientColor)
VERIFY_CLASS_OFFSET_NODIE(ABreakableGlass,BreakableGlass,GlassAmbientCrackedColor)
VERIFY_CLASS_OFFSET_NODIE(ABreakableGlass,BreakableGlass,GlassAmbientShatteredColor)
VERIFY_CLASS_OFFSET_NODIE(ABreakableGlass,BreakableGlass,GlassMaxLights)
VERIFY_CLASS_OFFSET_NODIE(ABreakableGlass,BreakableGlass,MinimumPhysicsBreakEnergy)
VERIFY_CLASS_OFFSET_NODIE(ABreakableGlass,BreakableGlass,BrokenConstraintStrength)
VERIFY_CLASS_OFFSET_NODIE(ABreakableGlass,BreakableGlass,BulgeOnBreakAmount)
VERIFY_CLASS_OFFSET_NODIE(ABreakableGlass,BreakableGlass,MaxBrokenGridDistortion)
VERIFY_CLASS_OFFSET_NODIE(ABreakableGlass,BreakableGlass,GlassVersion)
VERIFY_CLASS_OFFSET_NODIE(ABreakableGlass,BreakableGlass,GlassParticles)
VERIFY_CLASS_OFFSET_NODIE(ABreakableGlass,BreakableGlass,NumGlassParticles)
VERIFY_CLASS_OFFSET_NODIE(ABreakableGlass,BreakableGlass,CurGlassParticle)
VERIFY_CLASS_OFFSET_NODIE(ABreakableGlass,BreakableGlass,NumUpdatedParticles)
VERIFY_CLASS_OFFSET_NODIE(ABreakableGlass,BreakableGlass,GlassBreakCount)
VERIFY_CLASS_OFFSET_NODIE(ABreakableGlass,BreakableGlass,GlassTime)
VERIFY_CLASS_OFFSET_NODIE(ABreakableGlass,BreakableGlass,GlassPrimitive)
VERIFY_CLASS_OFFSET_NODIE(ABreakableGlass,BreakableGlass,UserData)
VERIFY_CLASS_OFFSET_NODIE(ABreakableGlass,BreakableGlass,ParticleDimensionX)
VERIFY_CLASS_OFFSET_NODIE(ABreakableGlass,BreakableGlass,ParticleDimensionY)
VERIFY_CLASS_SIZE_NODIE(ABreakableGlass)
VERIFY_CLASS_OFFSET_NODIE(ABeamSystem,BeamSystem,TesselationLevel)
VERIFY_CLASS_OFFSET_NODIE(ABeamSystem,BeamSystem,BeamStartWidth)
VERIFY_CLASS_OFFSET_NODIE(ABeamSystem,BeamSystem,BeamEndWidth)
VERIFY_CLASS_OFFSET_NODIE(ABeamSystem,BeamSystem,TimeScale)
VERIFY_CLASS_OFFSET_NODIE(ABeamSystem,BeamSystem,DefaultLifetime)
VERIFY_CLASS_OFFSET_NODIE(ABeamSystem,BeamSystem,AlphaAnimStart)
VERIFY_CLASS_OFFSET_NODIE(ABeamSystem,BeamSystem,AlphaAnimMid)
VERIFY_CLASS_OFFSET_NODIE(ABeamSystem,BeamSystem,AlphaAnimEnd)
VERIFY_CLASS_OFFSET_NODIE(ABeamSystem,BeamSystem,ColorAnimStart)
VERIFY_CLASS_OFFSET_NODIE(ABeamSystem,BeamSystem,ColorAnimMid)
VERIFY_CLASS_OFFSET_NODIE(ABeamSystem,BeamSystem,ColorAnimEnd)
VERIFY_CLASS_OFFSET_NODIE(ABeamSystem,BeamSystem,AlphaMidPercent)
VERIFY_CLASS_OFFSET_NODIE(ABeamSystem,BeamSystem,ColorMidPercent)
VERIFY_CLASS_OFFSET_NODIE(ABeamSystem,BeamSystem,SE_ResetEventSegments)
VERIFY_CLASS_OFFSET_NODIE(ABeamSystem,BeamSystem,SE_ToggleTraceStatus)
VERIFY_CLASS_OFFSET_NODIE(ABeamSystem,BeamSystem,DynamicBeamPoints)
VERIFY_CLASS_OFFSET_NODIE(ABeamSystem,BeamSystem,PreviewColor)
VERIFY_CLASS_OFFSET_NODIE(ABeamSystem,BeamSystem,SE_ToggleEnable)
VERIFY_CLASS_OFFSET_NODIE(ABeamSystem,BeamSystem,SE_ForceEnable)
VERIFY_CLASS_OFFSET_NODIE(ABeamSystem,BeamSystem,SE_ForceDisable)
VERIFY_CLASS_OFFSET_NODIE(ABeamSystem,BeamSystem,LimboZOffset)
VERIFY_CLASS_OFFSET_NODIE(ABeamSystem,BeamSystem,MaxAmplitude)
VERIFY_CLASS_OFFSET_NODIE(ABeamSystem,BeamSystem,AmplitudeLimit)
VERIFY_CLASS_OFFSET_NODIE(ABeamSystem,BeamSystem,AmplitudeVelocity)
VERIFY_CLASS_OFFSET_NODIE(ABeamSystem,BeamSystem,MaxFrequency)
VERIFY_CLASS_OFFSET_NODIE(ABeamSystem,BeamSystem,FrequencyLimit)
VERIFY_CLASS_OFFSET_NODIE(ABeamSystem,BeamSystem,FrequencyVelocity)
VERIFY_CLASS_OFFSET_NODIE(ABeamSystem,BeamSystem,TracerSpeed)
VERIFY_CLASS_OFFSET_NODIE(ABeamSystem,BeamSystem,TracerLength)
VERIFY_CLASS_OFFSET_NODIE(ABeamSystem,BeamSystem,TracerRejectScale)
VERIFY_CLASS_OFFSET_NODIE(ABeamSystem,BeamSystem,Noise)
VERIFY_CLASS_OFFSET_NODIE(ABeamSystem,BeamSystem,NoiseLimit)
VERIFY_CLASS_OFFSET_NODIE(ABeamSystem,BeamSystem,NoiseVelocity)
VERIFY_CLASS_OFFSET_NODIE(ABeamSystem,BeamSystem,BeamTexture)
VERIFY_CLASS_OFFSET_NODIE(ABeamSystem,BeamSystem,BeamTextureScaleX)
VERIFY_CLASS_OFFSET_NODIE(ABeamSystem,BeamSystem,BeamTextureScaleY)
VERIFY_CLASS_OFFSET_NODIE(ABeamSystem,BeamSystem,BeamTexturePanX)
VERIFY_CLASS_OFFSET_NODIE(ABeamSystem,BeamSystem,BeamTexturePanY)
VERIFY_CLASS_OFFSET_NODIE(ABeamSystem,BeamSystem,BeamTextureXVelocity)
VERIFY_CLASS_OFFSET_NODIE(ABeamSystem,BeamSystem,BeamTextureYVelocity)
VERIFY_CLASS_OFFSET_NODIE(ABeamSystem,BeamSystem,BeamTextureRotate)
VERIFY_CLASS_OFFSET_NODIE(ABeamSystem,BeamSystem,BeamTextureXSize)
VERIFY_CLASS_OFFSET_NODIE(ABeamSystem,BeamSystem,FakeLightColor)
VERIFY_CLASS_OFFSET_NODIE(ABeamSystem,BeamSystem,FakeLightIntensity)
VERIFY_CLASS_OFFSET_NODIE(ABeamSystem,BeamSystem,BeamSegments)
VERIFY_CLASS_OFFSET_NODIE(ABeamSystem,BeamSystem,Segments)
VERIFY_CLASS_OFFSET_NODIE(ABeamSystem,BeamSystem,FirstSegment)
VERIFY_CLASS_OFFSET_NODIE(ABeamSystem,BeamSystem,LastSegment)
VERIFY_CLASS_OFFSET_NODIE(ABeamSystem,BeamSystem,FirstFreeSegment)
VERIFY_CLASS_OFFSET_NODIE(ABeamSystem,BeamSystem,ActiveSegmentCount)
VERIFY_CLASS_OFFSET_NODIE(ABeamSystem,BeamSystem,RenderSegments)
VERIFY_CLASS_OFFSET_NODIE(ABeamSystem,BeamSystem,FirstRenderSegment)
VERIFY_CLASS_OFFSET_NODIE(ABeamSystem,BeamSystem,ActiveRenderSegmentCount)
VERIFY_CLASS_OFFSET_NODIE(ABeamSystem,BeamSystem,BeamType)
VERIFY_CLASS_OFFSET_NODIE(ABeamSystem,BeamSystem,TriggerType)
VERIFY_CLASS_OFFSET_NODIE(ABeamSystem,BeamSystem,SpawnClassOnBeamCollision)
VERIFY_CLASS_OFFSET_NODIE(ABeamSystem,BeamSystem,SpawnClassMinInterval)
VERIFY_CLASS_OFFSET_NODIE(ABeamSystem,BeamSystem,SpawnClassGate)
VERIFY_CLASS_OFFSET_NODIE(ABeamSystem,BeamSystem,BeamBrokenWhen)
VERIFY_CLASS_OFFSET_NODIE(ABeamSystem,BeamSystem,BeamBrokenWhenClass)
VERIFY_CLASS_OFFSET_NODIE(ABeamSystem,BeamSystem,BeamBrokenAction)
VERIFY_CLASS_OFFSET_NODIE(ABeamSystem,BeamSystem,BeamTriggerActor)
VERIFY_CLASS_OFFSET_NODIE(ABeamSystem,BeamSystem,BeamBrokenEvent)
VERIFY_CLASS_OFFSET_NODIE(ABeamSystem,BeamSystem,BeamBrokenOtherDamage)
VERIFY_CLASS_OFFSET_NODIE(ABeamSystem,BeamSystem,BeamBrokenOtherDamageType)
VERIFY_CLASS_OFFSET_NODIE(ABeamSystem,BeamSystem,BeamBrokenOtherDamageDelay)
VERIFY_CLASS_OFFSET_NODIE(ABeamSystem,BeamSystem,BeamBrokenOtherDamageTime)
VERIFY_CLASS_OFFSET_NODIE(ABeamSystem,BeamSystem,BeamPlayerCameraStyleMode)
VERIFY_CLASS_OFFSET_NODIE(ABeamSystem,BeamSystem,BeamPlayerCameraStyle)
VERIFY_CLASS_OFFSET_NODIE(ABeamSystem,BeamSystem,WorldBox)
VERIFY_CLASS_OFFSET_NODIE(ABeamSystem,BeamSystem,OrientationType)
VERIFY_CLASS_SIZE_NODIE(ABeamSystem)
VERIFY_CLASS_OFFSET_NODIE(ABaseAI,BaseAI,ChanceFly)
VERIFY_CLASS_OFFSET_NODIE(ABaseAI,BaseAI,PathingHistoryMaxSize)
VERIFY_CLASS_OFFSET_NODIE(ABaseAI,BaseAI,DrawDebugBones)
VERIFY_CLASS_OFFSET_NODIE(ABaseAI,BaseAI,CurrentMoveDelta)
VERIFY_CLASS_SIZE_NODIE(ABaseAI)
VERIFY_CLASS_SIZE_NODIE(AAntiPortalActor)
VERIFY_CLASS_OFFSET_NODIE(AAIInfo,AIInfo,ActionList)
VERIFY_CLASS_SIZE_NODIE(AAIInfo)
VERIFY_CLASS_OFFSET_NODIE(AActionPoint,ActionPoint,Actions)
VERIFY_CLASS_OFFSET_NODIE(AActionPoint,ActionPoint,SecondaryActions)
VERIFY_CLASS_OFFSET_NODIE(AActionPoint,ActionPoint,RestrictedClasses)
VERIFY_CLASS_OFFSET_NODIE(AActionPoint,ActionPoint,RestrictedTags)
VERIFY_CLASS_OFFSET_NODIE(AActionPoint,ActionPoint,MinUses)
VERIFY_CLASS_OFFSET_NODIE(AActionPoint,ActionPoint,MaxUses)
VERIFY_CLASS_OFFSET_NODIE(AActionPoint,ActionPoint,LockOutPeriod)
VERIFY_CLASS_OFFSET_NODIE(AActionPoint,ActionPoint,DestroyTag)
VERIFY_CLASS_OFFSET_NODIE(AActionPoint,ActionPoint,ClearRadius)
VERIFY_CLASS_OFFSET_NODIE(AActionPoint,ActionPoint,ActionPointGroup)
VERIFY_CLASS_OFFSET_NODIE(AActionPoint,ActionPoint,CoverType)
VERIFY_CLASS_OFFSET_NODIE(AActionPoint,ActionPoint,User)
VERIFY_CLASS_OFFSET_NODIE(AActionPoint,ActionPoint,NeighborUser)
VERIFY_CLASS_OFFSET_NODIE(AActionPoint,ActionPoint,NumUses)
VERIFY_CLASS_OFFSET_NODIE(AActionPoint,ActionPoint,LockOutGate)
VERIFY_CLASS_OFFSET_NODIE(AActionPoint,ActionPoint,CurAction)
VERIFY_CLASS_OFFSET_NODIE(AActionPoint,ActionPoint,DeathCount)
VERIFY_CLASS_OFFSET_NODIE(AActionPoint,ActionPoint,DeathTime)
VERIFY_CLASS_OFFSET_NODIE(AActionPoint,ActionPoint,StartingRotation)
VERIFY_CLASS_OFFSET_NODIE(AActionPoint,ActionPoint,ActionGate)
VERIFY_CLASS_OFFSET_NODIE(AActionPoint,ActionPoint,dnNavAreas)
VERIFY_CLASS_OFFSET_NODIE(AActionPoint,ActionPoint,dnNavIndex)
VERIFY_CLASS_OFFSET_NODIE(AActionPoint,ActionPoint,MinAngleToTarget)
VERIFY_CLASS_OFFSET_NODIE(AActionPoint,ActionPoint,MaxAngleToTarget)
VERIFY_CLASS_OFFSET_NODIE(AActionPoint,ActionPoint,MaxJumpDistance)
VERIFY_CLASS_OFFSET_NODIE(AActionPoint,ActionPoint,CloseActionPoints)
VERIFY_CLASS_OFFSET_NODIE(AActionPoint,ActionPoint,FlankActionPoints)
VERIFY_CLASS_OFFSET_NODIE(AActionPoint,ActionPoint,RetreatActionPoints)
VERIFY_CLASS_OFFSET_NODIE(AActionPoint,ActionPoint,AdvanceActionPoints)
VERIFY_CLASS_OFFSET_NODIE(AActionPoint,ActionPoint,LateralActionPoints)
VERIFY_CLASS_OFFSET_NODIE(AActionPoint,ActionPoint,UnknownActionPoints)
VERIFY_CLASS_OFFSET_NODIE(AActionPoint,ActionPoint,WalkToActionPoints)
VERIFY_CLASS_OFFSET_NODIE(AActionPoint,ActionPoint,FlyToActionPoints)
VERIFY_CLASS_OFFSET_NODIE(AActionPoint,ActionPoint,VaultToActionPoints)
VERIFY_CLASS_OFFSET_NODIE(AActionPoint,ActionPoint,TeleportActionPoints)
VERIFY_CLASS_OFFSET_NODIE(AActionPoint,ActionPoint,DefaultJumpToInfo)
VERIFY_CLASS_SIZE_NODIE(AActionPoint)
VERIFY_CLASS_OFFSET_NODIE(USystem,System,Suppress)
VERIFY_CLASS_OFFSET_NODIE(USystem,System,Paths)
VERIFY_CLASS_OFFSET_NODIE(USystem,System,CacheExt)
VERIFY_CLASS_OFFSET_NODIE(USystem,System,CachePath)
VERIFY_CLASS_OFFSET_NODIE(USystem,System,SavePath)
VERIFY_CLASS_OFFSET_NODIE(USystem,System,PurgeCacheDays)
VERIFY_CLASS_SIZE_NODIE(USystem)
VERIFY_CLASS_SIZE_NODIE(UStructProperty)
VERIFY_CLASS_SIZE_NODIE(UProperty)
VERIFY_CLASS_SIZE_NODIE(UField)
VERIFY_CLASS_SIZE_NODIE(UArrayProperty)
VERIFY_CLASS_SIZE_NODIE(UStrProperty)
VERIFY_CLASS_SIZE_NODIE(UNameProperty)
VERIFY_CLASS_SIZE_NODIE(UClassProperty)
VERIFY_CLASS_SIZE_NODIE(UObjectProperty)
VERIFY_CLASS_SIZE_NODIE(UFloatProperty)
VERIFY_CLASS_SIZE_NODIE(UBoolProperty)
VERIFY_CLASS_SIZE_NODIE(UDelegateProperty)
VERIFY_CLASS_SIZE_NODIE(UPointerProperty)
VERIFY_CLASS_SIZE_NODIE(UIntProperty)
VERIFY_CLASS_SIZE_NODIE(UByteProperty)
VERIFY_CLASS_SIZE_NODIE(ULanguage)
VERIFY_CLASS_SIZE_NODIE(UTextBufferFactory)
VERIFY_CLASS_SIZE_NODIE(UPackage)
VERIFY_CLASS_SIZE_NODIE(ULinkerSave)
VERIFY_CLASS_SIZE_NODIE(ULinker)
VERIFY_CLASS_SIZE_NODIE(ULinkerLoad)
VERIFY_CLASS_SIZE_NODIE(UEnum)
VERIFY_CLASS_SIZE_NODIE(UTextBuffer)
VERIFY_CLASS_SIZE_NODIE(UConst)
VERIFY_CLASS_SIZE_NODIE(UFunction)
VERIFY_CLASS_SIZE_NODIE(UStruct)
VERIFY_CLASS_SIZE_NODIE(UClass)
VERIFY_CLASS_SIZE_NODIE(UState)
VERIFY_CLASS_SIZE_NODIE(UObjectExporterT3D)
#endif // VERIFY_CLASS_SIZES
